@node Top
@top CLHS: Appendix

@menu
* CLHS Chapter Index::
@end menu

@node CLHS Chapter Index
@chapter CLHS: Chapter Index
@anchor{#clhs-chapter-index}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
Chapter Index

@enumerate 
@item
@uref{../Body/chap-1.html,@strong{Introduction}}@*
@item
@uref{../Body/chap-2.html,@strong{Syntax}}@*
@item
@uref{../Body/chap-3.html,@strong{Evaluation and Compilation}}@*
@item
@uref{../Body/chap-4.html,@strong{Types and Classes}}@*
@item
@uref{../Body/chap-5.html,@strong{Data and Control Flow}}@*
@item
@uref{../Body/chap-6.html,@strong{Iteration}}@*
@item
@uref{../Body/chap-7.html,@strong{Objects}}@*
@item
@uref{../Body/chap-8.html,@strong{Structures}}@*
@item
@uref{../Body/chap-9.html,@strong{Conditions}}@*
@item
@uref{../Body/chap-10.html,@strong{Symbols}}@*
@item
@uref{../Body/chap-11.html,@strong{Packages}}@*
@item
@uref{../Body/chap-12.html,@strong{Numbers}}@*
@item
@uref{../Body/chap-13.html,@strong{Characters}}@*
@item
@uref{../Body/chap-14.html,@strong{Conses}}@*
@item
@uref{../Body/chap-15.html,@strong{Arrays}}@*
@item
@uref{../Body/chap-16.html,@strong{Strings}}@*
@item
@uref{../Body/chap-17.html,@strong{Sequences}}@*
@item
@uref{../Body/chap-18.html,@strong{Hash Tables}}@*
@item
@uref{../Body/chap-19.html,@strong{Filenames}}@*
@item
@uref{../Body/chap-20.html,@strong{Files}}@*
@item
@uref{../Body/chap-21.html,@strong{Streams}}@*
@item
@uref{../Body/chap-22.html,@strong{Printer}}@*
@item
@uref{../Body/chap-23.html,@strong{Reader}}@*
@item
@uref{../Body/chap-24.html,@strong{System Construction}}@*
@item
@uref{../Body/chap-25.html,@strong{Environment}}@*
@item
@uref{../Body/chap-26.html,@strong{Glossary}}@*
@end enumerate

@itemize
@item
@uref{../Body/chap-a.html,@strong{Appendix}}
@item
@uref{../FrontMatter/About-HyperSpec.html#Legal,@strong{Copyright and
Legal Notices}}
@item
@uref{../FrontMatter/About-HyperSpec.html,@strong{Credits}} (for
hypertext version)
@item
@uref{../Body/chap-0a.html,@strong{Credits}} (for plaintext version)
@item
@uref{../Issues/Issues-Alphabetical.html,@strong{X3J13 Issue Index}}
(alphabetical)
@item
@uref{../Issues/Issues-Categorized.html,@strong{X3J13 Issue Index}}
(categorized)
@item
@uref{../FrontMatter/Master-Index.html,@strong{Master Index}}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Chapter 1::
* CLHS Chapter 10::
* CLHS Chapter 11::
* CLHS Chapter 12::
* CLHS Chapter 13::
* CLHS Chapter 14::
* CLHS Chapter 15::
* CLHS Chapter 16::
* CLHS Chapter 17::
* CLHS Chapter 18::
* CLHS Chapter 19::
* CLHS Chapter 2::
* CLHS Chapter 20::
* CLHS Chapter 21::
* CLHS Chapter 22::
* CLHS Chapter 23::
* CLHS Chapter 24::
* CLHS Chapter 25::
* CLHS Chapter 26::
* CLHS Chapter 3::
* CLHS Chapter 4::
* CLHS Chapter 5::
* CLHS Chapter 6::
* CLHS Chapter 7::
* CLHS Chapter 8::
* CLHS Chapter 9::
* CLHS Appendix::
@end menu

@node CLHS Chapter 1
@section CLHS: Chapter 1
@anchor{#clhs-chapter-1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{chap-0a.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1. Introduction

@uref{sec_1-1.html,}

1.1 Scope, Purpose, and History

@uref{sec_1-2.html,}

1.2 Organization of the Document

@uref{sec_1-3.html,}

1.3 Referenced Publications

@uref{sec_1-4.html,}

1.4 Definitions

@uref{sec_1-5.html,}

1.5 Conformance

@uref{sec_1-6.html,}

1.6 Language Extensions

@uref{sec_1-7.html,}

1.7 Language Subsets

@uref{sec_1-8.html,}

1.8 Deprecated Language Features

@uref{sec_1-9.html,}

1.9 Symbols in the COMMON-LISP Package

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 12::
* CLHS Section 13::
* CLHS Section 14::
* CLHS Section 15::
* CLHS Section 16::
* CLHS Section 17::
* CLHS Section 18::
* CLHS Section 19::
@end menu

@node CLHS Section 12
@subsection CLHS: Section 1.2
@anchor{#clhs-section-1.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.2 Organization of the Document

This is a reference document, not a tutorial document. Where possible
and convenient, the order of presentation has been chosen so that the
more primitive topics precede those that build upon them; however,
linear readability has not been a priority.

This document is divided into chapters by topic. Any given chapter might
contain conceptual material, dictionary entries, or both.

@uref{glo_d.html#defined_name,@emph{Defined names}} within the
dictionary portion of a chapter are grouped in a way that brings related
topics into physical proximity. Many such groupings were possible, and
no deep significance should be inferred from the particular grouping
that was chosen. To see @uref{glo_d.html#defined_name,@emph{defined
names}} grouped alphabetically, consult the index. For a complete list
of @uref{glo_d.html#defined_name,@emph{defined names}}, see
@uref{sec_1-9.html,Section 1.9 (Symbols in the COMMON-LISP Package)}.

In order to compensate for the sometimes-unordered portions of this
document, a glossary has been provided; see @uref{chap-26.html,Section
26 (Glossary)}. The glossary provides connectivity by providing easy
access to definitions of terms, and in some cases by providing examples
or cross references to additional conceptual material.

For information about notational conventions used in this document, see
@uref{sec_1-4.html,Section 1.4 (Definitions)}.

For information about conformance, see @uref{sec_1-5.html,Section 1.5
(Conformance)}.

For information about extensions and subsets, see
@uref{sec_1-6.html,Section 1.6 (Language Extensions)} nd
@uref{sec_1-7.html,Section 1.7 (Language Subsets)}.

For information about how @uref{glo_p.html#program,@emph{programs}} in
the language are parsed by the @uref{glo_l.html#lisp_reader,@emph{Lisp
reader}}, see @uref{chap-2.html,Section 2 (Syntax)}.

For information about how @uref{glo_p.html#program,@emph{programs}} in
the language are @emph{compiled} and @emph{executed}, see
@uref{chap-3.html,Section 3 (Evaluation and Compilation)}.

For information about data types, see @uref{chap-4.html,Section 4 (Types
and Classes)}. Not all @uref{glo_t.html#type,@emph{types}} and
@uref{glo_c.html#class,@emph{classes}} are defined in this chapter; many
are defined in chapter corresponding to their topic--for example, the
numeric types are defined in @uref{chap-12.html,Section 12 (Numbers)}.
For a complete list of
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_t.html#type,@emph{types}}, see
@uref{sec_4-2-3.html#standardizedatomictypespecs,Figure 4-2}.

For information about general purpose control and data flow, see
@uref{chap-5.html,Section 5 (Data and Control Flow)} or
@uref{chap-6.html,Section 6 (Iteration)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 13
@subsection CLHS: Section 1.3
@anchor{#clhs-section-1.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.3 Referenced Publications

@itemize
@item
@emph{The Anatomy of Lisp}, John Allen,
@uref{http://akebono.stanford.edu/yahoo/Business/Corporations/Publishing/McGraw_Hill__Inc_/,McGraw-Hill,
Inc.}, 1978.
@item
@uref{gopher://aw.com/11/authors/Knuth/knuthart1-3,@emph{The Art of
Computer Programming, Volume 3}},
@uref{http://www-cs-staff.stanford.edu/~knuth/,Donald E. Knuth},
@uref{http://aw.com/,Addison-Wesley Company} (Reading,
@uref{http://www.std.com/NE/mass.html,MA}), 1973.
@item
@uref{http://www.parc.xerox.com/spl/groups/eca/pubs/complete.html#Kiczales:AMOP,@emph{The
Art of the Metaobject Protocol}},
@uref{http://www.parc.xerox.com/gregor,Kiczales} et al.,
@uref{http://www-mitpress.mit.edu/,MIT Press}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), 1991.
@item
``Common Lisp Object System Specification,'' D. Bobrow, L. DiMichiel,
@uref{mailto:rpg@@parcplace.com,R.P. Gabriel},
@uref{mailto:skeene@@harlequin.com,S. Keene},
@uref{http://www.parc.xerox.com/gregor,G. Kiczales},
@uref{mailto:davmoon@@aol.com,D. Moon},
@emph{@uref{http://info.acm.org/catalog/proceedings/sigplan?id=AAABZT,SIGPLAN
Notices}} V23, September, 1988.
@item
@emph{Common Lisp: The Language},
@uref{mailto:Guy.Steele@@East.Sun.COM,Guy L. Steele Jr.}, Digital Press
(Burlington, @uref{http://www.std.com/NE/mass.html,MA}), 1984.
@item
@uref{http://www.cs.cmu.edu/Web/Groups/AI/html/cltl/cltl2.html,@emph{Common
Lisp: The Language, Second Edition}},
@uref{mailto:Guy.Steele@@East.Sun.COM,Guy L. Steele Jr.}, Digital Press
(Bedford, @uref{http://www.std.com/NE/mass.html,MA}), 1990.
@item
@emph{Exceptional Situations in Lisp},
@uref{mailto:kmp@@harlequin.com,Kent M. Pitman}, @emph{Proceedings of
the First European Conference on the Practical Application of LISP}
(EUROPAL '90), Churchill College, Cambridge, England, March 27-29, 1990.
@item
@emph{Flavors: A Non-Hierarchical Approach to Object-Oriented
Programming}, @uref{mailto:hic@@macsyma.com,Howard I. Cannon}, 1982.
@item
@emph{IEEE Standard for Binary Floating-Point Arithmetic}, ANSI/IEEE Std
754-1985, Institute of Electrical and Electronics Engineers, Inc. (New
York), 1985.
@item
@uref{http://www.cs.indiana.edu/scheme-repository/doc.standards.html,@emph{IEEE
Standard for the Scheme Programming Language}}, IEEE Std 1178-1990,
Institute of Electrical and Electronic Engineers, Inc. (New York), 1991.
@item
@emph{Interlisp Reference Manual}, Third Revision, Teitelman, Warren, et
al, @uref{http://www.parc.xerox.com/,Xerox Palo Alto Research Center}
(@uref{http://www.city.palo-alto.ca.us/home.html,Palo Alto},
@uref{http://www.reasearch.digital.com/SRC/virtual-tourist/California.html,CA}),
1978.
@item
ISO 6937/2, @emph{Information processing---Coded character sets for text
communication---Part 2: Latin alphabetic and non-alphabetic graphic
characters}, ISO, 1983.
@item
@emph{Lisp 1.5 Programmer's Manual},
@uref{http://www-formal.stanford.edu/jmc/,John McCarthy},
@uref{http://www-mitpress.mit.edu/,MIT Press}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), August, 1962.
@item
@emph{Lisp Machine Manual}, @uref{mailto:dlw@@odi.com,D.L. Weinreb} and
@uref{mailto:davmoon@@aol.com,D.A. Moon},
@uref{http://www.ai.mit.edu/,Artificial Intelligence Laboratory, MIT}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), July, 1981.
@item
@uref{http://reading-room-www.lcs.mit.edu/rr/catalog/catalog.html?collection=tr&sort=not&search=Maclisp+1978,@emph{Maclisp
Reference Manual, Revision 0}}, @uref{mailto:davmoon@@aol.com,David A.
Moon}, Project MAC (@uref{http://www.lcs.mit.edu/,Laboratory for
Computer Science}), @uref{http://web.mit.edu/,MIT}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), March, 1974.
@item
``NIL---A Perspective,'' @uref{mailto:jonl@@harlequin.com,JonL White},
@emph{Macsyma User's Conference}, 1979.
@item
@emph{Performance and Evaluation of Lisp Programs},
@uref{mailto:rpg@@parcplace.com,Richard P. Gabriel},
@uref{http://www-mitpress.mit.edu/,MIT Press}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), 1985.
@item
``Principal Values and Branch Cuts in Complex APL,'' Paul Penfield Jr.,
@emph{APL 81 Conference Proceedings}, @uref{http://www.acm.org/,ACM}
SIGAPL (San Francisco, September 1981), 248-256. Proceedings published
as @emph{APL Quote Quad 12}, 1 (September 1981).
@item
@uref{http://reading-room-www.lcs.mit.edu/rr/catalog/catalog.html?collection=tr&sort=not&search=The+Revised+Maclisp+Manual,@emph{The
Revised Maclisp Manual}}, @uref{mailto:kmp@@harlequin.com,Kent M.
Pitman}, Technical Report 295, @uref{http://www.lcs.mit.edu/,Laboratory
for Computer Science, MIT}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), May 1983.
@item
``@emph{@uref{http://www.cs.indiana.edu/scheme-repository/doc.standards.html,Revised^3
Report} on the Algorithmic Language
@uref{file://swiss-ftp.ai.mit.edu/pub/scm/HTML/r4rs_toc.html,Scheme}},''
@uref{http://www.biols.susx.ac.uk/Home/Jonathan_Rees,Jonathan Rees} and
William Clinger (editors),
@emph{@uref{http://info.acm.org/catalog/proceedings/sigplan?id=AAABZT,SIGPLAN
Notices}} V21, #12, December, 1986.
@item
``S-1 Common Lisp Implementation,''
@uref{http://www.ai.mit.edu/people/brooks/brooks.html,R.A. Brooks},
@uref{mailto:rpg@@parcplace.com,R.P. Gabriel}, and
@uref{mailto:Guy.Steele@@East.Sun.COM,G.L. Steele},
@emph{@uref{http://info.acm.org/catalog/proceedings/lfp.html?id=AAABZT,Conference
Record of the 1982 ACM Symposium on Lisp and Functional Programming}},
108-113, 1982.
@item
@emph{Smalltalk-80: The Language and its Implementation}, A. Goldberg
and D. Robson, @uref{http://aw.com/,Addison-Wesley Company}, 1983.
@item
``Standard LISP Report,'' J.B. Marti,
@uref{http://www.rand.org/personal/hearn/,A.C. Hearn}, M.L. Griss, and
C. Griss,
@emph{@uref{http://info.acm.org/catalog/proceedings/sigplan?id=AAABZT,SIGPLAN
Notices}} V14, #10, October, 1979.
@item
@emph{Webster's Third New International Dictionary the English Language,
Unabridged}, Merriam Webster (Springfield,
@uref{http://www.std.com/NE/mass.html,MA}), 1986.
@item
@uref{http://reading-room-www.lcs.mit.edu/rr/catalog/catalog.html?collection=tr&sort=not&search=xp,@emph{XP:
A Common Lisp Pretty Printing System}},
@uref{http://www.merl.com/people/waters/Welcome.html,R.C. Waters}, Memo
1102a, @uref{http://www.ai.mit.edu/,Artificial Intelligence Laboratory,
MIT}
(@uref{http://www.ai.mit.edu/projects/iiip/Cambridge/homepage.html,Cambridge},
@uref{http://www.std.com/NE/mass.html,MA}), September 1989.
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 14
@subsection CLHS: Section 1.4
@anchor{#clhs-section-1.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4 Definitions

This section contains notational conventions and definitions of terms
used in this manual.

@uref{sec_1-4-1.html,}

1.4.1 Notational Conventions

@uref{sec_1-4-2.html,}

1.4.2 Error Terminology

@uref{sec_1-4-3.html,}

1.4.3 Sections Not Formally Part Of This Standard

@uref{sec_1-4-4.html,}

1.4.4 Interpreting Dictionary Entries

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 142::
* CLHS Section 143::
* CLHS Section 144::
@end menu

@node CLHS Section 142
@subsubsection CLHS: Section 1.4.2
@anchor{#clhs-section-1.4.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-1-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.2 Error Terminology

Situations in which errors might, should, or must be signaled are
described in the standard. The wording used to describe such situations
is intended to have precise meaning. The following list is a glossary of
those meanings.

@strong{Safe code}

This is @uref{glo_c.html#code,@emph{code}} processed with the
@uref{dec_optimize.html#safety,@strong{safety}} optimization at its
highest setting (3). @uref{dec_optimize.html#safety,@strong{safety}} is
a lexical property of code. The phrase ``the function F should signal an
error'' means that if F is invoked from code processed with the highest
@uref{dec_optimize.html#safety,@strong{safety}} optimization, an error
is signaled. It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether F or the calling code signals the error.

@strong{Unsafe code}

This is code processed with lower safety levels.

Unsafe code might do error checking. Implementations are permitted to
treat all code as safe code all the time.

@strong{An error is signaled}

This means that an error is signaled in both safe and unsafe code.
@uref{glo_c.html#conforming_code,@emph{Conforming code}} may rely on the
fact that the error is signaled in both safe and unsafe code. Every
implementation is required to detect the error in both safe and unsafe
code. For example, ``an error is signaled if
@uref{fun_unexport.html#unexport,@strong{unexport}} is given a
@uref{glo_s.html#symbol,@emph{symbol}} not
@uref{glo_a.html#accessible,@emph{accessible}} in the
@uref{glo_c.html#current_package,@emph{current package}}.''

If an explicit error type is not specified, the default is
@uref{contyp_error.html#error,@strong{error}}.

@strong{An error should be signaled}

This means that an error is signaled in safe code, and an error might be
signaled in unsafe code.
@uref{glo_c.html#conforming_code,@emph{Conforming code}} may rely on the
fact that the error is signaled in safe code. Every implementation is
required to detect the error at least in safe code. When the error is
not signaled, the ``consequences are undefined'' (see below). For
example, ``@uref{fun_pl.html#PL,@strong{+}} should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
argument is not of @uref{glo_t.html#type,@emph{type}}
@uref{syscla_number.html#number,@strong{number}}.''

@strong{Should be prepared to signal an error}

This is similar to ``should be signaled'' except that it does not imply
that `extra effort' has to be taken on the part of an
@uref{glo_o.html#operator,@emph{operator}} to discover an erroneous
situation if the normal action of that
@uref{glo_o.html#operator,@emph{operator}} can be performed successfully
with only `lazy' checking. An
@uref{glo_i.html#implementation,@emph{implementation}} is always
permitted to signal an error, but even in
@uref{glo_s.html#safe,@emph{safe}} @uref{glo_c.html#code,@emph{code}},
it is only required to signal the error when failing to signal it might
lead to incorrect results. In @uref{glo_u.html#unsafe,@emph{unsafe}}
@uref{glo_c.html#code,@emph{code}}, the consequences are undefined.

For example, defining that
``@uref{fun_findcm_fi__find-if-not.html#find,@strong{find}} should be
prepared to signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
second @uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_p.html#proper_list,@emph{proper list}}'' does not imply that
an error is always signaled. The @uref{glo_f.html#form,@emph{form}}

@verbatim
 (find 'a '(a b . c))
@end verbatim

must either signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} in
@uref{glo_s.html#safe,@emph{safe}} @uref{glo_c.html#code,@emph{code}},
else return A. In @uref{glo_u.html#unsafe,@emph{unsafe}}
@uref{glo_c.html#code,@emph{code}}, the consequences are undefined. By
contrast,

@verbatim
 (find 'd '(a b . c))
@end verbatim

must signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} in
@uref{glo_s.html#safe,@emph{safe}} @uref{glo_c.html#code,@emph{code}}.
In @uref{glo_u.html#unsafe,@emph{unsafe}}
@uref{glo_c.html#code,@emph{code}}, the consequences are undefined.
Also,

@verbatim
 (find 'd '#1=(a b . #1#))
@end verbatim

in @uref{glo_s.html#safe,@emph{safe}} @uref{glo_c.html#code,@emph{code}}
might return @uref{any_nil.html#nil,@strong{nil}} (as an
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
extension), might never return, or might signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}}. In
@uref{glo_u.html#unsafe,@emph{unsafe}}
@uref{glo_c.html#code,@emph{code}}, the consequences are undefined.

Typically, the ``should be prepared to signal'' terminology is used in
type checking situations where there are efficiency considerations that
make it impractical to detect errors that are not relevant to the
correct operation of the @uref{glo_o.html#operator,@emph{operator}}.

@strong{The consequences are unspecified}

This means that the consequences are unpredictable but harmless.
Implementations are permitted to specify the consequences of this
situation. No @uref{glo_c.html#conforming_code,@emph{conforming code}}
may depend on the results or effects of this situation, and all
@uref{glo_c.html#conforming_code,@emph{conforming code}} is required to
treat the results and effects of this situation as unpredictable but
harmless. For example, ``if the second argument to
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
specifies a name that does not correspond to any
@uref{glo_s.html#slot,@emph{slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in the
@uref{glo_o.html#object,@emph{object}}, the results are unspecified.''

@strong{The consequences are undefined}

This means that the consequences are unpredictable. The consequences may
range from harmless to fatal. No
@uref{glo_c.html#conforming_code,@emph{conforming code}} may depend on
the results or effects.
@uref{glo_c.html#conforming_code,@emph{Conforming code}} must treat the
consequences as unpredictable. In places where the words ``must,''
``must not,'' or ``may not'' are used, then ``the consequences are
undefined'' if the stated requirement is not met and no specific
consequence is explicitly stated. An implementation is permitted to
signal an error in this case.

For example: ``Once a name has been declared by
@uref{mac_defconstant.html#defconstant,@strong{defconstant}} to be
constant, any further assignment or binding of that variable has
undefined consequences.''

@strong{An error might be signaled}

This means that the situation has undefined consequences; however, if an
error is signaled, it is of the specified
@uref{glo_t.html#type,@emph{type}}. For example,
``@uref{fun_open.html#open,@strong{open}} might signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}}.''

@strong{The return values are unspecified}

This means that only the number and nature of the return values of a
@uref{glo_f.html#form,@emph{form}} are not specified. However, the issue
of whether or not any side-effects or transfer of control occurs is
still well-specified.

A program can be well-specified even if it uses a function whose returns
values are unspecified. For example, even if the return values of some
function F are unspecified, an expression such as (length (list (F))) is
still well-specified because it does not rely on any particular aspect
of the value or values returned by F.

@strong{Implementations may be extended to cover this situation}

This means that the @uref{glo_s.html#situation,@emph{situation}} has
undefined consequences; however, a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} is free to treat the situation in a more specific way.
For example, an @uref{glo_i.html#implementation,@emph{implementation}}
might define that an error is signaled, or that an error should be
signaled, or even that a certain well-defined non-error behavior occurs.

No @uref{glo_c.html#conforming_code,@emph{conforming code}} may depend
on the consequences of such a
@uref{glo_s.html#situation,@emph{situation}}; all
@uref{glo_c.html#conforming_code,@emph{conforming code}} must treat the
consequences of the situation as undefined.
@uref{glo_i.html#implementation,@emph{Implementations}} are required to
document how the situation is treated.

For example, ``implementations may be extended to define other type
specifiers to have a corresponding
@uref{glo_c.html#class,@emph{class}}.''

@strong{Implementations are free to extend the syntax}

This means that in this situation implementations are permitted to
define unambiguous extensions to the syntax of the
@uref{glo_f.html#form,@emph{form}} being described. No
@uref{glo_c.html#conforming_code,@emph{conforming code}} may depend on
this extension. Implementations are required to document each such
extension. All @uref{glo_c.html#conforming_code,@emph{conforming code}}
is required to treat the syntax as meaningless. The standard might
disallow certain extensions while allowing others. For example, ``no
implementation is free to extend the syntax of
@uref{mac_defclass.html#defclass,@strong{defclass}}.''

@strong{A warning might be issued}

This means that @uref{glo_i.html#implementation,@emph{implementations}}
are encouraged to issue a warning if the context is appropriate (e.g.,
when compiling). However, a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} is not required to issue a warning.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss144.html,ERROR-TERMINOLOGY-WARNING:MIGHT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 143
@subsubsection CLHS: Section 1.4.3
@anchor{#clhs-section-1.4.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.3 Sections Not Formally Part Of This Standard

Front matter and back matter, such as the ``Table of Contents,''
``Index,'' ``Figures,'' ``Credits,'' and ``Appendix'' are not considered
formally part of this standard, so that we retain the flexibility needed
to update these sections even at the last minute without fear of needing
a formal vote to change those parts of the document. These items are
quite short and very useful, however, and it is not recommended that
they be removed even in an abridged version of this document.

Within the concept sections, subsections whose names begin with the
words ``Note'' or ``Notes'' or ``Example'' or ``Examples'' are provided
for illustration purposes only, and are not considered part of the
standard.

An attempt has been made to place these sections last in their parent
section, so that they could be removed without disturbing the contiguous
numbering of the surrounding sections in order to produce a document of
smaller size.

Likewise, the ``Examples'' and ``Notes'' sections in a dictionary entry
are not considered part of the standard and could be removed if
necessary.

Nevertheless, the examples provide important clarifications and
consistency checks for the rest of the material, and such abridging is
not recommended unless absolutely unavoidable.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 144
@subsubsection CLHS: Section 1.4.4
@anchor{#clhs-section-1.4.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4 Interpreting Dictionary Entries

The dictionary entry for each
@uref{glo_d.html#defined_name,@emph{defined name}} is partitioned into
sections. Except as explicitly indicated otherwise below, each section
is introduced by a label identifying that section. The omission of a
section implies that the section is either not applicable, or would
provide no interesting information.

This section defines the significance of each potential section in a
dictionary entry.

@uref{sec_1-4-4-1.html,}

1.4.4.1 The ``Affected By'' Section of a Dictionary Entry

@uref{sec_1-4-4-2.html,}

1.4.4.2 The ``Arguments'' Section of a Dictionary Entry

@uref{sec_1-4-4-3.html,}

1.4.4.3 The ``Arguments and Values'' Section of a Dictionary Entry

@uref{sec_1-4-4-4.html,}

1.4.4.4 The ``Binding Types Affected'' Section of a Dictionary Entry

@uref{sec_1-4-4-5.html,}

1.4.4.5 The ``Class Precedence List'' Section of a Dictionary Entry

@uref{sec_1-4-4-6.html,}

1.4.4.6 Dictionary Entries for Type Specifiers

@uref{sec_1-4-4-7.html,}

1.4.4.7 The ``Constant Value'' Section of a Dictionary Entry

@uref{sec_1-4-4-8.html,}

1.4.4.8 The ``Description'' Section of a Dictionary Entry

@uref{sec_1-4-4-9.html,}

1.4.4.9 The ``Examples'' Section of a Dictionary Entry

@uref{sec_1-4-4-10.html,}

1.4.4.10 The ``Exceptional Situations'' Section of a Dictionary Entry

@uref{sec_1-4-4-11.html,}

1.4.4.11 The ``Initial Value'' Section of a Dictionary Entry

@uref{sec_1-4-4-12.html,}

1.4.4.12 The ``Argument Precedence Order'' Section of a Dictionary Entry

@uref{sec_1-4-4-13.html,}

1.4.4.13 The ``Method Signature'' Section of a Dictionary Entry

@uref{sec_1-4-4-14.html,}

1.4.4.14 The ``Name'' Section of a Dictionary Entry

@uref{sec_1-4-4-15.html,}

1.4.4.15 The ``Notes'' Section of a Dictionary Entry

@uref{sec_1-4-4-16.html,}

1.4.4.16 The ``Pronunciation'' Section of a Dictionary Entry

@uref{sec_1-4-4-17.html,}

1.4.4.17 The ``See Also'' Section of a Dictionary Entry

@uref{sec_1-4-4-18.html,}

1.4.4.18 The ``Side Effects'' Section of a Dictionary Entry

@uref{sec_1-4-4-19.html,}

1.4.4.19 The ``Supertypes'' Section of a Dictionary Entry

@uref{sec_1-4-4-20.html,}

1.4.4.20 The ``Syntax'' Section of a Dictionary Entry

@uref{sec_1-4-4-21.html,}

1.4.4.21 The ``Valid Context'' Section of a Dictionary Entry

@uref{sec_1-4-4-22.html,}

1.4.4.22 The ``Value Type'' Section of a Dictionary Entry

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss136.html,DOCUMENTATION-FUNCTION-TANGLED:REQUIRE-ARGUMENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.10
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-11.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.10 The ``Exceptional Situations'' Section of a Dictionary Entry

Three kinds of information may appear here:

@itemize
@item
Situations that are detected by the
@uref{glo_f.html#function,@emph{function}} and formally signaled.
@item
Situations that are handled by the
@uref{glo_f.html#function,@emph{function}}.
@item
Situations that may be detected by the
@uref{glo_f.html#function,@emph{function}}.
@end itemize

This field does not include conditions that could be signaled by
@uref{glo_f.html#function,@emph{functions}} passed to and called by this
@uref{glo_o.html#operator,@emph{operator}} as arguments or through
dynamic variables, nor by executing subforms of this operator if it is a
@uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#special_operator,@emph{special operator}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.11
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-10.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-12.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.11 The ``Initial Value'' Section of a Dictionary Entry

This information describes the initial
@uref{glo_v.html#value,@emph{value}} of a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}. Since this
variable might change, see @uref{glo_t.html#type,@emph{type}}
restrictions in the ``Value Type'' section.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.12
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-11.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-13.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.12 The ``Argument Precedence Order'' Section of a Dictionary Entry

This information describes the
@uref{glo_a.html#argument_precedence_order,@emph{argument precedence
order}}. If it is omitted, the
@uref{glo_a.html#argument_precedence_order,@emph{argument precedence
order}} is the default (left to right).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.13
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-12.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-14.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.13 The ``Method Signature'' Section of a Dictionary Entry

The description of a @uref{glo_g.html#generic_function,@emph{generic
function}} includes descriptions of the
@uref{glo_m.html#method,@emph{methods}} that are defined on that
@uref{glo_g.html#generic_function,@emph{generic function}} by the
standard. A method signature is used to describe the
@uref{glo_p.html#parameter,@emph{parameters}} and
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
for each @uref{glo_m.html#method,@emph{method}}.
@uref{glo_m.html#method,@emph{Methods}} defined for the
@uref{glo_g.html#generic_function,@emph{generic function}} must be of
the form described by the @uref{glo_m.html#method,@emph{method}}
@uref{glo_s.html#signature,@emph{signature}}.

@strong{F} @emph{(@emph{x} @emph{class}) (@emph{y} t) &optional @emph{z}
&key @emph{k}}

This @uref{glo_s.html#signature,@emph{signature}} indicates that this
method on the @uref{glo_g.html#generic_function,@emph{generic function}}
@strong{F} has two @uref{glo_r.html#required_parameter,@emph{required
parameters}}: @emph{x}, which must be a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
the @uref{glo_c.html#class,@emph{class}} @emph{class}; and @emph{y},
which can be any @uref{glo_o.html#object,@emph{object}} (i.e., a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}}). In addition, there is an
@uref{glo_o.html#optional_parameter,@emph{optional parameter}} @emph{z}
and a @uref{glo_k.html#keyword_parameter,@emph{keyword parameter}}
@emph{k}. This @uref{glo_s.html#signature,@emph{signature}} also
indicates that this method on F is a
@uref{glo_p.html#primary_method,@emph{primary method}} and has no
@uref{glo_q.html#qualifier,@emph{qualifiers}}.

For each @uref{glo_p.html#parameter,@emph{parameter}}, the
@uref{glo_a.html#argument,@emph{argument}} supplied must be in the
intersection of the @uref{glo_t.html#type,@emph{type}} specified in the
description of the corresponding
@uref{glo_g.html#generic_function,@emph{generic function}} and the
@uref{glo_t.html#type,@emph{type}} given in the
@uref{glo_s.html#signature,@emph{signature}} of some
@uref{glo_m.html#method,@emph{method}} (including not only those
@uref{glo_m.html#method,@emph{methods}} defined in this specification,
but also
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
or user-defined @uref{glo_m.html#method,@emph{methods}} in situations
where the definition of such @uref{glo_m.html#method,@emph{methods}} is
permitted).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.14
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-13.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-15.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.14 The ``Name'' Section of a Dictionary Entry

This section introduces the dictionary entry. It is not explicitly
labeled. It appears preceded and followed by a horizontal bar.

In large print at left, the @uref{glo_d.html#defined_name,@emph{defined
name}} appears; if more than one
@uref{glo_d.html#defined_name,@emph{defined name}} is to be described by
the entry, all such @uref{glo_n.html#name,@emph{names}} are shown
separated by commas.

In somewhat smaller italic print at right is an indication of what kind
of dictionary entry this is. Possible values are:

@emph{Accessor}

This is an @uref{glo_a.html#accessor,@emph{accessor}}
@uref{glo_f.html#function,@emph{function}}.

@emph{Class}

This is a @uref{glo_c.html#class,@emph{class}}.

@emph{Condition Type}

This is a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_condition.html#condition,@strong{condition}}.

@emph{Constant Variable}

This is a @uref{glo_c.html#constant_variable,@emph{constant variable}}.

@emph{Declaration}

This is a @uref{glo_d.html#declaration_identifier,@emph{declaration
identifier}}.

@emph{Function}

This is a @uref{glo_f.html#function,@emph{function}}.

@emph{Local Function}

This is a @uref{glo_f.html#function,@emph{function}} that is defined
only lexically within the scope of some other
@uref{glo_m.html#macro_form,@emph{macro form}}.

@emph{Local Macro}

This is a @uref{glo_m.html#macro,@emph{macro}} that is defined only
lexically within the scope of some other
@uref{glo_m.html#macro_form,@emph{macro form}}.

@emph{Macro}

This is a @uref{glo_m.html#macro,@emph{macro}}.

@emph{Restart}

This is a @uref{glo_r.html#restart,@emph{restart}}.

@emph{Special Operator}

This is a @uref{glo_s.html#special_operator,@emph{special operator}}.

@emph{Standard Generic Function}

This is a @uref{glo_s.html#standard_generic_function,@emph{standard
generic function}}.

@emph{Symbol}

This is a @uref{glo_s.html#symbol,@emph{symbol}} that is specially
recognized in some particular situation, such as the syntax of a
@uref{glo_m.html#macro,@emph{macro}}.

@emph{System Class}

This is like @uref{glo_c.html#class,@emph{class}}, but it identifies a
@uref{glo_c.html#class,@emph{class}} that is potentially a
@uref{glo_b.html#built-in_class,@emph{built-in class}}. (No
@uref{glo_c.html#class,@emph{class}} is actually required to be a
@uref{glo_b.html#built-in_class,@emph{built-in class}}.)

@emph{Type}

This is an @uref{glo_a.html#atomic_type_specifier,@emph{atomic type
specifier}}, and depending on information for each particular entry, may
subject to form other @uref{glo_t.html#type_specifier,@emph{type
specifiers}}.

@emph{Type Specifier}

This is a @uref{glo_d.html#defined_name,@emph{defined name}} that is not
an @uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}},
but that can be used in constructing valid
@uref{glo_t.html#type_specifier,@emph{type specifiers}}.

@emph{Variable}

This is a @uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.15
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-14.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-16.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.15 The ``Notes'' Section of a Dictionary Entry

Information not found elsewhere in this description which pertains to
this @uref{glo_o.html#operator,@emph{operator}}. Among other things,
this might include cross reference information, code equivalences,
stylistic hints, implementation hints, typical uses. This information is
not considered part of the standard; any
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} or @uref{glo_c.html#conforming_program,@emph{conforming
program}} is permitted to ignore the presence of this information.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.16
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-15.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-17.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.16 The ``Pronunciation'' Section of a Dictionary Entry

This offers a suggested pronunciation for
@uref{glo_d.html#defined_name,@emph{defined names}} so that people not
in verbal communication with the original designers can figure out how
to pronounce words that are not in normal English usage. This
information is advisory only, and is not considered part of the
standard. For brevity, it is only provided for entries with names that
are specific to Common Lisp and would not be found in @emph{Webster's
Third New International Dictionary the English Language, Unabridged}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.17
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-16.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-18.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.17 The ``See Also'' Section of a Dictionary Entry

List of references to other parts of this standard that offer
information relevant to this @uref{glo_o.html#operator,@emph{operator}}.
This list is not part of the standard.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.18
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-17.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-19.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.18 The ``Side Effects'' Section of a Dictionary Entry

Anything that is changed as a result of the evaluation of the
@uref{glo_f.html#form,@emph{form}} containing this
@uref{glo_o.html#operator,@emph{operator}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.19
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-18.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-20.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.19 The ``Supertypes'' Section of a Dictionary Entry

This appears in the dictionary entry for a
@uref{glo_t.html#type,@emph{type}}, and contains a list of the
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_t.html#type,@emph{types}} that must be
@uref{glo_s.html#supertype,@emph{supertypes}} of this
@uref{glo_t.html#type,@emph{type}}.

In @uref{glo_i.html#implementation,@emph{implementations}} where there
is a corresponding @uref{glo_c.html#class,@emph{class}}, the order of
the @uref{glo_c.html#class,@emph{classes}} in the
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} is
consistent with the order presented in this section.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.2 The ``Arguments'' Section of a Dictionary Entry

This information describes the syntax information of entries such as
those for @uref{glo_d.html#declaration,@emph{declarations}} and special
@uref{glo_e.html#expression,@emph{expressions}} which are never
@emph{evaluated} as @uref{glo_f.html#form,@emph{forms}}, and so do not
return @uref{glo_v.html#value,@emph{values}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.20
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-19.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-20-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.20 The ``Syntax'' Section of a Dictionary Entry

This section describes how to use the
@uref{glo_d.html#defined_name,@emph{defined name}} in code. The
``Syntax'' description for a
@uref{glo_g.html#generic_function,@emph{generic function}} describes the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} itself, while
the ``Method Signatures'' describe the
@uref{glo_l.html#lambda_list,@emph{lambda lists}} of the defined
@uref{glo_m.html#method,@emph{methods}}. The ``Syntax'' description for
an @uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}} describes its
@uref{glo_p.html#parameter,@emph{parameters}}.

For example, an @uref{glo_o.html#operator,@emph{operator}} description
might say:

@strong{F} @emph{x y &optional z &key k}

This description indicates that the function @strong{F} has two required
parameters, @emph{x} and @emph{y}. In addition, there is an optional
parameter @emph{z} and a keyword parameter @emph{k}.

For @uref{glo_m.html#macro,@emph{macros}} and
@uref{glo_s.html#special_operator,@emph{special operators}}, syntax is
given in modified BNF notation; see @uref{sec_1-4-1-2.html,Section
1.4.1.2 (Modified BNF Syntax)}. For
@uref{glo_f.html#function,@emph{functions}} a
@uref{glo_l.html#lambda_list,@emph{lambda list}} is given. In both
cases, however, the outermost parentheses are omitted, and default value
information is omitted.

@uref{sec_1-4-4-20-1.html,}

1.4.4.20.1 Special ``Syntax'' Notations for Overloaded Operators

@uref{sec_1-4-4-20-2.html,}

1.4.4.20.2 Naming Conventions for Rest Parameters

@uref{sec_1-4-4-20-3.html,}

1.4.4.20.3 Requiring Non-Null Rest Parameters in the ``Syntax'' Section

@uref{sec_1-4-4-20-4.html,}

1.4.4.20.4 Return values in the ``Syntax'' Section

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.20.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-20-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-20.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-20-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.20.2 Naming Conventions for Rest Parameters

Within this specification, if the name of a
@uref{glo_r.html#rest_parameter,@emph{rest parameter}} is chosen to be a
plural noun, use of that name in @emph{parameter} font refers to the
@uref{glo_l.html#list,@emph{list}} to which the
@uref{glo_r.html#rest_parameter,@emph{rest parameter}} is bound. Use of
the singular form of that name in @emph{parameter} font refers to an
@uref{glo_e.html#element,@emph{element}} of that
@uref{glo_l.html#list,@emph{list}}.

For example, given a syntax description such as:

@strong{F} @emph{&rest @emph{arguments}}

it is appropriate to refer either to the
@uref{glo_r.html#rest_parameter,@emph{rest parameter}} named
@emph{arguments} by name, or to one of its elements by speaking of ``an
@emph{argument},'' ``some @emph{argument},'' ``each @emph{argument}''
@emph{etc}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.20.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-20-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-20.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-20-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.20.3 Requiring Non-Null Rest Parameters in the ``Syntax'' Section

In some cases it is useful to refer to all arguments equally as a single
aggregation using a @uref{glo_r.html#rest_parameter,@emph{rest
parameter}} while at the same time requiring at least one argument. A
variety of imperative and declarative means are available in
@uref{glo_c.html#code,@emph{code}} for expressing such a restriction,
however they generally do not manifest themselves in a
@uref{glo_l.html#lambda_list,@emph{lambda list}}. For descriptive
purposes within this specification,

@strong{F} @emph{&rest arguments+}

means the same as

@strong{F} @emph{&rest arguments}

but introduces the additional requirement that there be at least one
@emph{argument}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.20.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-20-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-20.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-20-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.20.4 Return values in the ``Syntax'' Section

An evaluation arrow ``=> '' precedes a list of
@uref{glo_v.html#value,@emph{values}} to be returned. For example:

@strong{F} @emph{a b c} => @emph{x}

indicates that F is an operator that has three
@uref{glo_r.html#required_parameter,@emph{required parameters}} (i.e.,
@emph{a}, @emph{b}, and @emph{c}) and that returns one
@uref{glo_v.html#value,@emph{value}} (i.e., @emph{x}). If more than one
@uref{glo_v.html#value,@emph{value}} is returned by an operator, the
@uref{glo_n.html#name,@emph{names}} of the
@uref{glo_v.html#value,@emph{values}} are separated by commas, as in:

@strong{F} @emph{a b c} => @emph{x, y, z}

@uref{sec_1-4-4-20-4-1.html,}

1.4.4.20.4.1 No Arguments or Values in the ``Syntax'' Section

@uref{sec_1-4-4-20-4-2.html,}

1.4.4.20.4.2 Unconditional Transfer of Control in the ``Syntax'' Section

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.20.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-20-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-20-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-21.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.20.4.2 Unconditional Transfer of Control in the ``Syntax'' Section

Some @uref{glo_o.html#operator,@emph{operators}} perform an
unconditional transfer of control, and so never have any return values.
Such @uref{glo_o.html#operator,@emph{operators}} are notated using a
notation such as the following:

@strong{F} @emph{a b c} =>|

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.21
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-20-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-22.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.21 The ``Valid Context'' Section of a Dictionary Entry

This information is used by dictionary entries such as ``Declarations''
in order to restrict the context in which the declaration may appear.

A given ``Declaration'' might appear in a
@uref{glo_d.html#declaration,@emph{declaration}} (i.e., a
@uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}), a
@uref{glo_p.html#proclamation,@emph{proclamation}} (i.e., a
@uref{mac_declaim.html#declaim,@strong{declaim}} or
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}
@uref{glo_f.html#form,@emph{form}}), or both.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.22
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-21.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.22 The ``Value Type'' Section of a Dictionary Entry

This information describes any @uref{glo_t.html#type,@emph{type}}
restrictions on a @uref{glo_d.html#dynamic_variable,@emph{dynamic
variable}}.

Except as explicitly specified otherwise, the consequences are undefined
if this type restriction is violated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.3 The ``Arguments and Values'' Section of a Dictionary Entry

An English language description of what
@uref{glo_a.html#argument,@emph{arguments}} the
@uref{glo_o.html#operator,@emph{operator}} accepts and what
@uref{glo_v.html#value,@emph{values}} it returns, including information
about defaults for @uref{glo_p.html#parameter,@emph{parameters}}
corresponding to omittable @uref{glo_a.html#argument,@emph{arguments}}
(such as @uref{glo_o.html#optional_parameter,@emph{optional parameters}}
and @uref{glo_k.html#keyword_parameter,@emph{keyword parameters}}). For
@uref{glo_s.html#special_operator,@emph{special operators}} and
@uref{glo_m.html#macro,@emph{macros}}, their
@uref{glo_a.html#argument,@emph{arguments}} are not @emph{evaluated}
unless it is explicitly stated in their descriptions that they are
@emph{evaluated}.

Except as explicitly specified otherwise, the consequences are undefined
if these type restrictions are violated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.4 The ``Binding Types Affected'' Section of a Dictionary Entry

This information alerts the reader to the kinds of
@uref{glo_b.html#binding,@emph{bindings}} that might potentially be
affected by a declaration. Whether in fact any particular such
@uref{glo_b.html#binding,@emph{binding}} is actually affected is
dependent on additional factors as well. See the ``Description'' section
of the declaration in question for details.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.5 The ``Class Precedence List'' Section of a Dictionary Entry

This appears in the dictionary entry for a
@uref{glo_c.html#class,@emph{class}}, and contains an ordered list of
the @uref{glo_c.html#class,@emph{classes}} defined by Common Lisp that
must be in the @uref{glo_c.html#class_precedence_list,@emph{class
precedence list}} of this @uref{glo_c.html#class,@emph{class}}.

It is permissible for other
(@uref{glo_i.html#implementation-defined,@emph{implementation-defined}})
@uref{glo_c.html#class,@emph{classes}} to appear in the
@uref{glo_i.html#implementation,@emph{implementation}}'s
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} for
the @uref{glo_c.html#class,@emph{class}}.

It is permissible for either
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
or
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
to appear in the
@uref{glo_i.html#implementation,@emph{implementation}}'s
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}};
for details, see @uref{sec_4-2-2.html,Section 4.2.2 (Type
Relationships)}.

Except as explicitly indicated otherwise somewhere in this
specification, no additional
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_c.html#class,@emph{classes}} may appear in the
@uref{glo_i.html#implementation,@emph{implementation}}'s
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}}.

By definition of the relationship between
@uref{glo_c.html#class,@emph{classes}} and
@uref{glo_t.html#type,@emph{types}}, the
@uref{glo_c.html#class,@emph{classes}} listed in this section are also
@uref{glo_s.html#supertype,@emph{supertypes}} of the
@uref{glo_t.html#type,@emph{type}} denoted by the
@uref{glo_c.html#class,@emph{class}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.6
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.6 Dictionary Entries for Type Specifiers

The @uref{glo_a.html#atomic_type_specifier,@emph{atomic type
specifiers}} are those @uref{glo_d.html#defined_name,@emph{defined
names}} listed in
@uref{sec_4-2-3.html#standardizedatomictypespecs,Figure 4-2}. Such
dictionary entries are of kind ``Class,'' ``Condition Type,'' ``System
Class,'' or ``Type.'' A description of how to interpret a
@uref{glo_s.html#symbol,@emph{symbol}} naming one of these
@uref{glo_t.html#type,@emph{types}} or
@uref{glo_c.html#class,@emph{classes}} as an
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}} is
found in the ``Description'' section of such dictionary entries.

The @uref{glo_c.html#compound_type_specifier,@emph{compound type
specifiers}} are those @uref{glo_d.html#defined_name,@emph{defined
names}} listed in
@uref{sec_4-2-3.html#standardizedcompoundtypespecnames,Figure 4-3}. Such
dictionary entries are of kind ``Class,'' ``System Class,'' ``Type,'' or
``Type Specifier.'' A description of how to interpret as a
@uref{glo_c.html#compound_type_specifier,@emph{compound type specifier}}
a @uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is such a
@uref{glo_s.html#symbol,@emph{symbol}} is found in the ``Compound Type
Specifier Kind,'' ``Compound Type Specifier Syntax,'' ``Compound Type
Specifier Arguments,'' and ``Compound Type Specifier Description''
sections of such dictionary entries.

@uref{sec_1-4-4-6-1.html,}

1.4.4.6.1 The ``Compound Type Specifier Kind'' Section of a Dictionary
Entry

@uref{sec_1-4-4-6-2.html,}

1.4.4.6.2 The ``Compound Type Specifier Syntax'' Section of a Dictionary
Entry

@uref{sec_1-4-4-6-3.html,}

1.4.4.6.3 The ``Compound Type Specifier Arguments'' Section of a
Dictionary Entry

@uref{sec_1-4-4-6-4.html,}

1.4.4.6.4 The ``Compound Type Specifier Description'' Section of a
Dictionary Entry

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.6.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-6-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-6-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.6.2 The ``Compound Type Specifier Syntax'' Section of a Dictionary
Entry

This information about a @uref{glo_t.html#type,@emph{type}} describes
the syntax of a @uref{glo_c.html#compound_type_specifier,@emph{compound
type specifier}} for that @uref{glo_t.html#type,@emph{type}}.

Whether or not the @uref{glo_t.html#type,@emph{type}} is acceptable as
an @uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}}
is not represented here; see @uref{sec_1-4-4-6.html,Section 1.4.4.6
(Dictionary Entries for Type Specifiers)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.6.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-6-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-6-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.6.3 The ``Compound Type Specifier Arguments'' Section of a
Dictionary Entry

This information describes @uref{glo_t.html#type,@emph{type}}
information for the structures defined in the ``Compound Type Specifier
Syntax'' section.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.6.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-6-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.6.4 The ``Compound Type Specifier Description'' Section of a
Dictionary Entry

This information describes the meaning of the structures defined in the
``Compound Type Specifier Syntax'' section.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.7
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-6-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.7 The ``Constant Value'' Section of a Dictionary Entry

This information describes the unchanging
@uref{glo_t.html#type,@emph{type}} and
@uref{glo_v.html#value,@emph{value}} of a
@uref{glo_c.html#constant_variable,@emph{constant variable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.8
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.8 The ``Description'' Section of a Dictionary Entry

A summary of the @uref{glo_o.html#operator,@emph{operator}} and all
intended aspects of the @uref{glo_o.html#operator,@emph{operator}}, but
does not necessarily include all the fields referenced below it (``Side
Effects,'' ``Exceptional Situations,'' @emph{etc}.)

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.4.4.9
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-8.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-4-4-10.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.4.4.9 The ``Examples'' Section of a Dictionary Entry

Examples of use of the @uref{glo_o.html#operator,@emph{operator}}. These
examples are not considered part of the standard; see
@uref{sec_1-4-3.html,Section 1.4.3 (Sections Not Formally Part Of This
Standard)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 15
@subsection CLHS: Section 1.5
@anchor{#clhs-section-1.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-4-4-22.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.5 Conformance

This standard presents the syntax and semantics to be implemented by a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} (and its accompanying documentation). In addition, it
imposes requirements on
@uref{glo_c.html#conforming_program,@emph{conforming programs}}.

@uref{sec_1-5-1.html,}

1.5.1 Conforming Implementations

@uref{sec_1-5-2.html,}

1.5.2 Conforming Programs

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 152::
@end menu

@node CLHS Section 152
@subsubsection CLHS: Section 1.5.2
@anchor{#clhs-section-1.5.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-5-1-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-5-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.5.2 Conforming Programs

Code conforming with the requirements of this standard shall adhere to
the following:

@enumerate 
@item
@uref{glo_c.html#conforming_code,@emph{Conforming code}} shall use only
those features of the language syntax and semantics that are either
specified in this standard or defined using the extension mechanisms
specified in the standard.
@item
@uref{glo_c.html#conforming_code,@emph{Conforming code}} may use
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
features and values, but shall not rely upon any particular
interpretation of these features and values other than those that are
discovered by the execution of @uref{glo_c.html#code,@emph{code}}.
@item
@uref{glo_c.html#conforming_code,@emph{Conforming code}} shall not
depend on the consequences of undefined or unspecified situations.
@item
@uref{glo_c.html#conforming_code,@emph{Conforming code}} does not use
any constructions that are prohibited by the standard.
@item
@uref{glo_c.html#conforming_code,@emph{Conforming code}} does not depend
on extensions included in an implementation.
@end enumerate

@uref{sec_1-5-2-1.html,}

1.5.2.1 Use of Implementation-Defined Language Features

@uref{sec_1-5-2-2.html,}

1.5.2.2 Character Set for Portable Code

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 1.5.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-5-2-1-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-5-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.5.2.2 Character Set for Portable Code

@uref{glo_p.html#portable,@emph{Portable}}
@uref{glo_c.html#code,@emph{code}} is written using only
@uref{glo_s.html#standard_character,@emph{standard characters}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 16
@subsection CLHS: Section 1.6
@anchor{#clhs-section-1.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-5-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.6 Language Extensions

A language extension is any documented
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
behavior of a @uref{glo_d.html#defined_name,@emph{defined name}} in this
standard that varies from the behavior described in this standard, or a
documented consequence of a situation that the standard specifies as
undefined, unspecified, or extendable by the implementation. For
example, if this standard says that ``the results are unspecified,'' an
extension would be to specify the results.

If the correct behavior of a program depends on the results provided by
an extension, only implementations with the same extension will execute
the program correctly. Note that such a program might be non-conforming.
Also, if this standard says that ``an implementation may be extended,''
a conforming, but possibly non-portable, program can be written using an
extension.

An implementation can have extensions, provided they do not alter the
behavior of conforming code and provided they are not explicitly
prohibited by this standard.

The term ``extension'' refers only to extensions available upon startup.
An implementation is free to allow or prohibit redefinition of an
extension.

The following list contains specific guidance to implementations
concerning certain types of extensions.

@strong{Extra return values}

An implementation must return exactly the number of return values
specified by this standard unless the standard specifically indicates
otherwise.

@strong{Unsolicited messages}

No output can be produced by a function other than that specified in the
standard or due to the signaling of
@uref{glo_c.html#condition,@emph{conditions}} detected by the function.

Unsolicited output, such as garbage collection notifications and
autoload heralds, should not go directly to the
@uref{glo_s.html#stream,@emph{stream}} that is the value of a
@uref{glo_s.html#stream,@emph{stream}} variable defined in this
standard, but can go indirectly to
@uref{glo_t.html#terminal_iSLo,@emph{terminal I/O}} by using a
@uref{glo_s.html#synonym_stream,@emph{synonym stream}} to
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

Progress reports from such functions as
@uref{fun_load.html#load,@strong{load}} and
@uref{fun_compile.html#compile,@strong{compile}} are considered
solicited, and are not covered by this prohibition.

@strong{Implementation of macros and special forms}

@uref{glo_m.html#macro,@emph{Macros}} and
@uref{glo_s.html#special_operator,@emph{special operators}} defined in
this standard must not be @uref{glo_f.html#function,@emph{functions}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss227.html,MACRO-AS-FUNCTION:DISALLOW}
@item
@uref{../Issues/iss358.html,UNSOLICITED-MESSAGES:NOT-TO-SYSTEM-USER-STREAMS}
@item
@uref{../Issues/iss156.html,EXTRA-RETURN-VALUES:NO}
@item
@uref{../Issues/iss154.html,EXTENSIONS-POSITION:DOCUMENTATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 17
@subsection CLHS: Section 1.7
@anchor{#clhs-section-1.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.7 Language Subsets

The language described in this standard contains no subsets, though
subsets are not forbidden.

For a language to be considered a subset, it must have the property that
any valid @uref{glo_p.html#program,@emph{program}} in that language has
equivalent semantics and will run directly (with no extralingual
pre-processing, and no special compatibility packages) in any
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} of the full language.

A language that conforms to this requirement shall be described as being
a ``subset of Common Lisp as specified by ANSI <<@emph{standard
number}>>.''

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss334.html,SUBSETTING-POSITION:NONE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 18
@subsection CLHS: Section 1.8
@anchor{#clhs-section-1.8}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-8-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.8 Deprecated Language Features

Deprecated language features are not expected to appear in future Common
Lisp tandards, but are required to be implemented for conformance with
this standard; see @uref{sec_1-5-1-1.html,Section 1.5.1.1 (Required
Language Features)}.

@uref{glo_c.html#conforming_program,@emph{Conforming programs}} can use
deprecated features; however, it is considered good programming style to
avoid them. It is permissible for the compiler to produce
@uref{glo_s.html#style_warning,@emph{style warnings}} about the use of
such features at compile time, but there should be no such warnings at
program execution time.

@uref{sec_1-8-1.html,}

1.8.1 Deprecated Functions

@uref{sec_1-8-2.html,}

1.8.2 Deprecated Argument Conventions

@uref{sec_1-8-3.html,}

1.8.3 Deprecated Variables

@uref{sec_1-8-4.html,}

1.8.4 Deprecated Reader Syntax

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 182::
* CLHS Section 183::
* CLHS Section 184::
@end menu

@node CLHS Section 182
@subsubsection CLHS: Section 1.8.2
@anchor{#clhs-section-1.8.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-8-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-8-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.8.2 Deprecated Argument Conventions

The ability to pass a numeric @uref{glo_a.html#argument,@emph{argument}}
to @uref{fun_gensym.html#gensym,@strong{gensym}} has been deprecated.

The :test-not @uref{glo_a.html#argument,@emph{argument}} to the
@uref{glo_f.html#function,@emph{functions}} in the next figure are
deprecated.

@verbatim
adjoin             nset-difference    search            
assoc              nset-exclusive-or  set-difference    
count              nsublis            set-exclusive-or  
delete             nsubst             sublis            
delete-duplicates  nsubstitute        subsetp           
find               nunion             subst             
intersection       position           substitute        
member             rassoc             tree-equal        
mismatch           remove             union             
nintersection      remove-duplicates                    
@end verbatim

@strong{Figure 1-3. Functions with Deprecated :TEST-NOT Arguments}

The use of the situation names
@uref{fun_compile.html#compile,@strong{compile}},
@uref{fun_load.html#load,@strong{load}}, and
@uref{fun_eval.html#eval,@strong{eval}} in
@uref{speope_eval-when.html#eval-when,@strong{eval-when}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss148.html,EVAL-WHEN-OBSOLETE-KEYWORDS:X3J13-MAR-1993}
@item
@uref{../Issues/iss147.html,EVAL-WHEN-NON-TOP-LEVEL:GENERALIZE-EVAL-NEW-KEYWORDS}
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss182.html,GENSYM-NAME-STICKINESS:LIKE-TEFLON}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 183
@subsubsection CLHS: Section 1.8.3
@anchor{#clhs-section-1.8.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-8-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-8-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.8.3 Deprecated Variables

The @uref{glo_v.html#variable,@emph{variable}}
@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}} is
deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss294.html,REQUIRE-PATHNAME-DEFAULTS-AGAIN:X3J13-DEC-91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 184
@subsubsection CLHS: Section 1.8.4
@anchor{#clhs-section-1.8.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-8-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_1-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_1-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.8.4 Deprecated Reader Syntax

The #S @uref{glo_r.html#reader_macro,@emph{reader macro}} forces keyword
names into the KEYWORD package; see @uref{sec_2-4-8-13.html,Section
2.4.8.13 (Sharpsign S)}. This feature is deprecated; in the future,
keyword names will be taken in the package they are read in, so
@uref{glo_s.html#symbol,@emph{symbols}} that are actually in the KEYWORD
package should be used if that is what is desired.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss331.html,STRUCTURE-READ-PRINT-SYNTAX:KEYWORDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 19
@subsection CLHS: Section 1.9
@anchor{#clhs-section-1.9}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-8-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-1.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-2.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
1.9 Symbols in the COMMON-LISP Package

The figures on the next twelve pages contain a complete enumeration of
the 978 @emph{external} @uref{glo_s.html#symbol,@emph{symbols}} in the
COMMON-LISP package.

@verbatim
&allow-other-keys            *print-miser-width*          
&aux                         *print-pprint-dispatch*      
&body                        *print-pretty*               
&environment                 *print-radix*                
&key                         *print-readably*             
&optional                    *print-right-margin*         
&rest                        *query-io*                   
&whole                       *random-state*               
*                            *read-base*                  
**                           *read-default-float-format*  
***                          *read-eval*                  
*break-on-signals*           *read-suppress*              
*compile-file-pathname*      *readtable*                  
*compile-file-truename*      *standard-input*             
*compile-print*              *standard-output*            
*compile-verbose*            *terminal-io*                
*debug-io*                   *trace-output*               
*debugger-hook*              +                            
*default-pathname-defaults*  ++                           
*error-output*               +++                          
*features*                   -                            
*gensym-counter*             /                            
*load-pathname*              //                           
*load-print*                 ///                          
*load-truename*              /=                           
*load-verbose*               1+                           
*macroexpand-hook*           1-                           
*modules*                    <                            
*package*                    <=                           
*print-array*                =                            
*print-base*                 >                            
*print-case*                 >=                           
*print-circle*               abort                        
*print-escape*               abs                          
*print-gensym*               acons                        
*print-length*               acos                         
*print-level*                acosh                        
*print-lines*                add-method                   
@end verbatim

@strong{Figure 1-4. Symbols in the COMMON-LISP package (part one of
twelve).}

@verbatim
adjoin                      atom          boundp                    
adjust-array                base-char     break                     
adjustable-array-p          base-string   broadcast-stream          
allocate-instance           bignum        broadcast-stream-streams  
alpha-char-p                bit           built-in-class            
alphanumericp               bit-and       butlast                   
and                         bit-andc1     byte                      
append                      bit-andc2     byte-position             
apply                       bit-eqv       byte-size                 
apropos                     bit-ior       caaaar                    
apropos-list                bit-nand      caaadr                    
aref                        bit-nor       caaar                     
arithmetic-error            bit-not       caadar                    
arithmetic-error-operands   bit-orc1      caaddr                    
arithmetic-error-operation  bit-orc2      caadr                     
array                       bit-vector    caar                      
array-dimension             bit-vector-p  cadaar                    
array-dimension-limit       bit-xor       cadadr                    
array-dimensions            block         cadar                     
array-displacement          boole         caddar                    
array-element-type          boole-1       cadddr                    
array-has-fill-pointer-p    boole-2       caddr                     
array-in-bounds-p           boole-and     cadr                      
array-rank                  boole-andc1   call-arguments-limit      
array-rank-limit            boole-andc2   call-method               
array-row-major-index       boole-c1      call-next-method          
array-total-size            boole-c2      car                       
array-total-size-limit      boole-clr     case                      
arrayp                      boole-eqv     catch                     
ash                         boole-ior     ccase                     
asin                        boole-nand    cdaaar                    
asinh                       boole-nor     cdaadr                    
assert                      boole-orc1    cdaar                     
assoc                       boole-orc2    cdadar                    
assoc-if                    boole-set     cdaddr                    
assoc-if-not                boole-xor     cdadr                     
atan                        boolean       cdar                      
atanh                       both-case-p   cddaar                    
@end verbatim

@strong{Figure 1-5. Symbols in the COMMON-LISP package (part two of
twelve).}

@verbatim
cddadr             clear-input                  copy-tree                  
cddar              clear-output                 cos                        
cdddar             close                        cosh                       
cddddr             clrhash                      count                      
cdddr              code-char                    count-if                   
cddr               coerce                       count-if-not               
cdr                compilation-speed            ctypecase                  
ceiling            compile                      debug                      
cell-error         compile-file                 decf                       
cell-error-name    compile-file-pathname        declaim                    
cerror             compiled-function            declaration                
change-class       compiled-function-p          declare                    
char               compiler-macro               decode-float               
char-code          compiler-macro-function      decode-universal-time      
char-code-limit    complement                   defclass                   
char-downcase      complex                      defconstant                
char-equal         complexp                     defgeneric                 
char-greaterp      compute-applicable-methods   define-compiler-macro      
char-int           compute-restarts             define-condition           
char-lessp         concatenate                  define-method-combination  
char-name          concatenated-stream          define-modify-macro        
char-not-equal     concatenated-stream-streams  define-setf-expander       
char-not-greaterp  cond                         define-symbol-macro        
char-not-lessp     condition                    defmacro                   
char-upcase        conjugate                    defmethod                  
char/=             cons                         defpackage                 
char<              consp                        defparameter               
char<=             constantly                   defsetf                    
char=              constantp                    defstruct                  
char>              continue                     deftype                    
char>=             control-error                defun                      
character          copy-alist                   defvar                     
characterp         copy-list                    delete                     
check-type         copy-pprint-dispatch         delete-duplicates          
cis                copy-readtable               delete-file                
class              copy-seq                     delete-if                  
class-name         copy-structure               delete-if-not              
class-of           copy-symbol                  delete-package             
@end verbatim

@strong{Figure 1-6. Symbols in the COMMON-LISP package (part three of
twelve).}

@verbatim
denominator                    eq                   
deposit-field                  eql                  
describe                       equal                
describe-object                equalp               
destructuring-bind             error                
digit-char                     etypecase            
digit-char-p                   eval                 
directory                      eval-when            
directory-namestring           evenp                
disassemble                    every                
division-by-zero               exp                  
do                             export               
do*                            expt                 
do-all-symbols                 extended-char        
do-external-symbols            fboundp              
do-symbols                     fceiling             
documentation                  fdefinition          
dolist                         ffloor               
dotimes                        fifth                
double-float                   file-author          
double-float-epsilon           file-error           
double-float-negative-epsilon  file-error-pathname  
dpb                            file-length          
dribble                        file-namestring      
dynamic-extent                 file-position        
ecase                          file-stream          
echo-stream                    file-string-length   
echo-stream-input-stream       file-write-date      
echo-stream-output-stream      fill                 
ed                             fill-pointer         
eighth                         find                 
elt                            find-all-symbols     
encode-universal-time          find-class           
end-of-file                    find-if              
endp                           find-if-not          
enough-namestring              find-method          
ensure-directories-exist       find-package         
ensure-generic-function        find-restart         
@end verbatim

@strong{Figure 1-7. Symbols in the COMMON-LISP package (part four of
twelve).}

@verbatim
find-symbol                       get-internal-run-time        
finish-output                     get-macro-character          
first                             get-output-stream-string     
fixnum                            get-properties               
flet                              get-setf-expansion           
float                             get-universal-time           
float-digits                      getf                         
float-precision                   gethash                      
float-radix                       go                           
float-sign                        graphic-char-p               
floating-point-inexact            handler-bind                 
floating-point-invalid-operation  handler-case                 
floating-point-overflow           hash-table                   
floating-point-underflow          hash-table-count             
floatp                            hash-table-p                 
floor                             hash-table-rehash-size       
fmakunbound                       hash-table-rehash-threshold  
force-output                      hash-table-size              
format                            hash-table-test              
formatter                         host-namestring              
fourth                            identity                     
fresh-line                        if                           
fround                            ignorable                    
ftruncate                         ignore                       
ftype                             ignore-errors                
funcall                           imagpart                     
function                          import                       
function-keywords                 in-package                   
function-lambda-expression        incf                         
functionp                         initialize-instance          
gcd                               inline                       
generic-function                  input-stream-p               
gensym                            inspect                      
gentemp                           integer                      
get                               integer-decode-float         
get-decoded-time                  integer-length               
get-dispatch-macro-character      integerp                     
get-internal-real-time            interactive-stream-p         
@end verbatim

@strong{Figure 1-8. Symbols in the COMMON-LISP package (part five of
twelve).}

@verbatim
intern                                  lisp-implementation-type            
internal-time-units-per-second          lisp-implementation-version         
intersection                            list                                
invalid-method-error                    list*                               
invoke-debugger                         list-all-packages                   
invoke-restart                          list-length                         
invoke-restart-interactively            listen                              
isqrt                                   listp                               
keyword                                 load                                
keywordp                                load-logical-pathname-translations  
labels                                  load-time-value                     
lambda                                  locally                             
lambda-list-keywords                    log                                 
lambda-parameters-limit                 logand                              
last                                    logandc1                            
lcm                                     logandc2                            
ldb                                     logbitp                             
ldb-test                                logcount                            
ldiff                                   logeqv                              
least-negative-double-float             logical-pathname                    
least-negative-long-float               logical-pathname-translations       
least-negative-normalized-double-float  logior                              
least-negative-normalized-long-float    lognand                             
least-negative-normalized-short-float   lognor                              
least-negative-normalized-single-float  lognot                              
least-negative-short-float              logorc1                             
least-negative-single-float             logorc2                             
least-positive-double-float             logtest                             
least-positive-long-float               logxor                              
least-positive-normalized-double-float  long-float                          
least-positive-normalized-long-float    long-float-epsilon                  
least-positive-normalized-short-float   long-float-negative-epsilon         
least-positive-normalized-single-float  long-site-name                      
least-positive-short-float              loop                                
least-positive-single-float             loop-finish                         
length                                  lower-case-p                        
let                                     machine-instance                    
let*                                    machine-type                        
@end verbatim

@strong{Figure 1-9. Symbols in the COMMON-LISP package (part six of
twelve).}

@verbatim
machine-version                mask-field                  
macro-function                 max                         
macroexpand                    member                      
macroexpand-1                  member-if                   
macrolet                       member-if-not               
make-array                     merge                       
make-broadcast-stream          merge-pathnames             
make-concatenated-stream       method                      
make-condition                 method-combination          
make-dispatch-macro-character  method-combination-error    
make-echo-stream               method-qualifiers           
make-hash-table                min                         
make-instance                  minusp                      
make-instances-obsolete        mismatch                    
make-list                      mod                         
make-load-form                 most-negative-double-float  
make-load-form-saving-slots    most-negative-fixnum        
make-method                    most-negative-long-float    
make-package                   most-negative-short-float   
make-pathname                  most-negative-single-float  
make-random-state              most-positive-double-float  
make-sequence                  most-positive-fixnum        
make-string                    most-positive-long-float    
make-string-input-stream       most-positive-short-float   
make-string-output-stream      most-positive-single-float  
make-symbol                    muffle-warning              
make-synonym-stream            multiple-value-bind         
make-two-way-stream            multiple-value-call         
makunbound                     multiple-value-list         
map                            multiple-value-prog1        
map-into                       multiple-value-setq         
mapc                           multiple-values-limit       
mapcan                         name-char                   
mapcar                         namestring                  
mapcon                         nbutlast                    
maphash                        nconc                       
mapl                           next-method-p               
maplist                        nil                         
@end verbatim

@strong{Figure 1-10. Symbols in the COMMON-LISP package (part seven of
twelve).}

@verbatim
nintersection         package-error                  
ninth                 package-error-package          
no-applicable-method  package-name                   
no-next-method        package-nicknames              
not                   package-shadowing-symbols      
notany                package-use-list               
notevery              package-used-by-list           
notinline             packagep                       
nreconc               pairlis                        
nreverse              parse-error                    
nset-difference       parse-integer                  
nset-exclusive-or     parse-namestring               
nstring-capitalize    pathname                       
nstring-downcase      pathname-device                
nstring-upcase        pathname-directory             
nsublis               pathname-host                  
nsubst                pathname-match-p               
nsubst-if             pathname-name                  
nsubst-if-not         pathname-type                  
nsubstitute           pathname-version               
nsubstitute-if        pathnamep                      
nsubstitute-if-not    peek-char                      
nth                   phase                          
nth-value             pi                             
nthcdr                plusp                          
null                  pop                            
number                position                       
numberp               position-if                    
numerator             position-if-not                
nunion                pprint                         
oddp                  pprint-dispatch                
open                  pprint-exit-if-list-exhausted  
open-stream-p         pprint-fill                    
optimize              pprint-indent                  
or                    pprint-linear                  
otherwise             pprint-logical-block           
output-stream-p       pprint-newline                 
package               pprint-pop                     
@end verbatim

@strong{Figure 1-11. Symbols in the COMMON-LISP package (part eight of
twelve).}

@verbatim
pprint-tab                 read-char                   
pprint-tabular             read-char-no-hang           
prin1                      read-delimited-list         
prin1-to-string            read-from-string            
princ                      read-line                   
princ-to-string            read-preserving-whitespace  
print                      read-sequence               
print-not-readable         reader-error                
print-not-readable-object  readtable                   
print-object               readtable-case              
print-unreadable-object    readtablep                  
probe-file                 real                        
proclaim                   realp                       
prog                       realpart                    
prog*                      reduce                      
prog1                      reinitialize-instance       
prog2                      rem                         
progn                      remf                        
program-error              remhash                     
progv                      remove                      
provide                    remove-duplicates           
psetf                      remove-if                   
psetq                      remove-if-not               
push                       remove-method               
pushnew                    remprop                     
quote                      rename-file                 
random                     rename-package              
random-state               replace                     
random-state-p             require                     
rassoc                     rest                        
rassoc-if                  restart                     
rassoc-if-not              restart-bind                
ratio                      restart-case                
rational                   restart-name                
rationalize                return                      
rationalp                  return-from                 
read                       revappend                   
read-byte                  reverse                     
@end verbatim

@strong{Figure 1-12. Symbols in the COMMON-LISP package (part nine of
twelve).}

@verbatim
room                          simple-bit-vector                  
rotatef                       simple-bit-vector-p                
round                         simple-condition                   
row-major-aref                simple-condition-format-arguments  
rplaca                        simple-condition-format-control    
rplacd                        simple-error                       
safety                        simple-string                      
satisfies                     simple-string-p                    
sbit                          simple-type-error                  
scale-float                   simple-vector                      
schar                         simple-vector-p                    
search                        simple-warning                     
second                        sin                                
sequence                      single-float                       
serious-condition             single-float-epsilon               
set                           single-float-negative-epsilon      
set-difference                sinh                               
set-dispatch-macro-character  sixth                              
set-exclusive-or              sleep                              
set-macro-character           slot-boundp                        
set-pprint-dispatch           slot-exists-p                      
set-syntax-from-char          slot-makunbound                    
setf                          slot-missing                       
setq                          slot-unbound                       
seventh                       slot-value                         
shadow                        software-type                      
shadowing-import              software-version                   
shared-initialize             some                               
shiftf                        sort                               
short-float                   space                              
short-float-epsilon           special                            
short-float-negative-epsilon  special-operator-p                 
short-site-name               speed                              
signal                        sqrt                               
signed-byte                   stable-sort                        
signum                        standard                           
simple-array                  standard-char                      
simple-base-string            standard-char-p                    
@end verbatim

@strong{Figure 1-13. Symbols in the COMMON-LISP package (part ten of
twelve).}

@verbatim
standard-class             sublis                      
standard-generic-function  subseq                      
standard-method            subsetp                     
standard-object            subst                       
step                       subst-if                    
storage-condition          subst-if-not                
store-value                substitute                  
stream                     substitute-if               
stream-element-type        substitute-if-not           
stream-error               subtypep                    
stream-error-stream        svref                       
stream-external-format     sxhash                      
streamp                    symbol                      
string                     symbol-function             
string-capitalize          symbol-macrolet             
string-downcase            symbol-name                 
string-equal               symbol-package              
string-greaterp            symbol-plist                
string-left-trim           symbol-value                
string-lessp               symbolp                     
string-not-equal           synonym-stream              
string-not-greaterp        synonym-stream-symbol       
string-not-lessp           t                           
string-right-trim          tagbody                     
string-stream              tailp                       
string-trim                tan                         
string-upcase              tanh                        
string/=                   tenth                       
string<                    terpri                      
string<=                   the                         
string=                    third                       
string>                    throw                       
string>=                   time                        
stringp                    trace                       
structure                  translate-logical-pathname  
structure-class            translate-pathname          
structure-object           tree-equal                  
style-warning              truename                    
@end verbatim

@strong{Figure 1-14. Symbols in the COMMON-LISP package (part eleven of
twelve).}

@verbatim
truncate                             values-list               
two-way-stream                       variable                  
two-way-stream-input-stream          vector                    
two-way-stream-output-stream         vector-pop                
type                                 vector-push               
type-error                           vector-push-extend        
type-error-datum                     vectorp                   
type-error-expected-type             warn                      
type-of                              warning                   
typecase                             when                      
typep                                wild-pathname-p           
unbound-slot                         with-accessors            
unbound-slot-instance                with-compilation-unit     
unbound-variable                     with-condition-restarts   
undefined-function                   with-hash-table-iterator  
unexport                             with-input-from-string    
unintern                             with-open-file            
union                                with-open-stream          
unless                               with-output-to-string     
unread-char                          with-package-iterator     
unsigned-byte                        with-simple-restart       
untrace                              with-slots                
unuse-package                        with-standard-io-syntax   
unwind-protect                       write                     
update-instance-for-different-class  write-byte                
update-instance-for-redefined-class  write-char                
upgraded-array-element-type          write-line                
upgraded-complex-part-type           write-sequence            
upper-case-p                         write-string              
use-package                          write-to-string           
use-value                            y-or-n-p                  
user-homedir-pathname                yes-or-no-p               
values                               zerop                     
@end verbatim

@strong{Figure 1-15. Symbols in the COMMON-LISP package (part twelve of
twelve).}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 10
@section CLHS: Chapter 10
@anchor{#clhs-chapter-10}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_abortcm_c_cm_use-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_10-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
10. Symbols

@uref{sec_10-1.html,}

10.1 Symbol Concepts

@uref{sec_the_symbols_dictionary.html,}

10.2 The Symbols Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Symbols Dictionary::
@end menu

@node CLHS Section The Symbols Dictionary
@subsection CLHS: Section The Symbols Dictionary
@anchor{#clhs-section-the-symbols-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_10-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-10.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_symbol.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
10.2 The Symbols Dictionary

@uref{syscla_symbol.html,@emph{System Class} @strong{SYMBOL}}

@uref{typ_keyword.html,@emph{Type} @strong{KEYWORD}}

@uref{fun_symbolp.html,@emph{Function} @strong{SYMBOLP}}

@uref{fun_keywordp.html,@emph{Function} @strong{KEYWORDP}}

@uref{fun_make-symbol.html,@emph{Function} @strong{MAKE-SYMBOL}}

@uref{fun_copy-symbol.html,@emph{Function} @strong{COPY-SYMBOL}}

@uref{fun_gensym.html,@emph{Function} @strong{GENSYM}}

@uref{var_stgensym-counterst.html,@emph{Variable}
@strong{*GENSYM-COUNTER*}}

@uref{fun_gentemp.html,@emph{Function} @strong{GENTEMP}}

@uref{acc_symbol-function.html,@emph{Accessor} @strong{SYMBOL-FUNCTION}}

@uref{fun_symbol-name.html,@emph{Function} @strong{SYMBOL-NAME}}

@uref{fun_symbol-package.html,@emph{Function} @strong{SYMBOL-PACKAGE}}

@uref{acc_symbol-plist.html,@emph{Accessor} @strong{SYMBOL-PLIST}}

@uref{acc_symbol-value.html,@emph{Accessor} @strong{SYMBOL-VALUE}}

@uref{acc_get.html,@emph{Accessor} @strong{GET}}

@uref{fun_remprop.html,@emph{Function} @strong{REMPROP}}

@uref{fun_boundp.html,@emph{Function} @strong{BOUNDP}}

@uref{fun_makunbound.html,@emph{Function} @strong{MAKUNBOUND}}

@uref{fun_set.html,@emph{Function} @strong{SET}}

@uref{contyp_unbound-variable.html,@emph{Condition Type}
@strong{UNBOUND-VARIABLE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor GET::
* CLHS Accessor SYMBOL-FUNCTION::
* CLHS Accessor SYMBOL-PLIST::
* CLHS Accessor SYMBOL-VALUE::
* CLHS Condition Type UNBOUND-VARIABLE::
* CLHS Function BOUNDP::
* CLHS Function COPY-SYMBOL::
* CLHS Function GENSYM::
* CLHS Function GENTEMP::
* CLHS Function KEYWORDP::
* CLHS Function MAKE-SYMBOL::
* CLHS Function MAKUNBOUND::
* CLHS Function REMPROP::
* CLHS Function SET::
* CLHS Function SYMBOL-NAME::
* CLHS Function SYMBOL-PACKAGE::
* CLHS Function SYMBOLP::
* CLHS Type KEYWORD::
* CLHS Variable *GENSYM-COUNTER*::
@end menu

@node CLHS Accessor GET
@subsubsection CLHS: Accessor GET
@anchor{#clhs-accessor-get}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_symbol-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_remprop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{GET}

@strong{Syntax:}

@strong{get} @emph{symbol indicator &optional default} => @emph{value}

(setf (@strong{get} @emph{symbol indicator &optional default})
@emph{new-value})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{indicator}---an @uref{glo_o.html#object,@emph{object}}.

@emph{default}---an @uref{glo_o.html#object,@emph{object}}. The default
is @uref{any_nil.html#nil,@strong{nil}}.

@emph{value}---if the indicated property exists, the
@uref{glo_o.html#object,@emph{object}} that is its
@uref{glo_v.html#value,@emph{value}}; otherwise, the specified
@emph{default}.

@emph{new-value}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#get,@strong{get}} finds a
@uref{glo_p.html#property,@emph{property}} on the
@uref{glo_p.html#property_list,@emph{property list}}[2] of @emph{symbol}
whose @uref{glo_p.html#property_indicator,@emph{property indicator}} is
@uref{glo_i.html#identical,@emph{identical}} to @emph{indicator}, and
returns its corresponding @uref{glo_p.html#property_value,@emph{property
value}}. If there are multiple
@uref{glo_p.html#property,@emph{properties}}[1] with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@ref{#get,@strong{get}} uses the first such
@uref{glo_p.html#property,@emph{property}}. If there is no
@uref{glo_p.html#property,@emph{property}} with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@emph{default} is returned.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#get,@strong{get}} may be used to associate a new
@uref{glo_o.html#object,@emph{object}} with an existing indicator
already on the @emph{symbol}'s
@uref{glo_p.html#property_list,@emph{property list}}, or to create a new
assocation if none exists. If there are multiple
@uref{glo_p.html#property,@emph{properties}}[1] with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#get,@strong{get}} associates the @emph{new-value} with the first
such @uref{glo_p.html#property,@emph{property}}. When a
@ref{#get,@strong{get}} @uref{glo_f.html#form,@emph{form}} is used as a
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} @emph{place}, any
@emph{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its
@uref{glo_v.html#value,@emph{value}} is ignored.

@strong{Examples:}

@verbatim
 (defun make-person (first-name last-name)
   (let ((person (gensym "PERSON")))
     (setf (get person 'first-name) first-name)
     (setf (get person 'last-name) last-name)
     person)) =>  MAKE-PERSON
 (defvar *john* (make-person "John" "Dow")) =>  *JOHN*
 *john* =>  #:PERSON4603
 (defvar *sally* (make-person "Sally" "Jones")) =>  *SALLY*
 (get *john* 'first-name) =>  "John"
 (get *sally* 'last-name) =>  "Jones"
 (defun marry (man woman married-name)
   (setf (get man 'wife) woman)
   (setf (get woman 'husband) man)
   (setf (get man 'last-name) married-name)
   (setf (get woman 'last-name) married-name)
   married-name) =>  MARRY
 (marry *john* *sally* "Dow-Jones") =>  "Dow-Jones"
 (get *john* 'last-name) =>  "Dow-Jones"
 (get (get *john* 'wife) 'first-name) =>  "Sally"
 (symbol-plist *john*)
=>  (WIFE #:PERSON4604 LAST-NAME "Dow-Jones" FIRST-NAME "John")
 (defmacro age (person &optional (default ''thirty-something)) 
   `(get ,person 'age ,default)) =>  AGE
 (age *john*) =>  THIRTY-SOMETHING
 (age *john* 20) =>  20
 (setf (age *john*) 25) =>  25
 (age *john*) =>  25
 (age *john* 20) =>  25
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{acc_getf.html#getf,@strong{getf}},
@uref{acc_symbol-plist.html#symbol-plist,@strong{symbol-plist}},
@uref{fun_remprop.html#remprop,@strong{remprop}}

@strong{Notes:}

@verbatim
 (get x y) ==  (getf (symbol-plist x) y)
@end verbatim

@uref{glo_n.html#number,@emph{Numbers}} and
@uref{glo_c.html#character,@emph{characters}} are not recommended for
use as @emph{indicators} in portable code since @ref{#get,@strong{get}}
tests with @uref{fun_eq.html#eq,@strong{eq}} rather than
@uref{fun_eql.html#eql,@strong{eql}}, and consequently the effect of
using such @emph{indicators} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

There is no way using @ref{#get,@strong{get}} to distinguish an absent
property from one whose value is @emph{default}. However, see
@uref{fun_get-properties.html#get-properties,@strong{get-properties}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss306.html,SETF-GET-DEFAULT:EVALUATED-BUT-IGNORED}
@item
@uref{../Issues/iss269.html,PLIST-DUPLICATES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor SYMBOL-FUNCTION
@subsubsection CLHS: Accessor SYMBOL-FUNCTION
@anchor{#clhs-accessor-symbol-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_gentemp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_symbol-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{SYMBOL-FUNCTION}

@strong{Syntax:}

@strong{symbol-function} @emph{symbol} => @emph{contents}

(setf (@strong{symbol-function} @emph{symbol}) @emph{new-contents})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{contents}--- If the @emph{symbol} is globally defined as a
@uref{glo_m.html#macro,@emph{macro}} or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
nature and identity is returned. If the @emph{symbol} is not globally
defined as either a @uref{glo_m.html#macro,@emph{macro}} or a
@uref{glo_s.html#special_operator,@emph{special operator}}, and if the
@emph{symbol} is @uref{glo_f.html#fbound,@emph{fbound}}, a
@uref{glo_f.html#function,@emph{function}}
@uref{glo_o.html#object,@emph{object}} is returned.

@emph{new-contents}---a @uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_f.html#function_cell,@emph{function cell}}.

@strong{Examples:}

@verbatim
 (symbol-function 'car) =>  #<FUNCTION CAR>
 (symbol-function 'twice) is an error   ;because TWICE isn't defined.
 (defun twice (n) (* n 2)) =>  TWICE
 (symbol-function 'twice) =>  #<FUNCTION TWICE>
 (list (twice 3)
       (funcall (function twice) 3)
       (funcall (symbol-function 'twice) 3))
=>  (6 6 6)
 (flet ((twice (x) (list x x)))
   (list (twice 3)
         (funcall (function twice) 3)
         (funcall (symbol-function 'twice) 3)))
=>  ((3 3) (3 3) 6)   
 (setf (symbol-function 'twice) #'(lambda (x) (list x x)))
=>  #<FUNCTION anonymous>
 (list (twice 3)
       (funcall (function twice) 3)
       (funcall (symbol-function 'twice) 3))
=>  ((3 3) (3 3) (3 3))
 (fboundp 'defun) =>  true
 (symbol-function 'defun)
=>  implementation-dependent
 (functionp (symbol-function 'defun))
=>  implementation-dependent
 (defun symbol-function-or-nil (symbol)
   (if (and (fboundp symbol) 
            (not (macro-function symbol))
            (not (special-operator-p symbol)))
       (symbol-function symbol)
       nil)) =>  SYMBOL-FUNCTION-OR-NIL
 (symbol-function-or-nil 'car) =>  #<FUNCTION CAR>
 (symbol-function-or-nil 'defun) =>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{mac_defun.html#defun,@strong{defun}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

Should signal
@uref{contyp_undefined-function.html#undefined-function,@strong{undefined-function}}
if @emph{symbol} is not @uref{glo_f.html#fbound,@emph{fbound}} and an
attempt is made to @uref{glo_r.html#read,@emph{read}} its definition.
(No such error is signaled on an attempt to
@uref{glo_w.html#write,@emph{write}} its definition.)

@strong{See Also:}

@uref{fun_fboundp.html#fboundp,@strong{fboundp}},
@uref{fun_fmakunbound.html#fmakunbound,@strong{fmakunbound}},
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{fun_special-operator-p.html#special-operator-p,@strong{special-operator-p}}

@strong{Notes:}

@ref{#symbol-function,@strong{symbol-function}} cannot
@uref{glo_a.html#access,@emph{access}} the value of a lexical function
name produced by
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}; it can
@uref{glo_a.html#access,@emph{access}} only the global function value.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} may be used with
@ref{#symbol-function,@strong{symbol-function}} to replace a global
function definition when the @uref{glo_s.html#symbol,@emph{symbol}}'s
function definition does not represent a
@uref{glo_s.html#special_operator,@emph{special operator}}.

@verbatim
(symbol-function symbol) ==  (fdefinition symbol)
@end verbatim

However, @uref{acc_fdefinition.html#fdefinition,@strong{fdefinition}}
accepts arguments other than just
@uref{glo_s.html#symbol,@emph{symbols}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss321.html,SPECIAL-FORM-P-MISNOMER:RENAME}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor SYMBOL-PLIST
@subsubsection CLHS: Accessor SYMBOL-PLIST
@anchor{#clhs-accessor-symbol-plist}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_symbol-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_symbol-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{SYMBOL-PLIST}

@strong{Syntax:}

@strong{symbol-plist} @emph{symbol} => @emph{plist}

(setf (@strong{symbol-plist} @emph{symbol}) @emph{new-plist})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{plist}, @emph{new-plist}---a
@uref{glo_p.html#property_list,@emph{property list}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_p.html#property_list,@emph{property list}} of @emph{symbol}.

@strong{Examples:}

@verbatim
 (setq sym (gensym)) =>  #:G9723
 (symbol-plist sym) =>  ()
 (setf (get sym 'prop1) 'val1) =>  VAL1
 (symbol-plist sym) =>  (PROP1 VAL1)
 (setf (get sym 'prop2) 'val2) =>  VAL2
 (symbol-plist sym) =>  (PROP2 VAL2 PROP1 VAL1)
 (setf (symbol-plist sym) (list 'prop3 'val3)) =>  (PROP3 VAL3)
 (symbol-plist sym) =>  (PROP3 VAL3)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{acc_get.html#get,@strong{get}},
@uref{fun_remprop.html#remprop,@strong{remprop}}

@strong{Notes:}

The use of @uref{mac_setfcm_psetf.html#setf,@strong{setf}} should be
avoided, since a @uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_p.html#property_list,@emph{property list}} is a global
resource that can contain information established and depended upon by
unrelated programs in the same @uref{glo_l.html#lisp_image,@emph{Lisp
image}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor SYMBOL-VALUE
@subsubsection CLHS: Accessor SYMBOL-VALUE
@anchor{#clhs-accessor-symbol-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_symbol-plist.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_get.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{SYMBOL-VALUE}

@strong{Syntax:}

@strong{symbol-value} @emph{symbol} => @emph{value}

(setf (@strong{symbol-value} @emph{symbol}) @emph{new-value})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}} that must have
a @uref{glo_v.html#value,@emph{value}}.

@emph{value}, @emph{new-value}---an
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_v.html#value_cell,@emph{value cell}}.

@strong{Examples:}

@verbatim
 (setf (symbol-value 'a) 1) =>  1
 (symbol-value 'a) =>  1
 ;; SYMBOL-VALUE cannot see lexical variables.
 (let ((a 2)) (symbol-value 'a)) =>  1
 (let ((a 2)) (setq a 3) (symbol-value 'a)) =>  1
 ;; SYMBOL-VALUE can see dynamic variables.
 (let ((a 2)) 
   (declare (special a)) 
   (symbol-value 'a)) =>  2
 (let ((a 2)) 
   (declare (special a)) 
   (setq a 3)
   (symbol-value 'a)) =>  3
 (let ((a 2))
   (setf (symbol-value 'a) 3)
   a) =>  2
 a =>  3
 (symbol-value 'a) =>  3
 (let ((a 4))
   (declare (special a))
   (let ((b (symbol-value 'a)))
     (setf (symbol-value 'a) 5)
     (values a b))) =>  5, 4
 a =>  3
 (symbol-value :any-keyword) =>  :ANY-KEYWORD
 (symbol-value 'nil) =>  NIL
 (symbol-value '()) =>  NIL
 ;; The precision of this next one is implementation-dependent.
 (symbol-value 'pi) =>  3.141592653589793d0  
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{fun_makunbound.html#makunbound,@strong{makunbound}},
@uref{fun_set.html#set,@strong{set}},
@uref{spefor_setq.html#setq,@strong{setq}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

Should signal
@uref{contyp_unbound-variable.html#unbound-variable,@strong{unbound-variable}}
if @emph{symbol} is @uref{glo_u.html#unbound,@emph{unbound}} and an
attempt is made to @uref{glo_r.html#read,@emph{read}} its
@uref{glo_v.html#value,@emph{value}}. (No such error is signaled on an
attempt to @uref{glo_w.html#write,@emph{write}} its
@uref{glo_v.html#value,@emph{value}}.)

@strong{See Also:}

@uref{fun_boundp.html#boundp,@strong{boundp}},
@uref{fun_makunbound.html#makunbound,@strong{makunbound}},
@uref{fun_set.html#set,@strong{set}},
@uref{spefor_setq.html#setq,@strong{setq}}

@strong{Notes:}

@ref{#symbol-value,@strong{symbol-value}} can be used to get the value
of a @uref{glo_c.html#constant_variable,@emph{constant variable}}.
@ref{#symbol-value,@strong{symbol-value}} cannot
@uref{glo_a.html#access,@emph{access}} the value of a
@uref{glo_l.html#lexical_variable,@emph{lexical variable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type UNBOUND-VARIABLE
@subsubsection CLHS: Condition Type UNBOUND-VARIABLE
@anchor{#clhs-condition-type-unbound-variable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-11.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{UNBOUND-VARIABLE}

@strong{Class Precedence List:}

@ref{#unbound-variable,@strong{unbound-variable}},
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#unbound-variable,@strong{unbound-variable}} consists of
@uref{glo_e.html#error,@emph{error}}
@uref{glo_c.html#condition,@emph{conditions}} that represent attempts to
@uref{glo_r.html#read,@emph{read}} the
@uref{glo_v.html#value,@emph{value}} of an
@uref{glo_u.html#unbound_variable,@emph{unbound variable}}.

The name of the cell (see
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}}) is the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_v.html#variable,@emph{variable}} that was
@uref{glo_u.html#unbound,@emph{unbound}}.

@strong{See Also:}

@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BOUNDP
@subsubsection CLHS: Function BOUNDP
@anchor{#clhs-function-boundp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_remprop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_makunbound.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BOUNDP}

@strong{Syntax:}

@strong{boundp} @emph{symbol} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{symbol} is
@uref{glo_b.html#bound,@emph{bound}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (setq x 1) =>  1
 (boundp 'x) =>  true
 (makunbound 'x) =>  X
 (boundp 'x) =>  false
 (let ((x 2)) (boundp 'x)) =>  false
 (let ((x 2)) (declare (special x)) (boundp 'x)) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{fun_set.html#set,@strong{set}},
@uref{spefor_setq.html#setq,@strong{setq}},
@uref{acc_symbol-value.html#symbol-value,@strong{symbol-value}},
@uref{fun_makunbound.html#makunbound,@strong{makunbound}}

@strong{Notes:}

The @uref{glo_f.html#function,@emph{function}} @strong{bound} determines
only whether a @uref{glo_s.html#symbol,@emph{symbol}} has a value in the
@uref{glo_g.html#global_environment,@emph{global environment}}; any
@uref{glo_l.html#lexical_binding,@emph{lexical bindings}} are ignored.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-SYMBOL
@subsubsection CLHS: Function COPY-SYMBOL
@anchor{#clhs-function-copy-symbol}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-symbol.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_gensym.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-SYMBOL}

@strong{Syntax:}

@strong{copy-symbol} @emph{symbol &optional copy-properties} =>
@emph{new-symbol}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{copy-properties}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{new-symbol}---a @uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

@ref{#copy-symbol,@strong{copy-symbol}} returns a
@uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}}, the
@uref{glo_n.html#name,@emph{name}} of which is
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}} to and
possibly the @uref{glo_s.html#same,@emph{same}} as the
@uref{glo_n.html#name,@emph{name}} of the given @emph{symbol}.

If @emph{copy-properties} is @uref{glo_f.html#false,@emph{false}}, the
@emph{new-symbol} is neither @uref{glo_b.html#bound,@emph{bound}} nor
@uref{glo_f.html#fbound,@emph{fbound}} and has a
@uref{glo_n.html#null,@emph{null}}
@uref{glo_p.html#property_list,@emph{property list}}. If
@emph{copy-properties} is @uref{glo_t.html#true,@emph{true}}, then the
initial @uref{glo_v.html#value,@emph{value}} of @emph{new-symbol} is the
@uref{glo_v.html#value,@emph{value}} of @emph{symbol}, the initial
@uref{glo_f.html#function,@emph{function}} definition of
@emph{new-symbol} is the
@uref{glo_f.html#functional_value,@emph{functional value}} of
@emph{symbol}, and the @uref{glo_p.html#property_list,@emph{property
list}} of @emph{new-symbol} is a @uref{glo_c.html#copy,@emph{copy}}[2]
of the @uref{glo_p.html#property_list,@emph{property list}} of
@emph{symbol}.

@strong{Examples:}

@verbatim
 (setq fred 'fred-smith) =>  FRED-SMITH
 (setf (symbol-value fred) 3) =>  3
 (setq fred-clone-1a (copy-symbol fred nil)) =>  #:FRED-SMITH
 (setq fred-clone-1b (copy-symbol fred nil)) =>  #:FRED-SMITH
 (setq fred-clone-2a (copy-symbol fred t))   =>  #:FRED-SMITH
 (setq fred-clone-2b (copy-symbol fred t))   =>  #:FRED-SMITH
 (eq fred fred-clone-1a) =>  false
 (eq fred-clone-1a fred-clone-1b) =>  false
 (eq fred-clone-2a fred-clone-2b) =>  false
 (eq fred-clone-1a fred-clone-2a) =>  false
 (symbol-value fred) =>  3
 (boundp fred-clone-1a) =>  false
 (symbol-value fred-clone-2a) =>  3
 (setf (symbol-value fred-clone-2a) 4) =>  4
 (symbol-value fred) =>  3
 (symbol-value fred-clone-2a) =>  4
 (symbol-value fred-clone-2b) =>  3
 (boundp fred-clone-1a) =>  false
 (setf (symbol-function fred) #'(lambda (x) x)) =>  #<FUNCTION anonymous>
 (fboundp fred) =>  true
 (fboundp fred-clone-1a) =>  false
 (fboundp fred-clone-2a) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{fun_make-symbol.html#make-symbol,@strong{make-symbol}}

@strong{Notes:}

Implementors are encouraged not to copy the
@uref{glo_s.html#string,@emph{string}} which is the
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_n.html#name,@emph{name}} unnecessarily. Unless there is a good
reason to do so, the normal implementation strategy is for the
@emph{new-symbol}'s @uref{glo_n.html#name,@emph{name}} to be
@uref{glo_i.html#identical,@emph{identical}} to the given
@emph{symbol}'s @uref{glo_n.html#name,@emph{name}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss087.html,COPY-SYMBOL-COPY-PLIST:COPY-LIST}
@item
@uref{../Issues/iss088.html,COPY-SYMBOL-PRINT-NAME:EQUAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GENSYM
@subsubsection CLHS: Function GENSYM
@anchor{#clhs-function-gensym}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-symbol.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stgensym-counterst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GENSYM}

@strong{Syntax:}

@strong{gensym} @emph{&optional x} => @emph{new-symbol}

@strong{Arguments and Values:}

@emph{x}---a @uref{glo_s.html#string,@emph{string}} or a non-negative
@uref{glo_i.html#integer,@emph{integer}}. Complicated defaulting
behavior; see below.

@emph{new-symbol}---a @uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

Creates and returns a @uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}}, as if by calling
@uref{fun_make-symbol.html#make-symbol,@strong{make-symbol}}. (The only
difference between @ref{#gensym,@strong{gensym}} and
@uref{fun_make-symbol.html#make-symbol,@strong{make-symbol}} is in how
the @emph{new-symbol}'s @uref{glo_n.html#name,@emph{name}} is
determined.)

The @uref{glo_n.html#name,@emph{name}} of the @emph{new-symbol} is the
concatenation of a prefix, which defaults to "G", and a suffix, which is
the decimal representation of a number that defaults to the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}.

If @emph{x} is supplied, and is a
@uref{glo_s.html#string,@emph{string}}, then that
@uref{glo_s.html#string,@emph{string}} is used as a prefix instead of
"G" for this call to @ref{#gensym,@strong{gensym}} only.

If @emph{x} is supplied, and is an
@uref{glo_i.html#integer,@emph{integer}}, then that
@uref{glo_i.html#integer,@emph{integer}}, instead of the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}},
is used as the suffix for this call to @ref{#gensym,@strong{gensym}}
only.

If and only if no explicit suffix is supplied,
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}
is incremented after it is used.

@strong{Examples:}

@verbatim
 (setq sym1 (gensym)) =>  #:G3142
 (symbol-package sym1) =>  NIL
 (setq sym2 (gensym 100)) =>  #:G100
 (setq sym3 (gensym 100)) =>  #:G100
 (eq sym2 sym3) =>  false
 (find-symbol "G100") =>  NIL, NIL
 (gensym "T") =>  #:T3143
 (gensym) =>  #:G3144
@end verbatim

@strong{Side Effects:}

Might increment
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}.

@strong{Affected By:}

@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if @emph{x}
is not a @uref{glo_s.html#string,@emph{string}} or a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_gentemp.html#gentemp,@strong{gentemp}},
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}

@strong{Notes:}

The ability to pass a numeric argument to @ref{#gensym,@strong{gensym}}
has been deprecated; explicitly @uref{glo_b.html#binding,@emph{binding}}
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}}
is now stylistically preferred. (The somewhat baroque conventions for
the optional argument are historical in nature, and supported primarily
for compatibility with older dialects of Lisp. In modern code, it is
recommended that the only kind of argument used be a string prefix. In
general, though, to obtain more flexible control of the
@emph{new-symbol}'s @uref{glo_n.html#name,@emph{name}}, consider using
@uref{fun_make-symbol.html#make-symbol,@strong{make-symbol}} instead.)

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss182.html,GENSYM-NAME-STICKINESS:LIKE-TEFLON}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GENTEMP
@subsubsection CLHS: Function GENTEMP
@anchor{#clhs-function-gentemp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stgensym-counterst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_symbol-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GENTEMP}

@strong{Syntax:}

@strong{gentemp} @emph{&optional prefix package} => @emph{new-symbol}

@strong{Arguments and Values:}

@emph{prefix}---a @uref{glo_s.html#string,@emph{string}}. The default is
"T".

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@emph{new-symbol}---a @uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_i.html#interned,@emph{interned}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

@ref{#gentemp,@strong{gentemp}} creates and returns a
@uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_s.html#symbol,@emph{symbol}},
@uref{glo_i.html#interned,@emph{interned}} in the indicated
@emph{package}. The @uref{glo_s.html#symbol,@emph{symbol}} is guaranteed
to be one that was not previously
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}. It is
neither @uref{glo_b.html#bound,@emph{bound}} nor
@uref{glo_f.html#fbound,@emph{fbound}}, and has a
@uref{glo_n.html#null,@emph{null}}
@uref{glo_p.html#property_list,@emph{property list}}.

The @uref{glo_n.html#name,@emph{name}} of the @emph{new-symbol} is the
concatenation of the @emph{prefix} and a suffix, which is taken from an
internal counter used only by @ref{#gentemp,@strong{gentemp}}. (If a
@uref{glo_s.html#symbol,@emph{symbol}} by that name is already
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}, the
counter is incremented as many times as is necessary to produce a
@uref{glo_n.html#name,@emph{name}} that is not already the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#symbol,@emph{symbol}}
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}.)

@strong{Examples:}

@verbatim
 (gentemp) =>  T1298
 (gentemp "FOO") =>  FOO1299
 (find-symbol "FOO1300") =>  NIL, NIL
 (gentemp "FOO") =>  FOO1300
 (find-symbol "FOO1300") =>  FOO1300, :INTERNAL
 (intern "FOO1301") =>  FOO1301, :INTERNAL
 (gentemp "FOO") =>  FOO1302
 (gentemp) =>  T1303
@end verbatim

@strong{Side Effects:}

Its internal counter is incremented one or more times.

@uref{glo_i.html#intern,@emph{Interns}} the @emph{new-symbol} in
@emph{package}.

@strong{Affected By:}

The current state of its internal counter, and the current state of the
@emph{package}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{prefix} is not a @uref{glo_s.html#string,@emph{string}}. Should
signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@strong{See Also:}

@uref{fun_gensym.html#gensym,@strong{gensym}}

@strong{Notes:}

The function @ref{#gentemp,@strong{gentemp}} is deprecated.

If @emph{package} is the KEYWORD package, the result is an
@uref{glo_e.html#external_symbol,@emph{external symbol}} of
@emph{package}. Otherwise, the result is an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}} of
@emph{package}.

The @ref{#gentemp,@strong{gentemp}} internal counter is independent of
@uref{var_stgensym-counterst.html#STgensym-counterST,@strong{*gensym-counter*}},
the counter used by @uref{fun_gensym.html#gensym,@strong{gensym}}. There
is no provision for accessing the @ref{#gentemp,@strong{gentemp}}
internal counter.

Just because @ref{#gentemp,@strong{gentemp}} creates a
@uref{glo_s.html#symbol,@emph{symbol}} which did not previously exist
does not mean that such a @uref{glo_s.html#symbol,@emph{symbol}} might
not be seen in the future (e.g., in a data file---perhaps even created
by the same program in another session). As such, this symbol is not
truly unique in the same sense as a
@uref{glo_g.html#gensym,@emph{gensym}} would be. In particular, programs
which do automatic code generation should be careful not to attach
global attributes to such generated
@uref{glo_s.html#symbol,@emph{symbols}} (e.g.,
@uref{dec_special.html#special,@strong{special}}
@uref{glo_d.html#declaration,@emph{declarations}}) and then write them
into a file because such global attributes might, in a different
session, end up applying to other
@uref{glo_s.html#symbol,@emph{symbols}} that were automatically
generated on another day for some other purpose.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function KEYWORDP
@subsubsection CLHS: Function KEYWORDP
@anchor{#clhs-function-keywordp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_symbolp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-symbol.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{KEYWORDP}

@strong{Syntax:}

@strong{keywordp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is a
@uref{glo_k.html#keyword,@emph{keyword}}[1]; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (keywordp 'elephant) =>  false
 (keywordp 12) =>  false
 (keywordp :test) =>  true
 (keywordp ':test) =>  true
 (keywordp nil) =>  false
 (keywordp :nil) =>  true
 (keywordp '(:test)) =>  false
 (keywordp "hello") =>  false
 (keywordp ":hello") =>  false
 (keywordp '&optional) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_constantp.html#constantp,@strong{constantp}},
@strong{keyword}, @uref{fun_symbolp.html#symbolp,@strong{symbolp}},
@uref{fun_symbol-package.html#symbol-package,@strong{symbol-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-SYMBOL
@subsubsection CLHS: Function MAKE-SYMBOL
@anchor{#clhs-function-make-symbol}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_keywordp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_copy-symbol.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-SYMBOL}

@strong{Syntax:}

@strong{make-symbol} @emph{name} => @emph{new-symbol}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#string,@emph{string}}.

@emph{new-symbol}---a @uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

@ref{#make-symbol,@strong{make-symbol}} creates and returns a
@uref{glo_f.html#fresh,@emph{fresh}},
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}} whose
@uref{glo_n.html#name,@emph{name}} is the given @emph{name}. The
@emph{new-symbol} is neither @uref{glo_b.html#bound,@emph{bound}} nor
@uref{glo_f.html#fbound,@emph{fbound}} and has a
@uref{glo_n.html#null,@emph{null}}
@uref{glo_p.html#property_list,@emph{property list}}.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether the @uref{glo_s.html#string,@emph{string}} that becomes the
@emph{new-symbol}'s @uref{glo_n.html#name,@emph{name}} is the given
@emph{name} or a copy of it. Once a
@uref{glo_s.html#string,@emph{string}} has been given as the @emph{name}
@uref{glo_a.html#argument,@emph{argument}} to
@ref{#make-symbol,@emph{make-symbol}}, the consequences are undefined if
a subsequent attempt is made to alter that
@uref{glo_s.html#string,@emph{string}}.

@strong{Examples:}

@verbatim
 (setq temp-string "temp") =>  "temp"
 (setq temp-symbol (make-symbol temp-string)) =>  #:|temp|
 (symbol-name temp-symbol) =>  "temp"
 (eq (symbol-name temp-symbol) temp-string) =>  implementation-dependent
 (find-symbol "temp") =>  NIL, NIL
 (eq (make-symbol temp-string) (make-symbol temp-string)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{name} is not a @uref{glo_s.html#string,@emph{string}}.

@strong{See Also:}

@uref{fun_copy-symbol.html#copy-symbol,@strong{copy-symbol}}

@strong{Notes:}

No attempt is made by @ref{#make-symbol,@strong{make-symbol}} to convert
the case of the @uref{glo_n.html#name,@emph{name}} to uppercase. The
only case conversion which ever occurs for
@uref{glo_s.html#symbol,@emph{symbols}} is done by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}. The program interface
to @uref{glo_s.html#symbol,@emph{symbol}} creation retains case, and the
program interface to interning symbols is case-sensitive.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKUNBOUND
@subsubsection CLHS: Function MAKUNBOUND
@anchor{#clhs-function-makunbound}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_boundp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKUNBOUND}

@strong{Syntax:}

@strong{makunbound} @emph{symbol} => @emph{symbol}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}

@strong{Description:}

Makes the @emph{symbol} be @uref{glo_u.html#unbound,@emph{unbound}},
regardless of whether it was previously
@uref{glo_b.html#bound,@emph{bound}}.

@strong{Examples:}

@verbatim
 (setf (symbol-value 'a) 1)
 (boundp 'a) =>  true
 a =>  1
 (makunbound 'a) =>  A
 (boundp 'a) =>  false
@end verbatim

@strong{Side Effects:}

The @uref{glo_v.html#value_cell,@emph{value cell}} of @emph{symbol} is
modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{fun_boundp.html#boundp,@strong{boundp}},
@uref{fun_fmakunbound.html#fmakunbound,@strong{fmakunbound}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REMPROP
@subsubsection CLHS: Function REMPROP
@anchor{#clhs-function-remprop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_get.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_boundp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REMPROP}

@strong{Syntax:}

@strong{remprop} @emph{symbol indicator} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{indicator}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#remprop,@strong{remprop}} removes from the
@uref{glo_p.html#property_list,@emph{property list}}[2] of @emph{symbol}
a @uref{glo_p.html#property,@emph{property}}[1] with a
@uref{glo_p.html#property_indicator,@emph{property indicator}}
@uref{glo_i.html#identical,@emph{identical}} to @emph{indicator}. If
there are multiple @uref{glo_p.html#property,@emph{properties}}[1] with
the @uref{glo_i.html#identical,@emph{identical}} key,
@ref{#remprop,@strong{remprop}} only removes the first such
@uref{glo_p.html#property,@emph{property}}.
@ref{#remprop,@strong{remprop}} returns
@uref{glo_f.html#false,@emph{false}} if no such
@uref{glo_p.html#property,@emph{property}} was found, or
@uref{glo_t.html#true,@emph{true}} if a property was found.

The @uref{glo_p.html#property_indicator,@emph{property indicator}} and
the corresponding @uref{glo_p.html#property_value,@emph{property value}}
are removed in an undefined order by destructively splicing the property
list. The permissible side-effects correspond to those permitted for
@uref{mac_remf.html#remf,@strong{remf}}, such that:

@verbatim
 (remprop x y) ==  (remf (symbol-plist x) y)
@end verbatim

@strong{Examples:}

@verbatim
 (setq test (make-symbol "PSEUDO-PI")) =>  #:PSEUDO-PI
 (symbol-plist test) =>  ()
 (setf (get test 'constant) t) =>  T
 (setf (get test 'approximation) 3.14) =>  3.14
 (setf (get test 'error-range) 'noticeable) =>  NOTICEABLE
 (symbol-plist test) 
=>  (ERROR-RANGE NOTICEABLE APPROXIMATION 3.14 CONSTANT T)
 (setf (get test 'approximation) nil) =>  NIL
 (symbol-plist test) 
=>  (ERROR-RANGE NOTICEABLE APPROXIMATION NIL CONSTANT T)
 (get test 'approximation) =>  NIL
 (remprop test 'approximation) =>  true
 (get test 'approximation) =>  NIL
 (symbol-plist test)
=>  (ERROR-RANGE NOTICEABLE CONSTANT T)
 (remprop test 'approximation) =>  NIL
 (symbol-plist test)
=>  (ERROR-RANGE NOTICEABLE CONSTANT T)
 (remprop test 'error-range) =>  true
 (setf (get test 'approximation) 3) =>  3
 (symbol-plist test)
=>  (APPROXIMATION 3 CONSTANT T)
@end verbatim

@strong{Side Effects:}

The @uref{glo_p.html#property_list,@emph{property list}} of
@emph{symbol} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{mac_remf.html#remf,@strong{remf}},
@uref{acc_symbol-plist.html#symbol-plist,@strong{symbol-plist}}

@strong{Notes:}

@uref{glo_n.html#number,@emph{Numbers}} and
@uref{glo_c.html#character,@emph{characters}} are not recommended for
use as @emph{indicators} in portable code since
@ref{#remprop,@strong{remprop}} tests with
@uref{fun_eq.html#eq,@strong{eq}} rather than
@uref{fun_eql.html#eql,@strong{eql}}, and consequently the effect of
using such @emph{indicators} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
Of course, if you've gotten as far as needing to remove such a
@uref{glo_p.html#property,@emph{property}}, you don't have much
choice---the time to have been thinking about this was when you used
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_get.html#get,@strong{get}} to establish the
@uref{glo_p.html#property,@emph{property}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss269.html,PLIST-DUPLICATES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET
@subsubsection CLHS: Function SET
@anchor{#clhs-function-set}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_makunbound.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_unbound-variable.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET}

@strong{Syntax:}

@strong{set} @emph{symbol value} => @emph{value}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#set,@strong{set}} changes the contents of the
@uref{glo_v.html#value_cell,@emph{value cell}} of
@uref{glo_s.html#symbol,@emph{symbol}} to the given
@uref{glo_v.html#value,@emph{value}}.

@verbatim
(set symbol value) ==  (setf (symbol-value symbol) value)
@end verbatim

@strong{Examples:}

@verbatim
 (setf (symbol-value 'n) 1) =>  1
 (set 'n 2) =>  2
 (symbol-value 'n) =>  2
 (let ((n 3))
   (declare (special n))
   (setq n (+ n 1))
   (setf (symbol-value 'n) (* n 10))
   (set 'n (+ (symbol-value 'n) n))
   n) =>  80
 n =>  2
 (let ((n 3))
   (setq n (+ n 1))
   (setf (symbol-value 'n) (* n 10))
   (set 'n (+ (symbol-value 'n) n))
   n) =>  4
 n =>  44
 (defvar *n* 2)
 (let ((*n* 3))
   (setq *n* (+ *n* 1))
   (setf (symbol-value '*n*) (* *n* 10))
   (set '*n* (+ (symbol-value '*n*) *n*))
   *n*) =>  80
  *n* =>  2
 (defvar *even-count* 0) =>  *EVEN-COUNT*
 (defvar *odd-count* 0) =>  *ODD-COUNT*
 (defun tally-list (list)
   (dolist (element list)
     (set (if (evenp element) '*even-count* '*odd-count*)
          (+ element (if (evenp element) *even-count* *odd-count*)))))
 (tally-list '(1 9 4 3 2 7)) =>  NIL
 *even-count* =>  6
 *odd-count* =>  20
@end verbatim

@strong{Side Effects:}

The @uref{glo_v.html#value,@emph{value}} of @emph{symbol} is changed.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{spefor_setq.html#setq,@strong{setq}},
@uref{speope_progv.html#progv,@strong{progv}},
@uref{acc_symbol-value.html#symbol-value,@strong{symbol-value}}

@strong{Notes:}

The function @ref{#set,@strong{set}} is deprecated.

@ref{#set,@strong{set}} cannot change the value of a
@uref{glo_l.html#lexical_variable,@emph{lexical variable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SYMBOL-NAME
@subsubsection CLHS: Function SYMBOL-NAME
@anchor{#clhs-function-symbol-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_symbol-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_symbol-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SYMBOL-NAME}

@strong{Syntax:}

@strong{symbol-name} @emph{symbol} => @emph{name}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{name}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

@ref{#symbol-name,@strong{symbol-name}} returns the
@uref{glo_n.html#name,@emph{name}} of @emph{symbol}. The consequences
are undefined if @emph{name} is ever modified.

@strong{Examples:}

@verbatim
 (symbol-name 'temp) =>  "TEMP" 
 (symbol-name :start) =>  "START"
 (symbol-name (gensym)) =>  "G1234" ;for example
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss214.html,LISP-SYMBOL-REDEFINITION:MAR89-X3J13}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SYMBOL-PACKAGE
@subsubsection CLHS: Function SYMBOL-PACKAGE
@anchor{#clhs-function-symbol-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_symbol-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_symbol-plist.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SYMBOL-PACKAGE}

@strong{Syntax:}

@strong{symbol-package} @emph{symbol} => @emph{contents}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{contents}---a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns the @uref{glo_h.html#home_package,@emph{home package}} of
@emph{symbol}.

@strong{Examples:}

@verbatim
 (in-package "CL-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (symbol-package 'car) =>  #<PACKAGE "COMMON-LISP">
 (symbol-package 'bus) =>  #<PACKAGE "COMMON-LISP-USER">
 (symbol-package :optional) =>  #<PACKAGE "KEYWORD">
 ;; Gensyms are uninterned, so have no home package.
 (symbol-package (gensym)) =>  NIL
 (make-package 'pk1) =>  #<PACKAGE "PK1">
 (intern "SAMPLE1" "PK1") =>  PK1::SAMPLE1, NIL
 (export (find-symbol "SAMPLE1" "PK1") "PK1") =>  T
 (make-package 'pk2 :use '(pk1)) =>  #<PACKAGE "PK2">
 (find-symbol "SAMPLE1" "PK2") =>  PK1:SAMPLE1, :INHERITED
 (symbol-package 'pk1::sample1) =>  #<PACKAGE "PK1">
 (symbol-package 'pk2::sample1) =>  #<PACKAGE "PK1">
 (symbol-package 'pk1::sample2) =>  #<PACKAGE "PK1">
 (symbol-package 'pk2::sample2) =>  #<PACKAGE "PK2">
 ;; The next several forms create a scenario in which a symbol
 ;; is not really uninterned, but is "apparently uninterned",
 ;; and so SYMBOL-PACKAGE still returns NIL.
 (setq s3 'pk1::sample3) =>  PK1::SAMPLE3
 (import s3 'pk2) =>  T
 (unintern s3 'pk1) =>  T
 (symbol-package s3) =>  NIL
 (eq s3 'pk2::sample3) =>  T
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{fun_import.html#import,@strong{import}},
@uref{fun_intern.html#intern,@strong{intern}},
@uref{fun_unintern.html#unintern,@strong{unintern}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{symbol} is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{fun_intern.html#intern,@strong{intern}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SYMBOLP
@subsubsection CLHS: Function SYMBOLP
@anchor{#clhs-function-symbolp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_keyword.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_keywordp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SYMBOLP}

@strong{Syntax:}

@strong{symbolp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_symbol.html#symbol,@strong{symbol}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (symbolp 'elephant) =>  true
 (symbolp 12) =>  false
 (symbolp nil) =>  true
 (symbolp '()) =>  true
 (symbolp :test) =>  true
 (symbolp "hello") =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_keywordp.html#keywordp,@strong{keywordp}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{fun_typep.html#typep,@strong{typep}}

@strong{Notes:}

@verbatim
 (symbolp object) ==  (typep object 'symbol)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type KEYWORD
@subsubsection CLHS: Type KEYWORD
@anchor{#clhs-type-keyword}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_symbol.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_symbolp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{KEYWORD}

@strong{Supertypes:}

@ref{#keyword,@strong{keyword}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#keyword,@strong{keyword}}
includes all @uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_i.html#interned,@emph{interned}} the KEYWORD package.

@emph{Interning} a @uref{glo_s.html#symbol,@emph{symbol}} in the KEYWORD
package has three automatic effects:

1. It causes the @uref{glo_s.html#symbol,@emph{symbol}} to become
@uref{glo_b.html#bound,@emph{bound}} to itself.

2. It causes the @uref{glo_s.html#symbol,@emph{symbol}} to become an
@uref{glo_e.html#external_symbol,@emph{external symbol}} of the KEYWORD
package.

3. It causes the @uref{glo_s.html#symbol,@emph{symbol}} to become a
@uref{glo_c.html#constant_variable,@emph{constant variable}}.

@strong{See Also:}

@uref{fun_keywordp.html#keywordp,@strong{keywordp}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *GENSYM-COUNTER*
@subsubsection CLHS: Variable *GENSYM-COUNTER*
@anchor{#clhs-variable-gensym-counter}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_gensym.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_symbols_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_gentemp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*GENSYM-COUNTER*}

@strong{Value Type:}

a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

A number which will be used in constructing the
@uref{glo_n.html#name,@emph{name}} of the next
@uref{glo_s.html#symbol,@emph{symbol}} generated by the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_gensym.html#gensym,@strong{gensym}}.

@ref{#STgensym-counterST,@strong{*gensym-counter*}} can be either
@emph{assigned} or @uref{glo_b.html#bound,@emph{bound}} at any time, but
its value must always be a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Examples:} None.

@strong{Affected By:}

@uref{fun_gensym.html#gensym,@strong{gensym}}.

@strong{See Also:}

@uref{fun_gensym.html#gensym,@strong{gensym}}

@strong{Notes:}

The ability to pass a numeric argument to
@uref{fun_gensym.html#gensym,@strong{gensym}} has been deprecated;
explicitly @uref{glo_b.html#binding,@emph{binding}}
@ref{#STgensym-counterST,@strong{*gensym-counter*}} is now stylistically
preferred.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss182.html,GENSYM-NAME-STICKINESS:LIKE-TEFLON}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 11
@section CLHS: Chapter 11
@anchor{#clhs-chapter-11}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_unbound-variable.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_11-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
11. Packages

@uref{sec_11-1.html,}

11.1 Package Concepts

@uref{sec_the_packa_s_dictionary.html,}

11.2 The Packages Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Packages Dictionary::
@end menu

@node CLHS Section The Packages Dictionary
@subsection CLHS: Section The Packages Dictionary
@anchor{#clhs-section-the-packages-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_11-1-2-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-11.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
11.2 The Packages Dictionary

@uref{syscla_package.html,@emph{System Class} @strong{PACKAGE}}

@uref{fun_export.html,@emph{Function} @strong{EXPORT}}

@uref{fun_find-symbol.html,@emph{Function} @strong{FIND-SYMBOL}}

@uref{fun_find-package.html,@emph{Function} @strong{FIND-PACKAGE}}

@uref{fun_find-all-symbols.html,@emph{Function}
@strong{FIND-ALL-SYMBOLS}}

@uref{fun_import.html,@emph{Function} @strong{IMPORT}}

@uref{fun_list-all-packages.html,@emph{Function}
@strong{LIST-ALL-PACKAGES}}

@uref{fun_rename-package.html,@emph{Function} @strong{RENAME-PACKAGE}}

@uref{fun_shadow.html,@emph{Function} @strong{SHADOW}}

@uref{fun_shadowing-import.html,@emph{Function}
@strong{SHADOWING-IMPORT}}

@uref{fun_delete-package.html,@emph{Function} @strong{DELETE-PACKAGE}}

@uref{fun_make-package.html,@emph{Function} @strong{MAKE-PACKAGE}}

@uref{mac_with-package-iterator.html,@emph{Macro}
@strong{WITH-PACKAGE-ITERATOR}}

@uref{fun_unexport.html,@emph{Function} @strong{UNEXPORT}}

@uref{fun_unintern.html,@emph{Function} @strong{UNINTERN}}

@uref{mac_in-package.html,@emph{Macro} @strong{IN-PACKAGE}}

@uref{fun_unuse-package.html,@emph{Function} @strong{UNUSE-PACKAGE}}

@uref{fun_use-package.html,@emph{Function} @strong{USE-PACKAGE}}

@uref{mac_defpackage.html,@emph{Macro} @strong{DEFPACKAGE}}

@uref{mac_do-symbol_-all-symbols.html,@emph{Macro} @strong{DO-SYMBOLS,
DO-EXTERNAL-SYMBOLS, DO-ALL-SYMBOLS}}

@uref{fun_intern.html,@emph{Function} @strong{INTERN}}

@uref{fun_package-name.html,@emph{Function} @strong{PACKAGE-NAME}}

@uref{fun_package-nicknames.html,@emph{Function}
@strong{PACKAGE-NICKNAMES}}

@uref{fun_package-s_wing-symbols.html,@emph{Function}
@strong{PACKAGE-SHADOWING-SYMBOLS}}

@uref{fun_package-use-list.html,@emph{Function}
@strong{PACKAGE-USE-LIST}}

@uref{fun_package-used-by-list.html,@emph{Function}
@strong{PACKAGE-USED-BY-LIST}}

@uref{fun_packagep.html,@emph{Function} @strong{PACKAGEP}}

@uref{var_stpackagest.html,@emph{Variable} @strong{*PACKAGE*}}

@uref{contyp_package-error.html,@emph{Condition Type}
@strong{PACKAGE-ERROR}}

@uref{fun_package-error-package.html,@emph{Function}
@strong{PACKAGE-ERROR-PACKAGE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Condition Type PACKAGE-ERROR::
* CLHS Function DELETE-PACKAGE::
* CLHS Function EXPORT::
* CLHS Function FIND-ALL-SYMBOLS::
* CLHS Function FIND-PACKAGE::
* CLHS Function FIND-SYMBOL::
* CLHS Function IMPORT::
* CLHS Function INTERN::
* CLHS Function LIST-ALL-PACKAGES::
* CLHS Function MAKE-PACKAGE::
* CLHS Function PACKAGE-ERROR-PACKAGE::
* CLHS Function PACKAGE-NAME::
* CLHS Function PACKAGE-NICKNAMES::
* CLHS Function PACKAGE-SHADOWING-SYMBOLS::
* CLHS Function PACKAGE-USE-LIST::
* CLHS Function PACKAGE-USED-BY-LIST::
* CLHS Function PACKAGEP::
* CLHS Function RENAME-PACKAGE::
* CLHS Function SHADOW::
* CLHS Function SHADOWING-IMPORT::
* CLHS Function UNEXPORT::
* CLHS Function UNINTERN::
* CLHS Function UNUSE-PACKAGE::
* CLHS Function USE-PACKAGE::
* CLHS Macro DEFPACKAGE::
* CLHS Macro DO-SYMBOLS DO-EXTERNAL-SYMBOLS::
* CLHS Macro IN-PACKAGE::
* CLHS Macro WITH-PACKAGE-ITERATOR::
* CLHS Variable *PACKAGE*::
@end menu

@node CLHS Condition Type PACKAGE-ERROR
@subsubsection CLHS: Condition Type PACKAGE-ERROR
@anchor{#clhs-condition-type-package-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stpackagest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-error-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{PACKAGE-ERROR}

@strong{Class Precedence List:}

@ref{#package-error,@strong{package-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#package-error,@strong{package-error}} consists of
@uref{glo_e.html#error,@emph{error}}
@uref{glo_c.html#condition,@emph{conditions}} related to operations on
@uref{glo_p.html#package,@emph{packages}}. The offending
@uref{glo_p.html#package,@emph{package}} (or
@uref{glo_p.html#package,@emph{package}}
@uref{glo_n.html#name,@emph{name}}) is initialized by the
:packageinitialization argument to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_package-error-package.html#package-error-package,@strong{package-error-package}}.

@strong{See Also:}

@uref{fun_package-error-package.html#package-error-package,@strong{package-error-package}},
@uref{chap-9.html,Section 9 (Conditions)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DELETE-PACKAGE
@subsubsection CLHS: Function DELETE-PACKAGE
@anchor{#clhs-function-delete-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_shadowing-import.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DELETE-PACKAGE}

@strong{Syntax:}

@strong{delete-package} @emph{package} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#delete-package,@strong{delete-package}} deletes @emph{package}
from all package system data structures. If the operation is successful,
@ref{#delete-package,@strong{delete-package}} returns true, otherwise
@uref{any_nil.html#nil,@strong{nil}}. The effect of
@ref{#delete-package,@strong{delete-package}} is that the name and
nicknames of @emph{package} cease to be recognized package names. The
package @uref{glo_o.html#object,@emph{object}} is still a
@uref{glo_p.html#package,@emph{package}} (i.e.,
@uref{fun_packagep.html#packagep,@strong{packagep}} is
@uref{glo_t.html#true,@emph{true}} of it) but
@uref{fun_package-name.html#package-name,@strong{package-name}} returns
@uref{any_nil.html#nil,@strong{nil}}. The consequences of deleting the
COMMON-LISP package or the KEYWORD package are undefined. The
consequences of invoking any other package operation on @emph{package}
once it has been deleted are unspecified. In particular, the
consequences of invoking
@uref{fun_find-symbol.html#find-symbol,@strong{find-symbol}},
@uref{fun_intern.html#intern,@strong{intern}} and other functions that
look for a symbol name in a @uref{glo_p.html#package,@emph{package}} are
unspecified if they are called with
@uref{var_stpackagest.html#STpackageST,@strong{*package*}} bound to the
deleted @emph{package} or with the deleted @emph{package} as an
argument.

If @emph{package} is a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} that has already been deleted,
@ref{#delete-package,@strong{delete-package}} immediately returns
@uref{any_nil.html#nil,@strong{nil}}.

After this operation completes, the
@uref{glo_h.html#home_package,@emph{home package}} of any
@uref{glo_s.html#symbol,@emph{symbol}} whose
@uref{glo_h.html#home_package,@emph{home package}} had previously been
@emph{package} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
Except for this, @uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package} are not
modified in any other way; @uref{glo_s.html#symbol,@emph{symbols}} whose
@uref{glo_h.html#home_package,@emph{home package}} is not @emph{package}
remain unchanged.

@strong{Examples:}

@verbatim
 (setq *foo-package* (make-package "FOO" :use nil))
 (setq *foo-symbol*  (intern "FOO" *foo-package*))
 (export *foo-symbol* *foo-package*)

 (setq *bar-package* (make-package "BAR" :use '("FOO")))
 (setq *bar-symbol*  (intern "BAR" *bar-package*))
 (export *foo-symbol* *bar-package*)
 (export *bar-symbol* *bar-package*)

 (setq *baz-package* (make-package "BAZ" :use '("BAR")))

 (symbol-package *foo-symbol*) =>  #<PACKAGE "FOO">
 (symbol-package *bar-symbol*) =>  #<PACKAGE "BAR">

 (prin1-to-string *foo-symbol*) =>  "FOO:FOO"
 (prin1-to-string *bar-symbol*) =>  "BAR:BAR"

 (find-symbol "FOO" *bar-package*) =>  FOO:FOO, :EXTERNAL

 (find-symbol "FOO" *baz-package*) =>  FOO:FOO, :INHERITED
 (find-symbol "BAR" *baz-package*) =>  BAR:BAR, :INHERITED

 (packagep *foo-package*) =>  true
 (packagep *bar-package*) =>  true
 (packagep *baz-package*) =>  true

 (package-name *foo-package*) =>  "FOO"
 (package-name *bar-package*) =>  "BAR"
 (package-name *baz-package*) =>  "BAZ"

 (package-use-list *foo-package*) =>  ()
 (package-use-list *bar-package*) =>  (#<PACKAGE "FOO">)
 (package-use-list *baz-package*) =>  (#<PACKAGE "BAR">)

 (package-used-by-list *foo-package*) =>  (#<PACKAGE "BAR">)
 (package-used-by-list *bar-package*) =>  (#<PACKAGE "BAZ">)
 (package-used-by-list *baz-package*) =>  ()

 (delete-package *bar-package*)
>>  Error: Package BAZ uses package BAR.
>>  If continued, BAZ will be made to unuse-package BAR,
>>  and then BAR will be deleted.
>>  Type :CONTINUE to continue.
>>  Debug> :CONTINUE
=>  T

 (symbol-package *foo-symbol*) =>  #<PACKAGE "FOO">
 (symbol-package *bar-symbol*) is unspecified

 (prin1-to-string *foo-symbol*) =>  "FOO:FOO"
 (prin1-to-string *bar-symbol*) is unspecified

 (find-symbol "FOO" *bar-package*) is unspecified

 (find-symbol "FOO" *baz-package*) =>  NIL, NIL
 (find-symbol "BAR" *baz-package*) =>  NIL, NIL

 (packagep *foo-package*) =>  T
 (packagep *bar-package*) =>  T
 (packagep *baz-package*) =>  T

 (package-name *foo-package*) =>  "FOO"
 (package-name *bar-package*) =>  NIL
 (package-name *baz-package*) =>  "BAZ"

 (package-use-list *foo-package*) =>  ()
 (package-use-list *bar-package*) is unspecified
 (package-use-list *baz-package*) =>  ()

 (package-used-by-list *foo-package*) =>  ()
 (package-used-by-list *bar-package*) is unspecified
 (package-used-by-list *baz-package*) =>  ()
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If the @emph{package} @uref{glo_d.html#designator,@emph{designator}} is
a @uref{glo_n.html#name,@emph{name}} that does not currently name a
@uref{glo_p.html#package,@emph{package}}, a
@uref{glo_c.html#correctable,@emph{correctable}} error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled. If correction is attempted, no deletion action is attempted;
instead, @ref{#delete-package,@strong{delete-package}} immediately
returns @uref{any_nil.html#nil,@strong{nil}}.

If @emph{package} is used by other
@uref{glo_p.html#package,@emph{packages}}, a
@uref{glo_c.html#correctable,@emph{correctable}} error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled. If correction is attempted,
@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}} is
effectively called to remove any dependencies, causing @emph{package}'s
@uref{glo_e.html#external_symbol,@emph{external symbols}} to cease being
@uref{glo_a.html#accessible,@emph{accessible}} to those
@uref{glo_p.html#package,@emph{packages}} that use @emph{package}.
@ref{#delete-package,@strong{delete-package}} then deletes
@emph{package} just as it would have had there been no
@uref{glo_p.html#package,@emph{packages}} that used it.

@strong{See Also:}

@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@item
@uref{../Issues/iss253.html,PACKAGE-DELETION:NEW-FUNCTION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EXPORT
@subsubsection CLHS: Function EXPORT
@anchor{#clhs-function-export}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_find-symbol.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EXPORT}

@strong{Syntax:}

@strong{export} @emph{symbols &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{symbols}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#export,@strong{export}} makes one or more @emph{symbols} that are
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}
(whether directly or by inheritance) be
@uref{glo_e.html#external_symbol,@emph{external symbols}} of that
@emph{package}.

If any of the @emph{symbols} is already
@uref{glo_a.html#accessible,@emph{accessible}} as an
@uref{glo_e.html#external_symbol,@emph{external symbol}} of
@emph{package}, @ref{#export,@strong{export}} has no effect on that
@uref{glo_s.html#symbol,@emph{symbol}}. If the @emph{symbol} is
@uref{glo_p.html#present,@emph{present}} in @emph{package} as an
internal symbol, it is simply changed to external status. If it is
@uref{glo_a.html#accessible,@emph{accessible}} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}} via
@uref{fun_use-package.html#use-package,@strong{use-package}}, it is
first @emph{imported} into @emph{package}, then
@uref{glo_e.html#exported,@emph{exported}}. (The @emph{symbol} is then
@uref{glo_p.html#present,@emph{present}} in the @emph{package} whether
or not @emph{package} continues to use the
@uref{glo_p.html#package,@emph{package}} through which the
@uref{glo_s.html#symbol,@emph{symbol}} was originally inherited.)

@ref{#export,@strong{export}} makes each @emph{symbol}
@uref{glo_a.html#accessible,@emph{accessible}} to all the
@uref{glo_p.html#package,@emph{packages}} that use @emph{package}. All
of these @uref{glo_p.html#package,@emph{packages}} are checked for name
conflicts: (export @emph{s} @emph{p}) does (find-symbol (symbol-name
@emph{s}) @emph{q}) for each package @emph{q} in (package-used-by-list
@emph{p}). Note that in the usual case of an
@ref{#export,@strong{export}} during the initial definition of a
@uref{glo_p.html#package,@emph{package}}, the result of
@uref{fun_package-used-by-list.html#package-used-by-list,@strong{package-used-by-list}}
is @uref{any_nil.html#nil,@strong{nil}} and the name-conflict checking
takes negligible time. When multiple changes are to be made, for example
when @ref{#export,@strong{export}} is given a @emph{list} of
@emph{symbols}, it is permissible for the implementation to process each
change separately, so that aborting from a name conflict caused by any
but the first @emph{symbol} in the @uref{glo_l.html#list,@emph{list}}
does not unexport the first @emph{symbol} in the @emph{list}. However,
aborting from a name-conflict error caused by
@ref{#export,@strong{export}} of one of @emph{symbols} does not leave
that @uref{glo_s.html#symbol,@emph{symbol}}
@uref{glo_a.html#accessible,@emph{accessible}} to some
@uref{glo_p.html#package,@emph{packages}} and
@uref{glo_i.html#inaccessible,@emph{inaccessible}} to others; with
respect to each of @emph{symbols} processed,
@ref{#export,@strong{export}} behaves as if it were as an atomic
operation.

A name conflict in @ref{#export,@strong{export}} between one of
@emph{symbols} being exported and a
@uref{glo_s.html#symbol,@emph{symbol}} already
@uref{glo_p.html#present,@emph{present}} in a
@uref{glo_p.html#package,@emph{package}} that would inherit the
newly-exported @uref{glo_s.html#symbol,@emph{symbol}} may be resolved in
favor of the exported @uref{glo_s.html#symbol,@emph{symbol}} by
uninterning the other one, or in favor of the already-present
@uref{glo_s.html#symbol,@emph{symbol}} by making it a shadowing symbol.

@strong{Examples:}

@verbatim
 (make-package 'temp :use nil) =>  #<PACKAGE "TEMP">
 (use-package 'temp) =>  T
 (intern "TEMP-SYM" 'temp) =>  TEMP::TEMP-SYM, NIL
 (find-symbol "TEMP-SYM") =>  NIL, NIL
 (export (find-symbol "TEMP-SYM" 'temp) 'temp) =>  T
 (find-symbol "TEMP-SYM") =>  TEMP-SYM, :INHERITED
@end verbatim

@strong{Side Effects:}

The package system is modified.

@strong{Affected By:}

@uref{glo_a.html#accessible,@emph{Accessible}}
@uref{glo_s.html#symbol,@emph{symbols}}.

@strong{Exceptional Situations:}

If any of the @emph{symbols} is not
@uref{glo_a.html#accessible,@emph{accessible}} at all in @emph{package},
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled that is @uref{glo_c.html#correctable,@emph{correctable}} by
permitting the @uref{glo_u.html#user,@emph{user}} to interactively
specify whether that @uref{glo_s.html#symbol,@emph{symbol}} should be
@emph{imported}.

@strong{See Also:}

@uref{fun_import.html#import,@strong{import}},
@uref{fun_unexport.html#unexport,@strong{unexport}},
@uref{sec_11-1.html,Section 11.1 (Package Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FIND-ALL-SYMBOLS
@subsubsection CLHS: Function FIND-ALL-SYMBOLS
@anchor{#clhs-function-find-all-symbols}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_find-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_import.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FIND-ALL-SYMBOLS}

@strong{Syntax:}

@strong{find-all-symbols} @emph{string} => @emph{symbols}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{symbols}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@strong{Description:}

@ref{#find-all-symbols,@strong{find-all-symbols}} searches every
@uref{glo_r.html#registered_package,@emph{registered package}} for
@uref{glo_s.html#symbol,@emph{symbols}} that have a
@uref{glo_n.html#name,@emph{name}} that is the
@uref{glo_s.html#same,@emph{same}} (under
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}}) as
@emph{string}. A @uref{glo_l.html#list,@emph{list}} of all such
@uref{glo_s.html#symbol,@emph{symbols}} is returned. Whether or how the
@uref{glo_l.html#list,@emph{list}} is ordered is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Examples:}

@verbatim
 (find-all-symbols 'car)
=>  (CAR)
OR=>  (CAR VEHICLES:CAR)
OR=>  (VEHICLES:CAR CAR)
 (intern "CAR" (make-package 'temp :use nil)) =>  TEMP::CAR, NIL
 (find-all-symbols 'car)
=>  (TEMP::CAR CAR)
OR=>  (CAR TEMP::CAR)
OR=>  (TEMP::CAR CAR VEHICLES:CAR)
OR=>  (CAR TEMP::CAR VEHICLES:CAR)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_find-symbol.html#find-symbol,@strong{find-symbol}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss253.html,PACKAGE-DELETION:NEW-FUNCTION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FIND-PACKAGE
@subsubsection CLHS: Function FIND-PACKAGE
@anchor{#clhs-function-find-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_find-symbol.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_find-all-symbols.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FIND-PACKAGE}

@strong{Syntax:}

@strong{find-package} @emph{name} => @emph{package}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#string_designator,@emph{string
designator}} or a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}}.

@emph{package}---a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

If @emph{name} is a @uref{glo_s.html#string_designator,@emph{string
designator}}, @ref{#find-package,@strong{find-package}} locates and
returns the @uref{glo_p.html#package,@emph{package}} whose name or
nickname is @emph{name}. This search is case sensitive. If there is no
such @uref{glo_p.html#package,@emph{package}},
@ref{#find-package,@strong{find-package}} returns
@uref{any_nil.html#nil,@strong{nil}}.

If @emph{name} is a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}}, that
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} is returned.

@strong{Examples:}

@verbatim
 (find-package 'common-lisp) =>  #<PACKAGE "COMMON-LISP">
 (find-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (find-package 'not-there) =>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The set of @uref{glo_p.html#package,@emph{packages}} created by the
@uref{glo_i.html#implementation,@emph{implementation}}.

@uref{mac_defpackage.html#defpackage,@strong{defpackage}},
@uref{fun_delete-package.html#delete-package,@strong{delete-package}},
@uref{fun_make-package.html#make-package,@strong{make-package}},
@uref{fun_rename-package.html#rename-package,@strong{rename-package}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-package.html#make-package,@strong{make-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FIND-SYMBOL
@subsubsection CLHS: Function FIND-SYMBOL
@anchor{#clhs-function-find-symbol}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_export.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_find-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FIND-SYMBOL}

@strong{Syntax:}

@strong{find-symbol} @emph{string &optional package} => @emph{symbol,
status}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}} accessible in
the @emph{package}, or @uref{any_nil.html#nil,@strong{nil}}.

@emph{status}---one of :inherited, :external, :internal, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#find-symbol,@strong{find-symbol}} locates a
@uref{glo_s.html#symbol,@emph{symbol}} whose
@uref{glo_n.html#name,@emph{name}} is @emph{string} in a
@uref{glo_p.html#package,@emph{package}}. If a
@uref{glo_s.html#symbol,@emph{symbol}} named @emph{string} is found in
@emph{package}, directly or by inheritance, the
@uref{glo_s.html#symbol,@emph{symbol}} found is returned as the first
value; the second value is as follows:

:internal

If the @uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_p.html#present,@emph{present}} in @emph{package} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}.

:external

If the @uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_p.html#present,@emph{present}} in @emph{package} as an
@uref{glo_e.html#external_symbol,@emph{external symbol}}.

:inherited

If the @uref{glo_s.html#symbol,@emph{symbol}} is inherited by
@emph{package} through
@uref{fun_use-package.html#use-package,@strong{use-package}}, but is not
@uref{glo_p.html#present,@emph{present}} in @emph{package}.

If no such @uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}, both
values are @uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (find-symbol "NEVER-BEFORE-USED") =>  NIL, NIL
 (find-symbol "NEVER-BEFORE-USED") =>  NIL, NIL
 (intern "NEVER-BEFORE-USED") =>  NEVER-BEFORE-USED, NIL
 (intern "NEVER-BEFORE-USED") =>  NEVER-BEFORE-USED, :INTERNAL
 (find-symbol "NEVER-BEFORE-USED") =>  NEVER-BEFORE-USED, :INTERNAL
 (find-symbol "never-before-used") =>  NIL, NIL
 (find-symbol "CAR" 'common-lisp-user) =>  CAR, :INHERITED
 (find-symbol "CAR" 'common-lisp) =>  CAR, :EXTERNAL
 (find-symbol "NIL" 'common-lisp-user) =>  NIL, :INHERITED
 (find-symbol "NIL" 'common-lisp) =>  NIL, :EXTERNAL
 (find-symbol "NIL" (prog1 (make-package "JUST-TESTING" :use '())
                           (intern "NIL" "JUST-TESTING")))
=>  JUST-TESTING::NIL, :INTERNAL
 (export 'just-testing::nil 'just-testing)
 (find-symbol "NIL" 'just-testing) =>  JUST-TESTING:NIL, :EXTERNAL
 (find-symbol "NIL" "KEYWORD")
=>  NIL, NIL
OR=>  :NIL, :EXTERNAL
 (find-symbol (symbol-name :nil) "KEYWORD") =>  :NIL, :EXTERNAL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{fun_intern.html#intern,@strong{intern}},
@uref{fun_import.html#import,@strong{import}},
@uref{fun_export.html#export,@strong{export}},
@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_unintern.html#unintern,@strong{unintern}},
@uref{fun_unexport.html#unexport,@strong{unexport}},
@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_intern.html#intern,@strong{intern}},
@uref{fun_find-all-symbols.html#find-all-symbols,@strong{find-all-symbols}}

@strong{Notes:}

@ref{#find-symbol,@strong{find-symbol}} is operationally equivalent to
@uref{fun_intern.html#intern,@strong{intern}}, except that it never
creates a new @uref{glo_s.html#symbol,@emph{symbol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function IMPORT
@subsubsection CLHS: Function IMPORT
@anchor{#clhs-function-import}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_find-all-symbols.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_list-all-packages.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{IMPORT}

@strong{Syntax:}

@strong{import} @emph{symbols &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{symbols}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#import,@strong{import}} adds @emph{symbol} or @emph{symbols} to
the internals of @emph{package}, checking for name conflicts with
existing @uref{glo_s.html#symbol,@emph{symbols}} either
@uref{glo_p.html#present,@emph{present}} in @emph{package} or
@uref{glo_a.html#accessible,@emph{accessible}} to it. Once the
@emph{symbols} have been @emph{imported}, they may be referenced in the
@emph{importing} @emph{package} without the use of a
@uref{glo_p.html#package_prefix,@emph{package prefix}} when using the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

A name conflict in @ref{#import,@strong{import}} between the
@emph{symbol} being imported and a symbol inherited from some other
@uref{glo_p.html#package,@emph{package}} can be resolved in favor of the
@emph{symbol} being @emph{imported} by making it a shadowing symbol, or
in favor of the @uref{glo_s.html#symbol,@emph{symbol}} already
@uref{glo_a.html#accessible,@emph{accessible}} by not doing the
@ref{#import,@strong{import}}. A name conflict in
@ref{#import,@strong{import}} with a
@uref{glo_s.html#symbol,@emph{symbol}} already
@uref{glo_p.html#present,@emph{present}} in the @emph{package} may be
resolved by uninterning that @uref{glo_s.html#symbol,@emph{symbol}}, or
by not doing the @ref{#import,@strong{import}}.

The imported @uref{glo_s.html#symbol,@emph{symbol}} is not automatically
exported from the @uref{glo_c.html#current_package,@emph{current
package}}, but if it is already @uref{glo_p.html#present,@emph{present}}
and external, then the fact that it is external is not changed. If any
@uref{glo_s.html#symbol,@emph{symbol}} to be @emph{imported} has no home
package (i.e., (symbol-package @emph{symbol}) => nil),
@ref{#import,@strong{import}} sets the
@uref{glo_h.html#home_package,@emph{home package}} of the @emph{symbol}
to @emph{package}.

If the @emph{symbol} is already @uref{glo_p.html#present,@emph{present}}
in the importing @emph{package}, @ref{#import,@strong{import}} has no
effect.

@strong{Examples:}

@verbatim
 (import 'common-lisp::car (make-package 'temp :use nil)) =>  T
 (find-symbol "CAR" 'temp) =>  CAR, :INTERNAL
 (find-symbol "CDR" 'temp) =>  NIL, NIL 
@end verbatim

The form (import 'editor:buffer) takes the external symbol named buffer
in the EDITOR package (this symbol was located when the form was read by
the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}}) and adds it to the
@uref{glo_c.html#current_package,@emph{current package}} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}. The symbol
buffer is then @uref{glo_p.html#present,@emph{present}} in the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Side Effects:}

The package system is modified.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:}

@ref{#import,@strong{import}} signals a
@uref{glo_c.html#correctable,@emph{correctable}} error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} if
any of the @emph{symbols} to be @emph{imported} has the
@uref{glo_s.html#same,@emph{same}} @uref{glo_n.html#name,@emph{name}}
(under @uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}})
as some distinct @uref{glo_s.html#symbol,@emph{symbol}} (under
@uref{fun_eql.html#eql,@strong{eql}}) already
@uref{glo_a.html#accessible,@emph{accessible}} in the @emph{package},
even if the conflict is with a
@uref{glo_s.html#shadowing_symbol,@emph{shadowing symbol}} of the
@emph{package}.

@strong{See Also:}

@uref{fun_shadow.html#shadow,@strong{shadow}},
@uref{fun_export.html#export,@strong{export}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss194.html,IMPORT-SETF-SYMBOL-PACKAGE}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INTERN
@subsubsection CLHS: Function INTERN
@anchor{#clhs-function-intern}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_do-symbol_-all-symbols.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INTERN}

@strong{Syntax:}

@strong{intern} @emph{string &optional package} => @emph{symbol, status}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{status}---one of :inherited, :external, :internal, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#intern,@strong{intern}} enters a
@uref{glo_s.html#symbol,@emph{symbol}} named @emph{string} into
@emph{package}. If a @uref{glo_s.html#symbol,@emph{symbol}} whose name
is the same as @emph{string} is already
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}, it is
returned. If no such @uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}, a new
@uref{glo_s.html#symbol,@emph{symbol}} with the given name is created
and entered into @emph{package} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}, or as an
@uref{glo_e.html#external_symbol,@emph{external symbol}} if the
@emph{package} is the KEYWORD package; @emph{package} becomes the
@uref{glo_h.html#home_package,@emph{home package}} of the created
@uref{glo_s.html#symbol,@emph{symbol}}.

The first value returned by @ref{#intern,@strong{intern}},
@emph{symbol}, is the @uref{glo_s.html#symbol,@emph{symbol}} that was
found or created. The meaning of the
@uref{glo_s.html#secondary_value,@emph{secondary value}}, @emph{status},
is as follows:

:internal

The @uref{glo_s.html#symbol,@emph{symbol}} was found and is
@uref{glo_p.html#present,@emph{present}} in @emph{package} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}.

:external

The @uref{glo_s.html#symbol,@emph{symbol}} was found and is
@uref{glo_p.html#present,@emph{present}} as an
@uref{glo_e.html#external_symbol,@emph{external symbol}}.

:inherited

The @uref{glo_s.html#symbol,@emph{symbol}} was found and is inherited
via @uref{fun_use-package.html#use-package,@strong{use-package}} (which
implies that the @uref{glo_s.html#symbol,@emph{symbol}} is internal).

@uref{any_nil.html#nil,@strong{nil}}

No pre-existing @uref{glo_s.html#symbol,@emph{symbol}} was found, so one
was created.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether the @uref{glo_s.html#string,@emph{string}} that becomes the new
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_n.html#name,@emph{name}} is the given @emph{string} or a copy
of it. Once a @uref{glo_s.html#string,@emph{string}} has been given as
the @emph{string} @uref{glo_a.html#argument,@emph{argument}} to
@uref{glo_i.html#intern,@emph{intern}} in this situation where a new
@uref{glo_s.html#symbol,@emph{symbol}} is created, the consequences are
undefined if a subsequent attempt is made to alter that
@uref{glo_s.html#string,@emph{string}}.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (intern "Never-Before") =>  |Never-Before|, NIL
 (intern "Never-Before") =>  |Never-Before|, :INTERNAL 
 (intern "NEVER-BEFORE" "KEYWORD") =>  :NEVER-BEFORE, NIL
 (intern "NEVER-BEFORE" "KEYWORD") =>  :NEVER-BEFORE, :EXTERNAL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_find-symbol.html#find-symbol,@strong{find-symbol}},
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{fun_unintern.html#unintern,@strong{unintern}},
@uref{sec_2-3-4.html,Section 2.3.4 (Symbols as Tokens)}

@strong{Notes:}

@ref{#intern,@strong{intern}} does not need to do any name conflict
checking because it never creates a new
@uref{glo_s.html#symbol,@emph{symbol}} if there is already an
@uref{glo_a.html#accessible,@emph{accessible}}
@uref{glo_s.html#symbol,@emph{symbol}} with the name given.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LIST-ALL-PACKAGES
@subsubsection CLHS: Function LIST-ALL-PACKAGES
@anchor{#clhs-function-list-all-packages}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_import.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rename-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LIST-ALL-PACKAGES}

@strong{Syntax:}

@strong{list-all-packages} @emph{@emph{<no arguments>}} =>
@emph{packages}

@strong{Arguments and Values:}

@emph{packages}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{objects}}.

@strong{Description:}

@ref{#list-all-packages,@strong{list-all-packages}} returns a
@uref{glo_f.html#fresh,@emph{fresh}} @uref{glo_l.html#list,@emph{list}}
of all @uref{glo_r.html#registered_package,@emph{registered packages}}.

@strong{Examples:}

@verbatim
 (let ((before (list-all-packages)))
    (make-package 'temp)
    (set-difference (list-all-packages) before)) =>  (#<PACKAGE "TEMP">)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{mac_defpackage.html#defpackage,@strong{defpackage}},
@uref{fun_delete-package.html#delete-package,@strong{delete-package}},
@uref{fun_make-package.html#make-package,@strong{make-package}}

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss253.html,PACKAGE-DELETION:NEW-FUNCTION}
@item
@uref{../Issues/iss298.html,RESULT-LISTS-SHARED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-PACKAGE
@subsubsection CLHS: Function MAKE-PACKAGE
@anchor{#clhs-function-make-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_delete-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-package-iterator.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-PACKAGE}

@strong{Syntax:}

@strong{make-package} @emph{package-name &key nicknames use} =>
@emph{package}

@strong{Arguments and Values:}

@emph{package-name}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{nicknames}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string_designator,@emph{string designators}}. The
default is the @uref{glo_e.html#empty_list,@emph{empty list}}.

@emph{use}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package_designator,@emph{package designators}}. The
default is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@emph{package}---a @uref{glo_p.html#package,@emph{package}}.

@strong{Description:}

Creates a new @uref{glo_p.html#package,@emph{package}} with the name
@emph{package-name}.

@emph{Nicknames} are additional @uref{glo_n.html#name,@emph{names}}
which may be used to refer to the new
@uref{glo_p.html#package,@emph{package}}.

@emph{use} specifies zero or more
@uref{glo_p.html#package,@emph{packages}} the
@uref{glo_e.html#external_symbol,@emph{external symbols}} of which are
to be inherited by the new @uref{glo_p.html#package,@emph{package}}. See
the @uref{glo_f.html#function,@emph{function}}
@uref{fun_use-package.html#use-package,@strong{use-package}}.

@strong{Examples:}

@verbatim
 (make-package 'temporary :nicknames '("TEMP" "temp")) =>  #<PACKAGE "TEMPORARY">
 (make-package "OWNER" :use '("temp")) =>  #<PACKAGE "OWNER">
 (package-used-by-list 'temp) =>  (#<PACKAGE "OWNER">)
 (package-use-list 'owner) =>  (#<PACKAGE "TEMPORARY">)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The existence of other @uref{glo_p.html#package,@emph{packages}} in the
system.

@strong{Exceptional Situations:}

The consequences are unspecified if
@uref{glo_p.html#package,@emph{packages}} denoted by @emph{use} do not
exist.

A @uref{glo_c.html#correctable,@emph{correctable}} error is signaled if
the @emph{package-name} or any of the @emph{nicknames} is already the
@uref{glo_n.html#name,@emph{name}} or
@uref{glo_n.html#nickname,@emph{nickname}} of an existing
@uref{glo_p.html#package,@emph{package}}.

@strong{See Also:}

@uref{mac_defpackage.html#defpackage,@strong{defpackage}},
@uref{fun_use-package.html#use-package,@strong{use-package}}

@strong{Notes:}

In situations where the @uref{glo_p.html#package,@emph{packages}} to be
used contain symbols which would conflict, it is necessary to first
create the package with :use '(), then to use
@uref{fun_shadow.html#shadow,@strong{shadow}} or
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}}
to address the conflicts, and then after that to use
@uref{fun_use-package.html#use-package,@strong{use-package}} once the
conflicts have been addressed.

When packages are being created as part of the static definition of a
program rather than dynamically by the program, it is generally
considered more stylistically appropriate to use
@uref{mac_defpackage.html#defpackage,@strong{defpackage}} rather than
@ref{#make-package,@strong{make-package}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss238.html,MAKE-PACKAGE-USE-DEFAULT:IMPLEMENTATION-DEPENDENT}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-ERROR-PACKAGE
@subsubsection CLHS: Function PACKAGE-ERROR-PACKAGE
@anchor{#clhs-function-package-error-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_package-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-12.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-ERROR-PACKAGE}

@strong{Syntax:}

@strong{package-error-package} @emph{condition} => @emph{package}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@strong{Description:}

Returns a @uref{glo_d.html#designator,@emph{designator}} for the
offending @uref{glo_p.html#package,@emph{package}} in the
@uref{glo_s.html#situation,@emph{situation}} represented by the
@emph{condition}.

@strong{Examples:}

@verbatim
 (package-error-package 
   (make-condition 'package-error
     :package (find-package "COMMON-LISP")))
=>  #<Package "COMMON-LISP">
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_package-error.html#package-error,@strong{package-error}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-NAME
@subsubsection CLHS: Function PACKAGE-NAME
@anchor{#clhs-function-package-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_intern.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-nicknames.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-NAME}

@strong{Syntax:}

@strong{package-name} @emph{package} => @emph{name}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{name}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#package-name,@strong{package-name}} returns the
@uref{glo_s.html#string,@emph{string}} that names @emph{package}, or
@uref{any_nil.html#nil,@strong{nil}} if the @emph{package}
@uref{glo_d.html#designator,@emph{designator}} is a
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} that has no name (see the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_delete-package.html#delete-package,@strong{delete-package}}).

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (package-name *package*) =>  "COMMON-LISP-USER"
 (package-name (symbol-package :test)) =>  "KEYWORD"
 (package-name (find-package 'common-lisp)) =>  "COMMON-LISP"
@end verbatim

@verbatim
 (defvar *foo-package* (make-package "FOO"))
 (rename-package "FOO" "FOO0")
 (package-name *foo-package*) =>  "FOO0"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss253.html,PACKAGE-DELETION:NEW-FUNCTION}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-NICKNAMES
@subsubsection CLHS: Function PACKAGE-NICKNAMES
@anchor{#clhs-function-package-nicknames}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-s_wing-symbols.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-NICKNAMES}

@strong{Syntax:}

@strong{package-nicknames} @emph{package} => @emph{nicknames}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{nicknames}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string,@emph{strings}}.

@strong{Description:}

Returns the @uref{glo_l.html#list,@emph{list}} of nickname
@uref{glo_s.html#string,@emph{strings}} for @emph{package}, not
including the name of @emph{package}.

@strong{Examples:}

@verbatim
 (package-nicknames (make-package 'temporary
                                   :nicknames '("TEMP" "temp")))
=>  ("temp" "TEMP") 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-SHADOWING-SYMBOLS
@subsubsection CLHS: Function PACKAGE-SHADOWING-SYMBOLS
@anchor{#clhs-function-package-shadowing-symbols}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-nicknames.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-use-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-SHADOWING-SYMBOLS}

@strong{Syntax:}

@strong{package-shadowing-symbols} @emph{package} => @emph{symbols}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{symbols}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}} that have been declared as
@uref{glo_s.html#shadowing_symbol,@emph{shadowing symbols}} in
@emph{package} by @uref{fun_shadow.html#shadow,@strong{shadow}} or
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}}
(or the equivalent
@uref{mac_defpackage.html#defpackage,@strong{defpackage}} options). All
@uref{glo_s.html#symbol,@emph{symbols}} on this
@uref{glo_l.html#list,@emph{list}} are
@uref{glo_p.html#present,@emph{present}} in @emph{package}.

@strong{Examples:}

@verbatim
 (package-shadowing-symbols (make-package 'temp)) =>  ()
 (shadow 'cdr 'temp) =>  T
 (package-shadowing-symbols 'temp) =>  (TEMP::CDR)
 (intern "PILL" 'temp) =>  TEMP::PILL, NIL
 (shadowing-import 'pill 'temp) =>  T
 (package-shadowing-symbols 'temp) =>  (PILL TEMP::CDR)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@strong{See Also:}

@uref{fun_shadow.html#shadow,@strong{shadow}},
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}}

@strong{Notes:}

Whether the list of @emph{symbols} is
@uref{glo_f.html#fresh,@emph{fresh}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-USE-LIST
@subsubsection CLHS: Function PACKAGE-USE-LIST
@anchor{#clhs-function-package-use-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-s_wing-symbols.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_package-used-by-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-USE-LIST}

@strong{Syntax:}

@strong{package-use-list} @emph{package} => @emph{use-list}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{use-list}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{objects}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of other
@uref{glo_p.html#package,@emph{packages}} used by @emph{package}.

@strong{Examples:}

@verbatim
 (package-use-list (make-package 'temp)) =>  (#<PACKAGE "COMMON-LISP">)
 (use-package 'common-lisp-user 'temp) =>  T
 (package-use-list 'temp) =>  (#<PACKAGE "COMMON-LISP"> #<PACKAGE "COMMON-LISP-USER">)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@strong{See Also:}

@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGE-USED-BY-LIST
@subsubsection CLHS: Function PACKAGE-USED-BY-LIST
@anchor{#clhs-function-package-used-by-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-use-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_packagep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGE-USED-BY-LIST}

@strong{Syntax:}

@strong{package-used-by-list} @emph{package} => @emph{used-by-list}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{used-by-list}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{objects}}.

@strong{Description:}

@ref{#package-used-by-list,@strong{package-used-by-list}} returns a
@uref{glo_l.html#list,@emph{list}} of other
@uref{glo_p.html#package,@emph{packages}} that use @emph{package}.

@strong{Examples:}

@verbatim
 (package-used-by-list (make-package 'temp)) =>  ()
 (make-package 'trash :use '(temp)) =>  #<PACKAGE "TRASH">
 (package-used-by-list 'temp) =>  (#<PACKAGE "TRASH">)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{package} is not a @uref{glo_p.html#package,@emph{package}}.

@strong{See Also:}

@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PACKAGEP
@subsubsection CLHS: Function PACKAGEP
@anchor{#clhs-function-packagep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-used-by-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stpackagest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PACKAGEP}

@strong{Syntax:}

@strong{packagep} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_package.html#package,@strong{package}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (packagep *package*) =>  true 
 (packagep 'common-lisp) =>  false 
 (packagep (find-package 'common-lisp)) =>  true 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (packagep object) ==  (typep object 'package)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RENAME-PACKAGE
@subsubsection CLHS: Function RENAME-PACKAGE
@anchor{#clhs-function-rename-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_list-all-packages.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_shadow.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RENAME-PACKAGE}

@strong{Syntax:}

@strong{rename-package} @emph{package new-name &optional new-nicknames}
=> @emph{package-object}

@strong{Arguments and Values:}

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{new-name}---a @uref{glo_p.html#package_designator,@emph{package
designator}}.

@emph{new-nicknames}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string_designator,@emph{string designators}}. The
default is the @uref{glo_e.html#empty_list,@emph{empty list}}.

@emph{package-object}---the renamed @emph{package}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Replaces the name and nicknames of @emph{package}. The old name and all
of the old nicknames of @emph{package} are eliminated and are replaced
by @emph{new-name} and @emph{new-nicknames}.

The consequences are undefined if @emph{new-name} or any
@emph{new-nickname} conflicts with any existing package names.

@strong{Examples:}

@verbatim
 (make-package 'temporary :nicknames '("TEMP")) =>  #<PACKAGE "TEMPORARY">
 (rename-package 'temp 'ephemeral) =>  #<PACKAGE "EPHEMERAL">
 (package-nicknames (find-package 'ephemeral)) =>  ()
 (find-package 'temporary) =>  NIL
 (rename-package 'ephemeral 'temporary '(temp fleeting))
=>  #<PACKAGE "TEMPORARY">
 (package-nicknames (find-package 'temp)) =>  ("TEMP" "FLEETING")
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-package.html#make-package,@strong{make-package}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss299.html,RETURN-VALUES-UNSPECIFIED:SPECIFY}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SHADOW
@subsubsection CLHS: Function SHADOW
@anchor{#clhs-function-shadow}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rename-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_shadowing-import.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SHADOW}

@strong{Syntax:}

@strong{shadow} @emph{symbol-names &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{symbol-names}---a @uref{glo_d.html#designator,@emph{designator}}
for a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string_designator,@emph{string designators}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#shadow,@strong{shadow}} assures that
@uref{glo_s.html#symbol,@emph{symbols}} with names given by
@emph{symbol-names} are @uref{glo_p.html#present,@emph{present}} in the
@emph{package}.

Specifically, @emph{package} is searched for
@uref{glo_s.html#symbol,@emph{symbols}} with the
@uref{glo_n.html#name,@emph{names}} supplied by @emph{symbol-names}. For
each such @uref{glo_n.html#name,@emph{name}}, if a corresponding
@uref{glo_s.html#symbol,@emph{symbol}} is not
@uref{glo_p.html#present,@emph{present}} in @emph{package} (directly,
not by inheritance), then a corresponding
@uref{glo_s.html#symbol,@emph{symbol}} is created with that
@uref{glo_n.html#name,@emph{name}}, and inserted into @emph{package} as
an @uref{glo_i.html#internal_symbol,@emph{internal symbol}}. The
corresponding @uref{glo_s.html#symbol,@emph{symbol}}, whether
pre-existing or newly created, is then added, if not already present, to
the @uref{glo_s.html#shadowing_symbols_list,@emph{shadowing symbols
list}} of @emph{package}.

@strong{Examples:}

@verbatim
 (package-shadowing-symbols (make-package 'temp)) =>  NIL
 (find-symbol 'car 'temp) =>  CAR, :INHERITED
 (shadow 'car 'temp) =>  T
 (find-symbol 'car 'temp) =>  TEMP::CAR, :INTERNAL
 (package-shadowing-symbols 'temp) =>  (TEMP::CAR)
@end verbatim

@verbatim
 (make-package 'test-1) =>  #<PACKAGE "TEST-1">
 (intern "TEST" (find-package 'test-1)) =>  TEST-1::TEST, NIL
 (shadow 'test-1::test (find-package 'test-1)) =>  T
 (shadow 'TEST (find-package 'test-1)) =>  T
 (assert (not (null (member 'test-1::test (package-shadowing-symbols
                                            (find-package 'test-1))))))
 
 (make-package 'test-2) =>  #<PACKAGE "TEST-2">
 (intern "TEST" (find-package 'test-2)) =>  TEST-2::TEST, NIL
 (export 'test-2::test (find-package 'test-2)) =>  T
 (use-package 'test-2 (find-package 'test-1))    ;should not error
 
@end verbatim

@strong{Side Effects:}

@ref{#shadow,@strong{shadow}} changes the state of the package system in
such a way that the package consistency rules do not hold across the
change.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_package-s_wing-symbols.html#package-shadowing-symbols,@strong{package-shadowing-symbols}},
@uref{sec_11-1.html,Section 11.1 (Package Concepts)}

@strong{Notes:}

If a @uref{glo_s.html#symbol,@emph{symbol}} with a name in
@emph{symbol-names} already exists in @emph{package}, but by
inheritance, the inherited symbol becomes @emph{shadowed}[3] by a newly
created @uref{glo_i.html#internal_symbol,@emph{internal symbol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss313.html,SHADOW-ALREADY-PRESENT}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@item
@uref{../Issues/iss314.html,SHADOW-ALREADY-PRESENT:WORKS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SHADOWING-IMPORT
@subsubsection CLHS: Function SHADOWING-IMPORT
@anchor{#clhs-function-shadowing-import}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_shadow.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_delete-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SHADOWING-IMPORT}

@strong{Syntax:}

@strong{shadowing-import} @emph{symbols &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{symbols}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@emph{package} ---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#shadowing-import,@strong{shadowing-import}} is like
@uref{fun_import.html#import,@strong{import}}, but it does not signal an
error even if the importation of a
@uref{glo_s.html#symbol,@emph{symbol}} would shadow some
@uref{glo_s.html#symbol,@emph{symbol}} already
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}.

@ref{#shadowing-import,@strong{shadowing-import}} inserts each of
@emph{symbols} into @emph{package} as an internal symbol, regardless of
whether another @uref{glo_s.html#symbol,@emph{symbol}} of the same name
is shadowed by this action. If a different
@uref{glo_s.html#symbol,@emph{symbol}} of the same name is already
@uref{glo_p.html#present,@emph{present}} in @emph{package}, that
@uref{glo_s.html#symbol,@emph{symbol}} is first
@uref{glo_u.html#uninterned,@emph{uninterned}} from @emph{package}. The
new @uref{glo_s.html#symbol,@emph{symbol}} is added to @emph{package}'s
shadowing-symbols list.

@ref{#shadowing-import,@strong{shadowing-import}} does name-conflict
checking to the extent that it checks whether a distinct existing
@uref{glo_s.html#symbol,@emph{symbol}} with the same name is
@uref{glo_a.html#accessible,@emph{accessible}}; if so, it is shadowed by
the new @uref{glo_s.html#symbol,@emph{symbol}}, which implies that it
must be uninterned if it was @uref{glo_p.html#present,@emph{present}} in
@emph{package}.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (setq sym (intern "CONFLICT")) =>  CONFLICT
 (intern "CONFLICT" (make-package 'temp)) =>  TEMP::CONFLICT, NIL
 (package-shadowing-symbols 'temp) =>  NIL
 (shadowing-import sym 'temp) =>  T 
 (package-shadowing-symbols 'temp) =>  (CONFLICT)
@end verbatim

@strong{Side Effects:}

@ref{#shadowing-import,@strong{shadowing-import}} changes the state of
the package system in such a way that the consistency rules do not hold
across the change.

@emph{package}'s shadowing-symbols list is modified.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_import.html#import,@strong{import}},
@uref{fun_unintern.html#unintern,@strong{unintern}},
@uref{fun_package-s_wing-symbols.html#package-shadowing-symbols,@strong{package-shadowing-symbols}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNEXPORT
@subsubsection CLHS: Function UNEXPORT
@anchor{#clhs-function-unexport}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-package-iterator.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unintern.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNEXPORT}

@strong{Syntax:}

@strong{unexport} @emph{symbols &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{symbols}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#unexport,@strong{unexport}} reverts external @emph{symbols} in
@emph{package} to internal status; it undoes the effect of
@uref{fun_export.html#export,@strong{export}}.

@ref{#unexport,@strong{unexport}} works only on
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_p.html#present,@emph{present}} in @emph{package}, switching
them back to internal status. If @ref{#unexport,@strong{unexport}} is
given a @uref{glo_s.html#symbol,@emph{symbol}} that is already
@uref{glo_a.html#accessible,@emph{accessible}} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}} in
@emph{package}, it does nothing.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (export (intern "CONTRABAND" (make-package 'temp)) 'temp) =>  T
 (find-symbol "CONTRABAND") =>  NIL, NIL 
 (use-package 'temp) =>  T 
 (find-symbol "CONTRABAND") =>  CONTRABAND, :INHERITED
 (unexport 'contraband 'temp) =>  T
 (find-symbol "CONTRABAND") =>  NIL, NIL
@end verbatim

@strong{Side Effects:}

Package system is modified.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:}

If @ref{#unexport,@strong{unexport}} is given a
@uref{glo_s.html#symbol,@emph{symbol}} not
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package} at all,
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled.

The consequences are undefined if @emph{package} is the KEYWORD package
or the COMMON-LISP package.

@strong{See Also:}

@uref{fun_export.html#export,@strong{export}},
@uref{sec_11-1.html,Section 11.1 (Package Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNINTERN
@subsubsection CLHS: Function UNINTERN
@anchor{#clhs-function-unintern}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unexport.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_in-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNINTERN}

@strong{Syntax:}

@strong{unintern} @emph{symbol &optional package} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#unintern,@strong{unintern}} removes @emph{symbol} from
@emph{package}. If @emph{symbol} is
@uref{glo_p.html#present,@emph{present}} in @emph{package}, it is
removed from @emph{package} and also from @emph{package}'s
@uref{glo_s.html#shadowing_symbols_list,@emph{shadowing symbols list}}
if it is present there. If @emph{package} is the
@uref{glo_h.html#home_package,@emph{home package}} for @emph{symbol},
@emph{symbol} is made to have no
@uref{glo_h.html#home_package,@emph{home package}}. @emph{Symbol} may
continue to be @uref{glo_a.html#accessible,@emph{accessible}} in
@emph{package} by inheritance.

Use of @ref{#unintern,@strong{unintern}} can result in a
@uref{glo_s.html#symbol,@emph{symbol}} that has no recorded
@uref{glo_h.html#home_package,@emph{home package}}, but that in fact is
@uref{glo_a.html#accessible,@emph{accessible}} in some
@uref{glo_p.html#package,@emph{package}}. Common Lisp does not check for
this pathological case, and such @uref{glo_s.html#symbol,@emph{symbols}}
are always printed preceded by #:.

@ref{#unintern,@strong{unintern}} returns
@uref{glo_t.html#true,@emph{true}} if it removes @emph{symbol}, and
@uref{any_nil.html#nil,@strong{nil}} otherwise.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (setq temps-unpack (intern "UNPACK" (make-package 'temp))) =>  TEMP::UNPACK 
 (unintern temps-unpack 'temp) =>  T
 (find-symbol "UNPACK" 'temp) =>  NIL, NIL 
 temps-unpack =>  #:UNPACK 
@end verbatim

@strong{Side Effects:}

@ref{#unintern,@strong{unintern}} changes the state of the package
system in such a way that the consistency rules do not hold across the
change.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:}

Giving a shadowing symbol to @ref{#unintern,@strong{unintern}} can
uncover a name conflict that had previously been resolved by the
shadowing. If package A uses packages B and C, A contains a shadowing
symbol x, and B and C each contain external symbols named x, then
removing the shadowing symbol x from A will reveal a name conflict
between b:x and c:x if those two @uref{glo_s.html#symbol,@emph{symbols}}
are distinct. In this case @ref{#unintern,@strong{unintern}} will signal
an error.

@strong{See Also:}

@uref{sec_11-1.html,Section 11.1 (Package Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNUSE-PACKAGE
@subsubsection CLHS: Function UNUSE-PACKAGE
@anchor{#clhs-function-unuse-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_in-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_use-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNUSE-PACKAGE}

@strong{Syntax:}

@strong{unuse-package} @emph{packages-to-unuse &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{packages-to-unuse}---a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package_designator,@emph{package designators}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Description:}

@ref{#unuse-package,@strong{unuse-package}} causes @emph{package} to
cease inheriting all the @uref{glo_e.html#external_symbol,@emph{external
symbols}} of @emph{packages-to-unuse};
@ref{#unuse-package,@strong{unuse-package}} undoes the effects of
@uref{fun_use-package.html#use-package,@strong{use-package}}. The
@emph{packages-to-unuse} are removed from the
@uref{glo_u.html#use_list,@emph{use list}} of @emph{package}.

Any @uref{glo_s.html#symbol,@emph{symbols}} that have been
@emph{imported} into @emph{package} continue to be
@uref{glo_p.html#present,@emph{present}} in @emph{package}.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 (export (intern "SHOES" (make-package 'temp)) 'temp) =>  T
 (find-symbol "SHOES") =>  NIL, NIL
 (use-package 'temp) =>  T
 (find-symbol "SHOES") =>  SHOES, :INHERITED
 (find (find-package 'temp) (package-use-list 'common-lisp-user)) =>  #<PACKAGE "TEMP">
 (unuse-package 'temp) =>  T
 (find-symbol "SHOES") =>  NIL, NIL
@end verbatim

@strong{Side Effects:}

The @uref{glo_u.html#use_list,@emph{use list}} of @emph{package} is
modified.

@strong{Affected By:}

Current state of the package system.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_package-use-list.html#package-use-list,@strong{package-use-list}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function USE-PACKAGE
@subsubsection CLHS: Function USE-PACKAGE
@anchor{#clhs-function-use-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unuse-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defpackage.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{USE-PACKAGE}

@strong{Syntax:}

@strong{use-package} @emph{packages-to-use &optional package} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{packages-to-use}---a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#package_designator,@emph{package designators}}. The
KEYWORD package may not be supplied.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}. The default is the
@uref{glo_c.html#current_package,@emph{current package}}. The
@emph{package} cannot be the KEYWORD package.

@strong{Description:}

@ref{#use-package,@strong{use-package}} causes @emph{package} to inherit
all the @uref{glo_e.html#external_symbol,@emph{external symbols}} of
@emph{packages-to-use}. The inherited
@uref{glo_s.html#symbol,@emph{symbols}} become
@uref{glo_a.html#accessible,@emph{accessible}} as
@uref{glo_i.html#internal_symbol,@emph{internal symbols}} of
@emph{package}.

@emph{Packages-to-use} are added to the
@uref{glo_u.html#use_list,@emph{use list}} of @emph{package} if they are
not there already. All @uref{glo_e.html#external_symbol,@emph{external
symbols}} in @emph{packages-to-use} become
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package} as
@uref{glo_i.html#internal_symbol,@emph{internal symbols}}.
@ref{#use-package,@strong{use-package}} does not cause any new
@uref{glo_s.html#symbol,@emph{symbols}} to be
@uref{glo_p.html#present,@emph{present}} in @emph{package} but only
makes them @uref{glo_a.html#accessible,@emph{accessible}} by
inheritance.

@ref{#use-package,@strong{use-package}} checks for name conflicts
between the newly imported symbols and those already
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}. A name
conflict in @ref{#use-package,@strong{use-package}} between two external
symbols inherited by @emph{package} from @emph{packages-to-use} may be
resolved in favor of either @uref{glo_s.html#symbol,@emph{symbol}} by
@emph{importing} one of them into @emph{package} and making it a
shadowing symbol.

@strong{Examples:}

@verbatim
 (export (intern "LAND-FILL" (make-package 'trash)) 'trash) =>  T
 (find-symbol "LAND-FILL" (make-package 'temp)) =>  NIL, NIL
 (package-use-list 'temp) =>  (#<PACKAGE "TEMP">)
 (use-package 'trash 'temp) =>  T
 (package-use-list 'temp) =>  (#<PACKAGE "TEMP"> #<PACKAGE "TRASH">)
 (find-symbol "LAND-FILL" 'temp) =>  TRASH:LAND-FILL, :INHERITED
@end verbatim

@strong{Side Effects:}

The @uref{glo_u.html#use_list,@emph{use list}} of @emph{package} may be
modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}},
@uref{fun_package-use-list.html#package-use-list,@strong{package-use-list}},
@uref{sec_11-1.html,Section 11.1 (Package Concepts)}

@strong{Notes:}

It is permissible for a @uref{glo_p.html#package,@emph{package}} P1 to
@uref{glo_u.html#use,@emph{use}} a
@uref{glo_p.html#package,@emph{package}} P2 even if P2 already uses P1.
The using of @uref{glo_p.html#package,@emph{packages}} is not
transitive, so no problem results from the apparent circularity.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFPACKAGE
@subsubsection CLHS: Macro DEFPACKAGE
@anchor{#clhs-macro-defpackage}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_use-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_do-symbol_-all-symbols.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFPACKAGE}

@strong{Syntax:}

@strong{defpackage} @emph{defined-package-name [[@emph{option}]]} =>
@emph{package}

@verbatim
option::= (:nicknames nickname*)* |  
          (:documentation string) |  
          (:use package-name*)* |  
          (:shadow {symbol-name}*)* |  
          (:shadowing-import-from package-name {symbol-name}*)* |  
          (:import-from package-name {symbol-name}*)* |  
          (:export {symbol-name}*)* |  
          (:intern {symbol-name}*)* |  
          (:size integer) 
@end verbatim

@strong{Arguments and Values:}

@emph{defined-package-name}---a
@uref{glo_s.html#string_designator,@emph{string designator}}.

@emph{package-name}---a
@uref{glo_p.html#package_designator,@emph{package designator}}.

@emph{nickname}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{symbol-name}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{package}---the @uref{glo_p.html#package,@emph{package}} named
@emph{package-name}.

@strong{Description:}

@ref{#defpackage,@strong{defpackage}} creates a
@uref{glo_p.html#package,@emph{package}} as specified and returns the
@uref{glo_p.html#package,@emph{package}}.

If @emph{defined-package-name} already refers to an existing
@uref{glo_p.html#package,@emph{package}}, the name-to-package mapping
for that name is not changed. If the new definition is at variance with
the current state of that @uref{glo_p.html#package,@emph{package}}, the
consequences are undefined; an implementation might choose to modify the
existing @uref{glo_p.html#package,@emph{package}} to reflect the new
definition. If @emph{defined-package-name} is a
@uref{glo_s.html#symbol,@emph{symbol}}, its
@uref{glo_n.html#name,@emph{name}} is used.

The standard @emph{options} are described below.

:nicknames

The arguments to :nicknames set the
@uref{glo_p.html#package,@emph{package}}'s nicknames to the supplied
names.

:documentation

The argument to :documentation specifies a
@uref{glo_d.html#documentation_string,@emph{documentation string}}; it
is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
the @uref{glo_p.html#package,@emph{package}}. At most one :documentation
option can appear in a single @ref{#defpackage,@strong{defpackage}}
@uref{glo_f.html#form,@emph{form}}.

:use

The arguments to :use set the @uref{glo_p.html#package,@emph{packages}}
that the @uref{glo_p.html#package,@emph{package}} named by
@emph{package-name} will inherit from. If :use is not supplied, it
defaults to the same
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
value as the :use @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_make-package.html#make-package,@strong{make-package}}.

:shadow

The arguments to :shadow, @emph{symbol-names}, name
@uref{glo_s.html#symbol,@emph{symbols}} that are to be created in the
@uref{glo_p.html#package,@emph{package}} being defined. These
@uref{glo_s.html#symbol,@emph{symbols}} are added to the list of
shadowing @uref{glo_s.html#symbol,@emph{symbols}} effectively as if by
@uref{fun_shadow.html#shadow,@strong{shadow}}.

:shadowing-import-from

The @uref{glo_s.html#symbol,@emph{symbols}} named by the argument
@emph{symbol-names} are found (involving a lookup as if by
@uref{fun_find-symbol.html#find-symbol,@strong{find-symbol}}) in the
specified @emph{package-name}. The resulting
@uref{glo_s.html#symbol,@emph{symbols}} are @emph{imported} into the
@uref{glo_p.html#package,@emph{package}} being defined, and placed on
the shadowing symbols list as if by
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}}.
In no case are @uref{glo_s.html#symbol,@emph{symbols}} created in any
@uref{glo_p.html#package,@emph{package}} other than the one being
defined.

:import-from

The @uref{glo_s.html#symbol,@emph{symbols}} named by the argument
@emph{symbol-names} are found in the
@uref{glo_p.html#package,@emph{package}} named by @emph{package-name}
and they are @emph{imported} into the
@uref{glo_p.html#package,@emph{package}} being defined. In no case are
@uref{glo_s.html#symbol,@emph{symbols}} created in any
@uref{glo_p.html#package,@emph{package}} other than the one being
defined.

:export

The @uref{glo_s.html#symbol,@emph{symbols}} named by the argument
@emph{symbol-names} are found or created in the
@uref{glo_p.html#package,@emph{package}} being defined and
@uref{glo_e.html#exported,@emph{exported}}. The :export option interacts
with the :use option, since inherited
@uref{glo_s.html#symbol,@emph{symbols}} can be used rather than new ones
created. The :export option interacts with the :import-from and
:shadowing-import-from options, since @emph{imported} symbols can be
used rather than new ones created. If an argument to the :export option
is @uref{glo_a.html#accessible,@emph{accessible}} as an (inherited)
@uref{glo_i.html#internal_symbol,@emph{internal symbol}} via
@uref{fun_use-package.html#use-package,@strong{use-package}}, that the
@uref{glo_s.html#symbol,@emph{symbol}} named by @emph{symbol-name} is
first @emph{imported} into the @uref{glo_p.html#package,@emph{package}}
being defined, and is then @uref{glo_e.html#exported,@emph{exported}}
from that @uref{glo_p.html#package,@emph{package}}.

:intern

The @uref{glo_s.html#symbol,@emph{symbols}} named by the argument
@emph{symbol-names} are found or created in the
@uref{glo_p.html#package,@emph{package}} being defined. The :intern
option interacts with the :use option, since inherited
@uref{glo_s.html#symbol,@emph{symbols}} can be used rather than new ones
created.

:size

The argument to the :size option declares the approximate number of
@uref{glo_s.html#symbol,@emph{symbols}} expected in the
@uref{glo_p.html#package,@emph{package}}. This is an efficiency hint
only and might be ignored by an implementation.

The order in which the options appear in a
@ref{#defpackage,@strong{defpackage}} form is irrelevant. The order in
which they are executed is as follows:

1. :shadow and :shadowing-import-from.

2. :use.

3. :import-from and :intern.

4. :export.

Shadows are established first, since they might be necessary to block
spurious name conflicts when the :use option is processed. The :use
option is executed next so that :intern and :export options can refer to
normally inherited @uref{glo_s.html#symbol,@emph{symbols}}. The :export
option is executed last so that it can refer to
@uref{glo_s.html#symbol,@emph{symbols}} created by any of the other
options; in particular,
@uref{glo_s.html#shadowing_symbol,@emph{shadowing symbols}} and
@emph{imported} @uref{glo_s.html#symbol,@emph{symbols}} can be made
external.

If a defpackage @uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, all of the
actions normally performed by this @uref{glo_m.html#macro,@emph{macro}}
at load time must also be performed at compile time.

@strong{Examples:}

@verbatim
 (defpackage "MY-PACKAGE"
   (:nicknames "MYPKG" "MY-PKG")
   (:use "COMMON-LISP")
   (:shadow "CAR" "CDR")
   (:shadowing-import-from "VENDOR-COMMON-LISP"  "CONS")
   (:import-from "VENDOR-COMMON-LISP"  "GC")
   (:export "EQ" "CONS" "FROBOLA")
   )
 
 
 (defpackage my-package
   (:nicknames mypkg :MY-PKG)  ; remember Common Lisp conventions for case
   (:use common-lisp)          ; conversion on symbols
   (:shadow CAR :cdr #:cons)                              
   (:export "CONS")            ; this is the shadowed one.
   )
@end verbatim

@strong{Affected By:}

Existing @uref{glo_p.html#package,@emph{packages}}.

@strong{Exceptional Situations:}

If one of the supplied :nicknames already refers to an existing
@uref{glo_p.html#package,@emph{package}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}}
should be signaled if :size or :documentation appears more than once.

Since @uref{glo_i.html#implementation,@emph{implementations}} might
allow extended @emph{options} an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}}
should be signaled if an @emph{option} is present that is not actually
supported in the host
@uref{glo_i.html#implementation,@emph{implementation}}.

The collection of @emph{symbol-name} arguments given to the options
:shadow, :intern, :import-from, and :shadowing-import-from must all be
disjoint; additionally, the @emph{symbol-name} arguments given to
:export and :intern must be disjoint. Disjoint in this context is
defined as no two of the @emph{symbol-names} being
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}} with
each other. If either condition is violated, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}}
should be signaled.

For the :shadowing-import-from and :import-from options, a
@uref{glo_c.html#correctable,@emph{correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled if no @uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_a.html#accessible,@emph{accessible}} in the
@uref{glo_p.html#package,@emph{package}} named by @emph{package-name}
for one of the argument @emph{symbol-names}.

Name conflict errors are handled by the underlying calls to
@uref{fun_make-package.html#make-package,@strong{make-package}},
@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_import.html#import,@strong{import}}, and
@uref{fun_export.html#export,@strong{export}}. See
@uref{sec_11-1.html,Section 11.1 (Package Concepts)}.

@strong{See Also:}

@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_11-1.html,Section 11.1 (Package Concepts)},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

The :intern option is useful if an :import-from or a
:shadowing-import-from option in a subsequent call to
@ref{#defpackage,@strong{defpackage}} (for some other
@uref{glo_p.html#package,@emph{package}}) expects to find these
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_a.html#accessible,@emph{accessible}} but not necessarily
external.

It is recommended that the entire
@uref{glo_p.html#package,@emph{package}} definition is put in a single
place, and that all the @uref{glo_p.html#package,@emph{package}}
definitions of a program are in a single file. This file can be
@emph{loaded} before @emph{loading} or compiling anything else that
depends on those @uref{glo_p.html#package,@emph{packages}}. Such a file
can be read in the COMMON-LISP-USER package, avoiding any initial state
issues.

@ref{#defpackage,@strong{defpackage}} cannot be used to create two
``mutually recursive'' packages, such as:

@verbatim
 (defpackage my-package
   (:use common-lisp your-package)    ;requires your-package to exist first
   (:export "MY-FUN"))                
 (defpackage your-package
   (:use common-lisp)
   (:import-from my-package "MY-FUN") ;requires my-package to exist first
   (:export "MY-FUN"))
@end verbatim

However, nothing prevents the user from using the
@uref{glo_p.html#package,@emph{package}}-affecting functions such as
@uref{fun_use-package.html#use-package,@strong{use-package}},
@uref{fun_import.html#import,@strong{import}}, and
@uref{fun_export.html#export,@strong{export}} to establish such links
after a more standard use of @ref{#defpackage,@strong{defpackage}}.

The macroexpansion of @ref{#defpackage,@strong{defpackage}} could
usefully canonicalize the names into
@uref{glo_s.html#string,@emph{strings}}, so that even if a source file
has random @uref{glo_s.html#symbol,@emph{symbols}} in the
@ref{#defpackage,@strong{defpackage}} form, the compiled file would only
contain @uref{glo_s.html#string,@emph{strings}}.

Frequently additional
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
options take the form of a @uref{glo_k.html#keyword,@emph{keyword}}
standing by itself as an abbreviation for a list (keyword T); this
syntax should be properly reported as an unrecognized option in
implementations that do not support it.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss238.html,MAKE-PACKAGE-USE-DEFAULT:IMPLEMENTATION-DEPENDENT}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss108.html,DEFPACKAGE:ADDITION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DO-SYMBOLS DO-EXTERNAL-SYMBOLS
@subsubsection CLHS: Macro DO-SYMBOLS, DO-EXTERNAL-SYMBOLS...
@anchor{#clhs-macro-do-symbols-do-external-symbols...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defpackage.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_intern.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DO-SYMBOLS, DO-EXTERNAL-SYMBOLS, DO-ALL-SYMBOLS}

@strong{Syntax:}

@strong{do-symbols} @emph{(var [package [result-form]])
@emph{declaration}@strong{*} @{tag | statement@}*}

=> @emph{@emph{result}@strong{*}}

@strong{do-external-symbols} @emph{(var [package [result-form]])
@emph{declaration}@strong{*} @{tag | statement@}*}

=> @emph{@emph{result}@strong{*}}

@strong{do-all-symbols} @emph{(var [result-form])
@emph{declaration}@strong{*} @{tag | statement@}*}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}; not evaluated.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}}; evaluated. The default in
@ref{#do-symbols,@strong{do-symbols}} and
@ref{#do-external-symbols,@strong{do-external-symbols}} is the
@uref{glo_c.html#current_package,@emph{current package}}.

@emph{result-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below. The default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}; not evaluated.

@emph{statement}---a @uref{glo_c.html#compound_form,@emph{compound
form}}; evaluated as described below.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{result-form} if a @uref{glo_n.html#normal_return,@emph{normal
return}} occurs, or else, if an
@uref{glo_e.html#explicit_return,@emph{explicit return}} occurs, the
@uref{glo_v.html#value,@emph{values}} that were transferred.

@strong{Description:}

@ref{#do-symbols,@strong{do-symbols}},
@ref{#do-external-symbols,@strong{do-external-symbols}}, and
@ref{#do-all-symbols,@strong{do-all-symbols}} iterate over the
@uref{glo_s.html#symbol,@emph{symbols}} of
@uref{glo_p.html#package,@emph{packages}}. For each
@uref{glo_s.html#symbol,@emph{symbol}} in the set of
@uref{glo_p.html#package,@emph{packages}} chosen, the @emph{var} is
bound to the @uref{glo_s.html#symbol,@emph{symbol}}, and the
@emph{statements} in the body are executed. When all the
@uref{glo_s.html#symbol,@emph{symbols}} have been processed,
@emph{result-form} is evaluated and returned as the value of the macro.

@ref{#do-symbols,@strong{do-symbols}} iterates over the
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_a.html#accessible,@emph{accessible}} in @emph{package}.
@emph{Statements} may execute more than once for
@uref{glo_s.html#symbol,@emph{symbols}} that are inherited from multiple
@uref{glo_p.html#package,@emph{packages}}.

@ref{#do-all-symbols,@strong{do-all-symbols}} iterates on every
@uref{glo_r.html#registered_package,@emph{registered package}}.
@ref{#do-all-symbols,@strong{do-all-symbols}} will not process every
@uref{glo_s.html#symbol,@emph{symbol}} whatsoever, because a
@uref{glo_s.html#symbol,@emph{symbol}} not
@uref{glo_a.html#accessible,@emph{accessible}} in any
@uref{glo_r.html#registered_package,@emph{registered package}} will not
be processed. @ref{#do-all-symbols,@strong{do-all-symbols}} may cause a
@uref{glo_s.html#symbol,@emph{symbol}} that is
@uref{glo_p.html#present,@emph{present}} in several
@uref{glo_p.html#package,@emph{packages}} to be processed more than
once.

@ref{#do-external-symbols,@strong{do-external-symbols}} iterates on the
external symbols of @emph{package}.

When @emph{result-form} is evaluated, @emph{var} is bound and has the
value @uref{any_nil.html#nil,@strong{nil}}.

An @uref{glo_i.html#implicit_block,@emph{implicit block}} named
@uref{any_nil.html#nil,@strong{nil}} surrounds the entire
@ref{#do-symbols,@strong{do-symbols}},
@ref{#do-external-symbols,@strong{do-external-symbols}}, or
@ref{#do-all-symbols,@strong{do-all-symbols}}
@uref{glo_f.html#form,@emph{form}}.
@uref{mac_return.html#return,@strong{return}} or
@uref{speope_return-from.html#return-from,@strong{return-from}} may be
used to terminate the iteration prematurely.

If execution of the body affects which
@uref{glo_s.html#symbol,@emph{symbols}} are contained in the set of
@uref{glo_p.html#package,@emph{packages}} over which iteration is
occurring, other than to remove the
@uref{glo_s.html#symbol,@emph{symbol}} currently the value of @emph{var}
by using @uref{fun_unintern.html#unintern,@strong{unintern}}, the
consequences are undefined.

For each of these macros, the @uref{glo_s.html#scope,@emph{scope}} of
the name binding does not include any initial value form, but the
optional result forms are included.

Any @emph{tag} in the body is treated as with
@uref{speope_tagbody.html#tagbody,@strong{tagbody}}.

@strong{Examples:}

@verbatim
 (make-package 'temp :use nil) =>  #<PACKAGE "TEMP">
 (intern "SHY" 'temp) =>  TEMP::SHY, NIL ;SHY will be an internal symbol
                                         ;in the package TEMP
 (export (intern "BOLD" 'temp) 'temp)  =>  T  ;BOLD will be external  
 (let ((lst ()))
   (do-symbols (s (find-package 'temp)) (push s lst))
   lst)
=>  (TEMP::SHY TEMP:BOLD)
OR=>  (TEMP:BOLD TEMP::SHY)
 (let ((lst ()))
   (do-external-symbols (s (find-package 'temp) lst) (push s lst))
   lst) 
=>  (TEMP:BOLD)
 (let ((lst ()))                                                     
   (do-all-symbols (s lst)
     (when (eq (find-package 'temp) (symbol-package s)) (push s lst)))
   lst)
=>  (TEMP::SHY TEMP:BOLD)
OR=>  (TEMP:BOLD TEMP::SHY)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_intern.html#intern,@strong{intern}},
@uref{fun_export.html#export,@strong{export}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss133.html,DO-SYMBOLS-BLOCK-SCOPE:ENTIRE-FORM}
@item
@uref{../Issues/iss134.html,DO-SYMBOLS-DUPLICATES}
@item
@uref{../Issues/iss254.html,PACKAGE-FUNCTION-CONSISTENCY:MORE-PERMISSIVE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro IN-PACKAGE
@subsubsection CLHS: Macro IN-PACKAGE
@anchor{#clhs-macro-in-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unintern.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unuse-package.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{IN-PACKAGE}

@strong{Syntax:}

@strong{in-package} @emph{name} => @emph{package}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#string_designator,@emph{string
designator}}; not evaluated.

@emph{package}---the @uref{glo_p.html#package,@emph{package}} named by
@emph{name}.

@strong{Description:}

Causes the the @uref{glo_p.html#package,@emph{package}} named by
@emph{name} to become the @uref{glo_c.html#current_package,@emph{current
package}}---that is, the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stpackagest.html#STpackageST,@strong{*package*}}. If no such
@uref{glo_p.html#package,@emph{package}} already exists, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled.

Everything @ref{#in-package,@strong{in-package}} does is also performed
at compile time if the call appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}.

@strong{Examples:} None.

@strong{Side Effects:}

The @uref{glo_v.html#variable,@emph{variable}}
@uref{var_stpackagest.html#STpackageST,@strong{*package*}} is assigned.
If the @ref{#in-package,@strong{in-package}}
@uref{glo_f.html#form,@emph{form}} is a
@uref{glo_t.html#top_level_form,@emph{top level form}}, this assignment
also occurs at compile time.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled if the specified @uref{glo_p.html#package,@emph{package}} does
not exist.

@strong{See Also:}

@uref{var_stpackagest.html#STpackageST,@strong{*package*}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss195.html,IN-PACKAGE-FUNCTIONALITY:MAR89-X3J13}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-PACKAGE-ITERATOR
@subsubsection CLHS: Macro WITH-PACKAGE-ITERATOR
@anchor{#clhs-macro-with-package-iterator}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unexport.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-PACKAGE-ITERATOR}

@strong{Syntax:}

@strong{with-package-iterator} @emph{(name package-list-form &rest
symbol-types) @emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{package-list-form}---a @uref{glo_f.html#form,@emph{form}};
evaluated once to produce a @emph{package-list}.

@emph{package-list}---a @uref{glo_d.html#designator,@emph{designator}}
for a list of @uref{glo_p.html#package_designator,@emph{package
designators}}.

@emph{symbol-type}---one of the @uref{glo_s.html#symbol,@emph{symbols}}
:internal, :external, or :inherited.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@emph{forms}.

@strong{Description:}

Within the lexical scope of the body @emph{forms}, the @emph{name} is
defined via
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}} such
that successive invocations of (@emph{name}) will return the
@uref{glo_s.html#symbol,@emph{symbols}}, one by one, from the
@uref{glo_p.html#package,@emph{packages}} in @emph{package-list}.

It is unspecified whether @uref{glo_s.html#symbol,@emph{symbols}}
inherited from multiple @uref{glo_p.html#package,@emph{packages}} are
returned more than once. The order of
@uref{glo_s.html#symbol,@emph{symbols}} returned does not necessarily
reflect the order of @uref{glo_p.html#package,@emph{packages}} in
@emph{package-list}. When @emph{package-list} has more than one element,
it is unspecified whether duplicate
@uref{glo_s.html#symbol,@emph{symbols}} are returned once or more than
once.

@emph{Symbol-types} controls which
@uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{glo_a.html#accessible,@emph{accessible}} in a
@uref{glo_p.html#package,@emph{package}} are returned as follows:

:internal

The @uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{glo_p.html#present,@emph{present}} in the
@uref{glo_p.html#package,@emph{package}}, but that are not
@uref{glo_e.html#exported,@emph{exported}}.

:external

The @uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{glo_p.html#present,@emph{present}} in the
@uref{glo_p.html#package,@emph{package}} and are
@uref{glo_e.html#exported,@emph{exported}}.

:inherited

The @uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{glo_e.html#exported,@emph{exported}} by used
@uref{glo_p.html#package,@emph{packages}} and that are not
@emph{shadowed}.

When more than one argument is supplied for @emph{symbol-types}, a
@uref{glo_s.html#symbol,@emph{symbol}} is returned if its
@uref{glo_a.html#accessibility,@emph{accessibility}} matches any one of
the @emph{symbol-types} supplied. Implementations may extend this syntax
by recognizing additional symbol accessibility types.

An invocation of (@emph{name}) returns four values as follows:

1. A flag that indicates whether a
@uref{glo_s.html#symbol,@emph{symbol}} is returned (true means that a
@uref{glo_s.html#symbol,@emph{symbol}} is returned).

2. A @uref{glo_s.html#symbol,@emph{symbol}} that is
@uref{glo_a.html#accessible,@emph{accessible}} in one the indicated
@uref{glo_p.html#package,@emph{packages}}.

3. The accessibility type for that
@uref{glo_s.html#symbol,@emph{symbol}}; i.e., one of the symbols
:internal, :external, or :inherited.

4. The @uref{glo_p.html#package,@emph{package}} from which the
@uref{glo_s.html#symbol,@emph{symbol}} was obtained. The
@uref{glo_p.html#package,@emph{package}} is one of the
@uref{glo_p.html#package,@emph{packages}} present or named in
@emph{package-list}.

After all @uref{glo_s.html#symbol,@emph{symbols}} have been returned by
successive invocations of (@emph{name}), then only one value is
returned, namely @uref{any_nil.html#nil,@strong{nil}}.

The meaning of the second, third, and fourth
@uref{glo_v.html#value,@emph{values}} is that the returned
@uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_a.html#accessible,@emph{accessible}} in the returned
@uref{glo_p.html#package,@emph{package}} in the way indicated by the
second return value as follows:

:internal

Means @uref{glo_p.html#present,@emph{present}} and not
@uref{glo_e.html#exported,@emph{exported}}.

:external

Means @uref{glo_p.html#present,@emph{present}} and
@uref{glo_e.html#exported,@emph{exported}}.

:inherited

Means not @uref{glo_p.html#present,@emph{present}} (thus not
@emph{shadowed}) but inherited from some used
@uref{glo_p.html#package,@emph{package}}.

It is unspecified what happens if any of the implicit interior state of
an iteration is returned outside the dynamic extent of the
@ref{#with-package-iterator,@strong{with-package-iterator}} form such as
by returning some @uref{glo_c.html#closure,@emph{closure}} over the
invocation @uref{glo_f.html#form,@emph{form}}.

Any number of invocations of
@ref{#with-package-iterator,@strong{with-package-iterator}} can be
nested, and the body of the innermost one can invoke all of the locally
@emph{established} @uref{glo_m.html#macro,@emph{macros}}, provided all
those @uref{glo_m.html#macro,@emph{macros}} have distinct names.

@strong{Examples:}

The following function should return @uref{any_t.html#t,@strong{t}} on
any @uref{glo_p.html#package,@emph{package}}, and signal an error if the
usage of @ref{#with-package-iterator,@strong{with-package-iterator}}
does not agree with the corresponding usage of
@uref{mac_do-symbol_-all-symbols.html#do-symbols,@strong{do-symbols}}.

@verbatim
 (defun test-package-iterator (package)
   (unless (packagep package)
     (setq package (find-package package)))
   (let ((all-entries '())
         (generated-entries '()))
     (do-symbols (x package) 
       (multiple-value-bind (symbol accessibility) 
           (find-symbol (symbol-name x) package)
         (push (list symbol accessibility) all-entries)))
     (with-package-iterator (generator-fn package 
                             :internal :external :inherited)
       (loop     
         (multiple-value-bind (more? symbol accessibility pkg)
             (generator-fn)
           (unless more? (return))
           (let ((l (multiple-value-list (find-symbol (symbol-name symbol) 
                                                      package))))
             (unless (equal l (list symbol accessibility))
               (error "Symbol ~S not found as ~S in package ~A [~S]"
                      symbol accessibility (package-name package) l))
             (push l generated-entries)))))
     (unless (and (subsetp all-entries generated-entries :test #'equal)
                  (subsetp generated-entries all-entries :test #'equal))
      (error "Generated entries and Do-Symbols entries don't correspond"))
     t))
@end verbatim

The following function prints out every
@uref{glo_p.html#present,@emph{present}}
@uref{glo_s.html#symbol,@emph{symbol}} (possibly more than once):

@verbatim
 (defun print-all-symbols () 
   (with-package-iterator (next-symbol (list-all-packages)
                           :internal :external)
     (loop
       (multiple-value-bind (more? symbol) (next-symbol)
         (if more? 
            (print symbol)
            (return))))))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

@ref{#with-package-iterator,@strong{with-package-iterator}} signals an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} if
no @emph{symbol-types} are supplied or if a @emph{symbol-type} is not
recognized by the implementation is supplied.

The consequences are undefined if the local function named @emph{name}
@emph{established} by
@ref{#with-package-iterator,@strong{with-package-iterator}} is called
after it has returned @uref{glo_f.html#false,@emph{false}} as its
@uref{glo_p.html#primary_value,@emph{primary value}}.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss188.html,HASH-TABLE-PACKAGE-GENERATORS:ADD-WITH-WRAPPER}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PACKAGE*
@subsubsection CLHS: Variable *PACKAGE*
@anchor{#clhs-variable-package}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_packagep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_packa_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_package-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PACKAGE*}

@strong{Value Type:}

a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Initial Value:}

the COMMON-LISP-USER package.

@strong{Description:}

Whatever @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} is currently the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STpackageST,@strong{*package*}} is referred to as the
@uref{glo_c.html#current_package,@emph{current package}}.

@strong{Examples:}

@verbatim
 (in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
 *package* =>  #<PACKAGE "COMMON-LISP-USER">
 (make-package "SAMPLE-PACKAGE" :use '("COMMON-LISP"))
=>  #<PACKAGE "SAMPLE-PACKAGE">
 (list 
   (symbol-package
     (let ((*package* (find-package 'sample-package)))
       (setq *some-symbol* (read-from-string "just-testing"))))
   *package*)
=>  (#<PACKAGE "SAMPLE-PACKAGE"> #<PACKAGE "COMMON-LISP-USER">)
 (list (symbol-package (read-from-string "just-testing"))
       *package*)
=>  (#<PACKAGE "COMMON-LISP-USER"> #<PACKAGE "COMMON-LISP-USER">)
 (eq 'foo (intern "FOO")) =>  true
 (eq 'foo (let ((*package* (find-package 'sample-package)))
            (intern "FOO")))
=>  false
@end verbatim

@strong{Affected By:}

@uref{fun_load.html#load,@strong{load}},
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{mac_in-package.html#in-package,@strong{in-package}}

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{mac_in-package.html#in-package,@strong{in-package}},
@uref{fun_load.html#load,@strong{load}}, @strong{package}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 12
@section CLHS: Chapter 12
@anchor{#clhs-chapter-12}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_package-error-package.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_12-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
12. Numbers

@uref{sec_12-1.html,}

12.1 Number Concepts

@uref{sec_the_numbers_dictionary.html,}

12.2 The Numbers Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Numbers Dictionary::
@end menu

@node CLHS Section The Numbers Dictionary
@subsection CLHS: Section The Numbers Dictionary
@anchor{#clhs-section-the-numbers-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_12-1-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-12.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_number.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
12.2 The Numbers Dictionary

@uref{syscla_number.html,@emph{System Class} @strong{NUMBER}}

@uref{syscla_complex.html,@emph{System Class} @strong{COMPLEX}}

@uref{syscla_real.html,@emph{System Class} @strong{REAL}}

@uref{syscla_float.html,@emph{System Class} @strong{FLOAT}}

@uref{typ_short-flo_m_long-float.html,@emph{Type} @strong{SHORT-FLOAT,
SINGLE-FLOAT, DOUBLE-FLOAT, LONG-FLOAT}}

@uref{syscla_rational.html,@emph{System Class} @strong{RATIONAL}}

@uref{syscla_ratio.html,@emph{System Class} @strong{RATIO}}

@uref{syscla_integer.html,@emph{System Class} @strong{INTEGER}}

@uref{typ_signed-byte.html,@emph{Type} @strong{SIGNED-BYTE}}

@uref{typ_unsigned-byte.html,@emph{Type} @strong{UNSIGNED-BYTE}}

@uref{typspe_mod.html,@emph{Type Specifier} @strong{MOD}}

@uref{typ_bit.html,@emph{Type} @strong{BIT}}

@uref{typ_fixnum.html,@emph{Type} @strong{FIXNUM}}

@uref{typ_bignum.html,@emph{Type} @strong{BIGNUM}}

@uref{fun_eqcm_sleq__lteqcm_gteq.html,@emph{Function} @strong{=, /=, <,
>, <=, >=}}

@uref{fun_maxcm_min.html,@emph{Function} @strong{MAX, MIN}}

@uref{fun_minuspcm_plusp.html,@emph{Function} @strong{MINUSP, PLUSP}}

@uref{fun_zerop.html,@emph{Function} @strong{ZEROP}}

@uref{fun_floorcm_f_undcm_fround.html,@emph{Function} @strong{FLOOR,
FFLOOR, CEILING, FCEILING, TRUNCATE, FTRUNCATE, ROUND, FROUND}}

@uref{fun_sincm_coscm_tan.html,@emph{Function} @strong{SIN, COS, TAN}}

@uref{fun_asincm_acoscm_atan.html,@emph{Function} @strong{ASIN, ACOS,
ATAN}}

@uref{convar_pi.html,@emph{Constant Variable} @strong{PI}}

@uref{fun_sinhcm_co_coshcm_atanh.html,@emph{Function} @strong{SINH,
COSH, TANH, ASINH, ACOSH, ATANH}}

@uref{fun_st.html,@emph{Function} @strong{*}}

@uref{fun_pl.html,@emph{Function} @strong{+}}

@uref{fun_-.html,@emph{Function} @strong{-}}

@uref{fun_sl.html,@emph{Function} @strong{/}}

@uref{fun_1plcm_1-.html,@emph{Function} @strong{1+, 1-}}

@uref{fun_abs.html,@emph{Function} @strong{ABS}}

@uref{fun_evenpcm_oddp.html,@emph{Function} @strong{EVENP, ODDP}}

@uref{fun_expcm_expt.html,@emph{Function} @strong{EXP, EXPT}}

@uref{fun_gcd.html,@emph{Function} @strong{GCD}}

@uref{mac_incfcm_decf.html,@emph{Macro} @strong{INCF, DECF}}

@uref{fun_lcm.html,@emph{Function} @strong{LCM}}

@uref{fun_log.html,@emph{Function} @strong{LOG}}

@uref{fun_modcm_rem.html,@emph{Function} @strong{MOD, REM}}

@uref{fun_signum.html,@emph{Function} @strong{SIGNUM}}

@uref{fun_sqrtcm_isqrt.html,@emph{Function} @strong{SQRT, ISQRT}}

@uref{syscla_random-state.html,@emph{System Class}
@strong{RANDOM-STATE}}

@uref{fun_make-random-state.html,@emph{Function}
@strong{MAKE-RANDOM-STATE}}

@uref{fun_random.html,@emph{Function} @strong{RANDOM}}

@uref{fun_random-state-p.html,@emph{Function} @strong{RANDOM-STATE-P}}

@uref{var_strandom-statest.html,@emph{Variable} @strong{*RANDOM-STATE*}}

@uref{fun_numberp.html,@emph{Function} @strong{NUMBERP}}

@uref{fun_cis.html,@emph{Function} @strong{CIS}}

@uref{fun_complex.html,@emph{Function} @strong{COMPLEX}}

@uref{fun_complexp.html,@emph{Function} @strong{COMPLEXP}}

@uref{fun_conjugate.html,@emph{Function} @strong{CONJUGATE}}

@uref{fun_phase.html,@emph{Function} @strong{PHASE}}

@uref{fun_realpartcm_imagpart.html,@emph{Function} @strong{REALPART,
IMAGPART}}

@uref{fun_upgraded-_ex-part-type.html,@emph{Function}
@strong{UPGRADED-COMPLEX-PART-TYPE}}

@uref{fun_realp.html,@emph{Function} @strong{REALP}}

@uref{fun_numerator__denominator.html,@emph{Function} @strong{NUMERATOR,
DENOMINATOR}}

@uref{fun_rationalcm_rationalize.html,@emph{Function} @strong{RATIONAL,
RATIONALIZE}}

@uref{fun_rationalp.html,@emph{Function} @strong{RATIONALP}}

@uref{fun_ash.html,@emph{Function} @strong{ASH}}

@uref{fun_integer-length.html,@emph{Function} @strong{INTEGER-LENGTH}}

@uref{fun_integerp.html,@emph{Function} @strong{INTEGERP}}

@uref{fun_parse-integer.html,@emph{Function} @strong{PARSE-INTEGER}}

@uref{fun_boole.html,@emph{Function} @strong{BOOLE}}

@uref{convar_boole-_cm_boole-xor.html,@emph{Constant Variable}
@strong{BOOLE-1, BOOLE-2, BOOLE-AND, BOOLE-ANDC1, BOOLE-ANDC2, BOOLE-C1,
BOOLE-C2, BOOLE-CLR, BOOLE-EQV, BOOLE-IOR, BOOLE-NAND, BOOLE-NOR,
BOOLE-ORC1, BOOLE-ORC2, BOOLE-SET, BOOLE-XOR}}

@uref{fun_logandcm__rc2cm_logxor.html,@emph{Function} @strong{LOGAND,
LOGANDC1, LOGANDC2, LOGEQV, LOGIOR, LOGNAND, LOGNOR, LOGNOT, LOGORC1,
LOGORC2, LOGXOR}}

@uref{fun_logbitp.html,@emph{Function} @strong{LOGBITP}}

@uref{fun_logcount.html,@emph{Function} @strong{LOGCOUNT}}

@uref{fun_logtest.html,@emph{Function} @strong{LOGTEST}}

@uref{fun_bytecm_by_yte-position.html,@emph{Function} @strong{BYTE,
BYTE-SIZE, BYTE-POSITION}}

@uref{fun_deposit-field.html,@emph{Function} @strong{DEPOSIT-FIELD}}

@uref{fun_dpb.html,@emph{Function} @strong{DPB}}

@uref{acc_ldb.html,@emph{Accessor} @strong{LDB}}

@uref{fun_ldb-test.html,@emph{Function} @strong{LDB-TEST}}

@uref{acc_mask-field.html,@emph{Accessor} @strong{MASK-FIELD}}

@uref{convar_most-p_ative-fixnum.html,@emph{Constant Variable}
@strong{MOST-POSITIVE-FIXNUM, MOST-NEGATIVE-FIXNUM}}

@uref{fun_decode-fl_decode-float.html,@emph{Function}
@strong{DECODE-FLOAT, SCALE-FLOAT, FLOAT-RADIX, FLOAT-SIGN,
FLOAT-DIGITS, FLOAT-PRECISION, INTEGER-DECODE-FLOAT}}

@uref{fun_float.html,@emph{Function} @strong{FLOAT}}

@uref{fun_floatp.html,@emph{Function} @strong{FLOATP}}

@uref{convar_most-p_d-long-float.html,@emph{Constant Variable}
@strong{MOST-POSITIVE-SHORT-FLOAT, LEAST-POSITIVE-SHORT-FLOAT,
LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT, MOST-POSITIVE-DOUBLE-FLOAT,
LEAST-POSITIVE-DOUBLE-FLOAT, LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT,
MOST-POSITIVE-LONG-FLOAT, LEAST-POSITIVE-LONG-FLOAT,
LEAST-POSITIVE-NORMALIZED-LONG-FLOAT, MOST-POSITIVE-SINGLE-FLOAT,
LEAST-POSITIVE-SINGLE-FLOAT, LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT,
MOST-NEGATIVE-SHORT-FLOAT, LEAST-NEGATIVE-SHORT-FLOAT,
LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT, MOST-NEGATIVE-SINGLE-FLOAT,
LEAST-NEGATIVE-SINGLE-FLOAT, LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT,
MOST-NEGATIVE-DOUBLE-FLOAT, LEAST-NEGATIVE-DOUBLE-FLOAT,
LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT, MOST-NEGATIVE-LONG-FLOAT,
LEAST-NEGATIVE-LONG-FLOAT, LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT}}

@uref{convar_short-_tive-epsilon.html,@emph{Constant Variable}
@strong{SHORT-FLOAT-EPSILON, SHORT-FLOAT-NEGATIVE-EPSILON,
SINGLE-FLOAT-EPSILON, SINGLE-FLOAT-NEGATIVE-EPSILON,
DOUBLE-FLOAT-EPSILON, DOUBLE-FLOAT-NEGATIVE-EPSILON, LONG-FLOAT-EPSILON,
LONG-FLOAT-NEGATIVE-EPSILON}}

@uref{contyp_arithmetic-error.html,@emph{Condition Type}
@strong{ARITHMETIC-ERROR}}

@uref{fun_arithmeti_or-operation.html,@emph{Function}
@strong{ARITHMETIC-ERROR-OPERANDS, ARITHMETIC-ERROR-OPERATION}}

@uref{contyp_division-by-zero.html,@emph{Condition Type}
@strong{DIVISION-BY-ZERO}}

@uref{contyp_floati_id-operation.html,@emph{Condition Type}
@strong{FLOATING-POINT-INVALID-OPERATION}}

@uref{contyp_floati_oint-inexact.html,@emph{Condition Type}
@strong{FLOATING-POINT-INEXACT}}

@uref{contyp_floati_int-overflow.html,@emph{Condition Type}
@strong{FLOATING-POINT-OVERFLOW}}

@uref{contyp_floati_nt-underflow.html,@emph{Condition Type}
@strong{FLOATING-POINT-UNDERFLOW}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor LDB::
* CLHS Accessor MASK-FIELD::
* CLHS Condition Type ARITHMETIC-ERROR::
* CLHS Condition Type DIVISION-BY-ZERO::
* CLHS Condition Type FLOATING-POINT-INVALID-OPERATION::
* CLHS Condition Type FLOATING-POINT-OVERFLOW::
* CLHS Condition Type FLOATING-POINT-UNDERFLOW::
* CLHS Condition Type FLOATING-POINT-INEXACT::
* CLHS Constant Variable BOOLE-1 BOOLE-2::
* CLHS Constant Variable MOST-POSITIVE-FIXNUM::
* CLHS Constant Variable MOST-POSITIVE-SHORT-FLOAT::
* CLHS Constant Variable PI::
* CLHS Constant Variable SHORT-FLOAT-EPSILON::
* CLHS Function -::
* CLHS Function 1+ 1-::
* CLHS Function ABS::
* CLHS Function ARITHMETIC-ERROR-OPERANDS::
* CLHS Function ASH::
* CLHS Function ASIN ACOS ATAN::
* CLHS Function BOOLE::
* CLHS Function BYTE BYTE-SIZE BYTE-POSITION::
* CLHS Function CIS::
* CLHS Function COMPLEX::
* CLHS Function COMPLEXP::
* CLHS Function CONJUGATE::
* CLHS Function DECODE-FLOAT SCALE-FLOAT::
* CLHS Function DEPOSIT-FIELD::
* CLHS Function DPB::
* CLHS Function = /= < > <= >=::
* CLHS Function EVENP ODDP::
* CLHS Function EXP EXPT::
* CLHS Function FLOAT::
* CLHS Function FLOATP::
* CLHS Function FLOOR FFLOOR CEILING FCEILING::
* CLHS Function GCD::
* CLHS Function INTEGER-LENGTH::
* CLHS Function INTEGERP::
* CLHS Function LCM::
* CLHS Function LDB-TEST::
* CLHS Function LOG::
* CLHS Function LOGAND LOGANDC1 LOGANDC2::
* CLHS Function LOGBITP::
* CLHS Function LOGCOUNT::
* CLHS Function LOGTEST::
* CLHS Function MAKE-RANDOM-STATE::
* CLHS Function MAX MIN::
* CLHS Function MINUSP PLUSP::
* CLHS Function MOD REM::
* CLHS Function NUMBERP::
* CLHS Function NUMERATOR DENOMINATOR::
* CLHS Function PARSE-INTEGER::
* CLHS Function PHASE::
* CLHS Function +::
* CLHS Function RANDOM-STATE-P::
* CLHS Function RANDOM::
* CLHS Function RATIONAL RATIONALIZE::
* CLHS Function RATIONALP::
* CLHS Function REALP::
* CLHS Function REALPART IMAGPART::
* CLHS Function SIGNUM::
* CLHS Function SIN COS TAN::
* CLHS Function SINH COSH TANH ASINH::
* CLHS Function /::
* CLHS Function SQRT ISQRT::
* CLHS Function *::
* CLHS Function UPGRADED-COMPLEX-PART-TYPE::
* CLHS Function ZEROP::
* CLHS Macro INCF DECF::
* CLHS System Class COMPLEX::
* CLHS System Class FLOAT::
* CLHS System Class INTEGER::
* CLHS System Class RANDOM-STATE::
* CLHS System Class RATIO::
* CLHS System Class RATIONAL::
* CLHS System Class REAL::
* CLHS Type BIGNUM::
* CLHS Type BIT::
* CLHS Type FIXNUM::
* CLHS Type SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT::
* CLHS Type SIGNED-BYTE::
* CLHS Type UNSIGNED-BYTE::
* CLHS Type Specifier MOD::
* CLHS Variable *RANDOM-STATE*::
@end menu

@node CLHS Accessor LDB
@subsubsection CLHS: Accessor LDB
@anchor{#clhs-accessor-ldb}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_dpb.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_ldb-test.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{LDB}

@strong{Syntax:}

@strong{ldb} @emph{bytespec integer} => @emph{byte}

(setf (@strong{ldb} @emph{bytespec place}) @emph{new-byte})

@strong{Pronunciation:}

['lidib] or ['liduhb] or ['el'dee'bee]

@strong{Arguments and Values:}

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{byte}, @emph{new-byte}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#ldb,@strong{ldb}} extracts and returns the
@uref{glo_b.html#byte,@emph{byte}} of @emph{integer} specified by
@emph{bytespec}.

@ref{#ldb,@strong{ldb}} returns an
@uref{glo_i.html#integer,@emph{integer}} in which the bits with weights
2^(@emph{s}-1) through 2^0 are the same as those in @emph{integer} with
weights 2^(@emph{p}+@emph{s}-1) through 2^@emph{p}, and all other bits
zero; @emph{s} is (byte-size @emph{bytespec}) and @emph{p} is
(byte-position @emph{bytespec}).

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} may be used with
@ref{#ldb,@strong{ldb}} to modify a byte within the @emph{integer} that
is stored in a given @emph{place}. The order of evaluation, when an
@ref{#ldb,@strong{ldb}} form is supplied to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}, is exactly
left-to-right. The effect is to perform a
@uref{fun_dpb.html#dpb,@strong{dpb}} operation and then store the result
back into the @emph{place}.

@strong{Examples:}

@verbatim
 (ldb (byte 2 1) 10) =>  1
 (setq a (list 8)) =>  (8)
 (setf (ldb (byte 2 1) (car a)) 1) =>  1
 a =>  (10)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_bytecm_by_yte-position.html#byte,@strong{byte}},
@uref{fun_bytecm_by_yte-position.html#byte-position,@strong{byte-position}},
@uref{fun_bytecm_by_yte-position.html#byte-size,@strong{byte-size}},
@uref{fun_dpb.html#dpb,@strong{dpb}}

@strong{Notes:}

@verbatim
 (logbitp j (ldb (byte s p) n))
    ==  (and (< j s) (logbitp (+ j p) n))
@end verbatim

In general,

@verbatim
 (ldb (byte 0 x) y) =>  0
@end verbatim

for all valid values of @emph{x} and @emph{y}.

Historically, the name ``ldb'' comes from a DEC PDP-10 assembly language
instruction meaning ``load byte.''

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor MASK-FIELD
@subsubsection CLHS: Accessor MASK-FIELD
@anchor{#clhs-accessor-mask-field}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ldb-test.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_most-p_ative-fixnum.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{MASK-FIELD}

@strong{Syntax:}

@strong{mask-field} @emph{bytespec integer} => @emph{masked-integer}

(setf (@strong{mask-field} @emph{bytespec place})
@emph{new-masked-integer})

@strong{Arguments and Values:}

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{masked-integer}, @emph{new-masked-integer}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#mask-field,@strong{mask-field}} performs a ``mask'' operation on
@emph{integer}. It returns an @uref{glo_i.html#integer,@emph{integer}}
that has the same bits as @emph{integer} in the
@uref{glo_b.html#byte,@emph{byte}} specified by @emph{bytespec}, but
that has zero-bits everywhere else.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} may be used with
@ref{#mask-field,@strong{mask-field}} to modify a byte within the
@uref{glo_i.html#integer,@emph{integer}} that is stored in a given
@emph{place}. The effect is to perform a
@uref{fun_deposit-field.html#deposit-field,@strong{deposit-field}}
operation and then store the result back into the @emph{place}.

@strong{Examples:}

@verbatim
 (mask-field (byte 1 5) -1) =>  32
 (setq a 15) =>  15
 (mask-field (byte 2 0) a) =>  3
 a =>  15
 (setf (mask-field (byte 2 0) a) 1) =>  1
 a =>  13
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_bytecm_by_yte-position.html#byte,@strong{byte}},
@uref{acc_ldb.html#ldb,@strong{ldb}}

@strong{Notes:}

@verbatim
 (ldb bs (mask-field bs n)) ==  (ldb bs n)
 (logbitp j (mask-field (byte s p) n))
   ==  (and (>= j p) (< j s) (logbitp j n))
 (mask-field bs n) ==  (logand n (dpb -1 bs 0))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type ARITHMETIC-ERROR
@subsubsection CLHS: Condition Type ARITHMETIC-ERROR
@anchor{#clhs-condition-type-arithmetic-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_short-_tive-epsilon.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_arithmeti_or-operation.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{ARITHMETIC-ERROR}

@strong{Class Precedence List:}

@ref{#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#arithmetic-error,@strong{arithmetic-error}} consists of error
conditions that occur during arithmetic operations. The operation and
operands are initialized with the initialization arguments named
:operation and :operands to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and are @emph{accessed} by the functions
@uref{fun_arithmeti_or-operation.html#arithmetic-error-operation,@strong{arithmetic-error-operation}}
and
@uref{fun_arithmeti_or-operation.html#arithmetic-error-operands,@strong{arithmetic-error-operands}}.

@strong{See Also:}

@uref{fun_arithmeti_or-operation.html#arithmetic-error-operation,@strong{arithmetic-error-operation}},
@uref{fun_arithmeti_or-operation.html#arithmetic-error-operands,@strong{arithmetic-error-operands}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type DIVISION-BY-ZERO
@subsubsection CLHS: Condition Type DIVISION-BY-ZERO
@anchor{#clhs-condition-type-division-by-zero}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_arithmeti_or-operation.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_floati_id-operation.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{DIVISION-BY-ZERO}

@strong{Class Precedence List:}

@ref{#division-by-zero,@strong{division-by-zero}},
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#division-by-zero,@strong{division-by-zero}} consists of error
conditions that occur because of division by zero.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type FLOATING-POINT-INVALID-OPERATION
@subsubsection CLHS: Condition Type FLOATING-POINT-INVALID-OPERATION
@anchor{#clhs-condition-type-floating-point-invalid-operation}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_division-by-zero.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_floati_oint-inexact.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{FLOATING-POINT-INVALID-OPERATION}

@strong{Class Precedence List:}

@ref{#floating-point-invalid-operation,@strong{floating-point-invalid-operation}},
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#floating-point-invalid-operation,@strong{floating-point-invalid-operation}}
consists of error conditions that occur because of certain floating
point traps.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether floating point traps occur, and whether or how they may be
enabled or disabled. Therefore, conforming code may establish handlers
for this condition, but must not depend on its being @emph{signaled}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss163.html,FLOATING-POINT-CONDITION-NAMES:X3J13-NOV-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type FLOATING-POINT-OVERFLOW
@subsubsection CLHS: Condition Type FLOATING-POINT-OVERFLOW
@anchor{#clhs-condition-type-floating-point-overflow}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_floati_oint-inexact.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_floati_nt-underflow.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{FLOATING-POINT-OVERFLOW}

@strong{Class Precedence List:}

@ref{#floating-point-overflow,@strong{floating-point-overflow}},
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#floating-point-overflow,@strong{floating-point-overflow}} consists
of error conditions that occur because of floating-point overflow.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type FLOATING-POINT-UNDERFLOW
@subsubsection CLHS: Condition Type FLOATING-POINT-UNDERFLOW
@anchor{#clhs-condition-type-floating-point-underflow}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_floati_int-overflow.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-13.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{FLOATING-POINT-UNDERFLOW}

@strong{Class Precedence List:}

@ref{#floating-point-underflow,@strong{floating-point-underflow}},
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#floating-point-underflow,@strong{floating-point-underflow}}
consists of error conditions that occur because of floating-point
underflow.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type FLOATING-POINT-INEXACT
@subsubsection CLHS: Condition Type FLOATING-POINT-INEXACT
@anchor{#clhs-condition-type-floating-point-inexact}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_floati_id-operation.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_floati_int-overflow.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{FLOATING-POINT-INEXACT}

@strong{Class Precedence List:}

@ref{#floating-point-inexact,@strong{floating-point-inexact}},
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#floating-point-inexact,@strong{floating-point-inexact}} consists
of error conditions that occur because of certain floating point traps.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether floating point traps occur, and whether or how they may be
enabled or disabled. Therefore, conforming code may establish handlers
for this condition, but must not depend on its being @emph{signaled}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss163.html,FLOATING-POINT-CONDITION-NAMES:X3J13-NOV-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable BOOLE-1 BOOLE-2
@subsubsection CLHS: Constant Variable BOOLE-1, BOOLE-2...
@anchor{#clhs-constant-variable-boole-1-boole-2...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_boole.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_logandcm__rc2cm_logxor.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{BOOLE-1, BOOLE-2, BOOLE-AND,
BOOLE-ANDC1, BOOLE-ANDC2, BOOLE-C1, BOOLE-C2, BOOLE-CLR, BOOLE-EQV,
BOOLE-IOR, BOOLE-NAND, BOOLE-NOR, BOOLE-ORC1, BOOLE-ORC2, BOOLE-SET,
BOOLE-XOR}

@strong{Constant Value:}

The identity and nature of the @uref{glo_v.html#value,@emph{values}} of
each of these @uref{glo_v.html#variable,@emph{variables}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
except that it must be @uref{glo_d.html#distinct,@emph{distinct}} from
each of the @uref{glo_v.html#value,@emph{values}} of the others, and it
must be a valid first @uref{glo_a.html#argument,@emph{argument}} to the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_boole.html#boole,@strong{boole}}.

@strong{Description:}

Each of these @uref{glo_c.html#constant,@emph{constants}} has a
@uref{glo_v.html#value,@emph{value}} which is one of the sixteen
possible
@uref{glo_b.html#bit-wise_logical_operation_specifier,@emph{bit-wise
logical operation specifiers}}.

@strong{Examples:}

@verbatim
 (boole boole-ior 1 16) =>  17
 (boole boole-and -2 5) =>  4
 (boole boole-eqv 17 15) =>  -31
@end verbatim

@strong{See Also:}

@uref{fun_boole.html#boole,@strong{boole}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable MOST-POSITIVE-FIXNUM
@subsubsection CLHS: Constant Variable MOST-POSITIVE-FIXNUM...
@anchor{#clhs-constant-variable-most-positive-fixnum...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_mask-field.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_decode-fl_decode-float.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{MOST-POSITIVE-FIXNUM,
MOST-NEGATIVE-FIXNUM}

@strong{Constant Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

@ref{#most-positive-fixnum,@strong{most-positive-fixnum}} is that
@uref{glo_f.html#fixnum,@emph{fixnum}} closest in value to positive
infinity provided by the implementation, and greater than or equal to
both 2^15 - 1 and
@uref{convar_array-_ension-limit.html#array-dimension-limit,@strong{array-dimension-limit}}.

@ref{#most-negative-fixnum,@strong{most-negative-fixnum}} is that
@uref{glo_f.html#fixnum,@emph{fixnum}} closest in value to negative
infinity provided by the implementation, and less than or equal to
-2^15.

@strong{Examples:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss158.html,FIXNUM-NON-PORTABLE:TIGHTEN-DEFINITION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable MOST-POSITIVE-SHORT-FLOAT
@subsubsection CLHS: Constant Variable MOST-POSITIVE-SHORT-FLOAT...
@anchor{#clhs-constant-variable-most-positive-short-float...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_floatp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_short-_tive-epsilon.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{MOST-POSITIVE-SHORT-FLOAT,
LEAST-POSITIVE-SHORT-FLOAT, LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT,
MOST-POSITIVE-DOUBLE-FLOAT, LEAST-POSITIVE-DOUBLE-FLOAT,
LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT, MOST-POSITIVE-LONG-FLOAT,
LEAST-POSITIVE-LONG-FLOAT, LEAST-POSITIVE-NORMALIZED-LONG-FLOAT,
MOST-POSITIVE-SINGLE-FLOAT, LEAST-POSITIVE-SINGLE-FLOAT,
LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT, MOST-NEGATIVE-SHORT-FLOAT,
LEAST-NEGATIVE-SHORT-FLOAT, LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT,
MOST-NEGATIVE-SINGLE-FLOAT, LEAST-NEGATIVE-SINGLE-FLOAT,
LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT, MOST-NEGATIVE-DOUBLE-FLOAT,
LEAST-NEGATIVE-DOUBLE-FLOAT, LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT,
MOST-NEGATIVE-LONG-FLOAT, LEAST-NEGATIVE-LONG-FLOAT,
LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT}

@strong{Constant Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

These @uref{glo_c.html#constant_variable,@emph{constant variables}}
provide a way for programs to examine the
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
limits for the various float formats.

Of these @uref{glo_v.html#variable,@emph{variables}}, each which has
``-normalized'' in its @uref{glo_n.html#name,@emph{name}} must have a
@uref{glo_v.html#value,@emph{value}} which is a
@uref{glo_n.html#normalized,@emph{normalized}}
@uref{glo_f.html#float,@emph{float}}, and each which does not have
``-normalized'' in its name may have a
@uref{glo_v.html#value,@emph{value}} which is either a
@uref{glo_n.html#normalized,@emph{normalized}}
@uref{glo_f.html#float,@emph{float}} or a
@uref{glo_d.html#denormalized,@emph{denormalized}}
@uref{glo_f.html#float,@emph{float}}, as appropriate.

Of these @uref{glo_v.html#variable,@emph{variables}}, each which has
``short-float'' in its name must have a
@uref{glo_v.html#value,@emph{value}} which is a
@uref{glo_s.html#short_float,@emph{short float}}, each which has
``single-float'' in its name must have a
@uref{glo_v.html#value,@emph{value}} which is a
@uref{glo_s.html#single_float,@emph{single float}}, each which has
``double-float'' in its name must have a
@uref{glo_v.html#value,@emph{value}} which is a
@uref{glo_d.html#double_float,@emph{double float}}, and each which has
``long-float'' in its name must have a
@uref{glo_v.html#value,@emph{value}} which is a
@uref{glo_l.html#long_float,@emph{long float}}.

@itemize
@item
@ref{#most-positive-short-float,@strong{most-positive-short-float}},
@ref{#most-positive-single-float,@strong{most-positive-single-float}},
@ref{#most-positive-double-float,@strong{most-positive-double-float}},
@ref{#most-positive-long-float,@strong{most-positive-long-float}}

Each of these @uref{glo_c.html#constant_variable,@emph{constant
variables}} has as its @uref{glo_v.html#value,@emph{value}} the positive
@uref{glo_f.html#float,@emph{float}} of the largest magnitude (closest
in value to, but not equal to, positive infinity) for the float format
implied by its name.

@item
@ref{#least-positive-short-float,@strong{least-positive-short-float}},
@ref{#least-positive-normalized-short-float,@strong{least-positive-normalized-short-float}},
@ref{#least-positive-single-float,@strong{least-positive-single-float}},
@ref{#least-positive-normalized-single-float,@strong{least-positive-normalized-single-float}},
@ref{#least-positive-double-float,@strong{least-positive-double-float}},
@ref{#least-positive-normalized-double-float,@strong{least-positive-normalized-double-float}},
@ref{#least-positive-long-float,@strong{least-positive-long-float}},
@ref{#least-positive-normalized-long-float,@strong{least-positive-normalized-long-float}}

Each of these @uref{glo_c.html#constant_variable,@emph{constant
variables}} has as its @uref{glo_v.html#value,@emph{value}} the smallest
positive (nonzero) @uref{glo_f.html#float,@emph{float}} for the float
format implied by its name.

@item
@ref{#least-negative-short-float,@strong{least-negative-short-float}},
@ref{#least-negative-normalized-short-float,@strong{least-negative-normalized-short-float}},
@ref{#least-negative-single-float,@strong{least-negative-single-float}},
@ref{#least-negative-normalized-single-float,@strong{least-negative-normalized-single-float}},
@ref{#least-negative-double-float,@strong{least-negative-double-float}},
@ref{#least-negative-normalized-double-float,@strong{least-negative-normalized-double-float}},
@ref{#least-negative-long-float,@strong{least-negative-long-float}},
@ref{#least-negative-normalized-long-float,@strong{least-negative-normalized-long-float}}

Each of these @uref{glo_c.html#constant_variable,@emph{constant
variables}} has as its @uref{glo_v.html#value,@emph{value}} the negative
(nonzero) @uref{glo_f.html#float,@emph{float}} of the smallest magnitude
for the float format implied by its name. (If an implementation supports
minus zero as a @uref{glo_d.html#different,@emph{different}}
@uref{glo_o.html#object,@emph{object}} from positive zero, this value
must not be minus zero.)

@item
@ref{#most-negative-short-float,@strong{most-negative-short-float}},
@ref{#most-negative-single-float,@strong{most-negative-single-float}},
@ref{#most-negative-double-float,@strong{most-negative-double-float}},
@ref{#most-negative-long-float,@strong{most-negative-long-float}}

Each of these @uref{glo_c.html#constant_variable,@emph{constant
variables}} has as its @uref{glo_v.html#value,@emph{value}} the negative
@uref{glo_f.html#float,@emph{float}} of the largest magnitude (closest
in value to, but not equal to, negative infinity) for the float format
implied by its name.

@end itemize

@strong{Examples:} None.

@strong{See Also:} None.

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss162.html,FLOAT-UNDERFLOW:ADD-VARIABLES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable PI
@subsubsection CLHS: Constant Variable PI
@anchor{#clhs-constant-variable-pi}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_asincm_acoscm_atan.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sinhcm_co_coshcm_atanh.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{PI}

@strong{Value:}

an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_l.html#long_float,@emph{long float}}.

@strong{Description:}

The best @uref{glo_l.html#long_float,@emph{long float}} approximation to
the mathematical constant <PI>.

@strong{Examples:}

@verbatim
 ;; In each of the following computations, the precision depends 
 ;; on the implementation.  Also, if `long float' is treated by 
 ;; the implementation as equivalent to some other float format 
 ;; (e.g., `double float') the exponent marker might be the marker
 ;; for that equivalent (e.g., `D' instead of `L').
 pi =>  3.141592653589793L0
 (cos pi) =>  -1.0L0

 (defun sin-of-degrees (degrees)
   (let ((x (if (floatp degrees) degrees (float degrees pi))))
     (sin (* x (/ (float pi x) 180)))))
@end verbatim

@strong{See Also:} None.

@strong{Notes:}

An approximation to <PI> in some other precision can be obtained by
writing (float pi x), where x is a @uref{glo_f.html#float,@emph{float}}
of the desired precision, or by writing (coerce pi @emph{type}), where
@emph{type} is the desired type, such as
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable SHORT-FLOAT-EPSILON
@subsubsection CLHS: Constant Variable SHORT-FLOAT-EPSILON...
@anchor{#clhs-constant-variable-short-float-epsilon...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_most-p_d-long-float.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_arithmetic-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{SHORT-FLOAT-EPSILON,
SHORT-FLOAT-NEGATIVE-EPSILON, SINGLE-FLOAT-EPSILON,
SINGLE-FLOAT-NEGATIVE-EPSILON, DOUBLE-FLOAT-EPSILON,
DOUBLE-FLOAT-NEGATIVE-EPSILON, LONG-FLOAT-EPSILON,
LONG-FLOAT-NEGATIVE-EPSILON}

@strong{Constant Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The value of each of the constants
@ref{#short-float-epsilon,@strong{short-float-epsilon}},
@ref{#single-float-epsilon,@strong{single-float-epsilon}},
@ref{#double-float-epsilon,@strong{double-float-epsilon}}, and
@ref{#long-float-epsilon,@strong{long-float-epsilon}} is the smallest
positive @uref{glo_f.html#float,@emph{float}} <EPSILON> of the given
format, such that the following expression is
@uref{glo_t.html#true,@emph{true}} when evaluated:

(not (= (float 1 <EPSILON>) (+ (float 1 <EPSILON>) <EPSILON>)))

The value of each of the constants
@ref{#short-float-negative-epsilon,@strong{short-float-negative-epsilon}},
@ref{#single-float-negative-epsilon,@strong{single-float-negative-epsilon}},
@ref{#double-float-negative-epsilon,@strong{double-float-negative-epsilon}},
and
@ref{#long-float-negative-epsilon,@strong{long-float-negative-epsilon}}
is the smallest positive @uref{glo_f.html#float,@emph{float}} <EPSILON>
of the given format, such that the following expression is
@uref{glo_t.html#true,@emph{true}} when evaluated:

(not (= (float 1 <EPSILON>) (- (float 1 <EPSILON>) <EPSILON>)))

@strong{Examples:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function -
@subsubsection CLHS: Function -
@anchor{#clhs-function--}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pl.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sl.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{-}

@strong{Syntax:}

@strong{-} @emph{number} => @emph{negation}

@strong{-} @emph{minuend &rest subtrahends+} => @emph{difference}

@strong{Arguments and Values:}

@emph{number}, @emph{minuend}, @emph{subtrahend}---a
@uref{glo_n.html#number,@emph{number}}.

@emph{negation}, @emph{difference}---a
@uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}} @ref{#-,@strong{-}}
performs arithmetic subtraction and negation.

If only one @emph{number} is supplied, the negation of that
@emph{number} is returned.

If more than one @uref{glo_a.html#argument,@emph{argument}} is given, it
subtracts all of the @emph{subtrahends} from the @emph{minuend} and
returns the result.

The @uref{glo_f.html#function,@emph{function}} @ref{#-,@strong{-}}
performs necessary type conversions.

@strong{Examples:}

@verbatim
 (- 55.55) =>  -55.55
 (- #c(3 -5)) =>  #C(-3 5)
 (- 0) =>  0
 (eql (- 0.0) -0.0) =>  true
 (- #c(100 45) #c(0 45)) =>  100
 (- 10 1 2 3 4) =>  0
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if some
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{sec_12-1-1.html,Section 12.1.1 (Numeric Operations)},
@uref{sec_12-1-3.html,Section 12.1.3 (Rational Computations)},
@uref{sec_12-1-4.html,Section 12.1.4 (Floating-point Computations)},
@uref{sec_12-1-5.html,Section 12.1.5 (Complex Computations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function 1+ 1-
@subsubsection CLHS: Function 1+, 1-
@anchor{#clhs-function-1-1-}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sl.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_abs.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{1+, 1-}

@strong{Syntax:}

@strong{1+} @emph{number} => @emph{successor}

@strong{1-} @emph{number} => @emph{predecessor}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{successor}, @emph{predecessor}---a
@uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#1PL,@strong{1+}} returns a @uref{glo_n.html#number,@emph{number}}
that is one more than its argument @emph{number}. @ref{#1-,@strong{1-}}
returns a @uref{glo_n.html#number,@emph{number}} that is one less than
its argument @emph{number}.

@strong{Examples:}

@verbatim
 (1+ 99) =>  100 
 (1- 100) =>  99 
 (1+ (complex 0.0)) =>  #C(1.0 0.0) 
 (1- 5/3) =>  2/3 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{mac_incfcm_decf.html#incf,@strong{incf}},
@uref{mac_incfcm_decf.html#decf,@strong{decf}}

@strong{Notes:}

@verbatim
 (1+ number) ==  (+ number 1)
 (1- number) ==  (- number 1)
@end verbatim

Implementors are encouraged to make the performance of both the previous
expressions be the same.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ABS
@subsubsection CLHS: Function ABS
@anchor{#clhs-function-abs}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_1plcm_1-.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_evenpcm_oddp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ABS}

@strong{Syntax:}

@strong{abs} @emph{number} => @emph{absolute-value}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{absolute-value}---a non-negative
@uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

@ref{#abs,@strong{abs}} returns the absolute value of @emph{number}.

If @emph{number} is a @uref{syscla_real.html#real,@emph{real}}, the
result is of the same @uref{glo_t.html#type,@emph{type}} as
@emph{number}.

If @emph{number} is a @uref{glo_c.html#complex,@emph{complex}}, the
result is a positive @uref{syscla_real.html#real,@emph{real}} with the
same magnitude as @emph{number}. The result can be a
@uref{glo_f.html#float,@emph{float}} even if @emph{number}'s components
are @uref{glo_r.html#rational,@emph{rationals}} and an exact rational
result would have been possible. Thus the result of (abs #c(3 4)) can be
either 5 or 5.0, depending on the implementation.

@strong{Examples:}

@verbatim
 (abs 0) =>  0
 (abs 12/13) =>  12/13
 (abs -1.09) =>  1.09
 (abs #c(5.0 -5.0)) =>  7.071068
 (abs #c(5 5)) =>  7.071068
 (abs #c(3/5 4/5)) =>  1 or approximately 1.0
 (eql (abs -0.0) -0.0) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:}

If @emph{number} is a @uref{glo_c.html#complex,@emph{complex}}, the
result is equivalent to the following:

(sqrt (+ (expt (realpart @emph{number}) 2) (expt (imagpart
@emph{number}) 2)))

An implementation should not use this formula directly for all
@uref{glo_c.html#complex,@emph{complexes}} but should handle very large
or very small components specially to avoid intermediate overflow or
underflow.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss071.html,COMPLEX-RATIONAL-RESULT:EXTEND}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARITHMETIC-ERROR-OPERANDS
@subsubsection CLHS: Function ARITHMETIC-ERROR-OPERANDS...
@anchor{#clhs-function-arithmetic-error-operands...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_arithmetic-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_division-by-zero.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARITHMETIC-ERROR-OPERANDS,
ARITHMETIC-ERROR-OPERATION}

@strong{Syntax:}

@strong{arithmetic-error-operands} @emph{condition} => @emph{operands}

@strong{arithmetic-error-operation} @emph{condition} => @emph{operation}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@emph{operands}---a @uref{glo_l.html#list,@emph{list}}.

@emph{operation}---a @uref{glo_f.html#function_designator,@emph{function
designator}}.

@strong{Description:}

@ref{#arithmetic-error-operands,@strong{arithmetic-error-operands}}
returns a @uref{glo_l.html#list,@emph{list}} of the operands which were
used in the offending call to the operation that signaled the
@emph{condition}.

@ref{#arithmetic-error-operation,@strong{arithmetic-error-operation}}
returns a @uref{glo_l.html#list,@emph{list}} of the offending operation
in the offending call that signaled the @emph{condition}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}},
@uref{chap-9.html,Section 9 (Conditions)}

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ASH
@subsubsection CLHS: Function ASH
@anchor{#clhs-function-ash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rationalp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_integer-length.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ASH}

@strong{Syntax:}

@strong{ash} @emph{integer count} => @emph{shifted-integer}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{count}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{shifted-integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#ash,@strong{ash}} performs the arithmetic shift operation on the
binary representation of @emph{integer}, which is treated as if it were
binary.

@ref{#ash,@strong{ash}} shifts @emph{integer} arithmetically left by
@emph{count} bit positions if @emph{count} is positive, or right
@emph{count} bit positions if @emph{count} is negative. The shifted
value of the same sign as @emph{integer} is returned.

Mathematically speaking, @ref{#ash,@strong{ash}} performs the
computation floor(@emph{integer}*2^@emph{count}). Logically,
@ref{#ash,@strong{ash}} moves all of the bits in @emph{integer} to the
left, adding zero-bits at the right, or moves them to the right,
discarding bits.

@ref{#ash,@strong{ash}} is defined to behave as if @emph{integer} were
represented in two's complement form, regardless of how
@uref{glo_i.html#integer,@emph{integers}} are represented internally.

@strong{Examples:}

@verbatim
 (ash 16 1) =>  32
 (ash 16 0) =>  16
 (ash 16 -1) =>  8
 (ash -100000000000000000000000000000000 -100) =>  -79
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer} is not an @uref{glo_i.html#integer,@emph{integer}}.
Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{count} is not an @uref{glo_i.html#integer,@emph{integer}}. Might
signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (logbitp j (ash n k))
 ==  (and (>= j k) (logbitp (- j k) n))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ASIN ACOS ATAN
@subsubsection CLHS: Function ASIN, ACOS, ATAN
@anchor{#clhs-function-asin-acos-atan}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sincm_coscm_tan.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_pi.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ASIN, ACOS, ATAN}

@strong{Syntax:}

@strong{asin} @emph{number} => @emph{radians}

@strong{acos} @emph{number} => @emph{radians}

@strong{atan} @emph{number1 &optional number2} => @emph{radians}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{number1}---a @uref{glo_n.html#number,@emph{number}} if
@emph{number2} is not supplied, or a
@uref{syscla_real.html#real,@emph{real}} if @emph{number2} is supplied.

@emph{number2}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{radians}---a @uref{glo_n.html#number,@emph{number}} (of radians).

@strong{Description:}

@ref{#asin,@strong{asin}}, @ref{#acos,@strong{acos}}, and
@ref{#atan,@strong{atan}} compute the arc sine, arc cosine, and arc
tangent respectively.

The arc sine, arc cosine, and arc tangent (with only @emph{number1}
supplied) functions can be defined mathematically for @emph{number} or
@emph{number1} specified as @emph{x} as in the next figure.

@verbatim
Function     Definition                         
Arc sine     -i log  (ix+ sqrt(1-x^2) )         
Arc cosine   (<PI>/2) - arcsin  x               
Arc tangent  -i log  ((1+ix) sqrt(1/(1+x^2)) )  
@end verbatim

@strong{Figure 12-14. Mathematical definition of arc sine, arc cosine,
and arc tangent}

These formulae are mathematically correct, assuming completely accurate
computation. They are not necessarily the simplest ones for real-valued
computations.

If both @emph{number1} and @emph{number2} are supplied for
@ref{#atan,@strong{atan}}, the result is the arc tangent of
@emph{number1}/@emph{number2}. The value of @ref{#atan,@strong{atan}} is
always between -<PI> (exclusive) and <PI> (inclusive) when minus zero is
not supported. The range of the two-argument arc tangent when minus zero
is supported includes -<PI>.

For a @uref{syscla_real.html#real,@emph{real}} @emph{number1}, the
result is a @uref{syscla_real.html#real,@emph{real}} and lies between
-<PI>/2 and <PI>/2 (both exclusive). @emph{number1} can be a
@uref{glo_c.html#complex,@emph{complex}} if @emph{number2} is not
supplied. If both are supplied, @emph{number2} can be zero provided
@emph{number1} is not zero.

The following definition for arc sine determines the range and branch
cuts:

arcsin z = -i log (iz+sqrt(1-z^2))

The branch cut for the arc sine function is in two pieces: one along the
negative real axis to the left of -1 (inclusive), continuous with
quadrant II, and one along the positive real axis to the right of 1
(inclusive), continuous with quadrant IV. The range is that strip of the
complex plane containing numbers whose real part is between -<PI>/2 and
<PI>/2. A number with real part equal to -<PI>/2 is in the range if and
only if its imaginary part is non-negative; a number with real part
equal to <PI>/2 is in the range if and only if its imaginary part is
non-positive.

The following definition for arc cosine determines the range and branch
cuts:

arccos z = <PI>/2- arcsin z

or, which are equivalent,

arccos z = -i log (z+i sqrt(1-z^2))

arccos z = 2 log (sqrt((1+z)/2) + i sqrt((1-z)/2))/i

The branch cut for the arc cosine function is in two pieces: one along
the negative real axis to the left of -1 (inclusive), continuous with
quadrant II, and one along the positive real axis to the right of 1
(inclusive), continuous with quadrant IV. This is the same branch cut as
for arc sine. The range is that strip of the complex plane containing
numbers whose real part is between 0 and <PI>. A number with real part
equal to 0 is in the range if and only if its imaginary part is
non-negative; a number with real part equal to <PI> is in the range if
and only if its imaginary part is non-positive.

The following definition for (one-argument) arc tangent determines the
range and branch cuts:

arctan z = log (1+iz) - log (1-iz)/(2i)

Beware of simplifying this formula; ``obvious'' simplifications are
likely to alter the branch cuts or the values on the branch cuts
incorrectly. The branch cut for the arc tangent function is in two
pieces: one along the positive imaginary axis above i (exclusive),
continuous with quadrant II, and one along the negative imaginary axis
below -i (exclusive), continuous with quadrant IV. The points i and -i
are excluded from the domain. The range is that strip of the complex
plane containing numbers whose real part is between -<PI>/2 and <PI>/2.
A number with real part equal to -<PI>/2 is in the range if and only if
its imaginary part is strictly positive; a number with real part equal
to <PI>/2 is in the range if and only if its imaginary part is strictly
negative. Thus the range of arc tangent is identical to that of arc sine
with the points -<PI>/2 and <PI>/2 excluded.

For @ref{#atan,@strong{atan}}, the signs of @emph{number1} (indicated as
@emph{x}) and @emph{number2} (indicated as @emph{y}) are used to derive
quadrant information. The next figure details various special cases. The
asterisk (*) indicates that the entry in the figure applies to
implementations that support minus zero.

@verbatim
y Condition  x Condition  Cartesian locus  Range of result         
y = 0        x > 0        Positive x-axis  0                       
* y = +0     x > 0        Positive x-axis  +0                      
* y = -0     x > 0        Positive x-axis  -0                      
y > 0        x > 0        Quadrant I       0 < result< <PI>/2      
y > 0        x = 0        Positive y-axis  <PI>/2                  
y > 0        x < 0        Quadrant II      <PI>/2 < result< <PI>   
y = 0        x < 0        Negative x-axis  <PI>                    
* y = +0     x < 0        Negative x-axis  +<PI>                   
* y = -0     x < 0        Negative x-axis  -<PI>                   
y < 0        x < 0        Quadrant III     -<PI>< result< -<PI>/2  
y < 0        x = 0        Negative y-axis  -<PI>/2                 
y < 0        x > 0        Quadrant IV      -<PI>/2 < result< 0     
y = 0        x = 0        Origin           undefined consequences  
* y = +0     x = +0       Origin           +0                      
* y = -0     x = +0       Origin           -0                      
* y = +0     x = -0       Origin           +<PI>                   
* y = -0     x = -0       Origin           -<PI>                   
@end verbatim

@strong{Figure 12-15. Quadrant information for arc tangent}

@strong{Examples:}

@verbatim
 (asin 0) =>  0.0 
 (acos #c(0 1))  =>  #C(1.5707963267948966 -0.8813735870195432)
 (/ (atan 1 (sqrt 3)) 6)  =>  0.087266 
 (atan #c(0 2)) =>  #C(-1.5707964 0.54930615)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

@ref{#acos,@strong{acos}} and @ref{#asin,@strong{asin}} should signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{number} is not a @uref{glo_n.html#number,@emph{number}}.
@ref{#atan,@strong{atan}} should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if one
argument is supplied and that argument is not a
@uref{glo_n.html#number,@emph{number}}, or if two arguments are supplied
and both of those arguments are not @emph{reals}.

@ref{#acos,@strong{acos}}, @ref{#asin,@strong{asin}}, and
@ref{#atan,@strong{atan}} might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{fun_log.html#log,@strong{log}},
@uref{fun_sqrtcm_isqrt.html#sqrt,@strong{sqrt}},
@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:}

The result of either @ref{#asin,@strong{asin}} or
@ref{#acos,@strong{acos}} can be a
@uref{glo_c.html#complex,@emph{complex}} even if @emph{number} is not a
@uref{glo_c.html#complex,@emph{complex}}; this occurs when the absolute
value of @emph{number} is greater than one.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss192.html,IEEE-ATAN-BRANCH-CUT:SPLIT}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@item
@uref{../Issues/iss069.html,COMPLEX-ATAN-BRANCH-CUT:TWEAK}
@item
@uref{../Issues/iss070.html,COMPLEX-ATANH-BOGUS-FORMULA:TWEAK-MORE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BOOLE
@subsubsection CLHS: Function BOOLE
@anchor{#clhs-function-boole}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_parse-integer.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_boole-_cm_boole-xor.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BOOLE}

@strong{Syntax:}

@strong{boole} @emph{op integer-1 integer-2} => @emph{result-integer}

@strong{Arguments and Values:}

@emph{Op}---a
@uref{glo_b.html#bit-wise_logical_operation_specifier,@emph{bit-wise
logical operation specifier}}.

@emph{integer-1}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer-2}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{result-integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#boole,@strong{boole}} performs bit-wise logical operations on
@emph{integer-1} and @emph{integer-2}, which are treated as if they were
binary and in two's complement representation.

The operation to be performed and the return value are determined by
@emph{op}.

@ref{#boole,@strong{boole}} returns the values specified for any
@emph{op} in the next figure.

@verbatim
Op           Result                                      
boole-1      integer-1                                   
boole-2      integer-2                                   
boole-andc1  and complement of integer-1 with integer-2  
boole-andc2  and integer-1 with complement of integer-2  
boole-and    and                                         
boole-c1     complement of integer-1                     
boole-c2     complement of integer-2                     
boole-clr    always 0 (all zero bits)                    
boole-eqv    equivalence (exclusive nor)                 
boole-ior    inclusive or                                
boole-nand   not-and                                     
boole-nor    not-or                                      
boole-orc1   or complement of integer-1 with integer-2   
boole-orc2   or integer-1 with complement of integer-2   
boole-set    always -1 (all one bits)                    
boole-xor    exclusive or                                
@end verbatim

@strong{Figure 12-17. Bit-Wise Logical Operations}

@strong{Examples:}

@verbatim
 (boole boole-ior 1 16) =>  17
 (boole boole-and -2 5) =>  4
 (boole boole-eqv 17 15) =>  -31

;;; These examples illustrate the result of applying BOOLE and each
;;; of the possible values of OP to each possible combination of bits.
 (progn
   (format t "~&Results of (BOOLE <op> #b0011 #b0101) ...~
           ~%---Op-------Decimal-----Binary----Bits---~%")
   (dolist (symbol '(boole-1     boole-2    boole-and  boole-andc1
                     boole-andc2 boole-c1   boole-c2   boole-clr
                     boole-eqv   boole-ior  boole-nand boole-nor
                     boole-orc1  boole-orc2 boole-set  boole-xor))
     (let ((result (boole (symbol-value symbol) #b0011 #b0101)))
       (format t "~& ~A~13T~3,' D~23T~:*~5,' B~31T ...~4,'0B~%" 
               symbol result (logand result #b1111)))))
>>  Results of (BOOLE <op> #b0011 #b0101) ...
>>  ---Op-------Decimal-----Binary----Bits---
>>   BOOLE-1       3          11    ...0011
>>   BOOLE-2       5         101    ...0101
>>   BOOLE-AND     1           1    ...0001
>>   BOOLE-ANDC1   4         100    ...0100
>>   BOOLE-ANDC2   2          10    ...0010
>>   BOOLE-C1     -4        -100    ...1100
>>   BOOLE-C2     -6        -110    ...1010
>>   BOOLE-CLR     0           0    ...0000
>>   BOOLE-EQV    -7        -111    ...1001
>>   BOOLE-IOR     7         111    ...0111
>>   BOOLE-NAND   -2         -10    ...1110
>>   BOOLE-NOR    -8       -1000    ...1000
>>   BOOLE-ORC1   -3         -11    ...1101
>>   BOOLE-ORC2   -5        -101    ...1011
>>   BOOLE-SET    -1          -1    ...1111
>>   BOOLE-XOR     6         110    ...0110
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
first argument is not a
@uref{glo_b.html#bit-wise_logical_operation_specifier,@emph{bit-wise
logical operation specifier}} or if any subsequent argument is not an
@uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_logandcm__rc2cm_logxor.html#logand,@strong{logand}}

@strong{Notes:}

In general,

@verbatim
 (boole boole-and x y) ==  (logand x y)
@end verbatim

@uref{glo_p.html#programmer,@emph{Programmers}} who would prefer to use
numeric indices rather than
@uref{glo_b.html#bit-wise_logical_operation_specifier,@emph{bit-wise
logical operation specifiers}} can get an equivalent effect by a
technique such as the following:

@verbatim
;; The order of the values in this `table' are such that
;; (logand (boole (elt boole-n-vector n) #b0101 #b0011) #b1111) => n
 (defconstant boole-n-vector
    (vector boole-clr   boole-and  boole-andc1 boole-2
            boole-andc2 boole-1    boole-xor   boole-ior
            boole-nor   boole-eqv  boole-c1    boole-orc1
            boole-c2    boole-orc2 boole-nand  boole-set))
=>  BOOLE-N-VECTOR
 (proclaim '(inline boole-n))
=>  implementation-dependent
 (defun boole-n (n integer &rest more-integers)
   (apply #'boole (elt boole-n-vector n) integer more-integers))
=>  BOOLE-N
 (boole-n #b0111 5 3) =>  7
 (boole-n #b0001 5 3) =>  1
 (boole-n #b1101 5 3) =>  -3
 (loop for n from #b0000 to #b1111 collect (boole-n n 5 3))
=>  (0 1 2 3 4 5 6 7 -8 -7 -6 -5 -4 -3 -2 -1)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BYTE BYTE-SIZE BYTE-POSITION
@subsubsection CLHS: Function BYTE, BYTE-SIZE, BYTE-POSITION
@anchor{#clhs-function-byte-byte-size-byte-position}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_logtest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_deposit-field.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BYTE, BYTE-SIZE, BYTE-POSITION}

@strong{Syntax:}

@strong{byte} @emph{size position} => @emph{bytespec}

@strong{byte-size} @emph{bytespec} => @emph{size}

@strong{byte-position} @emph{bytespec} => @emph{position}

@strong{Arguments and Values:}

@emph{size}, @emph{position}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@strong{Description:}

@ref{#byte,@strong{byte}} returns a
@uref{glo_b.html#byte_specifier,@emph{byte specifier}} that indicates a
@uref{glo_b.html#byte,@emph{byte}} of width @emph{size} and whose bits
have weights 2^@emph{position} + @emph{size} - 1 through
2^@emph{position}, and whose representation is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@ref{#byte-size,@strong{byte-size}} returns the number of bits specified
by @emph{bytespec}.

@ref{#byte-position,@strong{byte-position}} returns the position
specified by @emph{bytespec}.

@strong{Examples:}

@verbatim
 (setq b (byte 100 200)) =>  #<BYTE-SPECIFIER size 100 position 200>
 (byte-size b) =>  100
 (byte-position b) =>  200
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_ldb.html#ldb,@strong{ldb}},
@uref{fun_dpb.html#dpb,@strong{dpb}}

@strong{Notes:}

@verbatim
 (byte-size (byte j k)) ==  j
 (byte-position (byte j k)) ==  k
@end verbatim

A @uref{glo_b.html#byte,@emph{byte}} of @emph{size} of 0 is permissible;
it refers to a @uref{glo_b.html#byte,@emph{byte}} of width zero. For
example,

@verbatim
 (ldb (byte 0 3) #o7777) =>  0
 (dpb #o7777 (byte 0 3) 0) =>  0
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CIS
@subsubsection CLHS: Function CIS
@anchor{#clhs-function-cis}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_numberp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_complex.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CIS}

@strong{Syntax:}

@strong{cis} @emph{radians} => @emph{number}

@strong{Arguments and Values:}

@emph{radians}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{number}---a @uref{glo_c.html#complex,@emph{complex}}.

@strong{Description:}

@ref{#cis,@strong{cis}} returns the value of @emph{e}^i* @emph{radians},
which is a @uref{glo_c.html#complex,@emph{complex}} in which the real
part is equal to the cosine of @emph{radians}, and the imaginary part is
equal to the sine of @emph{radians}.

@strong{Examples:}

@verbatim
 (cis 0) =>  #C(1.0 0.0)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPLEX
@subsubsection CLHS: Function COMPLEX
@anchor{#clhs-function-complex}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_cis.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_complexp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPLEX}

@strong{Syntax:}

@strong{complex} @emph{realpart &optional imagpart} => @emph{complex}

@strong{Arguments and Values:}

@emph{realpart}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{imagpart}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{complex}---a @uref{glo_r.html#rational,@emph{rational}} or a
@uref{glo_c.html#complex,@emph{complex}}.

@strong{Description:}

@ref{#complex,@strong{complex}} returns a
@uref{glo_n.html#number,@emph{number}} whose real part is
@emph{realpart} and whose imaginary part is @emph{imagpart}.

If @emph{realpart} is a @uref{glo_r.html#rational,@emph{rational}} and
@emph{imagpart} is the @uref{glo_r.html#rational,@emph{rational}} number
zero, the result of @ref{#complex,@strong{complex}} is @emph{realpart},
a @uref{glo_r.html#rational,@emph{rational}}. Otherwise, the result is a
@uref{glo_c.html#complex,@emph{complex}}.

If either @emph{realpart} or @emph{imagpart} is a
@uref{glo_f.html#float,@emph{float}}, the
non-@uref{glo_f.html#float,@emph{float}} is converted to a
@uref{glo_f.html#float,@emph{float}} before the
@uref{glo_c.html#complex,@emph{complex}} is created. If @emph{imagpart}
is not supplied, the imaginary part is a zero of the same
@uref{glo_t.html#type,@emph{type}} as @emph{realpart}; i.e., (coerce 0
(type-of @emph{realpart})) is effectively used.

Type upgrading implies a movement upwards in the type hierarchy lattice.
In the case of @uref{glo_c.html#complex,@emph{complexes}}, the
@emph{type-specifier} must be a subtype of (upgraded-complex-part-type
@emph{type-specifier}). If @emph{type-specifier1} is a subtype of
@emph{type-specifier2}, then (upgraded-complex-element-type
'@emph{type-specifier1}) must also be a subtype of
(upgraded-complex-element-type '@emph{type-specifier2}). Two disjoint
types can be upgraded into the same thing.

@strong{Examples:}

@verbatim
 (complex 0) =>  0
 (complex 0.0) =>  #C(0.0 0.0)
 (complex 1 1/2) =>  #C(1 1/2)
 (complex 1 .99) =>  #C(1.0 0.99)
 (complex 3/2 0.0) =>  #C(1.5 0.0)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_realpartcm_imagpart.html#realpart,@strong{realpart}},
@uref{fun_realpartcm_imagpart.html#imagpart,@strong{imagpart}},
@uref{sec_2-4-8-11.html,Section 2.4.8.11 (Sharpsign C)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPLEXP
@subsubsection CLHS: Function COMPLEXP
@anchor{#clhs-function-complexp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_complex.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_conjugate.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPLEXP}

@strong{Syntax:}

@strong{complexp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_complex.html#complex,@strong{complex}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (complexp 1.2d2) =>  false
 (complexp #c(5/3 7.2)) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_complex.html#complex,@strong{complex}}
(@uref{glo_f.html#function,@emph{function}} and
@uref{glo_t.html#type,@emph{type}}),
@uref{fun_typep.html#typep,@strong{typep}}

@strong{Notes:}

@verbatim
 (complexp object) ==  (typep object 'complex)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONJUGATE
@subsubsection CLHS: Function CONJUGATE
@anchor{#clhs-function-conjugate}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_complexp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_phase.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONJUGATE}

@strong{Syntax:}

@strong{conjugate} @emph{number} => @emph{conjugate}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{conjugate}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

Returns the complex conjugate of @emph{number}. The conjugate of a
@uref{syscla_real.html#real,@emph{real}} number is itself.

@strong{Examples:}

@verbatim
 (conjugate #c(0 -1)) =>  #C(0 1)
 (conjugate #c(1 1)) =>  #C(1 -1)
 (conjugate 1.5) =>  1.5
 (conjugate #C(3/5 4/5)) =>  #C(3/5 -4/5)
 (conjugate #C(0.0D0 -1.0D0)) =>  #C(0.0D0 1.0D0)
 (conjugate 3.7) =>  3.7
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

For a @uref{glo_c.html#complex,@emph{complex}} number z,

@verbatim
 (conjugate z) ==  (complex (realpart z) (- (imagpart z)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DECODE-FLOAT SCALE-FLOAT
@subsubsection CLHS: Function DECODE-FLOAT, SCALE-FLOAT...
@anchor{#clhs-function-decode-float-scale-float...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_most-p_ative-fixnum.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_float.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DECODE-FLOAT, SCALE-FLOAT, FLOAT-RADIX,
FLOAT-SIGN, FLOAT-DIGITS, FLOAT-PRECISION, INTEGER-DECODE-FLOAT}

@strong{Syntax:}

@strong{decode-float} @emph{float} => @emph{significand, exponent, sign}

@strong{scale-float} @emph{float integer} => @emph{scaled-float}

@strong{float-radix} @emph{float} => @emph{float-radix}

@strong{float-sign} @emph{float-1 &optional float-2} =>
@emph{signed-float}

@strong{float-digits} @emph{float} => @emph{digits1}

@strong{float-precision} @emph{float} => @emph{digits2}

@strong{integer-decode-float} @emph{float} => @emph{significand,
exponent, integer-sign}

@strong{Arguments and Values:}

@emph{digits1}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@emph{digits2}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@emph{exponent}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{float}---a @uref{glo_f.html#float,@emph{float}}.

@emph{float-1}---a @uref{glo_f.html#float,@emph{float}}.

@emph{float-2}---a @uref{glo_f.html#float,@emph{float}}.

@emph{float-radix}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@emph{integer-sign}---the @uref{glo_i.html#integer,@emph{integer}} -1,
or the @uref{glo_i.html#integer,@emph{integer}} 1.

@emph{scaled-float}---a @uref{glo_f.html#float,@emph{float}}.

@emph{sign}---A @uref{glo_f.html#float,@emph{float}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{float} but numerically equal
to 1.0 or -1.0.

@emph{signed-float}---a @uref{glo_f.html#float,@emph{float}}.

@emph{significand}---a @uref{glo_f.html#float,@emph{float}}.

@strong{Description:}

@ref{#decode-float,@strong{decode-float}} computes three values that
characterize @emph{float}. The first value is of the same
@uref{glo_t.html#type,@emph{type}} as @emph{float} and represents the
significand. The second value represents the exponent to which the radix
(notated in this description by @emph{b}) must be raised to obtain the
value that, when multiplied with the first result, produces the absolute
value of @emph{float}. If @emph{float} is zero, any
@uref{glo_i.html#integer,@emph{integer}} value may be returned, provided
that the identity shown for @ref{#scale-float,@strong{scale-float}}
holds. The third value is of the same @uref{glo_t.html#type,@emph{type}}
as @emph{float} and is 1.0 if @emph{float} is greater than or equal to
zero or -1.0 otherwise.

@ref{#decode-float,@strong{decode-float}} divides @emph{float} by an
integral power of @emph{b} so as to bring its value between 1/@emph{b}
(inclusive) and 1 (exclusive), and returns the quotient as the first
value. If @emph{float} is zero, however, the result equals the absolute
value of @emph{float} (that is, if there is a negative zero, its
significand is considered to be a positive zero).

@ref{#scale-float,@strong{scale-float}} returns (* @emph{float} (expt
(float @emph{b} @emph{float}) @emph{integer})), where @emph{b} is the
radix of the floating-point representation. @emph{float} is not
necessarily between 1/@emph{b} and 1.

@ref{#float-radix,@strong{float-radix}} returns the radix of
@emph{float}.

@ref{#float-sign,@strong{float-sign}} returns a number z such that z and
@emph{float-1} have the same sign and also such that z and
@emph{float-2} have the same absolute value. If @emph{float-2} is not
supplied, its value is (float 1 @emph{float-1}). If an implementation
has distinct representations for negative zero and positive zero, then
(float-sign -0.0) => -1.0.

@ref{#float-digits,@strong{float-digits}} returns the number of radix
@emph{b} digits used in the representation of @emph{float} (including
any implicit digits, such as a ``hidden bit'').

@ref{#float-precision,@strong{float-precision}} returns the number of
significant radix @emph{b} digits present in @emph{float}; if
@emph{float} is a @uref{glo_f.html#float,@emph{float}} zero, then the
result is an @uref{glo_i.html#integer,@emph{integer}} zero.

For @uref{glo_n.html#normalized,@emph{normalized}}
@uref{glo_f.html#float,@emph{floats}}, the results of
@ref{#float-digits,@strong{float-digits}} and
@ref{#float-precision,@strong{float-precision}} are the same, but the
precision is less than the number of representation digits for a
@uref{glo_d.html#denormalized,@emph{denormalized}} or zero number.

@ref{#integer-decode-float,@strong{integer-decode-float}} computes three
values that characterize @emph{float} - the significand scaled so as to
be an @uref{glo_i.html#integer,@emph{integer}}, and the same last two
values that are returned by @ref{#decode-float,@strong{decode-float}}.
If @emph{float} is zero,
@ref{#integer-decode-float,@strong{integer-decode-float}} returns zero
as the first value. The second value bears the same relationship to the
first value as for @ref{#decode-float,@strong{decode-float}}:

@verbatim
 (multiple-value-bind (signif expon sign)
                      (integer-decode-float f)
   (scale-float (float signif f) expon)) ==  (abs f)
@end verbatim

@strong{Examples:}

@verbatim
 ;; Note that since the purpose of this functionality is to expose
 ;; details of the implementation, all of these examples are necessarily
 ;; very implementation-dependent.  Results may vary widely.
 ;; Values shown here are chosen consistently from one particular implementation.
 (decode-float .5) =>  0.5, 0, 1.0
 (decode-float 1.0) =>  0.5, 1, 1.0
 (scale-float 1.0 1) =>  2.0
 (scale-float 10.01 -2) =>  2.5025
 (scale-float 23.0 0) =>  23.0
 (float-radix 1.0) =>  2
 (float-sign 5.0) =>  1.0
 (float-sign -5.0) =>  -1.0
 (float-sign 0.0) =>  1.0
 (float-sign 1.0 0.0) =>  0.0
 (float-sign 1.0 -10.0) =>  10.0
 (float-sign -1.0 10.0) =>  -10.0
 (float-digits 1.0) =>  24
 (float-precision 1.0) =>  24
 (float-precision least-positive-single-float) =>  1
 (integer-decode-float 1.0) =>  8388608, -23, 1
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The implementation's representation for
@uref{glo_f.html#float,@emph{floats}}.

@strong{Exceptional Situations:}

The functions @ref{#decode-float,@strong{decode-float}},
@ref{#float-radix,@strong{float-radix}},
@ref{#float-digits,@strong{float-digits}},
@ref{#float-precision,@strong{float-precision}}, and
@ref{#integer-decode-float,@strong{integer-decode-float}} should signal
an error if their only argument is not a
@uref{glo_f.html#float,@emph{float}}.

The @uref{glo_f.html#function,@emph{function}}
@ref{#scale-float,@strong{scale-float}} should signal an error if its
first argument is not a @uref{glo_f.html#float,@emph{float}} or if its
second argument is not an @uref{glo_i.html#integer,@emph{integer}}.

The @uref{glo_f.html#function,@emph{function}}
@ref{#float-sign,@strong{float-sign}} should signal an error if its
first argument is not a @uref{glo_f.html#float,@emph{float}} or if its
second argument is supplied but is not a
@uref{glo_f.html#float,@emph{float}}.

@strong{See Also:} None.

@strong{Notes:}

The product of the first result of
@ref{#decode-float,@strong{decode-float}} or
@ref{#integer-decode-float,@strong{integer-decode-float}}, of the radix
raised to the power of the second result, and of the third result is
exactly equal to the value of @emph{float}.

@verbatim
 (multiple-value-bind (signif expon sign)
                      (decode-float f)
   (scale-float signif expon))
==  (abs f)
@end verbatim

and

@verbatim
 (multiple-value-bind (signif expon sign)
                      (decode-float f)
   (* (scale-float signif expon) sign))
==  f
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DEPOSIT-FIELD
@subsubsection CLHS: Function DEPOSIT-FIELD
@anchor{#clhs-function-deposit-field}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_bytecm_by_yte-position.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_dpb.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DEPOSIT-FIELD}

@strong{Syntax:}

@strong{deposit-field} @emph{newbyte bytespec integer} =>
@emph{result-integer}

@strong{Arguments and Values:}

@emph{newbyte}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{result-integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Replaces a field of bits within @emph{integer}; specifically, returns an
@uref{glo_i.html#integer,@emph{integer}} that contains the bits of
@emph{newbyte} within the @uref{glo_b.html#byte,@emph{byte}} specified
by @emph{bytespec}, and elsewhere contains the bits of @emph{integer}.

@strong{Examples:}

@verbatim
 (deposit-field 7 (byte 2 1) 0) =>  6
 (deposit-field -1 (byte 4 0) 0) =>  15
 (deposit-field 0 (byte 2 1) -3) =>  -7
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_bytecm_by_yte-position.html#byte,@strong{byte}},
@uref{fun_dpb.html#dpb,@strong{dpb}}

@strong{Notes:}

@verbatim
 (logbitp j (deposit-field m (byte s p) n))
 ==  (if (and (>= j p) (< j (+ p s)))
        (logbitp j m)
        (logbitp j n))
@end verbatim

@ref{#deposit-field,@strong{deposit-field}} is to
@uref{acc_mask-field.html#mask-field,@strong{mask-field}} as
@uref{fun_dpb.html#dpb,@strong{dpb}} is to
@uref{acc_ldb.html#ldb,@strong{ldb}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DPB
@subsubsection CLHS: Function DPB
@anchor{#clhs-function-dpb}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_deposit-field.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_ldb.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DPB}

@strong{Syntax:}

@strong{dpb} @emph{newbyte bytespec integer} => @emph{result-integer}

@strong{Pronunciation:}

[,duh'pib] or [,duh'puhb] or ['dee'pee'bee]

@strong{Arguments and Values:}

@emph{newbyte}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{result-integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#dpb,@strong{dpb}} (deposit byte) is used to replace a field of
bits within @emph{integer}. @ref{#dpb,@strong{dpb}} returns an
@uref{glo_i.html#integer,@emph{integer}} that is the same as
@emph{integer} except in the bits specified by @emph{bytespec}.

Let s be the size specified by @emph{bytespec}; then the low s bits of
@emph{newbyte} appear in the result in the byte specified by
@emph{bytespec}. @emph{Newbyte} is interpreted as being right-justified,
as if it were the result of @uref{acc_ldb.html#ldb,@strong{ldb}}.

@strong{Examples:}

@verbatim
 (dpb 1 (byte 1 10) 0) =>  1024
 (dpb -2 (byte 2 10) 0) =>  2048
 (dpb 1 (byte 2 10) 2048) =>  1024
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_bytecm_by_yte-position.html#byte,@strong{byte}},
@uref{fun_deposit-field.html#deposit-field,@strong{deposit-field}},
@uref{acc_ldb.html#ldb,@strong{ldb}}

@strong{Notes:}

@verbatim
 (logbitp j (dpb m (byte s p) n))
 ==  (if (and (>= j p) (< j (+ p s)))
        (logbitp (- j p) m)
        (logbitp j n))
@end verbatim

In general,

@verbatim
 (dpb x (byte 0 y) z) =>  z
@end verbatim

for all valid values of @emph{x}, @emph{y}, and @emph{z}.

Historically, the name ``dpb'' comes from a DEC PDP-10 assembly language
instruction meaning ``deposit byte.''

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function = /= < > <= >=
@subsubsection CLHS: Function =, /=, <, >, <=, >=
@anchor{#clhs-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_bignum.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_maxcm_min.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{=, /=, <, >, <=, >=}

@strong{Syntax:}

@strong{=} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{/=} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{<} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{>} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{<=} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{>=} @emph{&rest numbers+} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{number}---for @ref{#LT,@strong{<}}, @ref{#GT,@strong{>}},
@ref{#LTEQ,@strong{<=}}, @ref{#GTEQ,@strong{>=}}: a
@uref{syscla_real.html#real,@emph{real}}; for @ref{#EQ,@strong{=}},
@ref{#SLEQ,@strong{/=}}: a @uref{glo_n.html#number,@emph{number}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#EQ,@strong{=}}, @ref{#SLEQ,@strong{/=}}, @ref{#LT,@strong{<}},
@ref{#GT,@strong{>}}, @ref{#LTEQ,@strong{<=}}, and
@ref{#GTEQ,@strong{>=}} perform arithmetic comparisons on their
arguments as follows:

@ref{#EQ,@strong{=}}

The value of @ref{#EQ,@strong{=}} is @uref{glo_t.html#true,@emph{true}}
if all @emph{numbers} are the same in value; otherwise it is
@uref{glo_f.html#false,@emph{false}}. Two
@uref{glo_c.html#complex,@emph{complexes}} are considered equal by
@ref{#EQ,@strong{=}} if their real and imaginary parts are equal
according to @ref{#EQ,@strong{=}}.

@ref{#SLEQ,@strong{/=}}

The value of @ref{#SLEQ,@strong{/=}} is
@uref{glo_t.html#true,@emph{true}} if no two @emph{numbers} are the same
in value; otherwise it is @uref{glo_f.html#false,@emph{false}}.

@ref{#LT,@strong{<}}

The value of @ref{#LT,@strong{<}} is @uref{glo_t.html#true,@emph{true}}
if the @emph{numbers} are in monotonically increasing order; otherwise
it is @uref{glo_f.html#false,@emph{false}}.

@ref{#GT,@strong{>}}

The value of @ref{#GT,@strong{>}} is @uref{glo_t.html#true,@emph{true}}
if the @emph{numbers} are in monotonically decreasing order; otherwise
it is @uref{glo_f.html#false,@emph{false}}.

@ref{#LTEQ,@strong{<=}}

The value of @ref{#LTEQ,@strong{<=}} is
@uref{glo_t.html#true,@emph{true}} if the @emph{numbers} are in
monotonically nondecreasing order; otherwise it is
@uref{glo_f.html#false,@emph{false}}.

@ref{#GTEQ,@strong{>=}}

The value of @ref{#GTEQ,@strong{>=}} is
@uref{glo_t.html#true,@emph{true}} if the @emph{numbers} are in
monotonically nonincreasing order; otherwise it is
@uref{glo_f.html#false,@emph{false}}.

@ref{#EQ,@strong{=}}, @ref{#SLEQ,@strong{/=}}, @ref{#LT,@strong{<}},
@ref{#GT,@strong{>}}, @ref{#LTEQ,@strong{<=}}, and
@ref{#GTEQ,@strong{>=}} perform necessary type conversions.

@strong{Examples:}

The uses of these functions are illustrated in the next figure.

@verbatim
(= 3 3) is true.              (/= 3 3) is false.             
(= 3 5) is false.             (/= 3 5) is true.              
(= 3 3 3 3) is true.          (/= 3 3 3 3) is false.         
(= 3 3 5 3) is false.         (/= 3 3 5 3) is false.         
(= 3 6 5 2) is false.         (/= 3 6 5 2) is true.          
(= 3 2 3) is false.           (/= 3 2 3) is false.           
(< 3 5) is true.              (<= 3 5) is true.              
(< 3 -5) is false.            (<= 3 -5) is false.            
(< 3 3) is false.             (<= 3 3) is true.              
(< 0 3 4 6 7) is true.        (<= 0 3 4 6 7) is true.        
(< 0 3 4 4 6) is false.       (<= 0 3 4 4 6) is true.        
(> 4 3) is true.              (>= 4 3) is true.              
(> 4 3 2 1 0) is true.        (>= 4 3 2 1 0) is true.        
(> 4 3 3 2 0) is false.       (>= 4 3 3 2 0) is true.        
(> 4 3 1 2 0) is false.       (>= 4 3 1 2 0) is false.       
(= 3) is true.                (/= 3) is true.                
(< 3) is true.                (<= 3) is true.                
(= 3.0 #c(3.0 0.0)) is true.  (/= 3.0 #c(3.0 1.0)) is true.  
(= 3 3.0) is true.            (= 3.0s0 3.0d0) is true.       
(= 0.0 -0.0) is true.         (= 5/2 2.5) is true.           
(> 0.0 -0.0) is false.        (= 0 -0.0) is true.            
(<= 0 x 9) is true if x is between 0 and 9, inclusive                               
(< 0.0 x 1.0) is true if x is between 0.0 and 1.0, exclusive                               
(< -1 j (length v)) is true if j is a valid array index for a vector v                               
@end verbatim

@strong{Figure 12-13. Uses of /=, =, <, >, <=, and >=}

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if some
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{syscla_real.html#real,@emph{real}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}
if otherwise unable to fulfill its contract.

@strong{See Also:} None.

@strong{Notes:}

@ref{#EQ,@strong{=}} differs from @uref{fun_eql.html#eql,@strong{eql}}
in that (= 0.0 -0.0) is always true, because @ref{#EQ,@strong{=}}
compares the mathematical values of its operands, whereas
@uref{fun_eql.html#eql,@strong{eql}} compares the representational
values, so to speak.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EVENP ODDP
@subsubsection CLHS: Function EVENP, ODDP
@anchor{#clhs-function-evenp-oddp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_abs.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_expcm_expt.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EVENP, ODDP}

@strong{Syntax:}

@strong{evenp} @emph{integer} => @emph{generalized-boolean}

@strong{oddp} @emph{integer} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#evenp,@strong{evenp}} returns @uref{glo_t.html#true,@emph{true}}
if @emph{integer} is even (divisible by two); otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#oddp,@strong{oddp}} returns @uref{glo_t.html#true,@emph{true}} if
@emph{integer} is odd (not divisible by two); otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (evenp 0) =>  true
 (oddp 10000000000000000000000) =>  false
 (oddp -1) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer} is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (evenp integer) ==  (not (oddp integer))
 (oddp integer)  ==  (not (evenp integer))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EXP EXPT
@subsubsection CLHS: Function EXP, EXPT
@anchor{#clhs-function-exp-expt}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_evenpcm_oddp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_gcd.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EXP, EXPT}

@strong{Syntax:}

@strong{exp} @emph{number} => @emph{result}

@strong{expt} @emph{base-number power-number} => @emph{result}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{base-number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{power-number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{result}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#exp,@strong{exp}} and @ref{#expt,@strong{expt}} perform
exponentiation.

@ref{#exp,@strong{exp}} returns @emph{e} raised to the power
@emph{number}, where @emph{e} is the base of the natural logarithms.
@ref{#exp,@strong{exp}} has no branch cut.

@ref{#expt,@strong{expt}} returns @emph{base-number} raised to the power
@emph{power-number}. If the @emph{base-number} is a
@uref{glo_r.html#rational,@emph{rational}} and @emph{power-number} is an
@uref{glo_i.html#integer,@emph{integer}}, the calculation is exact and
the result will be of @uref{glo_t.html#type,@emph{type}}
@uref{syscla_rational.html#rational,@strong{rational}}; otherwise a
floating-point approximation might result. For @ref{#expt,@strong{expt}}
of a @uref{glo_c.html#complex_rational,@emph{complex rational}} to an
@uref{glo_i.html#integer,@emph{integer}} power, the calculation must be
exact and the result is of type (or rational (complex rational)).

The result of @ref{#expt,@strong{expt}} can be a
@uref{glo_c.html#complex,@emph{complex}}, even when neither argument is
a @uref{glo_c.html#complex,@emph{complex}}, if @emph{base-number} is
negative and @emph{power-number} is not an
@uref{glo_i.html#integer,@emph{integer}}. The result is always the
@uref{glo_p.html#principal,@emph{principal}}
@uref{glo_c.html#complex,@emph{complex}}
@uref{glo_v.html#value,@emph{value}}. For example, (expt -8 1/3) is not
permitted to return -2, even though -2 is one of the cube roots of -8.
The @uref{glo_p.html#principal,@emph{principal}} cube root is a
@uref{glo_c.html#complex,@emph{complex}} approximately equal to #C(1.0
1.73205), not -2.

@ref{#expt,@strong{expt}} is defined as @emph{b^x = e^x log b}. This
defines the @uref{glo_p.html#principal,@emph{principal}}
@uref{glo_v.html#value,@emph{values}} precisely. The range of
@ref{#expt,@strong{expt}} is the entire complex plane. Regarded as a
function of @emph{x}, with @emph{b} fixed, there is no branch cut.
Regarded as a function of @emph{b}, with @emph{x} fixed, there is in
general a branch cut along the negative real axis, continuous with
quadrant II. The domain excludes the origin. By definition, 0^0=1. If
@emph{b}=0 and the real part of @emph{x} is strictly positive, then
@emph{b^x}=0. For all other values of @emph{x}, 0^@emph{x} is an error.

When @emph{power-number} is an @uref{glo_i.html#integer,@emph{integer}}
0, then the result is always the value one in the
@uref{glo_t.html#type,@emph{type}} of @emph{base-number}, even if the
@emph{base-number} is zero (of any @uref{glo_t.html#type,@emph{type}}).
That is:

@verbatim
 (expt x 0) ==  (coerce 1 (type-of x))
@end verbatim

If @emph{power-number} is a zero of any other
@uref{glo_t.html#type,@emph{type}}, then the result is also the value
one, in the @uref{glo_t.html#type,@emph{type}} of the arguments after
the application of the contagion rules in
@uref{sec_12-1-1-2.html,Section 12.1.1.2 (Contagion in Numeric
Operations)}, with one exception: the consequences are undefined if
@emph{base-number} is zero when @emph{power-number} is zero and not of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_integer.html#integer,@strong{integer}}.

@strong{Examples:}

@verbatim
 (exp 0) =>  1.0
 (exp 1) =>  2.718282
 (exp (log 5)) =>  5.0 
 (expt 2 8) =>  256
 (expt 4 .5) =>  2.0
 (expt #c(0 1) 2) =>  -1
 (expt #c(2 2) 3) =>  #C(-16 16)
 (expt #c(2 2) 4) =>  -64 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_log.html#log,@strong{log}}, @uref{sec_12-1-3-3.html,Section
12.1.3.3 (Rule of Float Substitutability)}

@strong{Notes:}

Implementations of @ref{#expt,@strong{expt}} are permitted to use
different algorithms for the cases of a @emph{power-number} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_rational.html#rational,@strong{rational}} and a
@emph{power-number} of @uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}}.

Note that by the following logic, (sqrt (expt @emph{x} 3)) is not
equivalent to (expt @emph{x} 3/2).

@verbatim
 (setq x (exp (/ (* 2 pi #c(0 1)) 3)))         ;exp(2.pi.i/3)
 (expt x 3) =>  1 ;except for round-off error
 (sqrt (expt x 3)) =>  1 ;except for round-off error
 (expt x 3/2) =>  -1 ;except for round-off error
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss153.html,EXPT-RATIO:P.211}
@item
@uref{../Issues/iss071.html,COMPLEX-RATIONAL-RESULT:EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FLOAT
@subsubsection CLHS: Function FLOAT
@anchor{#clhs-function-float}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_decode-fl_decode-float.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_floatp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FLOAT}

@strong{Syntax:}

@strong{float} @emph{number &optional prototype} => @emph{float}

@strong{Arguments and Values:}

@emph{number}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{prototype}---a @uref{glo_f.html#float,@emph{float}}.

@emph{float}---a @uref{glo_f.html#float,@emph{float}}.

@strong{Description:}

@ref{#float,@strong{float}} converts a
@uref{syscla_real.html#real,@emph{real}} number to a
@uref{glo_f.html#float,@emph{float}}.

If a @emph{prototype} is supplied, a
@uref{glo_f.html#float,@emph{float}} is returned that is mathematically
equal to @emph{number} but has the same format as @emph{prototype}.

If @emph{prototype} is not supplied, then if the @emph{number} is
already a @uref{glo_f.html#float,@emph{float}}, it is returned;
otherwise, a @uref{glo_f.html#float,@emph{float}} is returned that is
mathematically equal to @emph{number} but is a
@uref{glo_s.html#single_float,@emph{single float}}.

@strong{Examples:}

@verbatim
 (float 0) =>  0.0
 (float 1 .5) =>  1.0
 (float 1.0) =>  1.0
 (float 1/2) =>  0.5
=>  1.0d0
OR=>  1.0
 (eql (float 1.0 1.0d0) 1.0d0) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_coerce.html#coerce,@strong{coerce}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FLOATP
@subsubsection CLHS: Function FLOATP
@anchor{#clhs-function-floatp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_float.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_most-p_d-long-float.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FLOATP}

@strong{Syntax:}

@strong{floatp} @emph{object}

generalized-boolean

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (floatp 1.2d2) =>  true
 (floatp 1.212) =>  true
 (floatp 1.2s2) =>  true
 (floatp (expt 2 130)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (floatp object) ==  (typep object 'float)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FLOOR FFLOOR CEILING FCEILING
@subsubsection CLHS: Function FLOOR, FFLOOR, CEILING, FCEILING...
@anchor{#clhs-function-floor-ffloor-ceiling-fceiling...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_zerop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sincm_coscm_tan.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FLOOR, FFLOOR, CEILING, FCEILING, TRUNCATE,
FTRUNCATE, ROUND, FROUND}

@strong{Syntax:}

@strong{floor} @emph{number} &optional @emph{divisor} => @emph{quotient,
remainder}

@strong{ffloor} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{ceiling} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{fceiling} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{truncate} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{ftruncate} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{round} @emph{number} &optional @emph{divisor} => @emph{quotient,
remainder}

@strong{fround} @emph{number} &optional @emph{divisor} =>
@emph{quotient, remainder}

@strong{Arguments and Values:}

@emph{number}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{divisor}---a non-zero @uref{syscla_real.html#real,@emph{real}}.
The default is the @uref{glo_i.html#integer,@emph{integer}} 1.

@emph{quotient}---for @ref{#floor,@strong{floor}},
@ref{#ceiling,@strong{ceiling}}, @ref{#truncate,@strong{truncate}}, and
@ref{#round,@strong{round}}: an
@uref{glo_i.html#integer,@emph{integer}}; for
@ref{#ffloor,@strong{ffloor}}, @ref{#fceiling,@strong{fceiling}},
@ref{#ftruncate,@strong{ftruncate}}, and @ref{#fround,@strong{fround}}:
a @uref{glo_f.html#float,@emph{float}}.

@emph{remainder}---a @uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

These functions divide @emph{number} by @emph{divisor}, returning a
@emph{quotient} and @emph{remainder}, such that

@emph{quotient}*@emph{divisor}+@emph{remainder}=@emph{number}

The @emph{quotient} always represents a mathematical integer. When more
than one mathematical integer might be possible (i.e., when the
remainder is not zero), the kind of rounding or truncation depends on
the @uref{glo_o.html#operator,@emph{operator}}:

@ref{#floor,@strong{floor}}, @ref{#ffloor,@strong{ffloor}}

@ref{#floor,@strong{floor}} and @ref{#ffloor,@strong{ffloor}} produce a
@emph{quotient} that has been truncated toward negative infinity; that
is, the @emph{quotient} represents the largest mathematical integer that
is not larger than the mathematical quotient.

@ref{#ceiling,@strong{ceiling}}, @ref{#fceiling,@strong{fceiling}}

@ref{#ceiling,@strong{ceiling}} and @ref{#fceiling,@strong{fceiling}}
produce a @emph{quotient} that has been truncated toward positive
infinity; that is, the @emph{quotient} represents the smallest
mathematical integer that is not smaller than the mathematical result.

@ref{#truncate,@strong{truncate}}, @ref{#ftruncate,@strong{ftruncate}}

@ref{#truncate,@strong{truncate}} and
@ref{#ftruncate,@strong{ftruncate}} produce a @emph{quotient} that has
been truncated towards zero; that is, the @emph{quotient} represents the
mathematical integer of the same sign as the mathematical quotient, and
that has the greatest integral magnitude not greater than that of the
mathematical quotient.

@ref{#round,@strong{round}}, @ref{#fround,@strong{fround}}

@ref{#round,@strong{round}} and @ref{#fround,@strong{fround}} produce a
@emph{quotient} that has been rounded to the nearest mathematical
integer; if the mathematical quotient is exactly halfway between two
integers, (that is, it has the form @emph{integer}+1/2), then the
@emph{quotient} has been rounded to the even (divisible by two) integer.

All of these functions perform type conversion operations on
@emph{numbers}.

The @emph{remainder} is an @uref{glo_i.html#integer,@emph{integer}} if
both x and y are @uref{glo_i.html#integer,@emph{integers}}, is a
@uref{glo_r.html#rational,@emph{rational}} if both x and y are
@uref{glo_r.html#rational,@emph{rationals}}, and is a
@uref{glo_f.html#float,@emph{float}} if either x or y is a
@uref{glo_f.html#float,@emph{float}}.

@ref{#ffloor,@strong{ffloor}}, @ref{#fceiling,@strong{fceiling}},
@ref{#ftruncate,@strong{ftruncate}}, and @ref{#fround,@strong{fround}}
handle arguments of different @uref{glo_t.html#type,@emph{types}} in the
following way: If @emph{number} is a
@uref{glo_f.html#float,@emph{float}}, and @emph{divisor} is not a
@uref{glo_f.html#float,@emph{float}} of longer format, then the first
result is a @uref{glo_f.html#float,@emph{float}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{number}. Otherwise, the
first result is of the @uref{glo_t.html#type,@emph{type}} determined by
@uref{glo_c.html#contagion,@emph{contagion}} rules; see
@uref{sec_12-1-1-2.html,Section 12.1.1.2 (Contagion in Numeric
Operations)}.

@strong{Examples:}

@verbatim
 (floor 3/2) =>  1, 1/2
 (ceiling 3 2) =>  2, -1
 (ffloor 3 2) =>  1.0, 1
 (ffloor -4.7) =>  -5.0, 0.3
 (ffloor 3.5d0) =>  3.0d0, 0.5d0
 (fceiling 3/2) =>  2.0, -1/2
 (truncate 1) =>  1, 0
 (truncate .5) =>  0, 0.5
 (round .5) =>  0, 0.5
 (ftruncate -7 2) =>  -3.0, -1
 (fround -7 2) =>  -4.0, 1
 (dolist (n '(2.6 2.5 2.4 0.7 0.3 -0.3 -0.7 -2.4 -2.5 -2.6))
   (format t "~&~4,1@F ~2,' D ~2,' D ~2,' D ~2,' D"
           n (floor n) (ceiling n) (truncate n) (round n)))
>>  +2.6  2  3  2  3
>>  +2.5  2  3  2  2
>>  +2.4  2  3  2  2
>>  +0.7  0  1  0  1
>>  +0.3  0  1  0  0
>>  -0.3 -1  0  0  0
>>  -0.7 -1  0  0 -1
>>  -2.4 -3 -2 -2 -2
>>  -2.5 -3 -2 -2 -2
>>  -2.6 -3 -2 -2 -3
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

When only @emph{number} is given, the two results are exact; the
mathematical sum of the two results is always equal to the mathematical
value of @emph{number}.

(@emph{function} @emph{number} @emph{divisor}) and (@emph{function} (/
@emph{number} @emph{divisor})) (where @emph{function} is any of one of
@ref{#floor,@strong{floor}}, @ref{#ceiling,@strong{ceiling}},
@ref{#ffloor,@strong{ffloor}}, @ref{#fceiling,@strong{fceiling}},
@ref{#truncate,@strong{truncate}}, @ref{#round,@strong{round}},
@ref{#ftruncate,@strong{ftruncate}}, and @ref{#fround,@strong{fround}})
return the same first value, but they return different remainders as the
second value. For example:

@verbatim
 (floor 5 2) =>  2, 1
 (floor (/ 5 2)) =>  2, 1/2
@end verbatim

If an effect is desired that is similar to @ref{#round,@strong{round}},
but that always rounds up or down (rather than toward the nearest even
integer) if the mathematical quotient is exactly halfway between two
integers, the programmer should consider a construction such as (floor
(+ x 1/2)) or (ceiling (- x 1/2)).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GCD
@subsubsection CLHS: Function GCD
@anchor{#clhs-function-gcd}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_expcm_expt.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_incfcm_decf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GCD}

@strong{Syntax:}

@strong{gcd} @emph{&rest integers} => @emph{greatest-common-denominator}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{greatest-common-denominator}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the greatest common divisor of @emph{integers}. If only one
@emph{integer} is supplied, its absolute value is returned. If no
@emph{integers} are given, @ref{#gcd,@strong{gcd}} returns 0, which is
an identity for this operation.

@strong{Examples:}

@verbatim
 (gcd) =>  0
 (gcd 60 42) =>  6
 (gcd 3333 -33 101) =>  1
 (gcd 3333 -33 1002001) =>  11
 (gcd 91 -49) =>  7
 (gcd 63 -42 35) =>  7
 (gcd 5) =>  5
 (gcd -4) =>  4
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
@emph{integer} is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_lcm.html#lcm,@strong{lcm}}

@strong{Notes:}

For three or more arguments,

@verbatim
 (gcd b c ... z) ==  (gcd (gcd a b) c ... z)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INTEGER-LENGTH
@subsubsection CLHS: Function INTEGER-LENGTH
@anchor{#clhs-function-integer-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_integerp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INTEGER-LENGTH}

@strong{Syntax:}

@strong{integer-length} @emph{integer} => @emph{number-of-bits}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{number-of-bits}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the number of bits needed to represent @emph{integer} in binary
two's-complement format.

@strong{Examples:}

@verbatim
 (integer-length 0) =>  0
 (integer-length 1) =>  1
 (integer-length 3) =>  2
 (integer-length 4) =>  3
 (integer-length 7) =>  3
 (integer-length -1) =>  0
 (integer-length -4) =>  2
 (integer-length -7) =>  3
 (integer-length -8) =>  3
 (integer-length (expt 2 9)) =>  10
 (integer-length (1- (expt 2 9))) =>  9
 (integer-length (- (expt 2 9))) =>  9
 (integer-length (- (1+ (expt 2 9)))) =>  10
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer} is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

This function could have been defined by:

@verbatim
(defun integer-length (integer)
  (ceiling (log (if (minusp integer)
                    (- integer)
                    (1+ integer))
                2)))
@end verbatim

If @emph{integer} is non-negative, then its value can be represented in
unsigned binary form in a field whose width in bits is no smaller than
(integer-length @emph{integer}). Regardless of the sign of
@emph{integer}, its value can be represented in signed binary
two's-complement form in a field whose width in bits is no smaller than
(+ (integer-length @emph{integer}) 1).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INTEGERP
@subsubsection CLHS: Function INTEGERP
@anchor{#clhs-function-integerp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_integer-length.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_parse-integer.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INTEGERP}

@strong{Syntax:}

@strong{integerp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_integer.html#integer,@strong{integer}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (integerp 1) =>  true
 (integerp (expt 2 130)) =>  true
 (integerp 6/5) =>  false
 (integerp nil) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (integerp object) ==  (typep object 'integer)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LCM
@subsubsection CLHS: Function LCM
@anchor{#clhs-function-lcm}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_incfcm_decf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_log.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LCM}

@strong{Syntax:}

@strong{lcm} @emph{&rest integers} => @emph{least-common-multiple}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{least-common-multiple}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#lcm,@strong{lcm}} returns the least common multiple of the
@emph{integers}.

If no @emph{integer} is supplied, the
@uref{glo_i.html#integer,@emph{integer}} 1 is returned.

If only one @emph{integer} is supplied, the absolute value of that
@emph{integer} is returned.

For two arguments that are not both zero,

@verbatim
 (lcm a b) ==  (/ (abs (* a b)) (gcd a b))
@end verbatim

If one or both arguments are zero,

@verbatim
 (lcm a 0) ==  (lcm 0 a) ==  0
@end verbatim

For three or more arguments,

@verbatim
 (lcm a b c ... z) ==  (lcm (lcm a b) c ... z)
@end verbatim

@strong{Examples:}

@verbatim
 (lcm 10) =>  10
 (lcm 25 30) =>  150
 (lcm -24 18 10) =>  360
 (lcm 14 35) =>  70
 (lcm 0 5) =>  0
 (lcm 1 2 3 4 5 6) =>  60
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
argument is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_gcd.html#gcd,@strong{gcd}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss210.html,LCM-NO-ARGUMENTS:1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LDB-TEST
@subsubsection CLHS: Function LDB-TEST
@anchor{#clhs-function-ldb-test}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_ldb.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_mask-field.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LDB-TEST}

@strong{Syntax:}

@strong{ldb-test} @emph{bytespec integer} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{bytespec}---a @uref{glo_b.html#byte_specifier,@emph{byte
specifier}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if any of the bits of the
byte in @emph{integer} specified by @emph{bytespec} is non-zero;
otherwise returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (ldb-test (byte 4 1) 16) =>  true
 (ldb-test (byte 3 1) 16) =>  false
 (ldb-test (byte 3 2) 16) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_bytecm_by_yte-position.html#byte,@strong{byte}},
@uref{acc_ldb.html#ldb,@strong{ldb}},
@uref{fun_zerop.html#zerop,@strong{zerop}}

@strong{Notes:}

@verbatim
 (ldb-test bytespec n) == 
 (not (zerop (ldb bytespec n))) == 
 (logtest (ldb bytespec -1) n)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOG
@subsubsection CLHS: Function LOG
@anchor{#clhs-function-log}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_lcm.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_modcm_rem.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOG}

@strong{Syntax:}

@strong{log} @emph{number &optional base} => @emph{logarithm}

@strong{Arguments and Values:}

@emph{number}---a non-zero @uref{glo_n.html#number,@emph{number}}.

@emph{base}---a @uref{glo_n.html#number,@emph{number}}.

@emph{logarithm}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#log,@strong{log}} returns the logarithm of @emph{number} in base
@emph{base}. If @emph{base} is not supplied its value is @emph{e}, the
base of the natural logarithms.

@ref{#log,@strong{log}} may return a
@uref{glo_c.html#complex,@emph{complex}} when given a
@uref{syscla_real.html#real,@emph{real}} negative @emph{number}.

@verbatim
 (log -1.0) ==  (complex 0.0 (float pi 0.0))
@end verbatim

If @emph{base} is zero, @ref{#log,@strong{log}} returns zero.

The result of (log 8 2) may be either 3 or 3.0, depending on the
implementation. An implementation can use floating-point calculations
even if an exact integer result is possible.

The branch cut for the logarithm function of one argument (natural
logarithm) lies along the negative real axis, continuous with quadrant
II. The domain excludes the origin.

The mathematical definition of a complex logarithm is as follows,
whether or not minus zero is supported by the implementation:

@verbatim
(log x) ==  (complex (log (abs x)) (phase x))
@end verbatim

Therefore the range of the one-argument logarithm function is that strip
of the complex plane containing numbers with imaginary parts between
-<PI> (exclusive) and <PI> (inclusive) if minus zero is not supported,
or -<PI> (inclusive) and <PI> (inclusive) if minus zero is supported.

The two-argument logarithm function is defined as

@verbatim
 (log base number)
 ==  (/ (log number) (log base))
@end verbatim

This defines the @uref{glo_p.html#principal,@emph{principal}}
@uref{glo_v.html#value,@emph{values}} precisely. The range of the
two-argument logarithm function is the entire complex plane.

@strong{Examples:}

@verbatim
 (log 100 10)
=>  2.0
=>  2
 (log 100.0 10) =>  2.0
 (log #c(0 1) #c(0 -1))
=>  #C(-1.0 0.0)
OR=>  #C(-1 0)
 (log 8.0 2) =>  3.0
@end verbatim

@verbatim
 (log #c(-16 16) #c(2 2)) =>  3 or approximately #c(3.0 0.0)
                               or approximately 3.0 (unlikely)
@end verbatim

@strong{Affected By:}

The implementation.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_expcm_expt.html#exp,@strong{exp}},
@uref{fun_expcm_expt.html#expt,@strong{expt}},
@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss071.html,COMPLEX-RATIONAL-RESULT:EXTEND}
@item
@uref{../Issues/iss192.html,IEEE-ATAN-BRANCH-CUT:SPLIT}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOGAND LOGANDC1 LOGANDC2
@subsubsection CLHS: Function LOGAND, LOGANDC1, LOGANDC2...
@anchor{#clhs-function-logand-logandc1-logandc2...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_boole-_cm_boole-xor.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_logbitp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOGAND, LOGANDC1, LOGANDC2, LOGEQV, LOGIOR,
LOGNAND, LOGNOR, LOGNOT, LOGORC1, LOGORC2, LOGXOR}

@strong{Syntax:}

@strong{logand} @emph{&rest integers} => @emph{result-integer}

@strong{logandc1} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{logandc2} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{logeqv} @emph{&rest integers} => @emph{result-integer}

@strong{logior} @emph{&rest integers} => @emph{result-integer}

@strong{lognand} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{lognor} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{lognot} @emph{integer} => @emph{result-integer}

@strong{logorc1} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{logorc2} @emph{integer-1 integer-2} => @emph{result-integer}

@strong{logxor} @emph{&rest integers} => @emph{result-integer}

@strong{Arguments and Values:}

@emph{integers}---@uref{glo_i.html#integer,@emph{integers}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer-1}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer-2}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{result-integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{functions}}
@ref{#logandc1,@strong{logandc1}}, @ref{#logandc2,@strong{logandc2}},
@ref{#logand,@strong{logand}}, @ref{#logeqv,@strong{logeqv}},
@ref{#logior,@strong{logior}}, @ref{#lognand,@strong{lognand}},
@ref{#lognor,@strong{lognor}}, @ref{#lognot,@strong{lognot}},
@ref{#logorc1,@strong{logorc1}}, @ref{#logorc2,@strong{logorc2}}, and
@ref{#logxor,@strong{logxor}} perform bit-wise logical operations on
their @uref{glo_a.html#argument,@emph{arguments}}, that are treated as
if they were binary.

The next figure lists the meaning of each of the
@uref{glo_f.html#function,@emph{functions}}. Where an `identity' is
shown, it indicates the @uref{glo_v.html#value,@emph{value}}
@emph{yielded} by the @uref{glo_f.html#function,@emph{function}} when no
@uref{glo_a.html#argument,@emph{arguments}} are supplied.

@verbatim
Function  Identity  Operation performed                         
logandc1  ---       and complement of integer-1 with integer-2  
logandc2  ---       and integer-1 with complement of integer-2  
logand    -1        and                                         
logeqv    -1        equivalence (exclusive nor)                 
logior    0         inclusive or                                
lognand   ---       complement of integer-1 and integer-2       
lognor    ---       complement of integer-1 or integer-2        
lognot    ---       complement                                  
logorc1   ---       or complement of integer-1 with integer-2   
logorc2   ---       or integer-1 with complement of integer-2   
logxor    0         exclusive or                                
@end verbatim

@strong{Figure 12-18. Bit-wise Logical Operations on Integers}

Negative @emph{integers} are treated as if they were in two's-complement
notation.

@strong{Examples:}

@verbatim
 (logior 1 2 4 8) =>  15
 (logxor 1 3 7 15) =>  10
 (logeqv) =>  -1
 (logand 16 31) =>  16
 (lognot 0) =>  -1
 (lognot 1) =>  -2
 (lognot -1) =>  0
 (lognot (1+ (lognot 1000))) =>  999

;;; In the following example, m is a mask.  For each bit in
;;; the mask that is a 1, the corresponding bits in x and y are
;;; exchanged.  For each bit in the mask that is a 0, the 
;;; corresponding bits of x and y are left unchanged.
 (flet ((show (m x y)
          (format t "~%m = #o~6,'0O~%x = #o~6,'0O~%y = #o~6,'0O~%"
                  m x y)))
   (let ((m #o007750)
         (x #o452576)
         (y #o317407))
     (show m x y)
     (let ((z (logand (logxor x y) m)))
       (setq x (logxor z x))
       (setq y (logxor z y))
       (show m x y))))
>>  m = #o007750
>>  x = #o452576
>>  y = #o317407
>>  
>>  m = #o007750
>>  x = #o457426
>>  y = #o312557
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
argument is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_boole.html#boole,@strong{boole}}

@strong{Notes:}

(logbitp @emph{k} -1) returns @uref{glo_t.html#true,@emph{true}} for all
values of @emph{k}.

Because the following functions are not associative, they take exactly
two arguments rather than any number of arguments.

@verbatim
 (lognand n1 n2) ==  (lognot (logand n1 n2))
 (lognor n1 n2) ==  (lognot (logior n1 n2))
 (logandc1 n1 n2) ==  (logand (lognot n1) n2)
 (logandc2 n1 n2) ==  (logand n1 (lognot n2))
 (logiorc1 n1 n2) ==  (logior (lognot n1) n2)
 (logiorc2 n1 n2) ==  (logior n1 (lognot n2))
 (logbitp j (lognot x)) ==  (not (logbitp j x))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOGBITP
@subsubsection CLHS: Function LOGBITP
@anchor{#clhs-function-logbitp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_logandcm__rc2cm_logxor.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_logcount.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOGBITP}

@strong{Syntax:}

@strong{logbitp} @emph{index integer} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{index}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#logbitp,@strong{logbitp}} is used to test the value of a
particular bit in @emph{integer}, that is treated as if it were binary.
The value of @ref{#logbitp,@strong{logbitp}} is
@uref{glo_t.html#true,@emph{true}} if the bit in @emph{integer} whose
index is @emph{index} (that is, its weight is 2^@emph{index}) is a
one-bit; otherwise it is @uref{glo_f.html#false,@emph{false}}.

Negative @emph{integers} are treated as if they were in two's-complement
notation.

@strong{Examples:}

@verbatim
 (logbitp 1 1) =>  false
 (logbitp 0 1) =>  true
 (logbitp 3 10) =>  true
 (logbitp 1000000 -1) =>  true
 (logbitp 2 6) =>  true
 (logbitp 0 6) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{index} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}}. Should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer} is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (logbitp k n) ==  (ldb-test (byte 1 k) n)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOGCOUNT
@subsubsection CLHS: Function LOGCOUNT
@anchor{#clhs-function-logcount}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_logbitp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_logtest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOGCOUNT}

@strong{Syntax:}

@strong{logcount} @emph{integer} => @emph{number-of-on-bits}

@strong{Arguments and Values:}

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{number-of-on-bits}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Computes and returns the number of bits in the two's-complement binary
representation of @emph{integer} that are `on' or `set'. If
@emph{integer} is negative, the 0 bits are counted; otherwise, the 1
bits are counted.

@strong{Examples:}

@verbatim
 (logcount 0) =>  0
 (logcount -1) =>  0
 (logcount 7) =>  3
 (logcount  13) =>  3 ;Two's-complement binary: ...0001101
 (logcount -13) =>  2 ;Two's-complement binary: ...1110011
 (logcount  30) =>  4 ;Two's-complement binary: ...0011110
 (logcount -30) =>  4 ;Two's-complement binary: ...1100010
 (logcount (expt 2 100)) =>  1
 (logcount (- (expt 2 100))) =>  100
 (logcount (- (1+ (expt 2 100)))) =>  1
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

Even if the @uref{glo_i.html#implementation,@emph{implementation}} does
not represent @uref{glo_i.html#integer,@emph{integers}} internally in
two's complement binary, @ref{#logcount,@strong{logcount}} behaves as if
it did.

The following identity always holds:

@verbatim
    (logcount x)
 ==  (logcount (- (+ x 1)))
 ==  (logcount (lognot x))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOGTEST
@subsubsection CLHS: Function LOGTEST
@anchor{#clhs-function-logtest}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_logcount.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_bytecm_by_yte-position.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOGTEST}

@strong{Syntax:}

@strong{logtest} @emph{integer-1 integer-2} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{integer-1}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{integer-2}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if any of the bits designated
by the 1's in @emph{integer-1} is 1 in @emph{integer-2}; otherwise it is
@uref{glo_f.html#false,@emph{false}}. @emph{integer-1} and
@emph{integer-2} are treated as if they were binary.

Negative @emph{integer-1} and @emph{integer-2} are treated as if they
were represented in two's-complement binary.

@strong{Examples:}

@verbatim
 (logtest 1 7) =>  true
 (logtest 1 2) =>  false
 (logtest -2 -1) =>  true
 (logtest 0 -1) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer-1} is not an @uref{glo_i.html#integer,@emph{integer}}.
Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{integer-2} is not an @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (logtest x y) ==  (not (zerop (logand x y)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-RANDOM-STATE
@subsubsection CLHS: Function MAKE-RANDOM-STATE
@anchor{#clhs-function-make-random-state}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_random-state.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_random.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-RANDOM-STATE}

@strong{Syntax:}

@strong{make-random-state} @emph{&optional state} => @emph{new-state}

@strong{Arguments and Values:}

@emph{state}---a @uref{glo_r.html#random_state,@emph{random state}}, or
@uref{any_nil.html#nil,@strong{nil}}, or @uref{any_t.html#t,@strong{t}}.
The default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{new-state}---a @uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Creates a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_random-state.html#random-state,@strong{random-state}}
suitable for use as the @uref{glo_v.html#value,@emph{value}} of
@uref{var_strandom-statest.html#STrandom-stateST,@strong{*random-state*}}.

If @emph{state} is a @uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}}, the @emph{new-state} is a
@uref{glo_c.html#copy,@emph{copy}}[5] of that
@uref{glo_o.html#object,@emph{object}}. If @emph{state} is
@uref{any_nil.html#nil,@strong{nil}}, the @emph{new-state} is a
@uref{glo_c.html#copy,@emph{copy}}[5] of the
@uref{glo_c.html#current_random_state,@emph{current random state}}. If
@emph{state} is @uref{any_t.html#t,@strong{t}}, the @emph{new-state} is
a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}} that has been randomly
initialized by some means.

@strong{Examples:}

@verbatim
 (let* ((rs1 (make-random-state nil))
        (rs2 (make-random-state t))
        (rs3 (make-random-state rs2))
        (rs4 nil))
   (list (loop for i from 1 to 10 
               collect (random 100)
               when (= i 5)
                do (setq rs4 (make-random-state)))
         (loop for i from 1 to 10 collect (random 100 rs1))
         (loop for i from 1 to 10 collect (random 100 rs2))
         (loop for i from 1 to 10 collect (random 100 rs3))
         (loop for i from 1 to 10 collect (random 100 rs4))))
=>  ((29 25 72 57 55 68 24 35 54 65)
    (29 25 72 57 55 68 24 35 54 65)
    (93 85 53 99 58 62 2 23 23 59)
    (93 85 53 99 58 62 2 23 23 59)
    (68 24 35 54 65 54 55 50 59 49))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{state} is not a @uref{glo_r.html#random_state,@emph{random
state}}, or @uref{any_nil.html#nil,@strong{nil}}, or
@uref{any_t.html#t,@strong{t}}.

@strong{See Also:}

@uref{fun_random.html#random,@strong{random}},
@uref{var_strandom-statest.html#STrandom-stateST,@strong{*random-state*}}

@strong{Notes:}

One important use of @ref{#make-random-state,@strong{make-random-state}}
is to allow the same series of pseudo-random
@uref{glo_n.html#number,@emph{numbers}} to be generated many times
within a single program.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAX MIN
@subsubsection CLHS: Function MAX, MIN
@anchor{#clhs-function-max-min}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_eqcm_sleq__lteqcm_gteq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_minuspcm_plusp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAX, MIN}

@strong{Syntax:}

@strong{max} @emph{&rest reals+} => @emph{max-real}

@strong{min} @emph{&rest reals+} => @emph{min-real}

@strong{Arguments and Values:}

@emph{real}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{max-real}, @emph{min-real}---a
@uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

@ref{#max,@strong{max}} returns the @emph{real} that is greatest
(closest to positive infinity). @ref{#min,@strong{min}} returns the
@emph{real} that is least (closest to negative infinity).

For @ref{#max,@strong{max}}, the implementation has the choice of
returning the largest argument as is or applying the rules of
floating-point @uref{glo_c.html#contagion,@emph{contagion}}, taking all
the arguments into consideration for
@uref{glo_c.html#contagion,@emph{contagion}} purposes. Also, if one or
more of the arguments are
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}}, then any one of
them may be chosen as the value to return. For example, if the
@emph{reals} are a mixture of
@uref{glo_r.html#rational,@emph{rationals}} and
@uref{glo_f.html#float,@emph{floats}}, and the largest argument is a
@uref{glo_r.html#rational,@emph{rational}}, then the implementation is
free to produce either that @uref{glo_r.html#rational,@emph{rational}}
or its @uref{glo_f.html#float,@emph{float}} approximation; if the
largest argument is a @uref{glo_f.html#float,@emph{float}} of a smaller
format than the largest format of any
@uref{glo_f.html#float,@emph{float}} argument, then the implementation
is free to return the argument in its given format or expanded to the
larger format. Similar remarks apply to @ref{#min,@strong{min}}
(replacing ``largest argument'' by ``smallest argument'').

@strong{Examples:}

@verbatim
 (max 3) =>  3 
 (min 3) =>  3
 (max 6 12) =>  12 
 (min 6 12) =>  6
 (max -6 -12) =>  -6 
 (min -6 -12) =>  -12
 (max 1 3 2 -7) =>  3 
 (min 1 3 2 -7) =>  -7
 (max -2 3 0 7) =>  7 
 (min -2 3 0 7) =>  -2
 (max 5.0 2) =>  5.0 
 (min 5.0 2)
=>  2
OR=>  2.0
 (max 3.0 7 1)
=>  7
OR=>  7.0 
 (min 3.0 7 1)
=>  1
OR=>  1.0
 (max 1.0s0 7.0d0) =>  7.0d0
 (min 1.0s0 7.0d0)
=>  1.0s0
OR=>  1.0d0
 (max 3 1 1.0s0 1.0d0)
=>  3
OR=>  3.0d0
 (min 3 1 1.0s0 1.0d0)
=>  1
OR=>  1.0s0 
OR=>  1.0d0
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
@emph{number} is not a @uref{syscla_real.html#real,@emph{real}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MINUSP PLUSP
@subsubsection CLHS: Function MINUSP, PLUSP
@anchor{#clhs-function-minusp-plusp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_maxcm_min.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_zerop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MINUSP, PLUSP}

@strong{Syntax:}

@strong{minusp} @emph{real} => @emph{generalized-boolean}

@strong{plusp} @emph{real} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{real}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#minusp,@strong{minusp}} returns @uref{glo_t.html#true,@emph{true}}
if @emph{real} is less than zero; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#plusp,@strong{plusp}} returns @uref{glo_t.html#true,@emph{true}}
if @emph{real} is greater than zero; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

Regardless of whether an
@uref{glo_i.html#implementation,@emph{implementation}} provides distinct
representations for positive and negative
@uref{glo_f.html#float,@emph{float}} zeros, (minusp -0.0) always returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (minusp -1) =>  true
 (plusp 0) =>  false
 (plusp least-positive-single-float) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{real} is not a @uref{syscla_real.html#real,@emph{real}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MOD REM
@subsubsection CLHS: Function MOD, REM
@anchor{#clhs-function-mod-rem}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_log.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_signum.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MOD, REM}

@strong{Syntax:}

@strong{mod} @emph{number divisor} => @emph{modulus}

@strong{rem} @emph{number divisor} => @emph{remainder}

@strong{Arguments and Values:}

@emph{number}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{divisor}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{modulus}, @emph{remainder}---a
@uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

@ref{#mod,@strong{mod}} and @ref{#rem,@strong{rem}} are generalizations
of the modulus and remainder functions respectively.

@ref{#mod,@strong{mod}} performs the operation
@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}} on
@emph{number} and @emph{divisor} and returns the remainder of the
@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}} operation.

@ref{#rem,@strong{rem}} performs the operation
@uref{fun_floorcm_f_undcm_fround.html#truncate,@strong{truncate}} on
@emph{number} and @emph{divisor} and returns the remainder of the
@uref{fun_floorcm_f_undcm_fround.html#truncate,@strong{truncate}}
operation.

@ref{#mod,@strong{mod}} and @ref{#rem,@strong{rem}} are the modulus and
remainder functions when @emph{number} and @emph{divisor} are
@uref{glo_i.html#integer,@emph{integers}}.

@strong{Examples:}

@verbatim
 (rem -1 5) =>  -1
 (mod -1 5) =>  4
 (mod 13 4) =>  1
 (rem 13 4) =>  1
 (mod -13 4) =>  3
 (rem -13 4) =>  -1
 (mod 13 -4) =>  -3
 (rem 13 -4) =>  1
 (mod -13 -4) =>  -1
 (rem -13 -4) =>  -1
 (mod 13.4 1) =>  0.4
 (rem 13.4 1) =>  0.4
 (mod -13.4 1) =>  0.6
 (rem -13.4 1) =>  -0.4
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}},
@uref{fun_floorcm_f_undcm_fround.html#truncate,@strong{truncate}}

@strong{Notes:}

The result of @ref{#mod,@strong{mod}} is either zero or a
@uref{syscla_real.html#real,@emph{real}} with the same sign as
@emph{divisor}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NUMBERP
@subsubsection CLHS: Function NUMBERP
@anchor{#clhs-function-numberp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_strandom-statest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_cis.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NUMBERP}

@strong{Syntax:}

@strong{numberp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_number.html#number,@strong{number}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (numberp 12) =>  true
 (numberp (expt 2 130)) =>  true
 (numberp #c(5/3 7.2)) =>  true
 (numberp nil) =>  false
 (numberp (cons 1 2)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (numberp object) ==  (typep object 'number)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NUMERATOR DENOMINATOR
@subsubsection CLHS: Function NUMERATOR, DENOMINATOR
@anchor{#clhs-function-numerator-denominator}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_realp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rationalcm_rationalize.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NUMERATOR, DENOMINATOR}

@strong{Syntax:}

@strong{numerator} @emph{rational} => @emph{numerator}

@strong{denominator} @emph{rational} => @emph{denominator}

@strong{Arguments and Values:}

@emph{rational}---a @uref{glo_r.html#rational,@emph{rational}}.

@emph{numerator}---an @uref{glo_i.html#integer,@emph{integer}}.

@emph{denominator}---a positive
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#numerator,@strong{numerator}} and
@ref{#denominator,@strong{denominator}} reduce @emph{rational} to
canonical form and compute the numerator or denominator of that number.

@ref{#numerator,@strong{numerator}} and
@ref{#denominator,@strong{denominator}} return the numerator or
denominator of the canonical form of @emph{rational}.

If @emph{rational} is an @uref{glo_i.html#integer,@emph{integer}},
@ref{#numerator,@strong{numerator}} returns @emph{rational} and
@ref{#denominator,@strong{denominator}} returns 1.

@strong{Examples:}

@verbatim
 (numerator 1/2) =>  1
 (denominator 12/36) =>  3
 (numerator -1) =>  -1
 (denominator (/ -33)) =>  33
 (numerator (/ 8 -6)) =>  -4
 (denominator (/ 8 -6)) =>  3
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_sl.html#SL,@strong{/}}

@strong{Notes:}

@verbatim
 (gcd (numerator x) (denominator x)) =>  1
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PARSE-INTEGER
@subsubsection CLHS: Function PARSE-INTEGER
@anchor{#clhs-function-parse-integer}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_integerp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_boole.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PARSE-INTEGER}

@strong{Syntax:}

@strong{parse-integer} @emph{string &key start end radix junk-allowed}
=> @emph{integer, pos}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{radix}---a @uref{glo_r.html#radix,@emph{radix}}. The default is
10.

@emph{junk-allowed}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{integer}---an @uref{glo_i.html#integer,@emph{integer}} or
@uref{glo_f.html#false,@emph{false}}.

@emph{pos}---a @uref{glo_b.html#bounding_index,@emph{bounding index}} of
@emph{string}.

@strong{Description:}

@ref{#parse-integer,@strong{parse-integer}} parses an
@uref{glo_i.html#integer,@emph{integer}} in the specified @emph{radix}
from the substring of @emph{string} delimited by @emph{start} and
@emph{end}.

@ref{#parse-integer,@strong{parse-integer}} expects an optional sign (+
or -) followed by a a non-empty sequence of digits to be interpreted in
the specified @emph{radix}. Optional leading and trailing
@uref{glo_w.html#whitespace,@emph{whitespace}}[1] is ignored.

@ref{#parse-integer,@strong{parse-integer}} does not recognize the
syntactic radix-specifier prefixes #O, #B, #X, and #@emph{n}R, nor does
it recognize a trailing decimal point.

If @emph{junk-allowed} is @uref{glo_f.html#false,@emph{false}}, an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_parse-error.html#parse-error,@strong{parse-error}} is
signaled if substring does not consist entirely of the representation of
a signed @uref{glo_i.html#integer,@emph{integer}}, possibly surrounded
on either side by @uref{glo_w.html#whitespace,@emph{whitespace}}[1]
@uref{glo_c.html#character,@emph{characters}}.

The first @uref{glo_v.html#value,@emph{value}} returned is either the
@uref{glo_i.html#integer,@emph{integer}} that was parsed, or else
@uref{any_nil.html#nil,@strong{nil}} if no syntactically correct
@uref{glo_i.html#integer,@emph{integer}} was seen but
@emph{junk-allowed} was @uref{glo_t.html#true,@emph{true}}.

The second @uref{glo_v.html#value,@emph{value}} is either the index into
the @uref{glo_s.html#string,@emph{string}} of the delimiter that
terminated the parse, or the upper
@uref{glo_b.html#bounding_index,@emph{bounding index}} of the substring
if the parse terminated at the end of the substring (as is always the
case if @emph{junk-allowed} is @uref{glo_f.html#false,@emph{false}}).

@strong{Examples:}

@verbatim
 (parse-integer "123") =>  123, 3
 (parse-integer "123" :start 1 :radix 5) =>  13, 3
 (parse-integer "no-integer" :junk-allowed t) =>  NIL, 0
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{junk-allowed} is @uref{glo_f.html#false,@emph{false}}, an error
is signaled if substring does not consist entirely of the representation
of an @uref{glo_i.html#integer,@emph{integer}}, possibly surrounded on
either side by @uref{glo_w.html#whitespace,@emph{whitespace}}[1]
characters.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PHASE
@subsubsection CLHS: Function PHASE
@anchor{#clhs-function-phase}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_conjugate.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_realpartcm_imagpart.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PHASE}

@strong{Syntax:}

@strong{phase} @emph{number} => @emph{phase}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{phase}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#phase,@strong{phase}} returns the phase of @emph{number} (the
angle part of its polar representation) in radians, in the range -<PI>
(exclusive) if minus zero is not supported, or -<PI> (inclusive) if
minus zero is supported, to <PI> (inclusive). The phase of a positive
@uref{syscla_real.html#real,@emph{real}} number is zero; that of a
negative @uref{syscla_real.html#real,@emph{real}} number is <PI>. The
phase of zero is defined to be zero.

If @emph{number} is a @uref{glo_c.html#complex_float,@emph{complex
float}}, the result is a @uref{glo_f.html#float,@emph{float}} of the
same @uref{glo_t.html#type,@emph{type}} as the components of
@emph{number}. If @emph{number} is a
@uref{glo_f.html#float,@emph{float}}, the result is a
@uref{glo_f.html#float,@emph{float}} of the same
@uref{glo_t.html#type,@emph{type}}. If @emph{number} is a
@uref{glo_r.html#rational,@emph{rational}} or a
@uref{glo_c.html#complex_rational,@emph{complex rational}}, the result
is a @uref{glo_s.html#single_float,@emph{single float}}.

The branch cut for @ref{#phase,@strong{phase}} lies along the negative
real axis, continuous with quadrant II. The range consists of that
portion of the real axis between -<PI> (exclusive) and <PI> (inclusive).

The mathematical definition of @ref{#phase,@strong{phase}} is as
follows:

(phase @emph{x}) = (atan (imagpart @emph{x}) (realpart @emph{x}))

@strong{Examples:}

@verbatim
 (phase 1) =>  0.0s0
 (phase 0) =>  0.0s0
 (phase (cis 30)) =>  -1.4159266
 (phase #c(0 1)) =>  1.5707964
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a @uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@item
@uref{../Issues/iss192.html,IEEE-ATAN-BRANCH-CUT:SPLIT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function +
@subsubsection CLHS: Function +
@anchor{#clhs-function-1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_st.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_-.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{+}

@strong{Syntax:}

@strong{+} @emph{&rest numbers} => @emph{sum}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{sum}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

Returns the sum of @emph{numbers}, performing any necessary type
conversions in the process. If no @emph{numbers} are supplied, 0 is
returned.

@strong{Examples:}

@verbatim
 (+) =>  0
 (+ 1) =>  1
 (+ 31/100 69/100) =>  1
 (+ 1/5 0.8) =>  1.0
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if some
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{sec_12-1-1.html,Section 12.1.1 (Numeric Operations)},
@uref{sec_12-1-3.html,Section 12.1.3 (Rational Computations)},
@uref{sec_12-1-4.html,Section 12.1.4 (Floating-point Computations)},
@uref{sec_12-1-5.html,Section 12.1.5 (Complex Computations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RANDOM-STATE-P
@subsubsection CLHS: Function RANDOM-STATE-P
@anchor{#clhs-function-random-state-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_random.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_strandom-statest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RANDOM-STATE-P}

@strong{Syntax:}

@strong{random-state-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_random-state.html#random-state,@strong{random-state}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (random-state-p *random-state*) =>  true
 (random-state-p (make-random-state)) =>  true
 (random-state-p 'test-function) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-random-state.html#make-random-state,@strong{make-random-state}},
@uref{var_strandom-statest.html#STrandom-stateST,@strong{*random-state*}}

@strong{Notes:}

@verbatim
 (random-state-p object) ==  (typep object 'random-state)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RANDOM
@subsubsection CLHS: Function RANDOM
@anchor{#clhs-function-random}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-random-state.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_random-state-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RANDOM}

@strong{Syntax:}

@strong{random} @emph{limit &optional random-state} =>
@emph{random-number}

@strong{Arguments and Values:}

@emph{limit}---a positive @uref{glo_i.html#integer,@emph{integer}}, or a
positive @uref{glo_f.html#float,@emph{float}}.

@emph{random-state}---a @uref{glo_r.html#random_state,@emph{random
state}}. The default is the
@uref{glo_c.html#current_random_state,@emph{current random state}}.

@emph{random-number}---a non-negative
@uref{glo_n.html#number,@emph{number}} less than @emph{limit} and of the
same @uref{glo_t.html#type,@emph{type}} as @emph{limit}.

@strong{Description:}

Returns a pseudo-random number that is a non-negative
@uref{glo_n.html#number,@emph{number}} less than @emph{limit} and of the
same @uref{glo_t.html#type,@emph{type}} as @emph{limit}.

The @emph{random-state}, which is modified by this function, encodes the
internal state maintained by the random number generator.

An approximately uniform choice distribution is used. If @emph{limit} is
an @uref{glo_i.html#integer,@emph{integer}}, each of the possible
results occurs with (approximate) probability 1/@emph{limit}.

@strong{Examples:}

@verbatim
 (<= 0 (random 1000) 1000) =>  true
 (let ((state1 (make-random-state))
       (state2 (make-random-state)))
   (= (random 1000 state1) (random 1000 state2))) =>  true
@end verbatim

@strong{Side Effects:}

The @emph{random-state} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{limit} is not a positive @uref{glo_i.html#integer,@emph{integer}}
or a positive @uref{syscla_real.html#real,@emph{real}}.

@strong{See Also:}

@uref{fun_make-random-state.html#make-random-state,@strong{make-random-state}},
@uref{var_strandom-statest.html#STrandom-stateST,@strong{*random-state*}}

@strong{Notes:}

See @emph{Common Lisp: The Language} for information about generating
random numbers.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RATIONAL RATIONALIZE
@subsubsection CLHS: Function RATIONAL, RATIONALIZE
@anchor{#clhs-function-rational-rationalize}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_numerator__denominator.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rationalp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RATIONAL, RATIONALIZE}

@strong{Syntax:}

@strong{rational} @emph{number} => @emph{rational}

@strong{rationalize} @emph{number} => @emph{rational}

@strong{Arguments and Values:}

@emph{number}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{rational}---a @uref{glo_r.html#rational,@emph{rational}}.

@strong{Description:}

@ref{#rational,@strong{rational}} and
@ref{#rationalize,@strong{rationalize}} convert @emph{reals} to
@uref{glo_r.html#rational,@emph{rationals}}.

If @emph{number} is already @uref{glo_r.html#rational,@emph{rational}},
it is returned.

If @emph{number} is a @uref{glo_f.html#float,@emph{float}},
@ref{#rational,@strong{rational}} returns a
@uref{glo_r.html#rational,@emph{rational}} that is mathematically equal
in value to the @uref{glo_f.html#float,@emph{float}}.
@ref{#rationalize,@strong{rationalize}} returns a
@uref{glo_r.html#rational,@emph{rational}} that approximates the
@uref{glo_f.html#float,@emph{float}} to the accuracy of the underlying
floating-point representation.

@ref{#rational,@strong{rational}} assumes that the
@uref{glo_f.html#float,@emph{float}} is completely accurate.

@ref{#rationalize,@strong{rationalize}} assumes that the
@uref{glo_f.html#float,@emph{float}} is accurate only to the precision
of the floating-point representation.

@strong{Examples:}

@verbatim
 (rational 0) =>  0
 (rationalize -11/100) =>  -11/100
 (rational .1) =>  13421773/134217728 ;implementation-dependent
 (rationalize .1) =>  1/10
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{number} is not a @uref{syscla_real.html#real,@emph{real}}. Might
signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:} None.

@strong{Notes:}

It is always the case that

@verbatim
 (float (rational x) x) ==  x
@end verbatim

and

@verbatim
 (float (rationalize x) x) ==  x
@end verbatim

That is, rationalizing a @uref{glo_f.html#float,@emph{float}} by either
method and then converting it back to a
@uref{glo_f.html#float,@emph{float}} of the same format produces the
original @emph{number}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RATIONALP
@subsubsection CLHS: Function RATIONALP
@anchor{#clhs-function-rationalp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rationalcm_rationalize.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_ash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RATIONALP}

@strong{Syntax:}

@strong{rationalp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_rational.html#rational,@strong{rational}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (rationalp 12) =>  true
 (rationalp 6/5) =>  true
 (rationalp 1.212) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_rationalcm_rationalize.html#rational,@strong{rational}}

@strong{Notes:}

@verbatim
 (rationalp object) ==  (typep object 'rational)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REALP
@subsubsection CLHS: Function REALP
@anchor{#clhs-function-realp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_upgraded-_ex-part-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_numerator__denominator.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REALP}

@strong{Syntax:}

@strong{realp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_real.html#real,@strong{real}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (realp 12) =>  true
 (realp #c(5/3 7.2)) =>  false
 (realp nil) =>  false
 (realp (cons 1 2)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (realp object) ==  (typep object 'real)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REALPART IMAGPART
@subsubsection CLHS: Function REALPART, IMAGPART
@anchor{#clhs-function-realpart-imagpart}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_phase.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_upgraded-_ex-part-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REALPART, IMAGPART}

@strong{Syntax:}

@strong{realpart} @emph{number} => @emph{real}

@strong{imagpart} @emph{number} => @emph{real}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{real}---a @uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

@ref{#realpart,@strong{realpart}} and @ref{#imagpart,@strong{imagpart}}
return the real and imaginary parts of @emph{number} respectively. If
@emph{number} is @uref{syscla_real.html#real,@emph{real}}, then
@ref{#realpart,@strong{realpart}} returns @emph{number} and
@ref{#imagpart,@strong{imagpart}} returns (* 0 @emph{number}), which has
the effect that the imaginary part of a
@uref{glo_r.html#rational,@emph{rational}} is 0 and that of a
@uref{glo_f.html#float,@emph{float}} is a floating-point zero of the
same format.

@strong{Examples:}

@verbatim
 (realpart #c(23 41)) =>  23
 (imagpart #c(23 41.0)) =>  41.0
 (realpart #c(23 41.0)) =>  23.0
 (imagpart 23.0) =>  0.0
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{number} is not a @uref{glo_n.html#number,@emph{number}}.

@strong{See Also:}

@uref{fun_complex.html#complex,@strong{complex}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIGNUM
@subsubsection CLHS: Function SIGNUM
@anchor{#clhs-function-signum}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_modcm_rem.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sqrtcm_isqrt.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIGNUM}

@strong{Syntax:}

@strong{signum} @emph{number} => @emph{signed-prototype}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{signed-prototype}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#signum,@strong{signum}} determines a numerical value that
indicates whether @emph{number} is negative, zero, or positive.

For a @uref{glo_r.html#rational,@emph{rational}},
@ref{#signum,@strong{signum}} returns one of -1, 0, or 1 according to
whether @emph{number} is negative, zero, or positive. For a
@uref{glo_f.html#float,@emph{float}}, the result is a
@uref{glo_f.html#float,@emph{float}} of the same format whose value is
minus one, zero, or one. For a @uref{glo_c.html#complex,@emph{complex}}
number z, (signum @emph{z}) is a complex number of the same phase but
with unit magnitude, unless z is a complex zero, in which case the
result is z.

For @uref{glo_r.html#rational,@emph{rational}}
@uref{glo_a.html#argument,@emph{arguments}},
@ref{#signum,@strong{signum}} is a rational function, but it may be
irrational for @uref{glo_c.html#complex,@emph{complex}}
@uref{glo_a.html#argument,@emph{arguments}}.

If @emph{number} is a @uref{glo_f.html#float,@emph{float}}, the result
is a @uref{glo_f.html#float,@emph{float}}. If @emph{number} is a
@uref{glo_r.html#rational,@emph{rational}}, the result is a
@uref{glo_r.html#rational,@emph{rational}}. If @emph{number} is a
@uref{glo_c.html#complex_float,@emph{complex float}}, the result is a
@uref{glo_c.html#complex_float,@emph{complex float}}. If @emph{number}
is a @uref{glo_c.html#complex_rational,@emph{complex rational}}, the
result is a @uref{glo_c.html#complex,@emph{complex}}, but it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether that result is a @uref{glo_c.html#complex_rational,@emph{complex
rational}} or a @uref{glo_c.html#complex_float,@emph{complex float}}.

@strong{Examples:}

@verbatim
 (signum 0) =>  0
 (signum 99) =>  1
 (signum 4/5) =>  1
 (signum -99/100) =>  -1
 (signum 0.0) =>  0.0
 (signum #c(0 33)) =>  #C(0.0 1.0)
 (signum #c(7.5 10.0)) =>  #C(0.6 0.8)
 (signum #c(0.0 -14.7)) =>  #C(0.0 -1.0)
 (eql (signum -0.0) -0.0) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:}

@verbatim
 (signum x) ==  (if (zerop x) x (/ x (abs x)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIN COS TAN
@subsubsection CLHS: Function SIN, COS, TAN
@anchor{#clhs-function-sin-cos-tan}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_floorcm_f_undcm_fround.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_asincm_acoscm_atan.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIN, COS, TAN}

@strong{Syntax:}

@strong{sin} @emph{radians} => @emph{number}

@strong{cos} @emph{radians} => @emph{number}

@strong{tan} @emph{radians} => @emph{number}

@strong{Arguments and Values:}

@emph{radians}---a @uref{glo_n.html#number,@emph{number}} given in
radians.

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#sin,@strong{sin}}, @ref{#cos,@strong{cos}}, and
@ref{#tan,@strong{tan}} return the sine, cosine, and tangent,
respectively, of @emph{radians}.

@strong{Examples:}

@verbatim
 (sin 0) =>  0.0
 (cos 0.7853982) =>  0.707107
 (tan #c(0 1)) =>  #C(0.0 0.761594)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{radians} is not a @uref{glo_n.html#number,@emph{number}}. Might
signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{fun_asincm_acoscm_atan.html#asin,@strong{asin}},
@uref{fun_asincm_acoscm_atan.html#acos,@strong{acos}},
@uref{fun_asincm_acoscm_atan.html#atan,@strong{atan}},
@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SINH COSH TANH ASINH
@subsubsection CLHS: Function SINH, COSH, TANH, ASINH...
@anchor{#clhs-function-sinh-cosh-tanh-asinh...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_pi.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_st.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SINH, COSH, TANH, ASINH, ACOSH, ATANH}

@strong{Syntax:}

@strong{sinh} @emph{number} => @emph{result}

@strong{cosh} @emph{number} => @emph{result}

@strong{tanh} @emph{number} => @emph{result}

@strong{asinh} @emph{number} => @emph{result}

@strong{acosh} @emph{number} => @emph{result}

@strong{atanh} @emph{number} => @emph{result}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{result}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

These functions compute the hyperbolic sine, cosine, tangent, arc sine,
arc cosine, and arc tangent functions, which are mathematically defined
for an argument @emph{x} as given in the next figure.

@verbatim
Function                Definition                              
Hyperbolic sine         (e^x-e^-x)/2                            
Hyperbolic cosine       (e^x+e^-x)/2                            
Hyperbolic tangent      (e^x-e^-x)/(e^x+e^-x)                   
Hyperbolic arc sine     log  (x+sqrt(1+x^2))                    
Hyperbolic arc cosine   2 log  (sqrt((x+1)/2) + sqrt((x-1)/2))  
Hyperbolic arc tangent  (log  (1+x) - log (1-x))/2              
@end verbatim

@strong{Figure 12-16. Mathematical definitions for hyperbolic functions}

The following definition for the inverse hyperbolic cosine determines
the range and branch cuts:

arccosh z = 2 log (sqrt((z+1)/2) + sqrt((z-1)/2)).

The branch cut for the inverse hyperbolic cosine function lies along the
real axis to the left of 1 (inclusive), extending indefinitely along the
negative real axis, continuous with quadrant II and (between 0 and 1)
with quadrant I. The range is that half-strip of the complex plane
containing numbers whose real part is non-negative and whose imaginary
part is between -<PI> (exclusive) and <PI> (inclusive). A number with
real part zero is in the range if its imaginary part is between zero
(inclusive) and <PI> (inclusive).

The following definition for the inverse hyperbolic sine determines the
range and branch cuts:

arcsinh z = log (z+sqrt(1+z^2)).

The branch cut for the inverse hyperbolic sine function is in two
pieces: one along the positive imaginary axis above i (inclusive),
continuous with quadrant I, and one along the negative imaginary axis
below -i (inclusive), continuous with quadrant III. The range is that
strip of the complex plane containing numbers whose imaginary part is
between -<PI>/2 and <PI>/2. A number with imaginary part equal to
-<PI>/2 is in the range if and only if its real part is non-positive; a
number with imaginary part equal to <PI>/2 is in the range if and only
if its imaginary part is non-negative.

The following definition for the inverse hyperbolic tangent determines
the range and branch cuts:

arctanh z = log (1+z) - log (1-z)/2.

Note that:

i arctan z = arctanh iz.

The branch cut for the inverse hyperbolic tangent function is in two
pieces: one along the negative real axis to the left of -1 (inclusive),
continuous with quadrant III, and one along the positive real axis to
the right of 1 (inclusive), continuous with quadrant I. The points -1
and 1 are excluded from the domain. The range is that strip of the
complex plane containing numbers whose imaginary part is between -<PI>/2
and <PI>/2. A number with imaginary part equal to -<PI>/2 is in the
range if and only if its real part is strictly negative; a number with
imaginary part equal to <PI>/2 is in the range if and only if its
imaginary part is strictly positive. Thus the range of the inverse
hyperbolic tangent function is identical to that of the inverse
hyperbolic sine function with the points -<PI>i/2 and <PI>i/2 excluded.

@strong{Examples:}

@verbatim
 (sinh 0) =>  0.0 
 (cosh (complex 0 -1)) =>  #C(0.540302 -0.0)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{number} is not a @uref{glo_n.html#number,@emph{number}}. Might
signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{fun_log.html#log,@strong{log}},
@uref{fun_sqrtcm_isqrt.html#sqrt,@strong{sqrt}},
@uref{sec_12-1-3-3.html,Section 12.1.3.3 (Rule of Float
Substitutability)}

@strong{Notes:}

The result of @ref{#acosh,@strong{acosh}} may be a
@uref{glo_c.html#complex,@emph{complex}} even if @emph{number} is not a
@uref{glo_c.html#complex,@emph{complex}}; this occurs when @emph{number}
is less than one. Also, the result of @ref{#atanh,@strong{atanh}} may be
a @uref{glo_c.html#complex,@emph{complex}} even if @emph{number} is not
a @uref{glo_c.html#complex,@emph{complex}}; this occurs when the
absolute value of @emph{number} is greater than one.

The branch cut formulae are mathematically correct, assuming completely
accurate computation. Implementors should consult a good text on
numerical analysis. The formulae given above are not necessarily the
simplest ones for real-valued computations; they are chosen to define
the branch cuts in desirable ways for the complex case.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss070.html,COMPLEX-ATANH-BOGUS-FORMULA:TWEAK-MORE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function /
@subsubsection CLHS: Function /
@anchor{#clhs-function-2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_-.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_1plcm_1-.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{/}

@strong{Syntax:}

@strong{/} @emph{number} => @emph{reciprocal}

@strong{/} @emph{numerator &rest denominators+} => @emph{quotient}

@strong{Arguments and Values:}

@emph{number}, @emph{denominator}---a non-zero
@uref{glo_n.html#number,@emph{number}}.

@emph{numerator}, @emph{quotient}, @emph{reciprocal}---a
@uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}} @ref{#SL,@strong{/}}
performs division or reciprocation.

If no @emph{denominators} are supplied, the
@uref{glo_f.html#function,@emph{function}} @ref{#SL,@strong{/}} returns
the reciprocal of @emph{number}.

If at least one @emph{denominator} is supplied, the
@uref{glo_f.html#function,@emph{function}} @ref{#SL,@strong{/}} divides
the @emph{numerator} by all of the @emph{denominators} and returns the
resulting @emph{quotient}.

If each @uref{glo_a.html#argument,@emph{argument}} is either an
@uref{glo_i.html#integer,@emph{integer}} or a
@uref{glo_r.html#ratio,@emph{ratio}}, and the result is not an
@uref{glo_i.html#integer,@emph{integer}}, then it is a
@uref{glo_r.html#ratio,@emph{ratio}}.

The @uref{glo_f.html#function,@emph{function}} @ref{#SL,@strong{/}}
performs necessary type conversions.

If any @emph{argument} is a @uref{glo_f.html#float,@emph{float}} then
the rules of floating-point contagion apply; see
@uref{sec_12-1-4.html,Section 12.1.4 (Floating-point Computations)}.

@strong{Examples:}

@verbatim
 (/ 12 4) =>  3
 (/ 13 4) =>  13/4
 (/ -8) =>  -1/8
 (/ 3 4 5) =>  3/20
 (/ 0.5) =>  2.0
 (/ 20 5) =>  4
 (/ 5 20) =>  1/4
 (/ 60 -2 3 5.0) =>  -2.0
 (/ 2 #c(2 2)) =>  #C(1/2 -1/2)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are unspecified if any
@uref{glo_a.html#argument,@emph{argument}} other than the first is zero.
If there is only one @uref{glo_a.html#argument,@emph{argument}}, the
consequences are unspecified if it is zero.

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if some
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_division-by-zero.html#division-by-zero,@strong{division-by-zero}}
if division by zero is attempted. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}},
@uref{fun_floorcm_f_undcm_fround.html#ceiling,@strong{ceiling}},
@uref{fun_floorcm_f_undcm_fround.html#truncate,@strong{truncate}},
@uref{fun_floorcm_f_undcm_fround.html#round,@strong{round}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SQRT ISQRT
@subsubsection CLHS: Function SQRT, ISQRT
@anchor{#clhs-function-sqrt-isqrt}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_signum.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_random-state.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SQRT, ISQRT}

@strong{Syntax:}

@strong{sqrt} @emph{number} => @emph{root}

@strong{isqrt} @emph{natural} => @emph{natural-root}

@strong{Arguments and Values:}

@emph{number}, @emph{root}---a @uref{glo_n.html#number,@emph{number}}.

@emph{natural}, @emph{natural-root}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#sqrt,@strong{sqrt}} and @ref{#isqrt,@strong{isqrt}} compute square
roots.

@ref{#sqrt,@strong{sqrt}} returns the
@uref{glo_p.html#principal,@emph{principal}} square root of
@emph{number}. If the @emph{number} is not a
@uref{glo_c.html#complex,@emph{complex}} but is negative, then the
result is a @uref{glo_c.html#complex,@emph{complex}}.

@ref{#isqrt,@strong{isqrt}} returns the greatest
@uref{glo_i.html#integer,@emph{integer}} less than or equal to the exact
positive square root of @emph{natural}.

If @emph{number} is a positive
@uref{glo_r.html#rational,@emph{rational}}, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @emph{root} is a @uref{glo_r.html#rational,@emph{rational}} or a
@uref{glo_f.html#float,@emph{float}}. If @emph{number} is a negative
@uref{glo_r.html#rational,@emph{rational}}, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @emph{root} is a @uref{glo_c.html#complex_rational,@emph{complex
rational}} or a @uref{glo_c.html#complex_float,@emph{complex float}}.

The mathematical definition of complex square root (whether or not minus
zero is supported) follows:

(sqrt @emph{x}) = (exp (/ (log @emph{x}) 2))

The branch cut for square root lies along the negative real axis,
continuous with quadrant II. The range consists of the right half-plane,
including the non-negative imaginary axis and excluding the negative
imaginary axis.

@strong{Examples:}

@verbatim
 (sqrt 9.0) =>  3.0
 (sqrt -9.0) =>  #C(0.0 3.0)
 (isqrt 9) =>  3
 (sqrt 12) =>  3.4641016
 (isqrt 12) =>  3
 (isqrt 300) =>  17
 (isqrt 325) =>  18
 (sqrt 25)
=>  5
OR=>  5.0
 (isqrt 25) =>  5
 (sqrt -1) =>  #C(0.0 1.0)
 (sqrt #c(0 2)) =>  #C(1.0 1.0)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The @uref{glo_f.html#function,@emph{function}} @ref{#sqrt,@strong{sqrt}}
should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a @uref{glo_n.html#number,@emph{number}}.

The @uref{glo_f.html#function,@emph{function}}
@ref{#isqrt,@strong{isqrt}} should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a non-negative @uref{glo_i.html#integer,@emph{integer}}.

The functions @ref{#sqrt,@strong{sqrt}} and @ref{#isqrt,@strong{isqrt}}
might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{fun_expcm_expt.html#exp,@strong{exp}},
@uref{fun_log.html#log,@strong{log}}, @uref{sec_12-1-3-3.html,Section
12.1.3.3 (Rule of Float Substitutability)}

@strong{Notes:}

@verbatim
 (isqrt x) ==  (values (floor (sqrt x))) 
@end verbatim

but it is potentially more efficient.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss192.html,IEEE-ATAN-BRANCH-CUT:SPLIT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function *
@subsubsection CLHS: Function *
@anchor{#clhs-function-3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sinhcm_co_coshcm_atanh.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pl.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{*}

@strong{Syntax:}

@strong{*} @emph{&rest numbers} => @emph{product}

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{product}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

Returns the product of @emph{numbers}, performing any necessary type
conversions in the process. If no @emph{numbers} are supplied, 1 is
returned.

@strong{Examples:}

@verbatim
 (*) =>  1
 (* 3 5) =>  15
 (* 1.0 #c(22 33) 55/98) =>  #C(12.346938775510203 18.520408163265305)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if some
@uref{glo_a.html#argument,@emph{argument}} is not a
@uref{glo_n.html#number,@emph{number}}. Might signal
@uref{contyp_arithmetic-error.html#arithmetic-error,@strong{arithmetic-error}}.

@strong{See Also:}

@uref{sec_12-1-1.html,Section 12.1.1 (Numeric Operations)},
@uref{sec_12-1-3.html,Section 12.1.3 (Rational Computations)},
@uref{sec_12-1-4.html,Section 12.1.4 (Floating-point Computations)},
@uref{sec_12-1-5.html,Section 12.1.5 (Complex Computations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UPGRADED-COMPLEX-PART-TYPE
@subsubsection CLHS: Function UPGRADED-COMPLEX-PART-TYPE
@anchor{#clhs-function-upgraded-complex-part-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_realpartcm_imagpart.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_realp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UPGRADED-COMPLEX-PART-TYPE}

@strong{Syntax:}

@strong{upgraded-complex-part-type} @emph{typespec &optional
environment} => @emph{upgraded-typespec}

@strong{Arguments and Values:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}, denoting the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} and the and current
@uref{glo_g.html#global_environment,@emph{global environment}}.

@emph{upgraded-typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

@ref{#upgraded-complex-part-type,@strong{upgraded-complex-part-type}}
returns the part type of the most specialized
@uref{glo_c.html#complex,@emph{complex}} number representation that can
hold parts of @uref{glo_t.html#type,@emph{type}} @emph{typespec}.

The @emph{typespec} is a @uref{glo_s.html#subtype,@emph{subtype}} of
(and possibly @uref{glo_t.html#type_equivalent,@emph{type equivalent}}
to) the @emph{upgraded-typespec}.

The purpose of
@ref{#upgraded-complex-part-type,@strong{upgraded-complex-part-type}} is
to reveal how an implementation does its @emph{upgrading}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_complex.html#complex,@strong{complex}}
(@uref{glo_f.html#function,@emph{function}} and
@uref{glo_t.html#type,@emph{type}})

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss335.html,SUBTYPEP-ENVIRONMENT:ADD-ARG}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ZEROP
@subsubsection CLHS: Function ZEROP
@anchor{#clhs-function-zerop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_minuspcm_plusp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_floorcm_f_undcm_fround.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ZEROP}

@strong{Syntax:}

@strong{zerop} @emph{number} => @emph{generalized-boolean}

@strong{Pronunciation:}

['zee(,)roh(,)pee]

@strong{Arguments and Values:}

@emph{number}---a @uref{glo_n.html#number,@emph{number}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{number} is zero
(@uref{glo_i.html#integer,@emph{integer}},
@uref{glo_f.html#float,@emph{float}}, or
@uref{glo_c.html#complex,@emph{complex}}); otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

Regardless of whether an
@uref{glo_i.html#implementation,@emph{implementation}} provides distinct
representations for positive and negative floating-point zeros, (zerop
-0.0) always returns @uref{glo_t.html#true,@emph{true}}.

@strong{Examples:}

@verbatim
 (zerop 0) =>  true
 (zerop 1) =>  false
 (zerop -0.0) =>  true
 (zerop 0/100) =>  true
 (zerop #c(0 0.0)) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{number} is not a @uref{glo_n.html#number,@emph{number}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (zerop number) ==  (= number 0)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro INCF DECF
@subsubsection CLHS: Macro INCF, DECF
@anchor{#clhs-macro-incf-decf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_gcd.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_lcm.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{INCF, DECF}

@strong{Syntax:}

@strong{incf} @emph{place [delta-form]} => @emph{new-value}

@strong{decf} @emph{place [delta-form]} => @emph{new-value}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{delta-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @emph{delta}. The default is 1.

@emph{delta}---a @uref{glo_n.html#number,@emph{number}}.

@emph{new-value}---a @uref{glo_n.html#number,@emph{number}}.

@strong{Description:}

@ref{#incf,@strong{incf}} and @ref{#decf,@strong{decf}} are used for
incrementing and decrementing the @uref{glo_v.html#value,@emph{value}}
of @emph{place}, respectively.

The @emph{delta} is added to (in the case of @ref{#incf,@strong{incf}})
or subtracted from (in the case of @ref{#decf,@strong{decf}}) the number
in @emph{place} and the result is stored in @emph{place}.

Any necessary type conversions are performed automatically.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{places}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (setq n 0)
 (incf n) =>  1      
 n =>  1
 (decf n 3) =>  -2   
 n =>  -2
 (decf n -5) =>  3      
 (decf n) =>  2      
 (incf n 0.5) =>  2.5
 (decf n) =>  1.5
 n =>  1.5
@end verbatim

@strong{Side Effects:}

@emph{Place} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_pl.html#PL,@strong{+}}, @uref{fun_-.html#-,@strong{-}},
@uref{fun_1plcm_1-.html#1PL,@strong{1+}},
@uref{fun_1plcm_1-.html#1-,@strong{1-}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class COMPLEX
@subsubsection CLHS: System Class COMPLEX
@anchor{#clhs-system-class-complex}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_number.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_real.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{COMPLEX}

@strong{Class Precedence List:}

@ref{#complex,@strong{complex}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#complex,@strong{complex}}
includes all mathematical complex numbers other than those included in
the @uref{glo_t.html#type,@emph{type}}
@uref{syscla_rational.html#rational,@strong{rational}}.
@uref{glo_c.html#complex,@emph{Complexes}} are expressed in Cartesian
form with a real part and an imaginary part, each of which is a
@uref{syscla_real.html#real,@emph{real}}. The real part and imaginary
part are either both @uref{glo_r.html#rational,@emph{rational}} or both
of the same @uref{glo_f.html#float,@emph{float}}
@uref{glo_t.html#type,@emph{type}}. The imaginary part can be a
@uref{glo_f.html#float,@emph{float}} zero, but can never be a
@uref{glo_r.html#rational,@emph{rational}} zero, for such a number is
always represented by Common Lisp as a
@uref{glo_r.html#rational,@emph{rational}} rather than a
@uref{glo_c.html#complex,@emph{complex}}.

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{complex} @emph{[typespec | @uref{any_st.html#ST,@strong{*}}]}

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}} that denotes a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_real.html#real,@strong{real}}.

@strong{Compound Type Specifier Description:}

Every element of this @uref{glo_t.html#type,@emph{type}} is a
@uref{glo_c.html#complex,@emph{complex}} whose real part and imaginary
part are each of type (upgraded-complex-part-type @emph{typespec}). This
@uref{glo_t.html#type,@emph{type}} encompasses those
@uref{glo_c.html#complex,@emph{complexes}} that can result by giving
numbers of @uref{glo_t.html#type,@emph{type}} @emph{typespec} to
@uref{fun_complex.html#complex,@strong{complex}}.

(complex @emph{type-specifier}) refers to all
@uref{glo_c.html#complex,@emph{complexes}} that can result from giving
@uref{glo_n.html#number,@emph{numbers}} of @emph{type}
@emph{type-specifier} to the @uref{glo_f.html#function,@emph{function}}
@uref{fun_complex.html#complex,@strong{complex}}, plus all other
@uref{glo_c.html#complex,@emph{complexes}} of the same specialized
representation.

@strong{See Also:}

@uref{sec_12-1-5-3.html,Section 12.1.5.3 (Rule of Canonical
Representation for Complex Rationals)}, @uref{sec_2-3-2.html,Section
2.3.2 (Constructing Numbers from Tokens)},
@uref{sec_22-1-3-1-4.html,Section 22.1.3.1.4 (Printing Complexes)}

@strong{Notes:}

The input syntax for a @uref{glo_c.html#complex,@emph{complex}} with
real part r and imaginary part i is #C(r i). For further details, see
@uref{sec_2-4.html,Section 2.4 (Standard Macro Characters)}.

For every @uref{glo_f.html#float,@emph{float}}, n, there is a
@uref{glo_c.html#complex,@emph{complex}} which represents the same
mathematical number and which can be obtained by (COERCE n 'COMPLEX).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class FLOAT
@subsubsection CLHS: System Class FLOAT
@anchor{#clhs-system-class-float}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_real.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_short-flo_m_long-float.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{FLOAT}

@strong{Class Precedence List:}

@ref{#float,@strong{float}}, @uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_f.html#float,@emph{float}} is a mathematical rational (but
@emph{not} a Common Lisp @uref{glo_r.html#rational,@emph{rational}}) of
the form s*f*b^e-p, where s is +1 or -1, the @emph{sign}; b is an
@uref{glo_i.html#integer,@emph{integer}} greater than 1, the @emph{base}
or @emph{radix} of the representation; p is a positive
@uref{glo_i.html#integer,@emph{integer}}, the @emph{precision} (in
base-b digits) of the @uref{glo_f.html#float,@emph{float}}; f is a
positive @uref{glo_i.html#integer,@emph{integer}} between b^p-1 and
b^p-1 (inclusive), the significand; and e is an
@uref{glo_i.html#integer,@emph{integer}}, the exponent. The value of p
and the range of e depends on the implementation and on the type of
@uref{glo_f.html#float,@emph{float}} within that implementation. In
addition, there is a floating-point zero; depending on the
implementation, there can also be a ``minus zero''. If there is no minus
zero, then 0.0 and -0.0 are both interpreted as simply a floating-point
zero. (= 0.0 -0.0) is always true. If there is a minus zero, (eql -0.0
0.0) is @uref{glo_f.html#false,@emph{false}}, otherwise it is
@uref{glo_t.html#true,@emph{true}}.

The @uref{glo_t.html#type,@emph{types}}
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}},
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}},
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}},
and
@uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}}
are @uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}} @ref{#float,@strong{float}}. Any two
of them must be either @uref{glo_d.html#disjoint,@emph{disjoint}}
@uref{glo_t.html#type,@emph{types}} or the
@uref{glo_s.html#same,@emph{same}} @uref{glo_t.html#type,@emph{type}};
if the @uref{glo_s.html#same,@emph{same}}
@uref{glo_t.html#type,@emph{type}}, then any other
@uref{glo_t.html#type,@emph{types}} between them in the above ordering
must also be the @uref{glo_s.html#same,@emph{same}}
@uref{glo_t.html#type,@emph{type}}. For example, if the
@uref{glo_t.html#type,@emph{type}}
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}}
and the @uref{glo_t.html#type,@emph{type}}
@uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}}
are the @uref{glo_s.html#same,@emph{same}}
@uref{glo_t.html#type,@emph{type}}, then the
@uref{glo_t.html#type,@emph{type}}
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}}
must be the @uref{glo_s.html#same,@emph{same}}
@uref{glo_t.html#type,@emph{type}} also.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{float} @emph{}[@emph{lower-limit}
[@emph{upper-limit}]@emph{}]@emph{}

@strong{Compound Type Specifier Arguments:}

@emph{lower-limit},
@emph{upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#float,@strong{float}}. The defaults for each of @emph{lower-limit}
and @emph{upper-limit} is the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the @uref{glo_f.html#float,@emph{floats}} on the interval
described by @emph{lower-limit} and @emph{upper-limit}.

@strong{See Also:}

@uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9},
@uref{sec_2-3-2.html,Section 2.3.2 (Constructing Numbers from Tokens)},
@uref{sec_22-1-3-1-3.html,Section 22.1.3.1.3 (Printing Floats)}

@strong{Notes:}

Note that all mathematical integers are representable not only as Common
Lisp @emph{reals}, but also as
@uref{glo_c.html#complex_float,@emph{complex floats}}. For example,
possible representations of the mathematical number 1 include the
@uref{glo_i.html#integer,@emph{integer}} 1, the
@uref{glo_f.html#float,@emph{float}} 1.0, or the
@uref{glo_c.html#complex,@emph{complex}} #C(1.0 0.0).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class INTEGER
@subsubsection CLHS: System Class INTEGER
@anchor{#clhs-system-class-integer}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_ratio.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_signed-byte.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{INTEGER}

@strong{Class Precedence List:}

@ref{#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

An @uref{glo_i.html#integer,@emph{integer}} is a mathematical integer.
There is no limit on the magnitude of an
@uref{glo_i.html#integer,@emph{integer}}.

The @uref{glo_t.html#type,@emph{types}}
@uref{typ_fixnum.html#fixnum,@strong{fixnum}} and
@uref{typ_bignum.html#bignum,@strong{bignum}} form an
@uref{glo_e.html#exhaustive_partition,@emph{exhaustive partition}} of
@uref{glo_t.html#type,@emph{type}} @ref{#integer,@strong{integer}}.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{integer} @emph{}[@emph{lower-limit}
[@emph{upper-limit}]@emph{}]@emph{}

@strong{Compound Type Specifier Arguments:}

@emph{lower-limit},
@emph{upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#integer,@strong{integer}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the @uref{glo_i.html#integer,@emph{integers}} on the
interval described by @emph{lower-limit} and @emph{upper-limit}.

@strong{See Also:}

@uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9},
@uref{sec_2-3-2.html,Section 2.3.2 (Constructing Numbers from Tokens)},
@uref{sec_22-1-3-1-1.html,Section 22.1.3.1.1 (Printing Integers)}

@strong{Notes:}

The @uref{glo_t.html#type,@emph{type}} (integer @emph{lower}
@emph{upper}), where @emph{lower} and @emph{upper} are
@strong{most-negative-fixnum} and @strong{most-positive-fixnum},
respectively, is also called
@uref{typ_fixnum.html#fixnum,@strong{fixnum}}.

The @uref{glo_t.html#type,@emph{type}} (integer 0 1) is also called
@uref{typ_bit.html#bit,@strong{bit}}. The
@uref{glo_t.html#type,@emph{type}} (integer 0 *) is also called
@uref{typ_unsigned-byte.html#unsigned-byte,@strong{unsigned-byte}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss158.html,FIXNUM-NON-PORTABLE:TIGHTEN-DEFINITION}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class RANDOM-STATE
@subsubsection CLHS: System Class RANDOM-STATE
@anchor{#clhs-system-class-random-state}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sqrtcm_isqrt.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-random-state.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{RANDOM-STATE}

@strong{Class Precedence List:}

@ref{#random-state,@strong{random-state}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}} contains state information used
by the pseudo-random number generator. The nature of a
@uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
It can be printed out and successfully read back in by the same
@uref{glo_i.html#implementation,@emph{implementation}}, but might not
function correctly as a @uref{glo_r.html#random_state,@emph{random
state}} in another
@uref{glo_i.html#implementation,@emph{implementation}}.

@uref{glo_i.html#implementation,@emph{Implementations}} are required to
provide a read syntax for @uref{glo_o.html#object,@emph{objects}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#random-state,@strong{random-state}}, but the specific nature of
that syntax is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{See Also:}

@uref{var_strandom-statest.html#STrandom-stateST,@strong{*random-state*}},
@uref{fun_random.html#random,@strong{random}},
@uref{sec_22-1-3-10.html,Section 22.1.3.10 (Printing Random States)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class RATIO
@subsubsection CLHS: System Class RATIO
@anchor{#clhs-system-class-ratio}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_rational.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_integer.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{RATIO}

@strong{Class Precedence List:}

@ref{#ratio,@strong{ratio}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_r.html#ratio,@emph{ratio}} is a
@uref{glo_n.html#number,@emph{number}} representing the mathematical
ratio of two non-zero integers, the numerator and denominator, whose
greatest common divisor is one, and of which the denominator is positive
and greater than one.

@strong{See Also:}

@uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9},
@uref{sec_2-3-2.html,Section 2.3.2 (Constructing Numbers from Tokens)},
@uref{sec_22-1-3-1-2.html,Section 22.1.3.1.2 (Printing Ratios)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class RATIONAL
@subsubsection CLHS: System Class RATIONAL
@anchor{#clhs-system-class-rational}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_short-flo_m_long-float.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_ratio.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{RATIONAL}

@strong{Class Precedence List:}

@ref{#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The canonical representation of a
@uref{glo_r.html#rational,@emph{rational}} is as an
@uref{glo_i.html#integer,@emph{integer}} if its value is integral, and
otherwise as a @uref{glo_r.html#ratio,@emph{ratio}}.

The @uref{glo_t.html#type,@emph{types}}
@uref{syscla_integer.html#integer,@strong{integer}} and
@uref{syscla_ratio.html#ratio,@strong{ratio}} are
@uref{glo_d.html#disjoint,@emph{disjoint}}
@uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}} @ref{#rational,@strong{rational}}.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{rational} @emph{}[@emph{lower-limit}
[@emph{upper-limit}]@emph{}]@emph{}

@strong{Compound Type Specifier Arguments:}

@emph{lower-limit},
@emph{upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#rational,@strong{rational}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the @uref{glo_r.html#rational,@emph{rationals}} on the
interval described by @emph{lower-limit} and @emph{upper-limit}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class REAL
@subsubsection CLHS: System Class REAL
@anchor{#clhs-system-class-real}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_complex.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_float.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{REAL}

@strong{Class Precedence List:}

@ref{#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#real,@strong{real}}
includes all @uref{glo_n.html#number,@emph{numbers}} that represent
mathematical real numbers, though there are mathematical real numbers
(e.g., irrational numbers) that do not have an exact representation in
Common Lisp. Only @emph{reals} can be ordered using the
@uref{fun_eqcm_sleq__lteqcm_gteq.html#LT,@strong{<}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#GT,@strong{>}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#LTEQ,@strong{<=}}, and
@uref{fun_eqcm_sleq__lteqcm_gteq.html#GTEQ,@strong{>=}} functions.

The @uref{glo_t.html#type,@emph{types}}
@uref{syscla_rational.html#rational,@strong{rational}} and
@uref{syscla_float.html#float,@strong{float}} are
@uref{glo_d.html#disjoint,@emph{disjoint}}
@uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}} @ref{#real,@strong{real}}.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{real} @emph{}[@emph{lower-limit}
[@emph{upper-limit}]@emph{}]@emph{}

@strong{Compound Type Specifier Arguments:}

@emph{lower-limit},
@emph{upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#real,@strong{real}}. The defaults for each of @emph{lower-limit}
and @emph{upper-limit} is the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the @emph{reals} on the interval described by
@emph{lower-limit} and @emph{upper-limit}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type BIGNUM
@subsubsection CLHS: Type BIGNUM
@anchor{#clhs-type-bignum}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_fixnum.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_eqcm_sleq__lteqcm_gteq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{BIGNUM}

@strong{Supertypes:}

@ref{#bignum,@strong{bignum}},
@uref{syscla_integer.html#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#bignum,@strong{bignum}} is
defined to be exactly (and integer (not fixnum)).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss158.html,FIXNUM-NON-PORTABLE:TIGHTEN-DEFINITION}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type BIT
@subsubsection CLHS: Type BIT
@anchor{#clhs-type-bit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_mod.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_fixnum.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{BIT}

@strong{Supertypes:}

@ref{#bit,@strong{bit}},
@uref{typ_unsigned-byte.html#unsigned-byte,@strong{unsigned-byte}},
@uref{typ_signed-byte.html#signed-byte,@strong{signed-byte}},
@uref{syscla_integer.html#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#bit,@strong{bit}} is
equivalent to the @uref{glo_t.html#type,@emph{type}} (integer 0 1) and
(unsigned-byte 1).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type FIXNUM
@subsubsection CLHS: Type FIXNUM
@anchor{#clhs-type-fixnum}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_bit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_bignum.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{FIXNUM}

@strong{Supertypes:}

@ref{#fixnum,@strong{fixnum}},
@uref{syscla_integer.html#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_f.html#fixnum,@emph{fixnum}} is an
@uref{glo_i.html#integer,@emph{integer}} whose value is between
@uref{convar_most-p_ative-fixnum.html#most-negative-fixnum,@strong{most-negative-fixnum}}
and
@uref{convar_most-p_ative-fixnum.html#most-positive-fixnum,@strong{most-positive-fixnum}}
inclusive. Exactly which @uref{glo_i.html#integer,@emph{integers}} are
@emph{fixnums} is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
The @uref{glo_t.html#type,@emph{type}} @ref{#fixnum,@strong{fixnum}} is
required to be a supertype of (signed-byte 16).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss158.html,FIXNUM-NON-PORTABLE:TIGHTEN-DEFINITION}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT
@subsubsection CLHS: Type SHORT-FLOAT, SINGLE-FLOAT, DOUBLE-FLOAT...
@anchor{#clhs-type-short-float-single-float-double-float...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_float.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_rational.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SHORT-FLOAT, SINGLE-FLOAT, DOUBLE-FLOAT, LONG-FLOAT}

@strong{Supertypes:}

@ref{#short-float,@strong{short-float}}:
@ref{#short-float,@strong{short-float}},
@uref{syscla_float.html#float,@strong{float}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@ref{#single-float,@strong{single-float}}:
@ref{#single-float,@strong{single-float}},
@uref{syscla_float.html#float,@strong{float}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@ref{#double-float,@strong{double-float}}:
@ref{#double-float,@strong{double-float}},
@uref{syscla_float.html#float,@strong{float}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@ref{#long-float,@strong{long-float}}:
@ref{#long-float,@strong{long-float}},
@uref{syscla_float.html#float,@strong{float}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

For the four defined @uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}}, it is true that
intermediate between the @uref{glo_t.html#type,@emph{type}}
@ref{#short-float,@strong{short-float}} and the
@uref{glo_t.html#type,@emph{type}} @ref{#long-float,@strong{long-float}}
are the @uref{glo_t.html#type,@emph{type}}
@ref{#single-float,@strong{single-float}} and the
@uref{glo_t.html#type,@emph{type}}
@ref{#double-float,@strong{double-float}}. The precise definition of
these categories is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
The precision (measured in ``bits'', computed as p log 2b) and the
exponent size (also measured in ``bits,'' computed as log 2(n+1), where
n is the maximum exponent value) is recommended to be at least as great
as the values in the next figure. Each of the defined
@uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}} might or might not have a
minus zero.

@verbatim
Format  Minimum Precision  Minimum Exponent Size  
----------
                                          
Short   13 bits            5 bits                 
Single  24 bits            8 bits                 
Double  50 bits            8 bits                 
Long    50 bits            8 bits                 
@end verbatim

@strong{Figure 12-12. Recommended Minimum Floating-Point Precision and
Exponent Size}

There can be fewer than four internal representations for
@uref{glo_f.html#float,@emph{floats}}. If there are fewer distinct
representations, the following rules apply:

@itemize
@item
If there is only one, it is the @uref{glo_t.html#type,@emph{type}}
@ref{#single-float,@strong{single-float}}. In this representation, an
@uref{glo_o.html#object,@emph{object}} is simultaneously of
@uref{glo_t.html#type,@emph{types}}
@ref{#single-float,@strong{single-float}},
@ref{#double-float,@strong{double-float}},
@ref{#short-float,@strong{short-float}}, and
@ref{#long-float,@strong{long-float}}.
@item
Two internal representations can be arranged in either of the following
ways:
@itemize
@item
Two @uref{glo_t.html#type,@emph{types}} are provided:
@ref{#single-float,@strong{single-float}} and
@ref{#short-float,@strong{short-float}}. An
@uref{glo_o.html#object,@emph{object}} is simultaneously of
@uref{glo_t.html#type,@emph{types}}
@ref{#single-float,@strong{single-float}},
@ref{#double-float,@strong{double-float}}, and
@ref{#long-float,@strong{long-float}}.
@item
Two @uref{glo_t.html#type,@emph{types}} are provided:
@ref{#single-float,@strong{single-float}} and
@ref{#double-float,@strong{double-float}}. An
@uref{glo_o.html#object,@emph{object}} is simultaneously of
@uref{glo_t.html#type,@emph{types}}
@ref{#single-float,@strong{single-float}} and
@ref{#short-float,@strong{short-float}}, or
@ref{#double-float,@strong{double-float}} and
@ref{#long-float,@strong{long-float}}.
@end itemize

@item
Three internal representations can be arranged in either of the
following ways:
@itemize
@item
Three @uref{glo_t.html#type,@emph{types}} are provided:
@ref{#short-float,@strong{short-float}},
@ref{#single-float,@strong{single-float}}, and
@ref{#double-float,@strong{double-float}}. An
@uref{glo_o.html#object,@emph{object}} can simultaneously be of
@uref{glo_t.html#type,@emph{type}}
@ref{#double-float,@strong{double-float}} and
@ref{#long-float,@strong{long-float}}.
@item
Three @uref{glo_t.html#type,@emph{types}} are provided:
@ref{#single-float,@strong{single-float}},
@ref{#double-float,@strong{double-float}}, and
@ref{#long-float,@strong{long-float}}. An
@uref{glo_o.html#object,@emph{object}} can simultaneously be of
@uref{glo_t.html#type,@emph{types}}
@ref{#single-float,@strong{single-float}} and
@ref{#short-float,@strong{short-float}}.
@end itemize

@end itemize

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{short-float} @emph{[short-lower-limit [short-upper-limit]]}

@strong{single-float} @emph{[single-lower-limit [single-upper-limit]]}

@strong{double-float} @emph{[double-lower-limit [double-upper-limit]]}

@strong{long-float} @emph{[long-lower-limit [long-upper-limit]]}

@strong{Compound Type Specifier Arguments:}

@emph{short-lower-limit},
@emph{short-upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#short-float,@strong{short-float}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@emph{single-lower-limit},
@emph{single-upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#single-float,@strong{single-float}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@emph{double-lower-limit},
@emph{double-upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#double-float,@strong{double-float}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@emph{long-lower-limit},
@emph{long-upper-limit}---@uref{glo_i.html#interval_designator,@emph{interval
designators}} for @uref{glo_t.html#type,@emph{type}}
@ref{#long-float,@strong{long-float}}. The defaults for each of
@emph{lower-limit} and @emph{upper-limit} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

Each of these denotes the set of @uref{glo_f.html#float,@emph{floats}}
of the indicated @uref{glo_t.html#type,@emph{type}} that are on the
interval specified by the
@uref{glo_i.html#interval_designator,@emph{interval designators}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIGNED-BYTE
@subsubsection CLHS: Type SIGNED-BYTE
@anchor{#clhs-type-signed-byte}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_integer.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_unsigned-byte.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIGNED-BYTE}

@strong{Supertypes:}

@ref{#signed-byte,@strong{signed-byte}},
@uref{syscla_integer.html#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The atomic @uref{glo_t.html#type_specifier,@emph{type specifier}}
@ref{#signed-byte,@strong{signed-byte}} denotes the same type as is
denoted by the @uref{glo_t.html#type_specifier,@emph{type specifier}}
@uref{syscla_integer.html#integer,@strong{integer}}; however, the list
forms of these two @uref{glo_t.html#type_specifier,@emph{type
specifiers}} have different semantics.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{signed-byte} @emph{[s | @uref{any_st.html#ST,@strong{*}}]}

@strong{Compound Type Specifier Arguments:}

@emph{s}---a positive @uref{glo_i.html#integer,@emph{integer}}.

@strong{Compound Type Specifier Description:}

This denotes the set of @uref{glo_i.html#integer,@emph{integers}} that
can be represented in two's-complement form in a
@uref{glo_b.html#byte,@emph{byte}} of @emph{s} bits. This is equivalent
to (integer -2^s-1 2^s-1-1). The type
@ref{#signed-byte,@strong{signed-byte}} or the type (signed-byte *) is
the same as the @uref{glo_t.html#type,@emph{type}}
@uref{syscla_integer.html#integer,@strong{integer}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type UNSIGNED-BYTE
@subsubsection CLHS: Type UNSIGNED-BYTE
@anchor{#clhs-type-unsigned-byte}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_signed-byte.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_mod.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{UNSIGNED-BYTE}

@strong{Supertypes:}

@ref{#unsigned-byte,@strong{unsigned-byte}},
@uref{typ_signed-byte.html#signed-byte,@strong{signed-byte}},
@uref{syscla_integer.html#integer,@strong{integer}},
@uref{syscla_rational.html#rational,@strong{rational}},
@uref{syscla_real.html#real,@strong{real}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The atomic @uref{glo_t.html#type_specifier,@emph{type specifier}}
@ref{#unsigned-byte,@strong{unsigned-byte}} denotes the same type as is
denoted by the @uref{glo_t.html#type_specifier,@emph{type specifier}}
(integer 0 *).

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{unsigned-byte} @emph{[@emph{s} |
@uref{any_st.html#ST,@strong{*}}]}

@strong{Compound Type Specifier Arguments:}

@emph{s}---a positive @uref{glo_i.html#integer,@emph{integer}}.

@strong{Compound Type Specifier Description:}

This denotes the set of non-negative
@uref{glo_i.html#integer,@emph{integers}} that can be represented in a
byte of size @emph{s} (bits). This is equivalent to (mod @emph{m}) for
@emph{m}=2^s, or to (integer 0 @emph{n}) for @emph{n}=2^s-1. The
@uref{glo_t.html#type,@emph{type}}
@ref{#unsigned-byte,@strong{unsigned-byte}} or the type (unsigned-byte
*) is the same as the type (integer 0 *), the set of non-negative
@uref{glo_i.html#integer,@emph{integers}}.

@strong{Notes:}

The @uref{glo_t.html#type,@emph{type}} (unsigned-byte 1) is also called
@uref{typ_bit.html#bit,@strong{bit}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier MOD
@subsubsection CLHS: Type Specifier MOD
@anchor{#clhs-type-specifier-mod}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_unsigned-byte.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_bit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{MOD}

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{mod} @emph{n}

@strong{Compound Type Specifier Arguments:}

@emph{n}---a positive @uref{glo_i.html#integer,@emph{integer}}.

@strong{Compound Type Specifier Description:}

This denotes the set of non-negative
@uref{glo_i.html#integer,@emph{integers}} less than @emph{n}. This is
equivalent to (integer 0 (@emph{n})) or to (integer 0 @emph{m}), where
@emph{m}=@emph{n}-1.

The argument is required, and cannot be
@uref{any_st.html#ST,@strong{*}}.

The symbol @ref{#mod,@strong{mod}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *RANDOM-STATE*
@subsubsection CLHS: Variable *RANDOM-STATE*
@anchor{#clhs-variable-random-state}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_random-state-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_numbers_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_numberp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*RANDOM-STATE*}

@strong{Value Type:}

a @uref{glo_r.html#random_state,@emph{random state}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_c.html#current_random_state,@emph{current random state}},
which is used, for example, by the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_random.html#random,@strong{random}} when a
@uref{glo_r.html#random_state,@emph{random state}} is not explicitly
supplied.

@strong{Examples:}

@verbatim
 (random-state-p *random-state*) =>  true
 (setq snap-shot (make-random-state))
 ;; The series from any given point is random,
 ;; but if you backtrack to that point, you get the same series.
 (list (loop for i from 1 to 10 collect (random))
       (let ((*random-state* snap-shot))
         (loop for i from 1 to 10 collect (random)))
       (loop for i from 1 to 10 collect (random))
       (let ((*random-state* snap-shot))
         (loop for i from 1 to 10 collect (random))))
=>  ((19 16 44 19 96 15 76 96 13 61)
    (19 16 44 19 96 15 76 96 13 61)
    (16 67 0 43 70 79 58 5 63 50)
    (16 67 0 43 70 79 58 5 63 50))
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@uref{fun_random.html#random,@strong{random}}.

@strong{See Also:}

@uref{fun_make-random-state.html#make-random-state,@strong{make-random-state}},
@uref{fun_random.html#random,@strong{random}},
@uref{syscla_random-state.html#random-state,@strong{random-state}}

@strong{Notes:}

@uref{glo_b.html#binding,@emph{Binding}}
@ref{#STrandom-stateST,@strong{*random-state*}} to a different
@uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}} correctly saves and restores the
old @uref{glo_r.html#random_state,@emph{random state}}
@uref{glo_o.html#object,@emph{object}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 13
@section CLHS: Chapter 13
@anchor{#clhs-chapter-13}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_floati_nt-underflow.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_13-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
13. Characters

@uref{sec_13-1.html,}

13.1 Character Concepts

@uref{sec_the_chara_s_dictionary.html,}

13.2 The Characters Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Characters Dictionary::
@end menu

@node CLHS Section The Characters Dictionary
@subsection CLHS: Section The Characters Dictionary
@anchor{#clhs-section-the-characters-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_13-1-10.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-13.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_character.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
13.2 The Characters Dictionary

@uref{syscla_character.html,@emph{System Class} @strong{CHARACTER}}

@uref{typ_base-char.html,@emph{Type} @strong{BASE-CHAR}}

@uref{typ_standard-char.html,@emph{Type} @strong{STANDARD-CHAR}}

@uref{typ_extended-char.html,@emph{Type} @strong{EXTENDED-CHAR}}

@uref{fun_chareqcm__ar-not-lessp.html,@emph{Function} @strong{CHAR=,
CHAR/=, CHAR<, CHAR>, CHAR<=, CHAR>=, CHAR-EQUAL, CHAR-NOT-EQUAL,
CHAR-LESSP, CHAR-GREATERP, CHAR-NOT-GREATERP, CHAR-NOT-LESSP}}

@uref{fun_character.html,@emph{Function} @strong{CHARACTER}}

@uref{fun_characterp.html,@emph{Function} @strong{CHARACTERP}}

@uref{fun_alpha-char-p.html,@emph{Function} @strong{ALPHA-CHAR-P}}

@uref{fun_alphanumericp.html,@emph{Function} @strong{ALPHANUMERICP}}

@uref{fun_digit-char.html,@emph{Function} @strong{DIGIT-CHAR}}

@uref{fun_digit-char-p.html,@emph{Function} @strong{DIGIT-CHAR-P}}

@uref{fun_graphic-char-p.html,@emph{Function} @strong{GRAPHIC-CHAR-P}}

@uref{fun_standard-char-p.html,@emph{Function} @strong{STANDARD-CHAR-P}}

@uref{fun_char-upca_har-downcase.html,@emph{Function}
@strong{CHAR-UPCASE, CHAR-DOWNCASE}}

@uref{fun_upper-cas__both-case-p.html,@emph{Function}
@strong{UPPER-CASE-P, LOWER-CASE-P, BOTH-CASE-P}}

@uref{fun_char-code.html,@emph{Function} @strong{CHAR-CODE}}

@uref{fun_char-int.html,@emph{Function} @strong{CHAR-INT}}

@uref{fun_code-char.html,@emph{Function} @strong{CODE-CHAR}}

@uref{convar_char-code-limit.html,@emph{Constant Variable}
@strong{CHAR-CODE-LIMIT}}

@uref{fun_char-name.html,@emph{Function} @strong{CHAR-NAME}}

@uref{fun_name-char.html,@emph{Function} @strong{NAME-CHAR}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Constant Variable CHAR-CODE-LIMIT::
* CLHS Function ALPHA-CHAR-P::
* CLHS Function ALPHANUMERICP::
* CLHS Function CHAR-CODE::
* CLHS Function CHAR-INT::
* CLHS Function CHAR-NAME::
* CLHS Function CHAR-UPCASE CHAR-DOWNCASE::
* CLHS Function CHARACTER::
* CLHS Function CHARACTERP::
* CLHS Function CHAR= CHAR/= CHAR< CHAR>::
* CLHS Function CODE-CHAR::
* CLHS Function DIGIT-CHAR-P::
* CLHS Function DIGIT-CHAR::
* CLHS Function GRAPHIC-CHAR-P::
* CLHS Function NAME-CHAR::
* CLHS Function STANDARD-CHAR-P::
* CLHS Function UPPER-CASE-P LOWER-CASE-P::
* CLHS Type BASE-CHAR::
* CLHS Type EXTENDED-CHAR::
* CLHS Type STANDARD-CHAR::
@end menu

@node CLHS Constant Variable CHAR-CODE-LIMIT
@subsubsection CLHS: Constant Variable CHAR-CODE-LIMIT
@anchor{#clhs-constant-variable-char-code-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_code-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_char-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{CHAR-CODE-LIMIT}

@strong{Constant Value:}

A non-negative @uref{glo_i.html#integer,@emph{integer}}, the exact
magnitude of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but which is not less than 96 (the number of
@uref{glo_s.html#standard_character,@emph{standard characters}}).

@strong{Description:}

The upper exclusive bound on the @uref{glo_v.html#value,@emph{value}}
returned by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_char-code.html#char-code,@strong{char-code}}.

@strong{See Also:}

@uref{fun_char-code.html#char-code,@strong{char-code}}

@strong{Notes:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#char-code-limit,@strong{char-code-limit}} might be larger than the
actual number of @uref{glo_c.html#character,@emph{characters}} supported
by the @uref{glo_i.html#implementation,@emph{implementation}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ALPHA-CHAR-P
@subsubsection CLHS: Function ALPHA-CHAR-P
@anchor{#clhs-function-alpha-char-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_characterp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_alphanumericp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ALPHA-CHAR-P}

@strong{Syntax:}

@strong{alpha-char-p} @emph{character} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{character} is an
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[1]
@uref{glo_c.html#character,@emph{character}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (alpha-char-p #\a) =>  true
 (alpha-char-p #\5) =>  false
 (alpha-char-p #\Newline) =>  false
 ;; This next example presupposes an implementation
 ;; in which #\<ALPHA> is a defined character.
 (alpha-char-p #\<ALPHA>) =>  implementation-dependent
@end verbatim

@strong{Affected By:}

None. (In particular, the results of this predicate are independent of
any special syntax which might have been enabled in the
@uref{glo_c.html#current_readtable,@emph{current readtable}}.)

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_alphanumericp.html#alphanumericp,@strong{alphanumericp}},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ALPHANUMERICP
@subsubsection CLHS: Function ALPHANUMERICP
@anchor{#clhs-function-alphanumericp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_alpha-char-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_digit-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ALPHANUMERICP}

@strong{Syntax:}

@strong{alphanumericp} @emph{character} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{character} is an
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[1]
@uref{glo_c.html#character,@emph{character}} or a
@uref{glo_n.html#numeric,@emph{numeric}}
@uref{glo_c.html#character,@emph{character}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (alphanumericp #\Z) =>  true
 (alphanumericp #\9) =>  true
 (alphanumericp #\Newline) =>  false
 (alphanumericp #\#) =>  false
@end verbatim

@strong{Affected By:}

None. (In particular, the results of this predicate are independent of
any special syntax which might have been enabled in the
@uref{glo_c.html#current_readtable,@emph{current readtable}}.)

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_alpha-char-p.html#alpha-char-p,@strong{alpha-char-p}},
@uref{fun_graphic-char-p.html#graphic-char-p,@strong{graphic-char-p}},
@uref{fun_digit-char-p.html#digit-char-p,@strong{digit-char-p}}

@strong{Notes:}

Alphanumeric characters are graphic as defined by
@uref{fun_graphic-char-p.html#graphic-char-p,@strong{graphic-char-p}}.
The alphanumeric characters are a subset of the graphic characters. The
standard characters A through Z, a through z, and 0 through 9 are
alphanumeric characters.

@verbatim
 (alphanumericp x)
   ==  (or (alpha-char-p x) (not (null (digit-char-p x))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHAR-CODE
@subsubsection CLHS: Function CHAR-CODE
@anchor{#clhs-function-char-code}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_upper-cas__both-case-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_char-int.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHAR-CODE}

@strong{Syntax:}

@strong{char-code} @emph{character} => @emph{code}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{code}---a @uref{glo_c.html#character_code,@emph{character code}}.

@strong{Description:}

@ref{#char-code,@strong{char-code}} returns the
@uref{glo_c.html#code,@emph{code}}
@uref{glo_a.html#attribute,@emph{attribute}} of @emph{character}.

@strong{Examples:}

@verbatim
;; An implementation using ASCII character encoding 
;; might return these values:
(char-code #\$) =>  36
(char-code #\a) =>  97
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@strong{char-code-limit}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHAR-INT
@subsubsection CLHS: Function CHAR-INT
@anchor{#clhs-function-char-int}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_char-code.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_code-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHAR-INT}

@strong{Syntax:}

@strong{char-int} @emph{character} => @emph{integer}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{integer}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns a non-negative @uref{glo_i.html#integer,@emph{integer}} encoding
the @emph{character} object. The manner in which the
@uref{glo_i.html#integer,@emph{integer}} is computed is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
In contrast to @uref{fun_sxhash.html#sxhash,@strong{sxhash}}, the result
is not guaranteed to be independent of the particular
@uref{glo_l.html#lisp_image,@emph{Lisp image}}.

If @emph{character} has no
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, the results of
@ref{#char-int,@strong{char-int}} and
@uref{fun_char-code.html#char-code,@strong{char-code}} are the same.

@verbatim
 (char= c1 c2) ==  (= (char-int c1) (char-int c2))
@end verbatim

for characters @emph{c1} and @emph{c2}.

@strong{Examples:}

@verbatim
 (char-int #\A) =>  65       ; implementation A
 (char-int #\A) =>  577      ; implementation B
 (char-int #\A) =>  262145   ; implementation C
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_char-code.html#char-code,@strong{char-code}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss028.html,CHARACTER-PROPOSAL:2-1-2}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHAR-NAME
@subsubsection CLHS: Function CHAR-NAME
@anchor{#clhs-function-char-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_char-code-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_name-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHAR-NAME}

@strong{Syntax:}

@strong{char-name} @emph{character} => @emph{name}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{name}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} that is the
@uref{glo_n.html#name,@emph{name}} of the @emph{character}, or
@uref{any_nil.html#nil,@strong{nil}} if the @emph{character} has no
@uref{glo_n.html#name,@emph{name}}.

All @uref{glo_n.html#non-graphic,@emph{non-graphic}} characters are
required to have @uref{glo_n.html#name,@emph{names}} unless they have
some
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attribute}} which is not
@uref{glo_n.html#null,@emph{null}}. Whether or not other
@uref{glo_c.html#character,@emph{characters}} have
@uref{glo_n.html#name,@emph{names}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

The @uref{glo_s.html#standard_character,@emph{standard characters}}
<Newline> and <Space> have the respective names "Newline" and "Space".
The @uref{glo_s.html#semi-standard,@emph{semi-standard}}
@uref{glo_c.html#character,@emph{characters}} <Tab>, <Page>, <Rubout>,
<Linefeed>, <Return>, and <Backspace> (if they are supported by the
@uref{glo_i.html#implementation,@emph{implementation}}) have the
respective names "Tab", "Page", "Rubout", "Linefeed", "Return", and
"Backspace" (in the indicated case, even though name lookup by ``#\''
and by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_name-char.html#name-char,@strong{name-char}} is not case
sensitive).

@strong{Examples:}

@verbatim
 (char-name #\ ) =>  "Space"
 (char-name #\Space) =>  "Space"
 (char-name #\Page) =>  "Page"

 (char-name #\a)
=>  NIL
OR=>  "LOWERCASE-a"
OR=>  "Small-A"
OR=>  "LA01"

 (char-name #\A)
=>  NIL
OR=>  "UPPERCASE-A"
OR=>  "Capital-A"
OR=>  "LA02"

 ;; Even though its CHAR-NAME can vary, #\A prints as #\A
 (prin1-to-string (read-from-string (format nil "#\\~A" (or (char-name #\A) "A"))))
=>  "#\\A"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_name-char.html#name-char,@strong{name-char}},
@uref{sec_22-1-3-2.html,Section 22.1.3.2 (Printing Characters)}

@strong{Notes:}

@uref{glo_n.html#non-graphic,@emph{Non-graphic}}
@uref{glo_c.html#character,@emph{characters}} having
@uref{glo_n.html#name,@emph{names}} are written by the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}} as ``#\'' followed by
the their @uref{glo_n.html#name,@emph{name}}; see
@uref{sec_22-1-3-2.html,Section 22.1.3.2 (Printing Characters)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss024.html,CHAR-NAME-CASE:X3J13-MAR-91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHAR-UPCASE CHAR-DOWNCASE
@subsubsection CLHS: Function CHAR-UPCASE, CHAR-DOWNCASE
@anchor{#clhs-function-char-upcase-char-downcase}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_standard-char-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_upper-cas__both-case-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHAR-UPCASE, CHAR-DOWNCASE}

@strong{Syntax:}

@strong{char-upcase} @emph{character} => @emph{corresponding-character}

@strong{char-downcase} @emph{character} =>
@emph{corresponding-character}

@strong{Arguments and Values:}

@emph{character}, @emph{corresponding-character}---a
@uref{glo_c.html#character,@emph{character}}.

@strong{Description:}

If @emph{character} is a @uref{glo_l.html#lowercase,@emph{lowercase}}
@uref{glo_c.html#character,@emph{character}},
@ref{#char-upcase,@strong{char-upcase}} returns the corresponding
@uref{glo_u.html#uppercase,@emph{uppercase}}
@uref{glo_c.html#character,@emph{character}}. Otherwise,
@ref{#char-upcase,@strong{char-upcase}} just returns the given
@emph{character}.

If @emph{character} is an @uref{glo_u.html#uppercase,@emph{uppercase}}
@uref{glo_c.html#character,@emph{character}},
@ref{#char-downcase,@strong{char-downcase}} returns the corresponding
@uref{glo_l.html#lowercase,@emph{lowercase}}
@uref{glo_c.html#character,@emph{character}}. Otherwise,
@ref{#char-downcase,@strong{char-downcase}} just returns the given
@emph{character}.

The result only ever differs from @emph{character} in its
@uref{glo_c.html#code,@emph{code}}
@uref{glo_a.html#attribute,@emph{attribute}}; all
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}} are preserved.

@strong{Examples:}

@verbatim
 (char-upcase #\a) =>  #\A
 (char-upcase #\A) =>  #\A
 (char-downcase #\a) =>  #\a
 (char-downcase #\A) =>  #\a
 (char-upcase #\9) =>  #\9
 (char-downcase #\9) =>  #\9
 (char-upcase #\@) =>  #\@
 (char-downcase #\@) =>  #\@
 ;; Note that this next example might run for a very long time in 
 ;; some implementations if CHAR-CODE-LIMIT happens to be very large
 ;; for that implementation.
 (dotimes (code char-code-limit)
   (let ((char (code-char code)))
     (when char
       (unless (cond ((upper-case-p char) (char= (char-upcase (char-downcase char)) char))
                     ((lower-case-p char) (char= (char-downcase (char-upcase char)) char))
                     (t (and (char= (char-upcase (char-downcase char)) char)
                             (char= (char-downcase (char-upcase char)) char))))
         (return char)))))
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_upper-cas__both-case-p.html#upper-case-p,@strong{upper-case-p}},
@uref{fun_alpha-char-p.html#alpha-char-p,@strong{alpha-char-p}},
@uref{sec_13-1-4-3.html,Section 13.1.4.3 (Characters With Case)},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:}

If the @emph{corresponding-char} is
@uref{glo_d.html#different,@emph{different}} than @emph{character}, then
both the @emph{character} and the @emph{corresponding-char} have
@uref{glo_c.html#case,@emph{case}}.

Since
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}}
ignores the @uref{glo_c.html#case,@emph{case}} of the
@uref{glo_c.html#character,@emph{characters}} it compares, the
@emph{corresponding-character} is always the
@uref{glo_s.html#same,@emph{same}} as @emph{character} under
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHARACTER
@subsubsection CLHS: Function CHARACTER
@anchor{#clhs-function-character}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_chareqcm__ar-not-lessp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_characterp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHARACTER}

@strong{Syntax:}

@strong{character} @emph{character} => @emph{denoted-character}

@strong{Arguments and Values:}

@emph{character}---a
@uref{glo_c.html#character_designator,@emph{character designator}}.

@emph{denoted-character}---a
@uref{glo_c.html#character,@emph{character}}.

@strong{Description:}

Returns the @uref{glo_c.html#character,@emph{character}} denoted by the
@emph{character} @uref{glo_d.html#designator,@emph{designator}}.

@strong{Examples:}

@verbatim
 (character #\a) =>  #\a
 (character "a") =>  #\a
 (character 'a) =>  #\A
 (character '\a) =>  #\a
 (character 65.) is an error.
 (character 'apple) is an error.
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{object} is not a
@uref{glo_c.html#character_designator,@emph{character designator}}.

@strong{See Also:}

@uref{fun_coerce.html#coerce,@strong{coerce}}

@strong{Notes:}

@verbatim
 (character object) ==  (coerce object 'character)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHARACTERP
@subsubsection CLHS: Function CHARACTERP
@anchor{#clhs-function-characterp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_character.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_alpha-char-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHARACTERP}

@strong{Syntax:}

@strong{characterp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (characterp #\a) =>  true
 (characterp 'a) =>  false
 (characterp "a") =>  false
 (characterp 65.) =>  false
 (characterp #\Newline) =>  true
 ;; This next example presupposes an implementation 
 ;; in which #\Rubout is an implementation-defined character.
 (characterp #\Rubout) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_character.html#character,@strong{character}}
(@uref{glo_t.html#type,@emph{type}} and
@uref{glo_f.html#function,@emph{function}}),
@uref{fun_typep.html#typep,@strong{typep}}

@strong{Notes:}

@verbatim
 (characterp object) ==  (typep object 'character)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CHAR= CHAR/= CHAR< CHAR>
@subsubsection CLHS: Function CHAR=, CHAR/=, CHAR<, CHAR>...
@anchor{#clhs-function-char-char-char-char...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_extended-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_character.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CHAR=, CHAR/=, CHAR<, CHAR>, CHAR<=, CHAR>=,
CHAR-EQUAL, CHAR-NOT-EQUAL, CHAR-LESSP, CHAR-GREATERP,
CHAR-NOT-GREATERP, CHAR-NOT-LESSP}

@strong{Syntax:}

@strong{char=} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char/=} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char<} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char>} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char<=} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char>=} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-equal} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-not-equal} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-lessp} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-greaterp} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-not-greaterp} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{char-not-lessp} @emph{}&rest @emph{characters}+@emph{} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

These predicates compare @uref{glo_c.html#character,@emph{characters}}.

@ref{#charEQ,@strong{char=}} returns @uref{glo_t.html#true,@emph{true}}
if all @emph{characters} are the @uref{glo_s.html#same,@emph{same}};
otherwise, it returns @uref{glo_f.html#false,@emph{false}}. If two
@emph{characters} differ in any
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, then they are not
@ref{#charEQ,@strong{char=}}.

@ref{#charSLEQ,@strong{char/=}} returns
@uref{glo_t.html#true,@emph{true}} if all @emph{characters} are
different; otherwise, it returns @uref{glo_f.html#false,@emph{false}}.

@ref{#charLT,@strong{char<}} returns @uref{glo_t.html#true,@emph{true}}
if the @emph{characters} are monotonically increasing; otherwise, it
returns @uref{glo_f.html#false,@emph{false}}. If two
@uref{glo_c.html#character,@emph{characters}} have
@uref{glo_i.html#identical,@emph{identical}}
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, then their ordering by
@ref{#charLT,@strong{char<}} is consistent with the numerical ordering
by the predicate < on their @uref{glo_c.html#code,@emph{codes}}.

@ref{#charGT,@strong{char>}} returns @uref{glo_t.html#true,@emph{true}}
if the @emph{characters} are monotonically decreasing; otherwise, it
returns @uref{glo_f.html#false,@emph{false}}. If two
@uref{glo_c.html#character,@emph{characters}} have
@uref{glo_i.html#identical,@emph{identical}}
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, then their ordering by
@ref{#charGT,@strong{char>}} is consistent with the numerical ordering
by the predicate > on their @uref{glo_c.html#code,@emph{codes}}.

@ref{#charLTEQ,@strong{char<=}} returns
@uref{glo_t.html#true,@emph{true}} if the @emph{characters} are
monotonically nondecreasing; otherwise, it returns
@uref{glo_f.html#false,@emph{false}}. If two
@uref{glo_c.html#character,@emph{characters}} have
@uref{glo_i.html#identical,@emph{identical}}
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, then their ordering by
@ref{#charLTEQ,@strong{char<=}} is consistent with the numerical
ordering by the predicate <= on their
@uref{glo_c.html#code,@emph{codes}}.

@ref{#charGTEQ,@strong{char>=}} returns
@uref{glo_t.html#true,@emph{true}} if the @emph{characters} are
monotonically nonincreasing; otherwise, it returns
@uref{glo_f.html#false,@emph{false}}. If two
@uref{glo_c.html#character,@emph{characters}} have
@uref{glo_i.html#identical,@emph{identical}}
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}, then their ordering by
@ref{#charGTEQ,@strong{char>=}} is consistent with the numerical
ordering by the predicate >= on their
@uref{glo_c.html#code,@emph{codes}}.

@ref{#char-equal,@strong{char-equal}},
@ref{#char-not-equal,@strong{char-not-equal}},
@ref{#char-lessp,@strong{char-lessp}},
@ref{#char-greaterp,@strong{char-greaterp}},
@ref{#char-not-greaterp,@strong{char-not-greaterp}}, and
@ref{#char-not-lessp,@strong{char-not-lessp}} are similar to
@ref{#charEQ,@strong{char=}}, @ref{#charSLEQ,@strong{char/=}},
@ref{#charLT,@strong{char<}}, @ref{#charGT,@strong{char>}},
@ref{#charLTEQ,@strong{char<=}}, @ref{#charGTEQ,@strong{char>=}},
respectively, except that they ignore differences in
@uref{glo_c.html#case,@emph{case}} and might have an
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
behavior for @uref{glo_n.html#non-simple,@emph{non-simple}}
@uref{glo_c.html#character,@emph{characters}}. For example, an
@uref{glo_i.html#implementation,@emph{implementation}} might define that
@ref{#char-equal,@strong{char-equal}}, @emph{etc.} ignore certain
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}}. The effect, if any, of
each
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attribute}} upon these functions must
be specified as part of the definition of that
@uref{glo_a.html#attribute,@emph{attribute}}.

@strong{Examples:}

@verbatim
 (char= #\d #\d) =>  true
 (char= #\A #\a) =>  false
 (char= #\d #\x) =>  false
 (char= #\d #\D) =>  false
 (char/= #\d #\d) =>  false
 (char/= #\d #\x) =>  true
 (char/= #\d #\D) =>  true
 (char= #\d #\d #\d #\d) =>  true
 (char/= #\d #\d #\d #\d) =>  false
 (char= #\d #\d #\x #\d) =>  false
 (char/= #\d #\d #\x #\d) =>  false
 (char= #\d #\y #\x #\c) =>  false
 (char/= #\d #\y #\x #\c) =>  true
 (char= #\d #\c #\d) =>  false
 (char/= #\d #\c #\d) =>  false
 (char< #\d #\x) =>  true
 (char<= #\d #\x) =>  true
 (char< #\d #\d) =>  false
 (char<= #\d #\d) =>  true
 (char< #\a #\e #\y #\z) =>  true
 (char<= #\a #\e #\y #\z) =>  true
 (char< #\a #\e #\e #\y) =>  false
 (char<= #\a #\e #\e #\y) =>  true
 (char> #\e #\d) =>  true
 (char>= #\e #\d) =>  true
 (char> #\d #\c #\b #\a) =>  true
 (char>= #\d #\c #\b #\a) =>  true
 (char> #\d #\d #\c #\a) =>  false
 (char>= #\d #\d #\c #\a) =>  true
 (char> #\e #\d #\b #\c #\a) =>  false
 (char>= #\e #\d #\b #\c #\a) =>  false
 (char> #\z #\A) =>  implementation-dependent
 (char> #\Z #\a) =>  implementation-dependent
 (char-equal #\A #\a) =>  true
 (stable-sort (list #\b #\A #\B #\a #\c #\C) #'char-lessp)
=>  (#\A #\a #\b #\B #\c #\C)
 (stable-sort (list #\b #\A #\B #\a #\c #\C) #'char<)
=>  (#\A #\B #\C #\a #\b #\c) ;Implementation A
=>  (#\a #\b #\c #\A #\B #\C) ;Implementation B
=>  (#\a #\A #\b #\B #\c #\C) ;Implementation C
=>  (#\A #\a #\B #\b #\C #\c) ;Implementation D
=>  (#\A #\B #\a #\b #\C #\c) ;Implementation E
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} if
at least one @emph{character} is not supplied.

@strong{See Also:}

@uref{sec_2-1.html,Section 2.1 (Character Syntax)},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:}

If characters differ in their @uref{glo_c.html#code,@emph{code}}
@uref{glo_a.html#attribute,@emph{attribute}} or any
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attribute}}, they are considered to be
different by @ref{#charEQ,@strong{char=}}.

There is no requirement that (eq c1 c2) be true merely because (char= c1
c2) is @uref{glo_t.html#true,@emph{true}}. While
@uref{fun_eq.html#eq,@strong{eq}} can distinguish two
@uref{glo_c.html#character,@emph{characters}} that
@ref{#charEQ,@strong{char=}} does not, it is distinguishing them not as
@uref{glo_c.html#character,@emph{characters}}, but in some sense on the
basis of a lower level implementation characteristic. If (eq c1 c2) is
@uref{glo_t.html#true,@emph{true}}, then (char= c1 c2) is also true.
@uref{fun_eql.html#eql,@strong{eql}} and
@uref{fun_equal.html#equal,@strong{equal}} compare
@uref{glo_c.html#character,@emph{characters}} in the same way that
@ref{#charEQ,@strong{char=}} does.

The manner in which @uref{glo_c.html#case,@emph{case}} is used by
@ref{#char-equal,@strong{char-equal}},
@ref{#char-not-equal,@strong{char-not-equal}},
@ref{#char-lessp,@strong{char-lessp}},
@ref{#char-greaterp,@strong{char-greaterp}},
@ref{#char-not-greaterp,@strong{char-not-greaterp}}, and
@ref{#char-not-lessp,@strong{char-not-lessp}} implies an ordering for
@uref{glo_s.html#standard_character,@emph{standard characters}} such
that A=a, B=b, and so on, up to Z=z, and furthermore either 9<A or Z<0.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CODE-CHAR
@subsubsection CLHS: Function CODE-CHAR
@anchor{#clhs-function-code-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_char-int.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_char-code-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CODE-CHAR}

@strong{Syntax:}

@strong{code-char} @emph{code} => @emph{char-p}

@strong{Arguments and Values:}

@emph{code}---a @uref{glo_c.html#character_code,@emph{character code}}.

@emph{char-p}---a @uref{glo_c.html#character,@emph{character}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_c.html#character,@emph{character}} with the
@uref{glo_c.html#code,@emph{code}}
@uref{glo_a.html#attribute,@emph{attribute}} given by @emph{code}. If no
such @uref{glo_c.html#character,@emph{character}} exists and one cannot
be created, @uref{any_nil.html#nil,@strong{nil}} is returned.

@strong{Examples:}

@verbatim
(code-char 65.) =>  #\A  ;in an implementation using ASCII codes
(code-char (char-code #\Space)) =>  #\Space  ;in any implementation
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}'s character
encoding.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_char-code.html#char-code,@strong{char-code}}

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DIGIT-CHAR-P
@subsubsection CLHS: Function DIGIT-CHAR-P
@anchor{#clhs-function-digit-char-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_digit-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_graphic-char-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DIGIT-CHAR-P}

@strong{Syntax:}

@strong{digit-char-p} @emph{char &optional radix} => @emph{weight}

@strong{Arguments and Values:}

@emph{char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{radix}---a @uref{glo_r.html#radix,@emph{radix}}. The default is
10.

@emph{weight}---either a non-negative
@uref{glo_i.html#integer,@emph{integer}} less than @emph{radix}, or
@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

Tests whether @emph{char} is a digit in the specified @emph{radix}
(i.e., with a weight less than @emph{radix}). If it is a digit in that
@emph{radix}, its weight is returned as an
@uref{glo_i.html#integer,@emph{integer}}; otherwise
@uref{any_nil.html#nil,@strong{nil}} is returned.

@strong{Examples:}

@verbatim
 (digit-char-p #\5)    =>  5
 (digit-char-p #\5 2)  =>  false
 (digit-char-p #\A)    =>  false
 (digit-char-p #\a)    =>  false
 (digit-char-p #\A 11) =>  10
 (digit-char-p #\a 11) =>  10
 (mapcar #'(lambda (radix) 
             (map 'list #'(lambda (x) (digit-char-p x radix)) 
                  "059AaFGZ"))
         '(2 8 10 16 36))
 =>  ((0 NIL NIL NIL NIL NIL NIL NIL)
     (0 5 NIL NIL NIL NIL NIL NIL)
     (0 5 9 NIL NIL NIL NIL NIL)
     (0 5 9 10 10 15 NIL NIL)
     (0 5 9 10 10 15 16 35))
@end verbatim

@strong{Affected By:}

None. (In particular, the results of this predicate are independent of
any special syntax which might have been enabled in the
@uref{glo_c.html#current_readtable,@emph{current readtable}}.)

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_alphanumericp.html#alphanumericp,@strong{alphanumericp}}

@strong{Notes:}

Digits are @uref{glo_g.html#graphic,@emph{graphic}}
@uref{glo_c.html#character,@emph{characters}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DIGIT-CHAR
@subsubsection CLHS: Function DIGIT-CHAR
@anchor{#clhs-function-digit-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_alphanumericp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_digit-char-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DIGIT-CHAR}

@strong{Syntax:}

@strong{digit-char} @emph{weight &optional radix} => @emph{char}

@strong{Arguments and Values:}

@emph{weight}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{radix}---a @uref{glo_r.html#radix,@emph{radix}}. The default is
10.

@emph{char}---a @uref{glo_c.html#character,@emph{character}} or
@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

If @emph{weight} is less than @emph{radix},
@ref{#digit-char,@strong{digit-char}} returns a
@uref{glo_c.html#character,@emph{character}} which has that
@emph{weight} when considered as a digit in the specified radix. If the
resulting @uref{glo_c.html#character,@emph{character}} is to be an
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[1]
@uref{glo_c.html#character,@emph{character}}, it will be an uppercase
@uref{glo_c.html#character,@emph{character}}.

If @emph{weight} is greater than or equal to @emph{radix},
@ref{#digit-char,@strong{digit-char}} returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (digit-char 0) =>  #\0
 (digit-char 10 11) =>  #\A
 (digit-char 10 10) =>  false
 (digit-char 7) =>  #\7
 (digit-char 12) =>  false
 (digit-char 12 16) =>  #\C  ;not #\c
 (digit-char 6 2) =>  false
 (digit-char 1 2) =>  #\1
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_digit-char-p.html#digit-char-p,@strong{digit-char-p}},
@uref{fun_graphic-char-p.html#graphic-char-p,@strong{graphic-char-p}},
@uref{sec_2-1.html,Section 2.1 (Character Syntax)}

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GRAPHIC-CHAR-P
@subsubsection CLHS: Function GRAPHIC-CHAR-P
@anchor{#clhs-function-graphic-char-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_digit-char-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_standard-char-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GRAPHIC-CHAR-P}

@strong{Syntax:}

@strong{graphic-char-p} @emph{char} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{character} is a
@uref{glo_g.html#graphic,@emph{graphic}}
@uref{glo_c.html#character,@emph{character}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (graphic-char-p #\G) =>  true
 (graphic-char-p #\#) =>  true
 (graphic-char-p #\Space) =>  true
 (graphic-char-p #\Newline) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{sec_2-1.html,Section 2.1 (Character Syntax)},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NAME-CHAR
@subsubsection CLHS: Function NAME-CHAR
@anchor{#clhs-function-name-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_char-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-14.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NAME-CHAR}

@strong{Syntax:}

@strong{name-char} @emph{name} => @emph{char-p}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{char-p}---a @uref{glo_c.html#character,@emph{character}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns the @uref{glo_c.html#character,@emph{character}}
@uref{glo_o.html#object,@emph{object}} whose
@uref{glo_n.html#name,@emph{name}} is @emph{name} (as determined by
@uref{fun_stringeqc_ng-not-lessp.html#string-equal,@strong{string-equal}}---i.e.,
lookup is not case sensitive). If such a
@uref{glo_c.html#character,@emph{character}} does not exist,
@uref{any_nil.html#nil,@strong{nil}} is returned.

@strong{Examples:}

@verbatim
(name-char 'space) =>  #\Space
(name-char "space") =>  #\Space
(name-char "Space") =>  #\Space
(let ((x (char-name #\a)))
  (or (not x) (eql (name-char x) #\a))) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{name} is not a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@strong{See Also:}

@uref{fun_char-name.html#char-name,@strong{char-name}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STANDARD-CHAR-P
@subsubsection CLHS: Function STANDARD-CHAR-P
@anchor{#clhs-function-standard-char-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_graphic-char-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_char-upca_har-downcase.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STANDARD-CHAR-P}

@strong{Syntax:}

@strong{standard-char-p} @emph{character} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{character} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_standard-char.html#standard-char,@strong{standard-char}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (standard-char-p #\Space) =>  true
 (standard-char-p #\~) =>  true
 ;; This next example presupposes an implementation
 ;; in which #\Bell is a defined character.
 (standard-char-p #\Bell) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UPPER-CASE-P LOWER-CASE-P
@subsubsection CLHS: Function UPPER-CASE-P, LOWER-CASE-P...
@anchor{#clhs-function-upper-case-p-lower-case-p...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_char-upca_har-downcase.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_char-code.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UPPER-CASE-P, LOWER-CASE-P, BOTH-CASE-P}

@strong{Syntax:}

@strong{upper-case-p} @emph{character} => @emph{generalized-boolean}

@strong{lower-case-p} @emph{character} => @emph{generalized-boolean}

@strong{both-case-p} @emph{character} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

These functions test the case of a given @emph{character}.

@ref{#upper-case-p,@strong{upper-case-p}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{character} is an
@uref{glo_u.html#uppercase,@emph{uppercase}}
@uref{glo_c.html#character,@emph{character}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#lower-case-p,@strong{lower-case-p}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{character} is a
@uref{glo_l.html#lowercase,@emph{lowercase}}
@uref{glo_c.html#character,@emph{character}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#both-case-p,@strong{both-case-p}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{character} is a
@uref{glo_c.html#character,@emph{character}} with
@uref{glo_c.html#case,@emph{case}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (upper-case-p #\A) =>  true
 (upper-case-p #\a) =>  false
 (both-case-p #\a) =>  true
 (both-case-p #\5) =>  false
 (lower-case-p #\5) =>  false
 (upper-case-p #\5) =>  false
 ;; This next example presupposes an implementation 
 ;; in which #\Bell is an implementation-defined character.
 (lower-case-p #\Bell) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{character} is not a @uref{glo_c.html#character,@emph{character}}.

@strong{See Also:}

@uref{fun_char-upca_har-downcase.html#char-upcase,@strong{char-upcase}},
@uref{fun_char-upca_har-downcase.html#char-downcase,@strong{char-downcase}},
@uref{sec_13-1-4-3.html,Section 13.1.4.3 (Characters With Case)},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type BASE-CHAR
@subsubsection CLHS: Type BASE-CHAR
@anchor{#clhs-type-base-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_character.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_standard-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{BASE-CHAR}

@strong{Supertypes:}

@ref{#base-char,@strong{base-char}},
@uref{syscla_character.html#character,@strong{character}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#base-char,@strong{base-char}} is defined as the
@uref{glo_u.html#upgraded_array_element_type,@emph{upgraded array
element type}} of
@uref{typ_standard-char.html#standard-char,@strong{standard-char}}. An
@uref{glo_i.html#implementation,@emph{implementation}} can support
additional @uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}} (besides the
ones listed in this standard) that might or might not be
@uref{glo_s.html#supertype,@emph{supertypes}} of
@uref{glo_t.html#type,@emph{type}} @ref{#base-char,@strong{base-char}}.
In addition, an @uref{glo_i.html#implementation,@emph{implementation}}
can define @ref{#base-char,@strong{base-char}} to be the
@uref{glo_s.html#same,@emph{same}} @uref{glo_t.html#type,@emph{type}} as
@uref{syscla_character.html#character,@strong{character}}.

@uref{glo_b.html#base_character,@emph{Base characters}} are
distinguished in the following respects:

1. The @uref{glo_t.html#type,@emph{type}}
@uref{typ_standard-char.html#standard-char,@strong{standard-char}} is a
@uref{glo_s.html#subrepertoire,@emph{subrepertoire}} of the
@uref{glo_t.html#type,@emph{type}} @ref{#base-char,@strong{base-char}}.

2. The selection of @uref{glo_b.html#base_character,@emph{base
characters}} that are not
@uref{glo_s.html#standard_character,@emph{standard characters}} is
implementation defined.

3. Only @uref{glo_o.html#object,@emph{objects}} of the
@uref{glo_t.html#type,@emph{type}} @ref{#base-char,@strong{base-char}}
can be @uref{glo_e.html#element,@emph{elements}} of a
@uref{glo_b.html#base_string,@emph{base string}}.

4. No upper bound is specified for the number of characters in the
@ref{#base-char,@strong{base-char}}
@uref{glo_r.html#repertoire,@emph{repertoire}}; the size of that
@uref{glo_r.html#repertoire,@emph{repertoire}} is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
The lower bound is 96, the number of
@uref{glo_s.html#standard_character,@emph{standard characters}}.

Whether a character is a @uref{glo_b.html#base_character,@emph{base
character}} depends on the way that an
@uref{glo_i.html#implementation,@emph{implementation}} represents
@uref{glo_s.html#string,@emph{strings}}, and not any other properties of
the @uref{glo_i.html#implementation,@emph{implementation}} or the host
operating system. For example, one implementation might encode all
@uref{glo_s.html#string,@emph{strings}} as characters having 16-bit
encodings, and another might have two kinds of
@uref{glo_s.html#string,@emph{strings}}: those with characters having
8-bit encodings and those with characters having 16-bit encodings. In
the first @uref{glo_i.html#implementation,@emph{implementation}}, the
@uref{glo_t.html#type,@emph{type}} @ref{#base-char,@strong{base-char}}
is equivalent to the @uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}: there is only
one kind of @uref{glo_s.html#string,@emph{string}}. In the second
@uref{glo_i.html#implementation,@emph{implementation}}, the
@uref{glo_b.html#base_character,@emph{base characters}} might be those
@uref{glo_c.html#character,@emph{characters}} that could be stored in a
@uref{glo_s.html#string,@emph{string}} of
@uref{glo_c.html#character,@emph{characters}} having 8-bit encodings. In
such an implementation, the @uref{glo_t.html#type,@emph{type}}
@ref{#base-char,@strong{base-char}} is a
@uref{glo_p.html#proper_subtype,@emph{proper subtype}} of the
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}.

The @uref{glo_t.html#type,@emph{type}}
@uref{typ_standard-char.html#standard-char,@strong{standard-char}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}} @ref{#base-char,@strong{base-char}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss030.html,CHARACTER-PROPOSAL:2-3-1}
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type EXTENDED-CHAR
@subsubsection CLHS: Type EXTENDED-CHAR
@anchor{#clhs-type-extended-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_standard-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_chareqcm__ar-not-lessp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{EXTENDED-CHAR}

@strong{Supertypes:}

@ref{#extended-char,@strong{extended-char}},
@uref{syscla_character.html#character,@strong{character}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#extended-char,@strong{extended-char}} is equivalent to the
@uref{glo_t.html#type,@emph{type}} (and character (not base-char)).

@strong{Notes:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#extended-char,@strong{extended-char}} might have no
@uref{glo_e.html#element,@emph{elements}}[4] in
@uref{glo_i.html#implementation,@emph{implementations}} in which all
@uref{glo_c.html#character,@emph{characters}} are of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_base-char.html#base-char,@strong{base-char}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@item
@uref{../Issues/iss030.html,CHARACTER-PROPOSAL:2-3-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type STANDARD-CHAR
@subsubsection CLHS: Type STANDARD-CHAR
@anchor{#clhs-type-standard-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_base-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_chara_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_extended-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{STANDARD-CHAR}

@strong{Supertypes:}

@ref{#standard-char,@strong{standard-char}},
@uref{typ_base-char.html#base-char,@strong{base-char}},
@uref{syscla_character.html#character,@strong{character}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A fixed set of 96 @uref{glo_c.html#character,@emph{characters}} required
to be present in all
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementations}}. @uref{glo_s.html#standard_character,@emph{Standard
characters}} are defined in @uref{sec_2-1-3.html,Section 2.1.3 (Standard
Characters)}.

Any @uref{glo_c.html#character,@emph{character}} that is not
@uref{glo_s.html#simple,@emph{simple}} is not a
@uref{glo_s.html#standard_character,@emph{standard character}}.

@strong{See Also:}

@uref{sec_2-1-3.html,Section 2.1.3 (Standard Characters)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@item
@uref{../Issues/iss324.html,STANDARD-REPERTOIRE-GRATUITOUS:RENAME}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 14
@section CLHS: Chapter 14
@anchor{#clhs-chapter-14}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_name-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_14-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
14. Conses

@uref{sec_14-1.html,}

14.1 Cons Concepts

@uref{sec_the_conses_dictionary.html,}

14.2 The Conses Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Conses Dictionary::
@end menu

@node CLHS Section The Conses Dictionary
@subsection CLHS: Section The Conses Dictionary
@anchor{#clhs-section-the-conses-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_14-1-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-14.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
14.2 The Conses Dictionary

@uref{syscla_list.html,@emph{System Class} @strong{LIST}}

@uref{syscla_null.html,@emph{System Class} @strong{NULL}}

@uref{syscla_cons.html,@emph{System Class} @strong{CONS}}

@uref{typ_atom.html,@emph{Type} @strong{ATOM}}

@uref{fun_cons.html,@emph{Function} @strong{CONS}}

@uref{fun_consp.html,@emph{Function} @strong{CONSP}}

@uref{fun_atom.html,@emph{Function} @strong{ATOM}}

@uref{fun_rplacacm_rplacd.html,@emph{Function} @strong{RPLACA, RPLACD}}

@uref{acc_carcm_cdr_darcm_cddddr.html,@emph{Accessor} @strong{CAR, CDR,
CAAR, CADR, CDAR, CDDR, CAAAR, CAADR, CADAR, CADDR, CDAAR, CDADR, CDDAR,
CDDDR, CAAAAR, CAAADR, CAADAR, CAADDR, CADAAR, CADADR, CADDAR, CADDDR,
CDAAAR, CDAADR, CDADAR, CDADDR, CDDAAR, CDDADR, CDDDAR, CDDDDR}}

@uref{fun_copy-tree.html,@emph{Function} @strong{COPY-TREE}}

@uref{fun_subliscm_nsublis.html,@emph{Function} @strong{SUBLIS,
NSUBLIS}}

@uref{fun_substcm_s_subst-if-not.html,@emph{Function} @strong{SUBST,
SUBST-IF, SUBST-IF-NOT, NSUBST, NSUBST-IF, NSUBST-IF-NOT}}

@uref{fun_tree-equal.html,@emph{Function} @strong{TREE-EQUAL}}

@uref{fun_copy-list.html,@emph{Function} @strong{COPY-LIST}}

@uref{fun_listcm_listst.html,@emph{Function} @strong{LIST, LIST*}}

@uref{fun_list-length.html,@emph{Function} @strong{LIST-LENGTH}}

@uref{fun_listp.html,@emph{Function} @strong{LISTP}}

@uref{fun_make-list.html,@emph{Function} @strong{MAKE-LIST}}

@uref{mac_push.html,@emph{Macro} @strong{PUSH}}

@uref{mac_pop.html,@emph{Macro} @strong{POP}}

@uref{acc_firstcm_s_inthcm_tenth.html,@emph{Accessor} @strong{FIRST,
SECOND, THIRD, FOURTH, FIFTH, SIXTH, SEVENTH, EIGHTH, NINTH, TENTH}}

@uref{acc_nth.html,@emph{Accessor} @strong{NTH}}

@uref{fun_endp.html,@emph{Function} @strong{ENDP}}

@uref{fun_null.html,@emph{Function} @strong{NULL}}

@uref{fun_nconc.html,@emph{Function} @strong{NCONC}}

@uref{fun_append.html,@emph{Function} @strong{APPEND}}

@uref{fun_revappendcm_nreconc.html,@emph{Function} @strong{REVAPPEND,
NRECONC}}

@uref{fun_butlastcm_nbutlast.html,@emph{Function} @strong{BUTLAST,
NBUTLAST}}

@uref{fun_last.html,@emph{Function} @strong{LAST}}

@uref{fun_ldiffcm_tailp.html,@emph{Function} @strong{LDIFF, TAILP}}

@uref{fun_nthcdr.html,@emph{Function} @strong{NTHCDR}}

@uref{acc_rest.html,@emph{Accessor} @strong{REST}}

@uref{fun_membercm__ember-if-not.html,@emph{Function} @strong{MEMBER,
MEMBER-IF, MEMBER-IF-NOT}}

@uref{fun_mapccm_ma_istcm_mapcon.html,@emph{Function} @strong{MAPC,
MAPCAR, MAPCAN, MAPL, MAPLIST, MAPCON}}

@uref{fun_acons.html,@emph{Function} @strong{ACONS}}

@uref{fun_assoccm_a_assoc-if-not.html,@emph{Function} @strong{ASSOC,
ASSOC-IF, ASSOC-IF-NOT}}

@uref{fun_copy-alist.html,@emph{Function} @strong{COPY-ALIST}}

@uref{fun_pairlis.html,@emph{Function} @strong{PAIRLIS}}

@uref{fun_rassoccm__assoc-if-not.html,@emph{Function} @strong{RASSOC,
RASSOC-IF, RASSOC-IF-NOT}}

@uref{fun_get-properties.html,@emph{Function} @strong{GET-PROPERTIES}}

@uref{acc_getf.html,@emph{Accessor} @strong{GETF}}

@uref{mac_remf.html,@emph{Macro} @strong{REMF}}

@uref{fun_intersect_intersection.html,@emph{Function}
@strong{INTERSECTION, NINTERSECTION}}

@uref{fun_adjoin.html,@emph{Function} @strong{ADJOIN}}

@uref{mac_pushnew.html,@emph{Macro} @strong{PUSHNEW}}

@uref{fun_set-diffe_t-difference.html,@emph{Function}
@strong{SET-DIFFERENCE, NSET-DIFFERENCE}}

@uref{fun_set-exclu_exclusive-or.html,@emph{Function}
@strong{SET-EXCLUSIVE-OR, NSET-EXCLUSIVE-OR}}

@uref{fun_subsetp.html,@emph{Function} @strong{SUBSETP}}

@uref{fun_unioncm_nunion.html,@emph{Function} @strong{UNION, NUNION}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor CAR CDR CAAR CADR CDAR::
* CLHS Accessor FIRST SECOND THIRD FOURTH::
* CLHS Accessor GETF::
* CLHS Accessor NTH::
* CLHS Accessor REST::
* CLHS Function ACONS::
* CLHS Function ADJOIN::
* CLHS Function APPEND::
* CLHS Function ASSOC ASSOC-IF ASSOC-IF-NOT::
* CLHS Function ATOM::
* CLHS Function BUTLAST NBUTLAST::
* CLHS Function CONS::
* CLHS Function CONSP::
* CLHS Function COPY-ALIST::
* CLHS Function COPY-LIST::
* CLHS Function COPY-TREE::
* CLHS Function ENDP::
* CLHS Function GET-PROPERTIES::
* CLHS Function INTERSECTION NINTERSECTION::
* CLHS Function LAST::
* CLHS Function LDIFF TAILP::
* CLHS Function LIST-LENGTH::
* CLHS Function LIST LIST*::
* CLHS Function LISTP::
* CLHS Function MAKE-LIST::
* CLHS Function MAPC MAPCAR MAPCAN MAPL::
* CLHS Function MEMBER MEMBER-IF MEMBER-IF-NOT::
* CLHS Function NCONC::
* CLHS Function NTHCDR::
* CLHS Function NULL::
* CLHS Function PAIRLIS::
* CLHS Function RASSOC RASSOC-IF RASSOC-IF-NOT::
* CLHS Function REVAPPEND NRECONC::
* CLHS Function RPLACA RPLACD::
* CLHS Function SET-DIFFERENCE NSET-DIFFERENCE::
* CLHS Function SET-EXCLUSIVE-OR NSET-EXCLUSIVE-OR::
* CLHS Function SUBLIS NSUBLIS::
* CLHS Function SUBSETP::
* CLHS Function SUBST SUBST-IF SUBST-IF-NOT::
* CLHS Function TREE-EQUAL::
* CLHS Function UNION NUNION::
* CLHS Macro POP::
* CLHS Macro PUSH::
* CLHS Macro PUSHNEW::
* CLHS Macro REMF::
* CLHS System Class CONS::
* CLHS System Class NULL::
* CLHS Type ATOM::
@end menu

@node CLHS Accessor CAR CDR CAAR CADR CDAR
@subsubsection CLHS: Accessor CAR, CDR, CAAR, CADR, CDAR...
@anchor{#clhs-accessor-car-cdr-caar-cadr-cdar...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rplacacm_rplacd.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_copy-tree.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{CAR, CDR, CAAR, CADR, CDAR, CDDR, CAAAR, CAADR,
CADAR, CADDR, CDAAR, CDADR, CDDAR, CDDDR, CAAAAR, CAAADR, CAADAR,
CAADDR, CADAAR, CADADR, CADDAR, CADDDR, CDAAAR, CDAADR, CDADAR, CDADDR,
CDDAAR, CDDADR, CDDDAR, CDDDDR}

@strong{Syntax:}

@strong{car} @emph{x} => @emph{object}

@strong{cdr} @emph{x} => @emph{object}

@strong{caar} @emph{x} => @emph{object}

@strong{cadr} @emph{x} => @emph{object}

@strong{cdar} @emph{x} => @emph{object}

@strong{cddr} @emph{x} => @emph{object}

@strong{caaar} @emph{x} => @emph{object}

@strong{caadr} @emph{x} => @emph{object}

@strong{cadar} @emph{x} => @emph{object}

@strong{caddr} @emph{x} => @emph{object}

@strong{cdaar} @emph{x} => @emph{object}

@strong{cdadr} @emph{x} => @emph{object}

@strong{cddar} @emph{x} => @emph{object}

@strong{cdddr} @emph{x} => @emph{object}

@strong{caaaar} @emph{x} => @emph{object}

@strong{caaadr} @emph{x} => @emph{object}

@strong{caadar} @emph{x} => @emph{object}

@strong{caaddr} @emph{x} => @emph{object}

@strong{cadaar} @emph{x} => @emph{object}

@strong{cadadr} @emph{x} => @emph{object}

@strong{caddar} @emph{x} => @emph{object}

@strong{cadddr} @emph{x} => @emph{object}

@strong{cdaaar} @emph{x} => @emph{object}

@strong{cdaadr} @emph{x} => @emph{object}

@strong{cdadar} @emph{x} => @emph{object}

@strong{cdaddr} @emph{x} => @emph{object}

@strong{cddaar} @emph{x} => @emph{object}

@strong{cddadr} @emph{x} => @emph{object}

@strong{cdddar} @emph{x} => @emph{object}

@strong{cddddr} @emph{x} => @emph{object}

(setf (@strong{car} @emph{x}) @emph{new-object})

(setf (@strong{cdr} @emph{x}) @emph{new-object})

(setf (@strong{caar} @emph{x}) @emph{new-object})

(setf (@strong{cadr} @emph{x}) @emph{new-object})

(setf (@strong{cdar} @emph{x}) @emph{new-object})

(setf (@strong{cddr} @emph{x}) @emph{new-object})

(setf (@strong{caaar} @emph{x}) @emph{new-object})

(setf (@strong{caadr} @emph{x}) @emph{new-object})

(setf (@strong{cadar} @emph{x}) @emph{new-object})

(setf (@strong{caddr} @emph{x}) @emph{new-object})

(setf (@strong{cdaar} @emph{x}) @emph{new-object})

(setf (@strong{cdadr} @emph{x}) @emph{new-object})

(setf (@strong{cddar} @emph{x}) @emph{new-object})

(setf (@strong{cdddr} @emph{x}) @emph{new-object})

(setf (@strong{caaaar} @emph{x}) @emph{new-object})

(setf (@strong{caaadr} @emph{x}) @emph{new-object})

(setf (@strong{caadar} @emph{x}) @emph{new-object})

(setf (@strong{caaddr} @emph{x}) @emph{new-object})

(setf (@strong{cadaar} @emph{x}) @emph{new-object})

(setf (@strong{cadadr} @emph{x}) @emph{new-object})

(setf (@strong{caddar} @emph{x}) @emph{new-object})

(setf (@strong{cadddr} @emph{x}) @emph{new-object})

(setf (@strong{cdaaar} @emph{x}) @emph{new-object})

(setf (@strong{cdaadr} @emph{x}) @emph{new-object})

(setf (@strong{cdadar} @emph{x}) @emph{new-object})

(setf (@strong{cdaddr} @emph{x}) @emph{new-object})

(setf (@strong{cddaar} @emph{x}) @emph{new-object})

(setf (@strong{cddadr} @emph{x}) @emph{new-object})

(setf (@strong{cdddar} @emph{x}) @emph{new-object})

(setf (@strong{cddddr} @emph{x}) @emph{new-object})

@strong{Pronunciation:}

@ref{#cadr,@strong{cadr}}: ['ka,duhr]

@ref{#caddr,@strong{caddr}}: ['kaduh,duhr] or ['ka,dduhr]

@ref{#cdr,@strong{cdr}}: ['k,duhr]

@ref{#cddr,@strong{cddr}}: ['kduh,duhr] or ['kuh,dduhr]

@strong{Arguments and Values:}

@emph{x}---a @uref{glo_l.html#list,@emph{list}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{new-object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

If @emph{x} is a @uref{glo_c.html#cons,@emph{cons}},
@ref{#car,@strong{car}} returns the @uref{glo_c.html#car,@emph{car}} of
that @uref{glo_c.html#cons,@emph{cons}}. If @emph{x} is
@uref{any_nil.html#nil,@strong{nil}}, @ref{#car,@strong{car}} returns
@uref{any_nil.html#nil,@strong{nil}}.

If @emph{x} is a @uref{glo_c.html#cons,@emph{cons}},
@ref{#cdr,@strong{cdr}} returns the @uref{glo_c.html#cdr,@emph{cdr}} of
that @uref{glo_c.html#cons,@emph{cons}}. If @emph{x} is
@uref{any_nil.html#nil,@strong{nil}}, @ref{#cdr,@strong{cdr}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@uref{glo_f.html#function,@emph{Functions}} are provided which perform
compositions of up to four @ref{#car,@strong{car}} and
@ref{#cdr,@strong{cdr}} operations. Their
@uref{glo_n.html#name,@emph{names}} consist of a C, followed by two,
three, or four occurrences of A or D, and finally an R. The series of
A's and D's in each @uref{glo_f.html#function,@emph{function}}'s
@uref{glo_n.html#name,@emph{name}} is chosen to identify the series of
@ref{#car,@strong{car}} and @ref{#cdr,@strong{cdr}} operations that is
performed by the function. The order in which the A's and D's appear is
the inverse of the order in which the corresponding operations are
performed. The next figure defines the relationships precisely.

@verbatim
This place ...  Is equivalent to this place ...  
(caar x)        (car (car x))                    
(cadr x)        (car (cdr x))                    
(cdar x)        (cdr (car x))                    
(cddr x)        (cdr (cdr x))                    
(caaar x)       (car (car (car x)))              
(caadr x)       (car (car (cdr x)))              
(cadar x)       (car (cdr (car x)))              
(caddr x)       (car (cdr (cdr x)))              
(cdaar x)       (cdr (car (car x)))              
(cdadr x)       (cdr (car (cdr x)))              
(cddar x)       (cdr (cdr (car x)))              
(cdddr x)       (cdr (cdr (cdr x)))              
(caaaar x)      (car (car (car (car x))))        
(caaadr x)      (car (car (car (cdr x))))        
(caadar x)      (car (car (cdr (car x))))        
(caaddr x)      (car (car (cdr (cdr x))))        
(cadaar x)      (car (cdr (car (car x))))        
(cadadr x)      (car (cdr (car (cdr x))))        
(caddar x)      (car (cdr (cdr (car x))))        
(cadddr x)      (car (cdr (cdr (cdr x))))        
(cdaaar x)      (cdr (car (car (car x))))        
(cdaadr x)      (cdr (car (car (cdr x))))        
(cdadar x)      (cdr (car (cdr (car x))))        
(cdaddr x)      (cdr (car (cdr (cdr x))))        
(cddaar x)      (cdr (cdr (car (car x))))        
(cddadr x)      (cdr (cdr (car (cdr x))))        
(cdddar x)      (cdr (cdr (cdr (car x))))        
(cddddr x)      (cdr (cdr (cdr (cdr x))))        
@end verbatim

@strong{Figure 14-6. CAR and CDR variants}

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} can also be used with
any of these functions to change an existing component of @emph{x}, but
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} will not make new
components. So, for example, the @uref{glo_c.html#car,@emph{car}} of a
@uref{glo_c.html#cons,@emph{cons}} can be assigned with
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#car,@strong{car}}, but the @uref{glo_c.html#car,@emph{car}} of
@uref{any_nil.html#nil,@strong{nil}} cannot be assigned with
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#car,@strong{car}}. Similarly, the @uref{glo_c.html#car,@emph{car}}
of the @uref{glo_c.html#car,@emph{car}} of a
@uref{glo_c.html#cons,@emph{cons}} whose
@uref{glo_c.html#car,@emph{car}} is a @uref{glo_c.html#cons,@emph{cons}}
can be assigned with @uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#caar,@strong{caar}}, but neither
@uref{any_nil.html#nil,@strong{nil}}nor a
@uref{glo_c.html#cons,@emph{cons}} whose car is
@uref{any_nil.html#nil,@strong{nil}} can be assigned with
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#caar,@strong{caar}}.

The argument @emph{x} is permitted to be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@strong{Examples:}

@verbatim
 (car nil) =>  NIL  
 (cdr '(1 . 2)) =>  2
 (cdr '(1 2)) =>  (2)
 (cadr '(1 2)) =>  2 
 (car '(a b c)) =>  A
 (cdr '(a b c)) =>  (B C)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The functions @ref{#car,@strong{car}} and @ref{#cdr,@strong{cdr}} should
signal @uref{contyp_type-error.html#type-error,@strong{type-error}} if
they receive an argument which is not a
@uref{glo_l.html#list,@emph{list}}. The other functions
(@ref{#caar,@strong{caar}}, @ref{#cadr,@strong{cadr}}, ...
@ref{#cddddr,@strong{cddddr}}) should behave for the purpose of error
checking as if defined by appropriate calls to @ref{#car,@strong{car}}
and @ref{#cdr,@strong{cdr}}.

@strong{See Also:}

@uref{fun_rplacacm_rplacd.html#rplaca,@strong{rplaca}},
@uref{acc_firstcm_s_inthcm_tenth.html#first,@strong{first}},
@uref{acc_rest.html#rest,@strong{rest}}

@strong{Notes:}

The @uref{glo_c.html#car,@emph{car}} of a
@uref{glo_c.html#cons,@emph{cons}} can also be altered by using
@uref{fun_rplacacm_rplacd.html#rplaca,@strong{rplaca}}, and the
@uref{glo_c.html#cdr,@emph{cdr}} of a @uref{glo_c.html#cons,@emph{cons}}
can be altered by using
@uref{fun_rplacacm_rplacd.html#rplacd,@strong{rplacd}}.

@verbatim
(car x)    ==  (first x)
(cadr x)   ==  (second x) ==  (car (cdr x))
(caddr x)  ==  (third x)  ==  (car (cdr (cdr x)))
(cadddr x) ==  (fourth x) ==  (car (cdr (cdr (cdr x))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor FIRST SECOND THIRD FOURTH
@subsubsection CLHS: Accessor FIRST, SECOND, THIRD, FOURTH...
@anchor{#clhs-accessor-first-second-third-fourth...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_pop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_nth.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{FIRST, SECOND, THIRD, FOURTH, FIFTH, SIXTH,
SEVENTH, EIGHTH, NINTH, TENTH}

@strong{Syntax:}

@strong{first} @emph{list} => @emph{object}

@strong{second} @emph{list} => @emph{object}

@strong{third} @emph{list} => @emph{object}

@strong{fourth} @emph{list} => @emph{object}

@strong{fifth} @emph{list} => @emph{object}

@strong{sixth} @emph{list} => @emph{object}

@strong{seventh} @emph{list} => @emph{object}

@strong{eighth} @emph{list} => @emph{object}

@strong{ninth} @emph{list} => @emph{object}

@strong{tenth} @emph{list} => @emph{object}

(setf (@strong{first} @emph{list}) @emph{new-object})

(setf (@strong{second} @emph{list}) @emph{new-object})

(setf (@strong{third} @emph{list}) @emph{new-object})

(setf (@strong{fourth} @emph{list}) @emph{new-object})

(setf (@strong{fifth} @emph{list}) @emph{new-object})

(setf (@strong{sixth} @emph{list}) @emph{new-object})

(setf (@strong{seventh} @emph{list}) @emph{new-object})

(setf (@strong{eighth} @emph{list}) @emph{new-object})

(setf (@strong{ninth} @emph{list}) @emph{new-object})

(setf (@strong{tenth} @emph{list}) @emph{new-object})

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{object}, @emph{new-object}---an @emph{object}.

@strong{Description:}

The functions @ref{#first,@strong{first}},
@ref{#second,@strong{second}}, @ref{#third,@strong{third}},
@ref{#fourth,@strong{fourth}}, @ref{#fifth,@strong{fifth}},
@ref{#sixth,@strong{sixth}}, @ref{#seventh,@strong{seventh}},
@ref{#eighth,@strong{eighth}}, @ref{#ninth,@strong{ninth}}, and
@ref{#tenth,@strong{tenth}} @emph{access} the first, second, third,
fourth, fifth, sixth, seventh, eighth, ninth, and tenth
@uref{glo_e.html#element,@emph{elements}} of @emph{list}, respectively.
Specifically,

@verbatim
 (first list)    ==   (car list)
 (second list)   ==   (car (cdr list))
 (third list)    ==   (car (cddr list))
 (fourth list)   ==   (car (cdddr list))
 (fifth list)    ==   (car (cddddr list))
 (sixth list)    ==   (car (cdr (cddddr list)))
 (seventh list)  ==   (car (cddr (cddddr list)))
 (eighth list)   ==   (car (cdddr (cddddr list)))
 (ninth list)    ==   (car (cddddr (cddddr list)))
 (tenth list)    ==   (car (cdr (cddddr (cddddr list))))
@end verbatim

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} can also be used with
any of these functions to change an existing component. The same
equivalences apply. For example:

@verbatim
 (setf (fifth list) new-object) ==  (setf (car (cddddr list)) new-object)
@end verbatim

@strong{Examples:}

@verbatim
 (setq lst '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10)) 
=>  (1 2 3 (4 5 6) ((V)) VI 7 8 9 10)
 (first lst) =>  1
 (tenth lst) =>  10
 (fifth lst) =>  ((V))
 (second (fourth lst)) =>  5
 (sixth '(1 2 3)) =>  NIL
 (setf (fourth lst) "four") =>  "four"
 lst =>  (1 2 3 "four" ((V)) VI 7 8 9 10)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}},
@uref{acc_nth.html#nth,@strong{nth}}

@strong{Notes:}

@ref{#first,@strong{first}} is functionally equivalent to
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}},
@ref{#second,@strong{second}} is functionally equivalent to
@uref{acc_carcm_cdr_darcm_cddddr.html#cadr,@strong{cadr}},
@ref{#third,@strong{third}} is functionally equivalent to
@uref{acc_carcm_cdr_darcm_cddddr.html#caddr,@strong{caddr}}, and
@ref{#fourth,@strong{fourth}} is functionally equivalent to
@uref{acc_carcm_cdr_darcm_cddddr.html#cadddr,@strong{cadddr}}.

The ordinal numbering used here is one-origin, as opposed to the
zero-origin numbering used by @uref{acc_nth.html#nth,@strong{nth}}:

@verbatim
 (fifth x) ==  (nth 4 x)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor GETF
@subsubsection CLHS: Accessor GETF
@anchor{#clhs-accessor-getf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-properties.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_remf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{GETF}

@strong{Syntax:}

@strong{getf} @emph{plist indicator &optional default} => @emph{value}

(setf (@strong{getf} @emph{place indicator &optional default})
@emph{new-value})

@strong{Arguments and Values:}

@emph{plist}---a @uref{glo_p.html#property_list,@emph{property list}}.

@emph{place}---a @uref{glo_p.html#place,@emph{place}}, the
@uref{glo_v.html#value,@emph{value}} of which is a
@uref{glo_p.html#property_list,@emph{property list}}.

@emph{indicator}---an @uref{glo_o.html#object,@emph{object}}.

@emph{default}---an @uref{glo_o.html#object,@emph{object}}. The default
is @uref{any_nil.html#nil,@strong{nil}}.

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{new-value}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#getf,@strong{getf}} finds a
@uref{glo_p.html#property,@emph{property}} on the @emph{plist} whose
@uref{glo_p.html#property_indicator,@emph{property indicator}} is
@uref{glo_i.html#identical,@emph{identical}} to @emph{indicator}, and
returns its corresponding @uref{glo_p.html#property_value,@emph{property
value}}. If there are multiple
@uref{glo_p.html#property,@emph{properties}}[1] with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@ref{#getf,@strong{getf}} uses the first such
@uref{glo_p.html#property,@emph{property}}. If there is no
@uref{glo_p.html#property,@emph{property}} with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@emph{default} is returned.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#getf,@strong{getf}} may be used to associate a new
@uref{glo_o.html#object,@emph{object}} with an existing indicator in the
@uref{glo_p.html#property_list,@emph{property list}} held by
@emph{place}, or to create a new assocation if none exists. If there are
multiple @uref{glo_p.html#property,@emph{properties}}[1] with that
@uref{glo_p.html#property_indicator,@emph{property indicator}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#getf,@strong{getf}} associates the @emph{new-value} with the first
such @uref{glo_p.html#property,@emph{property}}. When a
@ref{#getf,@strong{getf}} @uref{glo_f.html#form,@emph{form}} is used as
a @uref{mac_setfcm_psetf.html#setf,@strong{setf}} @emph{place}, any
@emph{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its
@uref{glo_v.html#value,@emph{value}} is ignored.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#getf,@strong{getf}} is permitted to either
@uref{glo_w.html#write,@emph{write}} the
@uref{glo_v.html#value,@emph{value}} of @emph{place} itself, or modify
of any part, @uref{glo_c.html#car,@emph{car}} or
@uref{glo_c.html#cdr,@emph{cdr}}, of the
@uref{glo_l.html#list_structure,@emph{list structure}} held by
@emph{place}.

@strong{Examples:}

@verbatim
 (setq x '()) =>  NIL
 (getf x 'prop1) =>  NIL
 (getf x 'prop1 7) =>  7
 (getf x 'prop1) =>  NIL
 (setf (getf x 'prop1) 'val1) =>  VAL1
 (eq (getf x 'prop1) 'val1) =>  true
 (getf x 'prop1) =>  VAL1
 (getf x 'prop1 7) =>  VAL1
 x =>  (PROP1 VAL1)

;; Examples of implementation variation permitted.
 (setq foo (list 'a 'b 'c 'd 'e 'f)) =>  (A B C D E F)
 (setq bar (cddr foo)) =>  (C D E F)
 (remf foo 'c) =>  true
 foo =>  (A B E F)
 bar
=>  (C D E F)
OR=>  (C)
OR=>  (NIL)
OR=>  (C NIL)
OR=>  (C D)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_get.html#get,@strong{get}},
@uref{fun_get-properties.html#get-properties,@strong{get-properties}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{sec_5-1-2-2.html,Section 5.1.2.2 (Function Call Forms as Places)}

@strong{Notes:}

There is no way (using @ref{#getf,@strong{getf}}) to distinguish an
absent property from one whose value is @emph{default}; but see
@uref{fun_get-properties.html#get-properties,@strong{get-properties}}.

Note that while supplying a @emph{default} argument to
@ref{#getf,@strong{getf}} in a
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} situation is sometimes
not very interesting, it is still important because some macros, such as
@uref{mac_push.html#push,@strong{push}} and
@uref{mac_incfcm_decf.html#incf,@strong{incf}}, require a @emph{place}
argument which data is both @uref{glo_r.html#read,@emph{read}} from and
@emph{written} to. In such a context, if a @emph{default} argument is to
be supplied for the @uref{glo_r.html#read,@emph{read}} situation, it
must be syntactically valid for the @uref{glo_w.html#write,@emph{write}}
situation as well. For example,

@verbatim
 (let ((plist '()))
   (incf (getf plist 'count 0))
   plist) =>  (COUNT 1)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss306.html,SETF-GET-DEFAULT:EVALUATED-BUT-IGNORED}
@item
@uref{../Issues/iss269.html,PLIST-DUPLICATES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor NTH
@subsubsection CLHS: Accessor NTH
@anchor{#clhs-accessor-nth}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_firstcm_s_inthcm_tenth.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_endp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{NTH}

@strong{Syntax:}

@strong{nth} @emph{n list} => @emph{object}

(setf (@strong{nth} @emph{n list}) @emph{new-object})

@strong{Arguments and Values:}

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{new-object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#nth,@strong{nth}} locates the @emph{n}th element of @emph{list},
where the @uref{glo_c.html#car,@emph{car}} of the @emph{list} is the
``zeroth'' element. Specifically,

@verbatim
 (nth n list) ==  (car (nthcdr n list))
@end verbatim

@ref{#nth,@strong{nth}} may be used to specify a @emph{place} to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}. Specifically,

@verbatim
 (setf (nth n list) new-object) ==  (setf (car (nthcdr n list)) new-object)
@end verbatim

@strong{Examples:}

@verbatim
 (nth 0 '(foo bar baz)) =>  FOO
 (nth 1 '(foo bar baz)) =>  BAR
 (nth 3 '(foo bar baz)) =>  NIL
 (setq 0-to-3 (list 0 1 2 3)) =>  (0 1 2 3)
 (setf (nth 2 0-to-3) "two") =>  "two"
 0-to-3 =>  (0 1 "two" 3)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_elt.html#elt,@strong{elt}},
@uref{acc_firstcm_s_inthcm_tenth.html#first,@strong{first}},
@uref{fun_nthcdr.html#nthcdr,@strong{nthcdr}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor REST
@subsubsection CLHS: Accessor REST
@anchor{#clhs-accessor-rest}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_nthcdr.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_membercm__ember-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{REST}

@strong{Syntax:}

@strong{rest} @emph{list} => @emph{tail}

(setf (@strong{rest} @emph{list}) @emph{new-tail})

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{tail}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#rest,@strong{rest}} performs the same operation as
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}, but
mnemonically complements
@uref{acc_firstcm_s_inthcm_tenth.html#first,@strong{first}}.
Specifically,

@verbatim
 (rest list) ==  (cdr list)
 (setf (rest list) new-tail) ==  (setf (cdr list) new-tail)
@end verbatim

@strong{Examples:}

@verbatim
 (rest '(1 2)) =>  (2)
 (rest '(1 . 2)) =>  2
 (rest '(1)) =>  NIL
 (setq *cons* '(1 . 2)) =>  (1 . 2)
 (setf (rest *cons*) "two") =>  "two"
 *cons* =>  (1 . "two")
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}},
@uref{fun_nthcdr.html#nthcdr,@strong{nthcdr}}

@strong{Notes:}

@ref{#rest,@strong{rest}} is often preferred stylistically over
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}} when the
argument is to being subjectively viewed as a
@uref{glo_l.html#list,@emph{list}} rather than as a
@uref{glo_c.html#cons,@emph{cons}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ACONS
@subsubsection CLHS: Function ACONS
@anchor{#clhs-function-acons}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_mapccm_ma_istcm_mapcon.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_assoccm_a_assoc-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ACONS}

@strong{Syntax:}

@strong{acons} @emph{key datum alist} => @emph{new-alist}

@strong{Arguments and Values:}

@emph{key}---an @uref{glo_o.html#object,@emph{object}}.

@emph{datum}---an @uref{glo_o.html#object,@emph{object}}.

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}.

@emph{new-alist}---an
@uref{glo_a.html#association_list,@emph{association list}}.

@strong{Description:}

Creates a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_c.html#cons,@emph{cons}}, the @uref{glo_c.html#cdr,@emph{cdr}}
of which is @emph{alist} and the @uref{glo_c.html#car,@emph{car}} of
which is another @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_c.html#cons,@emph{cons}}, the @uref{glo_c.html#car,@emph{car}}
of which is @emph{key} and the @uref{glo_c.html#cdr,@emph{cdr}} of which
is @emph{datum}.

@strong{Examples:}

@verbatim
 (setq alist '()) =>  NIL
 (acons 1 "one" alist) =>  ((1 . "one"))
 alist =>  NIL
 (setq alist (acons 1 "one" (acons 2 "two" alist))) =>  ((1 . "one") (2 . "two"))
 (assoc 1 alist) =>  (1 . "one")
 (setq alist (acons 1 "uno" alist)) =>  ((1 . "uno") (1 . "one") (2 . "two"))
 (assoc 1 alist) =>  (1 . "uno")
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_assoccm_a_assoc-if-not.html#assoc,@strong{assoc}},
@uref{fun_pairlis.html#pairlis,@strong{pairlis}}

@strong{Notes:}

@verbatim
(acons key datum alist) ==  (cons (cons key datum) alist)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ADJOIN
@subsubsection CLHS: Function ADJOIN
@anchor{#clhs-function-adjoin}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_intersect_intersection.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_pushnew.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ADJOIN}

@strong{Syntax:}

@strong{adjoin} @emph{item list &key key test test-not} =>
@emph{new-list}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

Tests whether @emph{item} is the same as an existing element of
@emph{list}. If the @emph{item} is not an existing element,
@ref{#adjoin,@strong{adjoin}} adds it to @emph{list} (as if by
@uref{fun_cons.html#cons,@strong{cons}}) and returns the resulting
@uref{glo_l.html#list,@emph{list}}; otherwise, nothing is added and the
original @emph{list} is returned.

The @emph{test}, @emph{test-not}, and @emph{key} affect how it is
determined whether @emph{item} is the same as an
@uref{glo_e.html#element,@emph{element}} of @emph{list}. For details,
see @uref{sec_17-2-1.html,Section 17.2.1 (Satisfying a Two-Argument
Test)}.

@strong{Examples:}

@verbatim
 (setq slist '()) =>  NIL 
 (adjoin 'a slist) =>  (A) 
 slist =>  NIL 
 (setq slist (adjoin '(test-item 1) slist)) =>  ((TEST-ITEM 1)) 
 (adjoin '(test-item 1) slist) =>  ((TEST-ITEM 1) (TEST-ITEM 1)) 
 (adjoin '(test-item 1) slist :test 'equal) =>  ((TEST-ITEM 1)) 
 (adjoin '(new-test-item 1) slist :key #'cadr) =>  ((TEST-ITEM 1)) 
 (adjoin '(new-test-item 1) slist) =>  ((NEW-TEST-ITEM 1) (TEST-ITEM 1)) 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{See Also:}

@uref{mac_pushnew.html#pushnew,@strong{pushnew}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

@verbatim
 (adjoin item list :key fn)
   ==  (if (member (fn item) list :key fn) list (cons item list))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function APPEND
@subsubsection CLHS: Function APPEND
@anchor{#clhs-function-append}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_nconc.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_revappendcm_nreconc.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{APPEND}

@strong{Syntax:}

@strong{append} @emph{&rest lists} => @emph{result}

@strong{Arguments and Values:}

@emph{list}---each must be a @uref{glo_p.html#proper_list,@emph{proper
list}} except the last, which may be any
@uref{glo_o.html#object,@emph{object}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}. This will be
a @uref{glo_l.html#list,@emph{list}} unless the last @emph{list} was not
a @uref{glo_l.html#list,@emph{list}} and all preceding @emph{lists} were
@uref{glo_n.html#null,@emph{null}}.

@strong{Description:}

@ref{#append,@strong{append}} returns a new @emph{list} that is the
concatenation of the copies. @emph{lists} are left unchanged; the
@uref{glo_l.html#list_structure,@emph{list structure}} of each of
@emph{lists} except the last is copied. The last argument is not copied;
it becomes the @uref{glo_c.html#cdr,@emph{cdr}} of the final
@uref{glo_d.html#dotted_pair,@emph{dotted pair}} of the concatenation of
the preceding @emph{lists}, or is returned directly if there are no
preceding @uref{glo_n.html#non-empty,@emph{non-empty}} @emph{lists}.

@strong{Examples:}

@verbatim
 (append '(a b c) '(d e f) '() '(g)) =>  (A B C D E F G)
 (append '(a b c) 'd) =>  (A B C . D)
 (setq lst '(a b c)) =>  (A B C)
 (append lst '(d)) =>  (A B C D)
 lst =>  (A B C)
 (append) =>  NIL
 (append 'a) =>  A
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_nconc.html#nconc,@strong{nconc}},
@uref{fun_concatenate.html#concatenate,@strong{concatenate}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ASSOC ASSOC-IF ASSOC-IF-NOT
@subsubsection CLHS: Function ASSOC, ASSOC-IF, ASSOC-IF-NOT
@anchor{#clhs-function-assoc-assoc-if-assoc-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_acons.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_copy-alist.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ASSOC, ASSOC-IF, ASSOC-IF-NOT}

@strong{Syntax:}

@strong{assoc} @emph{item alist &key key test test-not} => @emph{entry}

@strong{assoc-if} @emph{predicate alist &key key} => @emph{entry}

@strong{assoc-if-not} @emph{predicate alist &key key} => @emph{entry}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{entry}---a @uref{glo_c.html#cons,@emph{cons}} that is an
@uref{glo_e.html#element,@emph{element}} of @emph{alist}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#assoc,@strong{assoc}}, @ref{#assoc-if,@strong{assoc-if}}, and
@ref{#assoc-if-not,@strong{assoc-if-not}} return the first
@uref{glo_c.html#cons,@emph{cons}} in @emph{alist} whose
@uref{glo_c.html#car,@emph{car}} @emph{satisfies the test}, or
@uref{any_nil.html#nil,@strong{nil}} if no such
@uref{glo_c.html#cons,@emph{cons}} is found.

For @ref{#assoc,@strong{assoc}}, @ref{#assoc-if,@strong{assoc-if}}, and
@ref{#assoc-if-not,@strong{assoc-if-not}}, if
@uref{any_nil.html#nil,@strong{nil}} appears in @emph{alist} in place of
a pair, it is ignored.

@strong{Examples:}

@verbatim
 (setq values '((x . 100) (y . 200) (z . 50))) =>  ((X . 100) (Y . 200) (Z . 50))
 (assoc 'y values) =>  (Y . 200)
 (rplacd (assoc 'y values) 201) =>  (Y . 201)
 (assoc 'y values) =>  (Y . 201)
 (setq alist '((1 . "one")(2 . "two")(3 . "three"))) 
=>  ((1 . "one") (2 . "two") (3 . "three"))
 (assoc 2 alist) =>  (2 . "two")
 (assoc-if #'evenp alist) =>  (2 . "two")
 (assoc-if-not #'(lambda(x) (< x 3)) alist) =>  (3 . "three")
 (setq alist '(("one" . 1)("two" . 2))) =>  (("one" . 1) ("two" . 2))
 (assoc "one" alist) =>  NIL
 (assoc "one" alist :test #'equalp) =>  ("one" . 1)
 (assoc "two" alist :key #'(lambda(x) (char x 2))) =>  NIL 
 (assoc #\o alist :key #'(lambda(x) (char x 2))) =>  ("two" . 2)
 (assoc 'r '((a . b) (c . d) (r . x) (s . y) (r . z))) =>   (R . X)
 (assoc 'goo '((foo . bar) (zoo . goo))) =>  NIL
 (assoc '2 '((1 a b c) (2 b c d) (-7 x y z))) =>  (2 B C D)
 (setq alist '(("one" . 1) ("2" . 2) ("three" . 3)))
=>  (("one" . 1) ("2" . 2) ("three" . 3))
 (assoc-if-not #'alpha-char-p alist
               :key #'(lambda (x) (char x 0))) =>  ("2" . 2)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{alist} is not an
@uref{glo_a.html#association_list,@emph{association list}}.

@strong{See Also:}

@uref{fun_rassoccm__assoc-if-not.html#rassoc,@strong{rassoc}},
@uref{fun_findcm_fi__find-if-not.html#find,@strong{find}},
@uref{fun_membercm__ember-if-not.html#member,@strong{member}},
@uref{fun_positionc_ition-if-not.html#position,@strong{position}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#assoc-if-not,@strong{assoc-if-not}} is deprecated.

It is possible to @uref{fun_rplacacm_rplacd.html#rplacd,@strong{rplacd}}
the result of @ref{#assoc,@strong{assoc}}, provided that it is not
@uref{any_nil.html#nil,@strong{nil}}, in order to ``update''
@emph{alist}.

The two expressions

@verbatim
 (assoc item list :test fn)
@end verbatim

and

@verbatim
 (find item list :test fn :key #'car)
@end verbatim

are equivalent in meaning with one exception: if
@uref{any_nil.html#nil,@strong{nil}} appears in @emph{alist} in place of
a pair, and @emph{item} is @uref{any_nil.html#nil,@strong{nil}},
@uref{fun_findcm_fi__find-if-not.html#find,@strong{find}} will compute
the @uref{glo_c.html#car,@emph{car}} of the
@uref{any_nil.html#nil,@strong{nil}} in @emph{alist}, find that it is
equal to @emph{item}, and return @uref{any_nil.html#nil,@strong{nil}},
whereas @ref{#assoc,@strong{assoc}} will ignore the
@uref{any_nil.html#nil,@strong{nil}} in @emph{alist} and continue to
search for an actual @uref{glo_c.html#cons,@emph{cons}} whose
@uref{glo_c.html#car,@emph{car}} is
@uref{any_nil.html#nil,@strong{nil}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss017.html,ASSOC-RASSOC-IF-KEY}
@item
@uref{../Issues/iss018.html,ASSOC-RASSOC-IF-KEY:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ATOM
@subsubsection CLHS: Function ATOM
@anchor{#clhs-function-atom}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_consp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rplacacm_rplacd.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ATOM}

@strong{Syntax:}

@strong{atom} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_atom.html#atom,@strong{atom}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (atom 'sss) =>  true
 (atom (cons 1 2)) =>  false
 (atom nil) =>  true
 (atom '()) =>  true
 (atom 3) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (atom object) ==  (typep object 'atom) ==  (not (consp object))
 ==  (not (typep object 'cons)) ==  (typep object '(not cons))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BUTLAST NBUTLAST
@subsubsection CLHS: Function BUTLAST, NBUTLAST
@anchor{#clhs-function-butlast-nbutlast}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_revappendcm_nreconc.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_last.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BUTLAST, NBUTLAST}

@strong{Syntax:}

@strong{butlast} @emph{list &optional n} => @emph{result-list}

@strong{nbutlast} @emph{list &optional n} => @emph{result-list}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} but must not be a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#butlast,@strong{butlast}} returns a copy of @emph{list} from which
the last @emph{n} conses have been omitted. If @emph{n} is not supplied,
its value is 1. If there are fewer than @emph{n} conses in @emph{list},
@uref{any_nil.html#nil,@strong{nil}} is returned and, in the case of
@ref{#nbutlast,@strong{nbutlast}}, @emph{list} is not modified.

@ref{#nbutlast,@strong{nbutlast}} is like
@ref{#butlast,@strong{butlast}}, but @ref{#nbutlast,@strong{nbutlast}}
may modify @emph{list}. It changes the @uref{glo_c.html#cdr,@emph{cdr}}
of the @uref{glo_c.html#cons,@emph{cons}} @emph{n}+1 from the end of the
@emph{list} to @uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (setq lst '(1 2 3 4 5 6 7 8 9)) =>  (1 2 3 4 5 6 7 8 9)
 (butlast lst) =>  (1 2 3 4 5 6 7 8)
 (butlast lst 5) =>  (1 2 3 4)
 (butlast lst (+ 5 5)) =>  NIL
 lst =>  (1 2 3 4 5 6 7 8 9)
 (nbutlast lst 3) =>  (1 2 3 4 5 6)
 lst =>  (1 2 3 4 5 6)
 (nbutlast lst 99) =>  NIL
 lst =>  (1 2 3 4 5 6)
 (butlast '(a b c d)) =>  (A B C)
 (butlast '((a b) (c d))) =>  ((A B))
 (butlast '(a)) =>  NIL
 (butlast nil) =>  NIL
 (setq foo (list 'a 'b 'c 'd)) =>  (A B C D)
 (nbutlast foo) =>  (A B C)
 foo =>  (A B C)
 (nbutlast (list 'a)) =>  NIL
 (nbutlast '()) =>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}} or
a @uref{glo_d.html#dotted_list,@emph{dotted list}}. Should signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if @emph{n}
is not a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (butlast list n) ==  (ldiff list (last list n))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss022.html,BUTLAST-NEGATIVE:SHOULD-SIGNAL}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONS
@subsubsection CLHS: Function CONS
@anchor{#clhs-function-cons}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_atom.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_consp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONS}

@strong{Syntax:}

@strong{cons} @emph{object-1 object-2} => @emph{cons}

@strong{Arguments and Values:}

@emph{object-1}---an @uref{glo_o.html#object,@emph{object}}.

@emph{object-2}---an @uref{glo_o.html#object,@emph{object}}.

@emph{cons}---a @uref{glo_c.html#cons,@emph{cons}}.

@strong{Description:}

Creates a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_c.html#cons,@emph{cons}}, the @uref{glo_c.html#car,@emph{car}}
of which is @emph{object-1} and the @uref{glo_c.html#cdr,@emph{cdr}} of
which is @emph{object-2}.

@strong{Examples:}

@verbatim
 (cons 1 2) =>  (1 . 2)
 (cons 1 nil) =>  (1)
 (cons nil 2) =>  (NIL . 2)
 (cons nil nil) =>  (NIL)
 (cons 1 (cons 2 (cons 3 (cons 4 nil)))) =>  (1 2 3 4)
 (cons 'a 'b) =>  (A . B)
 (cons 'a (cons 'b (cons 'c '()))) =>  (A B C)
 (cons 'a '(b c d)) =>  (A B C D)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_listcm_listst.html#list,@strong{list}}

@strong{Notes:}

If @emph{object-2} is a @uref{glo_l.html#list,@emph{list}},
@ref{#cons,@strong{cons}} can be thought of as producing a new
@uref{glo_l.html#list,@emph{list}} which is like it but has
@emph{object-1} prepended.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONSP
@subsubsection CLHS: Function CONSP
@anchor{#clhs-function-consp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_cons.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_atom.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONSP}

@strong{Syntax:}

@strong{consp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_cons.html#cons,@strong{cons}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (consp nil) =>  false
 (consp (cons 1 2)) =>  true
@end verbatim

The @uref{glo_e.html#empty_list,@emph{empty list}} is not a
@uref{glo_c.html#cons,@emph{cons}}, so

@verbatim
 (consp '()) ==  (consp 'nil) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_listp.html#listp,@strong{listp}}

@strong{Notes:}

@verbatim
 (consp object) ==  (typep object 'cons) ==  (not (typep object 'atom)) ==  (typep object '(not atom))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-ALIST
@subsubsection CLHS: Function COPY-ALIST
@anchor{#clhs-function-copy-alist}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_assoccm_a_assoc-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pairlis.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-ALIST}

@strong{Syntax:}

@strong{copy-alist} @emph{alist} => @emph{new-alist}

@strong{Arguments and Values:}

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}.

@emph{new-alist}---an
@uref{glo_a.html#association_list,@emph{association list}}.

@strong{Description:}

@ref{#copy-alist,@strong{copy-alist}} returns a
@uref{glo_c.html#copy,@emph{copy}} of @emph{alist}.

The @uref{glo_l.html#list_structure,@emph{list structure}} of
@emph{alist} is copied, and the
@uref{glo_e.html#element,@emph{elements}} of @emph{alist} which are
@uref{glo_c.html#cons,@emph{conses}} are also copied (as
@uref{glo_c.html#cons,@emph{conses}} only). Any other
@uref{glo_o.html#object,@emph{objects}} which are referred to, whether
directly or indirectly, by the @emph{alist} continue to be shared.

@strong{Examples:}

@verbatim
(defparameter *alist* (acons 1 "one" (acons 2 "two" '())))
*alist* =>  ((1 . "one") (2 . "two"))
(defparameter *list-copy* (copy-list *alist*))
*list-copy* =>  ((1 . "one") (2 . "two"))
(defparameter *alist-copy* (copy-alist *alist*))
*alist-copy* =>  ((1 . "one") (2 . "two"))
(setf (cdr (assoc 2 *alist-copy*)) "deux") =>  "deux"
*alist-copy* =>  ((1 . "one") (2 . "deux"))
*alist* =>  ((1 . "one") (2 . "two"))
(setf (cdr (assoc 1 *list-copy*)) "uno") =>  "uno"
*list-copy* =>  ((1 . "uno") (2 . "two"))
*alist* =>  ((1 . "uno") (2 . "two"))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_copy-list.html#copy-list,@strong{copy-list}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-LIST
@subsubsection CLHS: Function COPY-LIST
@anchor{#clhs-function-copy-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_tree-equal.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_listcm_listst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-LIST}

@strong{Syntax:}

@strong{copy-list} @emph{list} => @emph{copy}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}} or a
@uref{glo_d.html#dotted_list,@emph{dotted list}}.

@emph{copy}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

Returns a @uref{glo_c.html#copy,@emph{copy}} of @emph{list}. If
@emph{list} is a @uref{glo_d.html#dotted_list,@emph{dotted list}}, the
resulting @uref{glo_l.html#list,@emph{list}} will also be a
@uref{glo_d.html#dotted_list,@emph{dotted list}}.

Only the @uref{glo_l.html#list_structure,@emph{list structure}} of
@emph{list} is copied; the @uref{glo_e.html#element,@emph{elements}} of
the resulting list are the @uref{glo_s.html#same,@emph{same}} as the
corresponding @uref{glo_e.html#element,@emph{elements}} of the given
@emph{list}.

@strong{Examples:}

@verbatim
 (setq lst (list 1 (list 2 3))) =>  (1 (2 3))
 (setq slst lst) =>  (1 (2 3))
 (setq clst (copy-list lst)) =>  (1 (2 3))
 (eq slst lst) =>  true
 (eq clst lst) =>  false
 (equal clst lst) =>  true
 (rplaca lst "one") =>  ("one" (2 3))
 slst =>  ("one" (2 3))
 clst =>  (1 (2 3))
 (setf (caadr lst) "two") =>  "two"
 lst =>  ("one" ("two" 3))
 slst =>  ("one" ("two" 3))
 clst =>  (1 ("two" 3))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if @emph{list} is a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@strong{See Also:}

@uref{fun_copy-alist.html#copy-alist,@strong{copy-alist}},
@uref{fun_copy-seq.html#copy-seq,@strong{copy-seq}},
@uref{fun_copy-tree.html#copy-tree,@strong{copy-tree}}

@strong{Notes:}

The copy created is @uref{fun_equal.html#equal,@strong{equal}} to
@emph{list}, but not @uref{fun_eq.html#eq,@strong{eq}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-TREE
@subsubsection CLHS: Function COPY-TREE
@anchor{#clhs-function-copy-tree}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_carcm_cdr_darcm_cddddr.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_subliscm_nsublis.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-TREE}

@strong{Syntax:}

@strong{copy-tree} @emph{tree} => @emph{new-tree}

@strong{Arguments and Values:}

@emph{tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@emph{new-tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@strong{Description:}

Creates a @uref{glo_c.html#copy,@emph{copy}} of a
@uref{glo_t.html#tree,@emph{tree}} of
@uref{glo_c.html#cons,@emph{conses}}.

If @emph{tree} is not a @uref{glo_c.html#cons,@emph{cons}}, it is
returned; otherwise, the result is a new
@uref{glo_c.html#cons,@emph{cons}} of the results of calling
@ref{#copy-tree,@strong{copy-tree}} on the
@uref{glo_c.html#car,@emph{car}} and @uref{glo_c.html#cdr,@emph{cdr}} of
@emph{tree}. In other words, all @uref{glo_c.html#cons,@emph{conses}} in
the @uref{glo_t.html#tree,@emph{tree}} represented by @emph{tree} are
copied recursively, stopping only when
non-@uref{glo_c.html#cons,@emph{conses}} are encountered.

@ref{#copy-tree,@strong{copy-tree}} does not preserve circularities and
the sharing of substructure.

@strong{Examples:}

@verbatim
 (setq object (list (cons 1 "one")
                    (cons 2 (list 'a 'b 'c))))
=>  ((1 . "one") (2 A B C))
 (setq object-too object) =>  ((1 . "one") (2 A B C))
 (setq copy-as-list (copy-list object))
 (setq copy-as-alist (copy-alist object))
 (setq copy-as-tree (copy-tree object))
 (eq object object-too) =>  true
 (eq copy-as-tree object) =>  false
 (eql copy-as-tree object) =>  false
 (equal copy-as-tree object) =>  true
 (setf (first (cdr (second object))) "a"
       (car (second object)) "two"
       (car object) '(one . 1)) =>  (ONE . 1)
 object =>  ((ONE . 1) ("two" "a" B C))
 object-too =>  ((ONE . 1) ("two" "a" B C))
 copy-as-list =>  ((1 . "one") ("two" "a" B C))
 copy-as-alist =>  ((1 . "one") (2 "a" B C))
 copy-as-tree =>  ((1 . "one") (2 A B C)) 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_tree-equal.html#tree-equal,@strong{tree-equal}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ENDP
@subsubsection CLHS: Function ENDP
@anchor{#clhs-function-endp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_nth.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_null.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ENDP}

@strong{Syntax:}

@strong{endp} @emph{list} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{list} is the
@uref{glo_e.html#empty_list,@emph{empty list}}. Returns
@uref{glo_f.html#false,@emph{false}} if @emph{list} is a
@uref{glo_c.html#cons,@emph{cons}}.

@strong{Examples:}

@verbatim
 (endp nil) =>  true
 (endp '(1 2)) =>  false
 (endp (cddr '(1 2))) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_l.html#list,@emph{list}}.

@strong{See Also:} None.

@strong{Notes:}

The purpose of @ref{#endp,@strong{endp}} is to test for the end of
@emph{proper list}. Since @ref{#endp,@strong{endp}} does not descend
into a @uref{glo_c.html#cons,@emph{cons}}, it is well-defined to pass it
a @uref{glo_d.html#dotted_list,@emph{dotted list}}. However, if shorter
``lists'' are iteratively produced by calling
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}} on such a
@uref{glo_d.html#dotted_list,@emph{dotted list}} and those ``lists'' are
tested with @ref{#endp,@strong{endp}}, a situation that has undefined
consequences will eventually result when the
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_a.html#atom,@emph{atom}} (which is not in fact a
@uref{glo_l.html#list,@emph{list}}) finally becomes the argument to
@ref{#endp,@strong{endp}}. Since this is the usual way in which
@ref{#endp,@strong{endp}} is used, it is conservative programming style
and consistent with the intent of @ref{#endp,@strong{endp}} to treat
@ref{#endp,@strong{endp}} as simply a function on
@uref{glo_p.html#proper_list,@emph{proper lists}} which happens not to
enforce an argument type of @uref{glo_p.html#proper_list,@emph{proper
list}} except when the argument is
@uref{glo_a.html#atomic,@emph{atomic}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-PROPERTIES
@subsubsection CLHS: Function GET-PROPERTIES
@anchor{#clhs-function-get-properties}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rassoccm__assoc-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_getf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-PROPERTIES}

@strong{Syntax:}

@strong{get-properties} @emph{plist indicator-list} => @emph{indicator,
value, tail}

@strong{Arguments and Values:}

@emph{plist}---a @uref{glo_p.html#property_list,@emph{property list}}.

@emph{indicator-list}---a @uref{glo_p.html#proper_list,@emph{proper
list}} (of @uref{glo_i.html#indicator,@emph{indicators}}).

@emph{indicator}---an @uref{glo_o.html#object,@emph{object}} that is an
@uref{glo_e.html#element,@emph{element}} of @emph{indicator-list}.

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{tail}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#get-properties,@strong{get-properties}} is used to look up any of
several @uref{glo_p.html#property_list,@emph{property list}} entries all
at once.

It searches the @emph{plist} for the first entry whose
@uref{glo_i.html#indicator,@emph{indicator}} is
@uref{glo_i.html#identical,@emph{identical}} to one of the
@uref{glo_o.html#object,@emph{objects}} in @emph{indicator-list}. If
such an entry is found, the @emph{indicator} and @emph{value} returned
are the @uref{glo_p.html#property_indicator,@emph{property indicator}}
and its associated @uref{glo_p.html#property_value,@emph{property
value}}, and the @emph{tail} returned is the
@uref{glo_t.html#tail,@emph{tail}} of the @emph{plist} that begins with
the found entry (i.e., whose @uref{glo_c.html#car,@emph{car}} is the
@emph{indicator}). If no such entry is found, the @emph{indicator},
@emph{value}, and @emph{tail} are all
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (setq x '()) =>  NIL
 (setq *indicator-list* '(prop1 prop2)) =>  (PROP1 PROP2)
 (getf x 'prop1) =>  NIL
 (setf (getf x 'prop1) 'val1) =>  VAL1
 (eq (getf x 'prop1) 'val1) =>  true
 (get-properties x *indicator-list*) =>  PROP1, VAL1, (PROP1 VAL1)
 x =>  (PROP1 VAL1)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_get.html#get,@strong{get}},
@uref{acc_getf.html#getf,@strong{getf}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss269.html,PLIST-DUPLICATES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INTERSECTION NINTERSECTION
@subsubsection CLHS: Function INTERSECTION, NINTERSECTION
@anchor{#clhs-function-intersection-nintersection}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_remf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_adjoin.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INTERSECTION, NINTERSECTION}

@strong{Syntax:}

@strong{intersection} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{nintersection} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{Arguments and Values:}

@emph{list-1}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-2}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#intersection,@strong{intersection}} and
@ref{#nintersection,@strong{nintersection}} return a
@uref{glo_l.html#list,@emph{list}} that contains every element that
occurs in both @emph{list-1} and @emph{list-2}.

@ref{#nintersection,@strong{nintersection}} is the destructive version
of @ref{#intersection,@strong{intersection}}. It performs the same
operation, but may destroy @emph{list-1} using its cells to construct
the result. @emph{list-2} is not destroyed.

The intersection operation is described as follows. For all possible
ordered pairs consisting of one @uref{glo_e.html#element,@emph{element}}
from @emph{list-1} and one @uref{glo_e.html#element,@emph{element}} from
@emph{list-2}, :test or :test-not are used to determine whether they
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}. The first
argument to the :test or :test-not function is an element of
@emph{list-1}; the second argument is an element of @emph{list-2}. If
:test or :test-not is not supplied, @uref{fun_eql.html#eql,@strong{eql}}
is used. It is an error if :test and :test-not are supplied in the same
function call.

If :key is supplied (and not @uref{any_nil.html#nil,@strong{nil}}), it
is used to extract the part to be tested from the @emph{list} element.
The argument to the :key function is an element of either @emph{list-1}
or @emph{list-2}; the :key function typically returns part of the
supplied element. If :key is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the @emph{list-1} and
@emph{list-2} elements are used.

For every pair that @emph{satifies the test}, exactly one of the two
elements of the pair will be put in the result. No element from either
@uref{glo_l.html#list,@emph{list}} appears in the result that does not
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}} for an
element from the other @uref{glo_l.html#list,@emph{list}}. If one of the
@uref{glo_l.html#list,@emph{lists}} contains duplicate elements, there
may be duplication in the result.

There is no guarantee that the order of elements in the result will
reflect the ordering of the arguments in any particular way. The result
@uref{glo_l.html#list,@emph{list}} may share cells with, or be
@uref{fun_eq.html#eq,@strong{eq}} to, either @emph{list-1} or
@emph{list-2} if appropriate.

@strong{Examples:}

@verbatim
 (setq list1 (list 1 1 2 3 4 a b c "A" "B" "C" "d")
       list2 (list 1 4 5 b c d "a" "B" "c" "D")) 
  =>  (1 4 5 B C D "a" "B" "c" "D")
 (intersection list1 list2) =>  (C B 4 1 1)
 (intersection list1 list2 :test 'equal) =>  ("B" C B 4 1 1)
 (intersection list1 list2 :test #'equalp) =>  ("d" "C" "B" "A" C B 4 1 1) 
 (nintersection list1 list2) =>  (1 1 4 B C)
 list1 =>  implementation-dependent ;e.g.,  (1 1 4 B C)
 list2 =>  implementation-dependent ;e.g.,  (1 4 5 B C D "a" "B" "c" "D")
 (setq list1 (copy-list '((1 . 2) (2 . 3) (3 . 4) (4 . 5))))
=>  ((1 . 2) (2 . 3) (3 . 4) (4 . 5)) 
 (setq list2 (copy-list '((1 . 3) (2 . 4) (3 . 6) (4 . 8))))
=>  ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) 
 (nintersection list1 list2 :key #'cdr) =>  ((2 . 3) (3 . 4)) 
 list1 =>  implementation-dependent ;e.g.,  ((1 . 2) (2 . 3) (3 . 4)) 
 list2 =>  implementation-dependent ;e.g.,  ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) 
@end verbatim

@strong{Side Effects:}

@ref{#nintersection,@strong{nintersection}} can modify @emph{list-1},
but not @emph{list-2}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list-1} and @emph{list-2} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{fun_unioncm_nunion.html#union,@strong{union}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

Since the @ref{#nintersection,@strong{nintersection}} side effect is not
required, it should not be used in for-effect-only positions in portable
code.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss247.html,NINTERSECTION-DESTRUCTION}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss248.html,NINTERSECTION-DESTRUCTION:REVERT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LAST
@subsubsection CLHS: Function LAST
@anchor{#clhs-function-last}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_butlastcm_nbutlast.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_ldiffcm_tailp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LAST}

@strong{Syntax:}

@strong{last} @emph{list &optional n} => @emph{tail}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} but must not be a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}}. The
default is 1.

@emph{tail}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#last,@strong{last}} returns the last @emph{n}
@uref{glo_c.html#cons,@emph{conses}} (not the last @emph{n} elements) of
@emph{list}). If @emph{list} is (), @ref{#last,@strong{last}} returns
().

If @emph{n} is zero, the atom that terminates @emph{list} is returned.
If @emph{n} is greater than or equal to the number of
@uref{glo_c.html#cons,@emph{cons}} cells in @emph{list}, the result is
@emph{list}.

@strong{Examples:}

@verbatim
 (last nil) =>  NIL
 (last '(1 2 3)) =>  (3)
 (last '(1 2 . 3)) =>  (2 . 3)
 (setq x (list 'a 'b 'c 'd)) =>  (A B C D)
 (last x) =>  (D)
 (rplacd (last x) (list 'e 'f)) x =>  (A B C D E F)
 (last x) =>  (F)

 (last '(a b c))   =>  (C)

 (last '(a b c) 0) =>  ()
 (last '(a b c) 1) =>  (C)
 (last '(a b c) 2) =>  (B C)
 (last '(a b c) 3) =>  (A B C)
 (last '(a b c) 4) =>  (A B C)

 (last '(a . b) 0) =>  B
 (last '(a . b) 1) =>  (A . B)
 (last '(a . b) 2) =>  (A . B)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if @emph{list} is a
@uref{glo_c.html#circular_list,@emph{circular list}}. Should signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if @emph{n}
is not a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_butlastcm_nbutlast.html#butlast,@strong{butlast}},
@uref{acc_nth.html#nth,@strong{nth}}

@strong{Notes:}

The following code could be used to define @ref{#last,@strong{last}}.

@verbatim
 (defun last (list &optional (n 1))
   (check-type n (integer 0))
   (do ((l list (cdr l))
        (r list)
        (i 0 (+ i 1)))
       ((atom l) r)
     (if (>= i n) (pop r))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss209.html,LAST-N}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LDIFF TAILP
@subsubsection CLHS: Function LDIFF, TAILP
@anchor{#clhs-function-ldiff-tailp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_last.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_nthcdr.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LDIFF, TAILP}

@strong{Syntax:}

@strong{ldiff} @emph{list object} => @emph{result-list}

@strong{tailp} @emph{object list} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

If @emph{object} is the @uref{glo_s.html#same,@emph{same}} as some
@uref{glo_t.html#tail,@emph{tail}} of @emph{list},
@ref{#tailp,@strong{tailp}} returns @uref{glo_t.html#true,@emph{true}};
otherwise, it returns @uref{glo_f.html#false,@emph{false}}.

If @emph{object} is the @uref{glo_s.html#same,@emph{same}} as some
@uref{glo_t.html#tail,@emph{tail}} of @emph{list},
@ref{#ldiff,@strong{ldiff}} returns a
@uref{glo_f.html#fresh,@emph{fresh}} @uref{glo_l.html#list,@emph{list}}
of the @uref{glo_e.html#element,@emph{elements}} of
@uref{glo_l.html#list,@emph{list}} that precede @strong{object} in the
@uref{glo_l.html#list_structure,@emph{list structure}} of @emph{list};
otherwise, it returns a @uref{glo_c.html#copy,@emph{copy}}[2] of
@emph{list}.

@strong{Examples:}

@verbatim
 (let ((lists '#((a b c) (a b c . d))))
   (dotimes (i (length lists)) ()
     (let ((list (aref lists i)))
       (format t "~2&list=~S ~21T(tailp object list)~
                  ~44T(ldiff list object)~%" list)
         (let ((objects (vector list (cddr list) (copy-list (cddr list))
                                '(f g h) '() 'd 'x)))
           (dotimes (j (length objects)) ()
             (let ((object (aref objects j)))
               (format t "~& object=~S ~21T~S ~44T~S"
                       object (tailp object list) (ldiff list object))))))))
>>  
>>  list=(A B C)         (tailp object list)    (ldiff list object)
>>   object=(A B C)      T                      NIL
>>   object=(C)          T                      (A B)
>>   object=(C)          NIL                    (A B C)
>>   object=(F G H)      NIL                    (A B C)
>>   object=NIL          T                      (A B C)
>>   object=D            NIL                    (A B C)
>>   object=X            NIL                    (A B C)
>>  
>>  list=(A B C . D)     (tailp object list)    (ldiff list object)
>>   object=(A B C . D)  T                      NIL
>>   object=(C . D)      T                      (A B)
>>   object=(C . D)      NIL                    (A B C . D)
>>   object=(F G H)      NIL                    (A B C . D)
>>   object=NIL          NIL                    (A B C . D)
>>   object=D            T                      (A B C)
>>   object=X            NIL                    (A B C . D)
=>  NIL
@end verbatim

@strong{Side Effects:}

Neither @ref{#ldiff,@strong{ldiff}} nor @ref{#tailp,@strong{tailp}}
modifies either of its @uref{glo_a.html#argument,@emph{arguments}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}} or
a @uref{glo_d.html#dotted_list,@emph{dotted list}}.

@strong{See Also:}

@uref{fun_set-diffe_t-difference.html#set-difference,@strong{set-difference}}

@strong{Notes:}

If the @emph{list} is a @uref{glo_c.html#circular_list,@emph{circular
list}}, @ref{#tailp,@strong{tailp}} will reliably
@uref{glo_y.html#yield,@emph{yield}} a
@uref{glo_v.html#value,@emph{value}} only if the given @emph{object} is
in fact a @uref{glo_t.html#tail,@emph{tail}} of @emph{list}. Otherwise,
the consequences are unspecified: a given
@uref{glo_i.html#implementation,@emph{implementation}} which detects the
circularity must return @uref{glo_f.html#false,@emph{false}}, but since
an @uref{glo_i.html#implementation,@emph{implementation}} is not obliged
to detect such a @uref{glo_s.html#situation,@emph{situation}},
@ref{#tailp,@strong{tailp}} might just loop indefinitely without
returning in that case.

@ref{#tailp,@strong{tailp}} could be defined as follows:

@verbatim
 (defun tailp (object list)
   (do ((list list (cdr list)))
       ((atom list) (eql list object))
      (if (eql object list)
          (return t))))
@end verbatim

and @ref{#ldiff,@strong{ldiff}} could be defined by:

@verbatim
(defun ldiff (list object)
  (do ((list list (cdr list))
       (r '() (cons (car list) r)))
      ((atom list)
       (if (eql list object) (nreverse r) (nreconc r list)))
    (when (eql object list)
      (return (nreverse r)))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss345.html,TAILP-NIL:T}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LIST-LENGTH
@subsubsection CLHS: Function LIST-LENGTH
@anchor{#clhs-function-list-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_listcm_listst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_listp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LIST-LENGTH}

@strong{Syntax:}

@strong{list-length} @emph{list} => @emph{length}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{length}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns the @uref{glo_l.html#length,@emph{length}} of @emph{list} if
@emph{list} is a @uref{glo_p.html#proper_list,@emph{proper list}}.
Returns @uref{any_nil.html#nil,@strong{nil}} if @emph{list} is a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@strong{Examples:}

@verbatim
 (list-length '(a b c d)) =>  4
 (list-length '(a (b c) d)) =>  3
 (list-length '()) =>  0
 (list-length nil) =>  0
 (defun circular-list (&rest elements)
   (let ((cycle (copy-list elements))) 
     (nconc cycle cycle)))
 (list-length (circular-list 'a 'b)) =>  NIL
 (list-length (circular-list 'a)) =>  NIL
 (list-length (circular-list)) =>  0
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}} or
a @uref{glo_c.html#circular_list,@emph{circular list}}.

@strong{See Also:}

@uref{fun_length.html#length,@strong{length}}

@strong{Notes:}

@ref{#list-length,@strong{list-length}} could be implemented as follows:

@verbatim
 (defun list-length (x)  
   (do ((n 0 (+ n 2))           ;Counter.
        (fast x (cddr fast))    ;Fast pointer: leaps by 2.
        (slow x (cdr slow)))    ;Slow pointer: leaps by 1.
       (nil)
     ;; If fast pointer hits the end, return the count.
     (when (endp fast) (return n))
     (when (endp (cdr fast)) (return (+ n 1)))
     ;; If fast pointer eventually equals slow pointer,
     ;;  then we must be stuck in a circular list.
     ;; (A deeper property is the converse: if we are
     ;;  stuck in a circular list, then eventually the
     ;;  fast pointer will equal the slow pointer.
     ;;  That fact justifies this implementation.)
     (when (and (eq fast slow) (> n 0)) (return nil))))
 
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LIST LIST*
@subsubsection CLHS: Function LIST, LIST*
@anchor{#clhs-function-list-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_list-length.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LIST, LIST*}

@strong{Syntax:}

@strong{list} @emph{&rest objects} => @emph{list}

@strong{list*} @emph{&rest objects+} => @emph{result}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{list}---a @uref{glo_l.html#list,@emph{list}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#list,@strong{list}} returns a @uref{glo_l.html#list,@emph{list}}
containing the supplied @emph{objects}.

@ref{#listST,@strong{list*}} is like @ref{#list,@strong{list}} except
that the last @uref{glo_a.html#argument,@emph{argument}} to
@ref{#list,@strong{list}} becomes the @uref{glo_c.html#car,@emph{car}}
of the last @uref{glo_c.html#cons,@emph{cons}} constructed, while the
last @uref{glo_a.html#argument,@emph{argument}} to
@ref{#listST,@strong{list*}} becomes the
@uref{glo_c.html#cdr,@emph{cdr}} of the last
@uref{glo_c.html#cons,@emph{cons}} constructed. Hence, any given call to
@ref{#listST,@strong{list*}} always produces one fewer
@uref{glo_c.html#cons,@emph{conses}} than a call to
@ref{#list,@strong{list}} with the same number of arguments.

If the last @uref{glo_a.html#argument,@emph{argument}} to
@ref{#listST,@strong{list*}} is a @uref{glo_l.html#list,@emph{list}},
the effect is to construct a new @uref{glo_l.html#list,@emph{list}}
which is similar, but which has additional elements added to the front
corresponding to the preceding
@uref{glo_a.html#argument,@emph{arguments}} of
@ref{#listST,@strong{list*}}.

If @ref{#listST,@strong{list*}} receives only one @emph{object}, that
@emph{object} is returned, regardless of whether or not it is a
@uref{glo_l.html#list,@emph{list}}.

@strong{Examples:}

@verbatim
 (list 1) =>  (1)
 (list* 1) =>  1
 (setq a 1) =>  1
 (list a 2) =>  (1 2)
 '(a 2) =>  (A 2)
 (list 'a 2) =>  (A 2)
 (list* a 2) =>  (1 . 2)
 (list) =>  NIL ;i.e.,  ()
 (setq a '(1 2)) =>  (1 2)
 (eq a (list* a)) =>  true
 (list 3 4 'a (car '(b . c)) (+ 6 -2)) =>  (3 4 A B 4)
 (list* 'a 'b 'c 'd) ==  (cons 'a (cons 'b (cons 'c 'd))) =>  (A B C . D)
 (list* 'a 'b 'c '(d e f)) =>  (A B C D E F)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_cons.html#cons,@strong{cons}}

@strong{Notes:}

@verbatim
 (list* x) ==  x
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LISTP
@subsubsection CLHS: Function LISTP
@anchor{#clhs-function-listp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_list-length.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LISTP}

@strong{Syntax:}

@strong{listp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_list.html#list,@strong{list}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (listp nil) =>  true
 (listp (cons 1 2)) =>  true
 (listp (make-array 6)) =>  false
 (listp t) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_consp.html#consp,@strong{consp}}

@strong{Notes:}

If @emph{object} is a @uref{glo_c.html#cons,@emph{cons}},
@ref{#listp,@strong{listp}} does not check whether @emph{object} is a
@uref{glo_p.html#proper_list,@emph{proper list}}; it returns
@uref{glo_t.html#true,@emph{true}} for any kind of
@uref{glo_l.html#list,@emph{list}}.

@verbatim
 (listp object) ==  (typep object 'list) ==  (typep object '(or cons null))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-LIST
@subsubsection CLHS: Function MAKE-LIST
@anchor{#clhs-function-make-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_listp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_push.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-LIST}

@strong{Syntax:}

@strong{make-list} @emph{size &key initial-element} => @emph{list}

@strong{Arguments and Values:}

@emph{size}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{initial-element}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of @emph{length} given by
@emph{size}, each of the @uref{glo_e.html#element,@emph{elements}} of
which is @emph{initial-element}.

@strong{Examples:}

@verbatim
 (make-list 5) =>  (NIL NIL NIL NIL NIL)
 (make-list 3 :initial-element 'rah) =>  (RAH RAH RAH)
 (make-list 2 :initial-element '(1 2 3)) =>  ((1 2 3) (1 2 3))
 (make-list 0) =>  NIL ;i.e.,  ()
 (make-list 0 :initial-element 'new-element) =>  NIL 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{size} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{See Also:}

@uref{fun_cons.html#cons,@strong{cons}},
@uref{fun_listcm_listst.html#list,@strong{list}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAPC MAPCAR MAPCAN MAPL
@subsubsection CLHS: Function MAPC, MAPCAR, MAPCAN, MAPL...
@anchor{#clhs-function-mapc-mapcar-mapcan-mapl...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_membercm__ember-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_acons.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAPC, MAPCAR, MAPCAN, MAPL, MAPLIST, MAPCON}

@strong{Syntax:}

@strong{mapc} @emph{function &rest lists+} => @emph{list-1}

@strong{mapcar} @emph{function &rest lists+} => @emph{result-list}

@strong{mapcan} @emph{function &rest lists+} =>
@emph{concatenated-results}

@strong{mapl} @emph{function &rest lists+} => @emph{list-1}

@strong{maplist} @emph{function &rest lists+} => @emph{result-list}

@strong{mapcon} @emph{function &rest lists+} =>
@emph{concatenated-results}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} that must take as many
@uref{glo_a.html#argument,@emph{arguments}} as there are @emph{lists}.

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-1}---the first @emph{list} (which must be a
@uref{glo_p.html#proper_list,@emph{proper list}}).

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@emph{concatenated-results}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

The mapping operation involves applying @emph{function} to successive
sets of arguments in which one argument is obtained from each
@uref{glo_s.html#sequence,@emph{sequence}}. Except for
@ref{#mapc,@strong{mapc}} and @ref{#mapl,@strong{mapl}}, the result
contains the results returned by @emph{function}. In the cases of
@ref{#mapc,@strong{mapc}} and @ref{#mapl,@strong{mapl}}, the resulting
@uref{glo_s.html#sequence,@emph{sequence}} is @emph{list}.

@emph{function} is called first on all the elements with index 0, then
on all those with index 1, and so on. @emph{result-type} specifies the
@uref{glo_t.html#type,@emph{type}} of the resulting
@uref{glo_s.html#sequence,@emph{sequence}}. If @emph{function} is a
@uref{glo_s.html#symbol,@emph{symbol}}, it is
@uref{fun_coerce.html#coerce,@strong{coerce}}d to a
@uref{glo_f.html#function,@emph{function}} as if by
@uref{acc_symbol-function.html#symbol-function,@strong{symbol-function}}.

@ref{#mapcar,@strong{mapcar}} operates on successive
@uref{glo_e.html#element,@emph{elements}} of the @emph{lists}.
@emph{function} is applied to the first
@uref{glo_e.html#element,@emph{element}} of each @emph{list}, then to
the second @uref{glo_e.html#element,@emph{element}} of each @emph{list},
and so on. The iteration terminates when the shortest @emph{list} runs
out, and excess elements in other lists are ignored. The value returned
by @ref{#mapcar,@strong{mapcar}} is a @uref{glo_l.html#list,@emph{list}}
of the results of successive calls to @emph{function}.

@ref{#mapc,@strong{mapc}} is like @ref{#mapcar,@strong{mapcar}} except
that the results of applying @emph{function} are not accumulated. The
@emph{list} argument is returned.

@ref{#maplist,@strong{maplist}} is like @ref{#mapcar,@strong{mapcar}}
except that @emph{function} is applied to successive sublists of the
@emph{lists}. @emph{function} is first applied to the @emph{lists}
themselves, and then to the @uref{glo_c.html#cdr,@emph{cdr}} of each
@emph{list}, and then to the @uref{glo_c.html#cdr,@emph{cdr}} of the
@uref{glo_c.html#cdr,@emph{cdr}} of each @emph{list}, and so on.

@ref{#mapl,@strong{mapl}} is like @ref{#maplist,@strong{maplist}} except
that the results of applying @emph{function} are not accumulated;
@emph{list-1} is returned.

@ref{#mapcan,@strong{mapcan}} and @ref{#mapcon,@strong{mapcon}} are like
@ref{#mapcar,@strong{mapcar}} and @ref{#maplist,@strong{maplist}}
respectively, except that the results of applying @emph{function} are
combined into a @uref{glo_l.html#list,@emph{list}} by the use of
@uref{fun_nconc.html#nconc,@strong{nconc}} rather than
@uref{fun_listcm_listst.html#list,@strong{list}}. That is,

@verbatim
 (mapcon f x1 ... xn)
   ==  (apply #'nconc (maplist f x1 ... xn))
@end verbatim

and similarly for the relationship between @ref{#mapcan,@strong{mapcan}}
and @ref{#mapcar,@strong{mapcar}}.

@strong{Examples:}

@verbatim
 (mapcar #'car '((1 a) (2 b) (3 c))) =>  (1 2 3) 
 (mapcar #'abs '(3 -4 2 -5 -6)) =>  (3 4 2 5 6)
 (mapcar #'cons '(a b c) '(1 2 3)) =>  ((A . 1) (B . 2) (C . 3))

 (maplist #'append '(1 2 3 4) '(1 2) '(1 2 3)) 
=>  ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)) 
 (maplist #'(lambda (x) (cons 'foo x)) '(a b c d))
=>  ((FOO A B C D) (FOO B C D) (FOO C D) (FOO D))
 (maplist #'(lambda (x) (if (member (car x) (cdr x)) 0 1)) '(a b a c d b c))
=>  (0 0 1 0 1 1 1)
;An entry is 1 if the corresponding element of the input
;  list was the last instance of that element in the input list.

 (setq dummy nil) =>  NIL 
 (mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)) =>  (1 2 3 4) 
 dummy =>  (1 A X 2 B Y 3 C Z)                   

 (setq dummy nil) =>  NIL 
 (mapl #'(lambda (x) (push x dummy)) '(1 2 3 4)) =>  (1 2 3 4) 
 dummy =>  ((4) (3 4) (2 3 4) (1 2 3 4)) 

 (mapcan #'(lambda (x y) (if (null x) nil (list x y)))
          '(nil nil nil d e)
          '(1 2 3 4 5 6)) =>  (D 4 E 5) 
 (mapcan #'(lambda (x) (and (numberp x) (list x)))
          '(a 1 b c 3 4 d 5))
=>  (1 3 4 5)
@end verbatim

In this case the function serves as a filter; this is a standard Lisp
idiom using @ref{#mapcan,@strong{mapcan}}.

@verbatim
 (mapcon #'list '(1 2 3 4)) =>  ((1 2 3 4) (2 3 4) (3 4) (4)) 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{See Also:}

@uref{mac_dolist.html#dolist,@strong{dolist}},
@uref{fun_map.html#map,@strong{map}}, @uref{sec_3-6.html,Section 3.6
(Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MEMBER MEMBER-IF MEMBER-IF-NOT
@subsubsection CLHS: Function MEMBER, MEMBER-IF, MEMBER-IF-NOT
@anchor{#clhs-function-member-member-if-member-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_rest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_mapccm_ma_istcm_mapcon.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MEMBER, MEMBER-IF, MEMBER-IF-NOT}

@strong{Syntax:}

@strong{member} @emph{item list &key key test test-not} => @emph{tail}

@strong{member-if} @emph{predicate list &key key} => @emph{tail}

@strong{member-if-not} @emph{predicate list &key key} => @emph{tail}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{tail}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#member,@strong{member}}, @ref{#member-if,@strong{member-if}}, and
@ref{#member-if-not,@strong{member-if-not}} each search @emph{list} for
@emph{item} or for a top-level element that @emph{satisfies the test}.
The argument to the @emph{predicate} function is an element of
@emph{list}.

If some element @emph{satisfies the test}, the tail of @emph{list}
beginning with this element is returned; otherwise
@uref{any_nil.html#nil,@strong{nil}} is returned.

@emph{list} is searched on the top level only.

@strong{Examples:}

@verbatim
 (member 2 '(1 2 3)) =>  (2 3)                                 
 (member 2 '((1 . 2) (3 . 4)) :test-not #'= :key #'cdr) =>  ((3 . 4))
 (member 'e '(a b c d)) =>  NIL
@end verbatim

@verbatim
 (member-if #'listp '(a b nil c d)) =>  (NIL C D)
 (member-if #'numberp '(a #\Space 5/3 foo)) =>  (5/3 FOO)
 (member-if-not #'zerop 
                 '(3 6 9 11 . 12)
                 :key #'(lambda (x) (mod x 3))) =>  (11 . 12)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list} is not a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{See Also:}

@uref{fun_findcm_fi__find-if-not.html#find,@strong{find}},
@uref{fun_positionc_ition-if-not.html#position,@strong{position}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#member-if-not,@strong{member-if-not}} is deprecated.

In the following

@verbatim
 (member 'a '(g (a y) c a d e a f)) =>  (A D E A F)
@end verbatim

the value returned by @ref{#member,@strong{member}} is
@uref{glo_i.html#identical,@emph{identical}} to the portion of the
@uref{glo_l.html#list,@emph{list}} beginning with a. Thus
@uref{fun_rplacacm_rplacd.html#rplaca,@strong{rplaca}} on the result of
@ref{#member,@strong{member}} can be used to alter the part of the
@uref{glo_l.html#list,@emph{list}} where a was found (assuming a check
has been made that @ref{#member,@strong{member}} did not return
@uref{any_nil.html#nil,@strong{nil}}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NCONC
@subsubsection CLHS: Function NCONC
@anchor{#clhs-function-nconc}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_null.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_append.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NCONC}

@strong{Syntax:}

@strong{nconc} @emph{&rest lists} => @emph{concatenated-list}

@strong{Arguments and Values:}

@emph{list}---each but the last must be a
@uref{glo_l.html#list,@emph{list}} (which might be a @emph{dotted list}
but must not be a @uref{glo_c.html#circular_list,@emph{circular list}});
the last @emph{list} may be any @uref{glo_o.html#object,@emph{object}}.

@emph{concatenated-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} that is the concatenation
of @emph{lists}. If no @emph{lists} are supplied, (nconc) returns
@uref{any_nil.html#nil,@strong{nil}}. @ref{#nconc,@strong{nconc}} is
defined using the following recursive relationship:

@verbatim
 (nconc) =>  ()
 (nconc nil . lists) ==  (nconc . lists)
 (nconc list) =>  list
 (nconc list-1 list-2) ==  (progn (rplacd (last list-1) list-2) list-1)
 (nconc list-1 list-2 . lists) ==  (nconc (nconc list-1 list-2) . lists)
@end verbatim

@strong{Examples:}

@verbatim
 (nconc) =>  NIL
 (setq x '(a b c)) =>  (A B C)
 (setq y '(d e f)) =>  (D E F)
 (nconc x y) =>  (A B C D E F)
 x =>  (A B C D E F)
@end verbatim

Note, in the example, that the value of x is now different, since its
last @uref{glo_c.html#cons,@emph{cons}} has been
@uref{fun_rplacacm_rplacd.html#rplacd,@strong{rplacd}}'d to the value of
y. If (nconc x y) were evaluated again, it would yield a piece of a
@uref{glo_c.html#circular_list,@emph{circular list}}, whose printed
representation would be (A B C D E F D E F D E F ...), repeating
forever; if the
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
switch were @uref{glo_n.html#non-nil,@emph{non-nil}}, it would be
printed as (A B C . #1=(D E F . #1#)).

@verbatim
 (setq foo (list 'a 'b 'c 'd 'e)
       bar (list 'f 'g 'h 'i 'j)
       baz (list 'k 'l 'm)) =>  (K L M)
 (setq foo (nconc foo bar baz)) =>  (A B C D E F G H I J K L M)
 foo =>  (A B C D E F G H I J K L M)
 bar =>  (F G H I J K L M)
 baz =>  (K L M)

 (setq foo (list 'a 'b 'c 'd 'e)
       bar (list 'f 'g 'h 'i 'j)
       baz (list 'k 'l 'm)) =>  (K L M)
 (setq foo (nconc nil foo bar nil baz)) =>  (A B C D E F G H I J K L M) 
 foo =>  (A B C D E F G H I J K L M)
 bar =>  (F G H I J K L M)
 baz =>  (K L M)
@end verbatim

@strong{Side Effects:}

The @emph{lists} are modified rather than copied.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_append.html#append,@strong{append}},
@uref{fun_concatenate.html#concatenate,@strong{concatenate}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NTHCDR
@subsubsection CLHS: Function NTHCDR
@anchor{#clhs-function-nthcdr}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ldiffcm_tailp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_rest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NTHCDR}

@strong{Syntax:}

@strong{nthcdr} @emph{n list} => @emph{tail}

@strong{Arguments and Values:}

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{list}---a @uref{glo_l.html#list,@emph{list}}, which might be a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or a
@uref{glo_c.html#circular_list,@emph{circular list}}.

@emph{tail}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns the @uref{glo_t.html#tail,@emph{tail}} of @emph{list} that would
be obtained by calling
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}} @emph{n} times
in succession.

@strong{Examples:}

@verbatim
 (nthcdr 0 '()) =>  NIL
 (nthcdr 3 '()) =>  NIL
 (nthcdr 0 '(a b c)) =>  (A B C)
 (nthcdr 2 '(a b c)) =>  (C)
 (nthcdr 4 '(a b c)) =>  ()
 (nthcdr 1 '(0 . 1)) =>  1

 (locally (declare (optimize (safety 3)))
   (nthcdr 3 '(0 . 1)))
 Error: Attempted to take CDR of 1.
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if @emph{n}
is not a non-negative @uref{glo_i.html#integer,@emph{integer}}.

For @emph{n} being an integer greater than 1, the error checking done by
(nthcdr @emph{n} @emph{list}) is the same as for (nthcdr (- @emph{n} 1)
(cdr @emph{list})); see the @uref{glo_f.html#function,@emph{function}}
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}.

@strong{See Also:}

@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}},
@uref{acc_nth.html#nth,@strong{nth}},
@uref{acc_rest.html#rest,@strong{rest}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NULL
@subsubsection CLHS: Function NULL
@anchor{#clhs-function-null}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_endp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_nconc.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NULL}

@strong{Syntax:}

@strong{null} @emph{object} => @emph{boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{boolean}---a @uref{glo_b.html#boolean,@emph{boolean}}.

@strong{Description:}

Returns @uref{any_t.html#t,@strong{t}} if @emph{object} is the
@uref{glo_e.html#empty_list,@emph{empty list}}; otherwise, returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (null '()) =>  T
 (null nil) =>  T
 (null t) =>  NIL
 (null 1) =>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_not.html#not,@strong{not}}

@strong{Notes:}

@ref{#null,@strong{null}} is intended to be used to test for the
@uref{glo_e.html#empty_list,@emph{empty list}} whereas
@uref{fun_not.html#not,@strong{not}} is intended to be used to invert a
@uref{glo_b.html#boolean,@emph{boolean}} (or
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}).
Operationally, @ref{#null,@strong{null}} and
@uref{fun_not.html#not,@strong{not}} compute the same result; which to
use is a matter of style.

@verbatim
 (null object) ==  (typep object 'null) ==  (eq object '())
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss249.html,NOT-AND-NULL-RETURN-VALUE:X3J13-MAR-93}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PAIRLIS
@subsubsection CLHS: Function PAIRLIS
@anchor{#clhs-function-pairlis}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-alist.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rassoccm__assoc-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PAIRLIS}

@strong{Syntax:}

@strong{pairlis} @emph{keys data &optional alist} => @emph{new-alist}

@strong{Arguments and Values:}

@emph{keys}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{data}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}. The default is the @uref{glo_e.html#empty_list,@emph{empty
list}}.

@emph{new-alist}---an
@uref{glo_a.html#association_list,@emph{association list}}.

@strong{Description:}

Returns an @uref{glo_a.html#association_list,@emph{association list}}
that associates elements of @emph{keys} to corresponding elements of
@emph{data}. The consequences are undefined if @emph{keys} and
@emph{data} are not of the same @uref{glo_l.html#length,@emph{length}}.

If @emph{alist} is supplied, @ref{#pairlis,@strong{pairlis}} returns a
modified @emph{alist} with the new pairs prepended to it. The new pairs
may appear in the resulting
@uref{glo_a.html#association_list,@emph{association list}} in either
forward or backward order. The result of

@verbatim
 (pairlis '(one two) '(1 2) '((three . 3) (four . 19)))
@end verbatim

might be

@verbatim
 ((one . 1) (two . 2) (three . 3) (four . 19))
@end verbatim

or

@verbatim
 ((two . 2) (one . 1) (three . 3) (four . 19))
@end verbatim

@strong{Examples:}

@verbatim
 (setq keys '(1 2 3)
        data '("one" "two" "three")
        alist '((4 . "four"))) =>  ((4 . "four"))
 (pairlis keys data) =>  ((3 . "three") (2 . "two") (1 . "one"))
 (pairlis keys data alist)
=>  ((3 . "three") (2 . "two") (1 . "one") (4 . "four"))
 alist =>  ((4 . "four"))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{keys} and @emph{data} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{fun_acons.html#acons,@strong{acons}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RASSOC RASSOC-IF RASSOC-IF-NOT
@subsubsection CLHS: Function RASSOC, RASSOC-IF, RASSOC-IF-NOT
@anchor{#clhs-function-rassoc-rassoc-if-rassoc-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pairlis.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-properties.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RASSOC, RASSOC-IF, RASSOC-IF-NOT}

@strong{Syntax:}

@strong{rassoc} @emph{item alist &key key test test-not} => @emph{entry}

@strong{rassoc-if} @emph{predicate alist &key key} => @emph{entry}

@strong{rassoc-if-not} @emph{predicate alist &key key} => @emph{entry}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{entry}---a @uref{glo_c.html#cons,@emph{cons}} that is an
@uref{glo_e.html#element,@emph{element}} of the @emph{alist}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#rassoc,@strong{rassoc}}, @ref{#rassoc-if,@strong{rassoc-if}}, and
@ref{#rassoc-if-not,@strong{rassoc-if-not}} return the first
@uref{glo_c.html#cons,@emph{cons}} whose
@uref{glo_c.html#cdr,@emph{cdr}} @emph{satisfies the test}. If no such
@uref{glo_c.html#cons,@emph{cons}} is found,
@uref{any_nil.html#nil,@strong{nil}} s returned.

If @uref{any_nil.html#nil,@strong{nil}} appears in @emph{alist} in place
of a pair, it is ignored.

@strong{Examples:}

@verbatim
 (setq alist '((1 . "one") (2 . "two") (3 . 3))) 
=>  ((1 . "one") (2 . "two") (3 . 3))
 (rassoc 3 alist) =>  (3 . 3)
 (rassoc "two" alist) =>  NIL
 (rassoc "two" alist :test 'equal) =>  (2 . "two")
 (rassoc 1 alist :key #'(lambda (x) (if (numberp x) (/ x 3)))) =>  (3 . 3)
 (rassoc 'a '((a . b) (b . c) (c . a) (z . a))) =>  (C . A)
 (rassoc-if #'stringp alist) =>  (1 . "one")
 (rassoc-if-not #'vectorp alist) =>  (3 . 3)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_assoccm_a_assoc-if-not.html#assoc,@strong{assoc}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#rassoc-if-not,@strong{rassoc-if-not}} is deprecated.

It is possible to @uref{fun_rplacacm_rplacd.html#rplaca,@strong{rplaca}}
the result of @ref{#rassoc,@strong{rassoc}}, provided that it is not
@uref{any_nil.html#nil,@strong{nil}}, in order to ``update''
@emph{alist}.

The expressions

@verbatim
 (rassoc item list :test fn)
@end verbatim

and

@verbatim
 (find item list :test fn :key #'cdr)
@end verbatim

are equivalent in meaning, except when the item is
@uref{any_nil.html#nil,@strong{nil}} nd
@uref{any_nil.html#nil,@strong{nil}} appears in place of a pair in the
@emph{alist}. See the @uref{glo_f.html#function,@emph{function}}
@uref{fun_assoccm_a_assoc-if-not.html#assoc,@strong{assoc}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss017.html,ASSOC-RASSOC-IF-KEY}
@item
@uref{../Issues/iss018.html,ASSOC-RASSOC-IF-KEY:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REVAPPEND NRECONC
@subsubsection CLHS: Function REVAPPEND, NRECONC
@anchor{#clhs-function-revappend-nreconc}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_append.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_butlastcm_nbutlast.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REVAPPEND, NRECONC}

@strong{Syntax:}

@strong{revappend} @emph{list tail} => @emph{result-list}

@strong{nreconc} @emph{list tail} => @emph{result-list}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{tail}---an @uref{glo_o.html#object,@emph{object}}.

@emph{result-list}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#revappend,@strong{revappend}} constructs a
@uref{glo_c.html#copy,@emph{copy}}[2] of @emph{list}, but with the
@uref{glo_e.html#element,@emph{elements}} in reverse order. It then
appends (as if by @uref{fun_nconc.html#nconc,@strong{nconc}}) the
@emph{tail} to that reversed list and returns the result.

@ref{#nreconc,@strong{nreconc}} reverses the order of
@uref{glo_e.html#element,@emph{elements}} in @emph{list} (as if by
@uref{fun_reversecm_nreverse.html#nreverse,@strong{nreverse}}). It then
appends (as if by @uref{fun_nconc.html#nconc,@strong{nconc}}) the
@emph{tail} to that reversed list and returns the result.

The resulting @uref{glo_l.html#list,@emph{list}} shares
@uref{glo_l.html#list_structure,@emph{list structure}} with @emph{tail}.

@strong{Examples:}

@verbatim
 (let ((list-1 (list 1 2 3))
       (list-2 (list 'a 'b 'c)))
   (print (revappend list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
>>  (3 2 1 A B C) 
>>  T
>>  T
=>  T

 (revappend '(1 2 3) '()) =>  (3 2 1)
 (revappend '(1 2 3) '(a . b)) =>  (3 2 1 A . B)
 (revappend '() '(a b c)) =>  (A B C)
 (revappend '(1 2 3) 'a) =>  (3 2 1 . A)
 (revappend '() 'a) =>  A   ;degenerate case

 (let ((list-1 '(1 2 3))
       (list-2 '(a b c)))
   (print (nreconc list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
>>  (3 2 1 A B C) 
>>  NIL
>>  T
=>  T
@end verbatim

@strong{Side Effects:}

@ref{#revappend,@strong{revappend}} does not modify either of its
@uref{glo_a.html#argument,@emph{arguments}}.
@ref{#nreconc,@strong{nreconc}} is permitted to modify @emph{list} but
not @emph{tail}.

Although it might be implemented differently,
@ref{#nreconc,@strong{nreconc}} is constrained to have side-effect
behavior equivalent to:

@verbatim
 (nconc (nreverse list) tail)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_reversecm_nreverse.html#reverse,@strong{reverse}},
@uref{fun_reversecm_nreverse.html#nreverse,@strong{nreverse}},
@uref{fun_nconc.html#nconc,@strong{nconc}}

@strong{Notes:}

The following functional equivalences are true, although good
@uref{glo_i.html#implementation,@emph{implementations}} will typically
use a faster algorithm for achieving the same effect:

@verbatim
 (revappend list tail) ==  (nconc (reverse list) tail)
 (nreconc list tail) ==  (nconc (nreverse list) tail)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RPLACA RPLACD
@subsubsection CLHS: Function RPLACA, RPLACD
@anchor{#clhs-function-rplaca-rplacd}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_atom.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_carcm_cdr_darcm_cddddr.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RPLACA, RPLACD}

@strong{Syntax:}

@strong{rplaca} @emph{cons object} => @emph{cons}

@strong{rplacd} @emph{cons object} => @emph{cons}

@strong{Pronunciation:}

@ref{#rplaca,@strong{rplaca}}: [,ree'plakuh] or [,ruh'plakuh]

@ref{#rplacd,@strong{rplacd}}: [,ree'plakduh] or [,ruh'plakduh] or
[,ree'plakdee] or [,ruh'plakdee]

@strong{Arguments and Values:}

@emph{cons}---a @uref{glo_c.html#cons,@emph{cons}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#rplaca,@strong{rplaca}} replaces the
@uref{glo_c.html#car,@emph{car}} of the @emph{cons} with @emph{object}.

@ref{#rplacd,@strong{rplacd}} replaces the
@uref{glo_c.html#cdr,@emph{cdr}} of the @emph{cons} with @emph{object}.

@strong{Examples:}

@verbatim
 (defparameter *some-list* (list* 'one 'two 'three 'four)) =>  *some-list*
 *some-list* =>  (ONE TWO THREE . FOUR)
 (rplaca *some-list* 'uno) =>  (UNO TWO THREE . FOUR)
 *some-list* =>  (UNO TWO THREE . FOUR)
 (rplacd (last *some-list*) (list 'IV)) =>  (THREE IV)
 *some-list* =>  (UNO TWO THREE IV)
@end verbatim

@strong{Side Effects:}

The @emph{cons} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{cons} is not a @uref{glo_c.html#cons,@emph{cons}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-DIFFERENCE NSET-DIFFERENCE
@subsubsection CLHS: Function SET-DIFFERENCE, NSET-DIFFERENCE
@anchor{#clhs-function-set-difference-nset-difference}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_pushnew.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-exclu_exclusive-or.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-DIFFERENCE, NSET-DIFFERENCE}

@strong{Syntax:}

@strong{set-difference} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{nset-difference} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{Arguments and Values:}

@emph{list-1}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-2}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#set-difference,@strong{set-difference}} returns a
@uref{glo_l.html#list,@emph{list}} of elements of @emph{list-1} that do
not appear in @emph{list-2}.

@ref{#nset-difference,@strong{nset-difference}} is the destructive
version of @ref{#set-difference,@strong{set-difference}}. It may destroy
@emph{list-1}.

For all possible ordered pairs consisting of one element from
@emph{list-1} and one element from @emph{list-2}, the :test or :test-not
function is used to determine whether they
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}. The first
argument to the :test or :test-not function is the part of an element of
@emph{list-1} that is returned by the :key function (if supplied); the
second argument is the part of an element of @emph{list-2} that is
returned by the :key function (if supplied).

If :key is supplied, its argument is a @emph{list-1} or @emph{list-2}
element. The :key function typically returns part of the supplied
element. If :key is not supplied, the @emph{list-1} or @emph{list-2}
element is used.

An element of @emph{list-1} appears in the result if and only if it does
not match any element of @emph{list-2}.

There is no guarantee that the order of elements in the result will
reflect the ordering of the arguments in any particular way. The result
@uref{glo_l.html#list,@emph{list}} may share cells with, or be
@uref{fun_eq.html#eq,@strong{eq}} to, either of @emph{list-1} or
@emph{list-2}, if appropriate.

@strong{Examples:}

@verbatim
 (setq lst1 (list "A" "b" "C" "d")
       lst2 (list "a" "B" "C" "d")) =>  ("a" "B" "C" "d")
 (set-difference lst1 lst2) =>  ("d" "C" "b" "A")
 (set-difference lst1 lst2 :test 'equal) =>  ("b" "A")
 (set-difference lst1 lst2 :test #'equalp) =>  NIL 
 (nset-difference lst1 lst2 :test #'string=) =>  ("A" "b")
 (setq lst1 '(("a" . "b") ("c" . "d") ("e" . "f")))
=>  (("a" . "b") ("c" . "d") ("e" . "f")) 
 (setq lst2 '(("c" . "a") ("e" . "b") ("d" . "a")))
=>  (("c" . "a") ("e" . "b") ("d" . "a")) 
 (nset-difference lst1 lst2 :test #'string= :key #'cdr)
=>  (("c" . "d") ("e" . "f")) 
 lst1 =>  (("a" . "b") ("c" . "d") ("e" . "f")) 
 lst2 =>  (("c" . "a") ("e" . "b") ("d" . "a")) 
@end verbatim

@verbatim
;; Remove all flavor names that contain "c" or "w".
 (set-difference '("strawberry" "chocolate" "banana"
                  "lemon" "pistachio" "rhubarb")
          '(#\c #\w)
          :test #'(lambda (s c) (find c s)))
=>  ("banana" "rhubarb" "lemon")    ;One possible ordering.
@end verbatim

@strong{Side Effects:}

@ref{#nset-difference,@strong{nset-difference}} may destroy
@emph{list-1}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list-1} and @emph{list-2} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-EXCLUSIVE-OR NSET-EXCLUSIVE-OR
@subsubsection CLHS: Function SET-EXCLUSIVE-OR, NSET-EXCLUSIVE-OR
@anchor{#clhs-function-set-exclusive-or-nset-exclusive-or}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-diffe_t-difference.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_subsetp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-EXCLUSIVE-OR, NSET-EXCLUSIVE-OR}

@strong{Syntax:}

@strong{set-exclusive-or} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{nset-exclusive-or} @emph{list-1 list-2 &key key test test-not}
=> @emph{result-list}

@strong{Arguments and Values:}

@emph{list-1}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-2}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#set-exclusive-or,@strong{set-exclusive-or}} returns a
@uref{glo_l.html#list,@emph{list}} of elements that appear in exactly
one of @emph{list-1} and @emph{list-2}.

@ref{#nset-exclusive-or,@strong{nset-exclusive-or}} is the
@uref{glo_d.html#destructive,@emph{destructive}} version of
@ref{#set-exclusive-or,@strong{set-exclusive-or}}.

For all possible ordered pairs consisting of one element from
@emph{list-1} and one element from @emph{list-2}, the :test or :test-not
function is used to determine whether they
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}.

If :key is supplied, it is used to extract the part to be tested from
the @emph{list-1} or @emph{list-2} element. The first argument to the
:test or :test-not function is the part of an element of @emph{list-1}
extracted by the :key function (if supplied); the second argument is the
part of an element of @emph{list-2} extracted by the :key function (if
supplied). If :key is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the @emph{list-1} or @emph{list-2}
element is used.

The result contains precisely those elements of @emph{list-1} and
@emph{list-2} that appear in no matching pair.

The result @uref{glo_l.html#list,@emph{list}} of
@ref{#set-exclusive-or,@strong{set-exclusive-or}} might share storage
with one of @emph{list-1} or @emph{list-2}.

@strong{Examples:}

@verbatim
 (setq lst1 (list 1 "a" "b")
       lst2 (list 1 "A" "b")) =>  (1 "A" "b")
 (set-exclusive-or lst1 lst2) =>  ("b" "A" "b" "a")
 (set-exclusive-or lst1 lst2 :test #'equal) =>  ("A" "a")
 (set-exclusive-or lst1 lst2 :test 'equalp) =>  NIL 
 (nset-exclusive-or lst1 lst2) =>  ("a" "b" "A" "b") 
 (setq lst1 (list (("a" . "b") ("c" . "d") ("e" . "f"))))
=>  (("a" . "b") ("c" . "d") ("e" . "f"))
 (setq lst2 (list (("c" . "a") ("e" . "b") ("d" . "a"))))
=>  (("c" . "a") ("e" . "b") ("d" . "a")) 
 (nset-exclusive-or lst1 lst2 :test #'string= :key #'cdr)
=>  (("c" . "d") ("e" . "f") ("c" . "a") ("d" . "a")) 
 lst1 =>  (("a" . "b") ("c" . "d") ("e" . "f"))
 lst2 =>  (("c" . "a") ("d" . "a")) 
@end verbatim

@strong{Side Effects:}

@ref{#nset-exclusive-or,@strong{nset-exclusive-or}} is permitted to
modify any part, @uref{glo_c.html#car,@emph{car}} or
@uref{glo_c.html#cdr,@emph{cdr}}, of the
@uref{glo_l.html#list_structure,@emph{list structure}} of @emph{list-1}
or @emph{list-2}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list-1} and @emph{list-2} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

Since the @ref{#nset-exclusive-or,@strong{nset-exclusive-or}} side
effect is not required, it should not be used in for-effect-only
positions in portable code.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SUBLIS NSUBLIS
@subsubsection CLHS: Function SUBLIS, NSUBLIS
@anchor{#clhs-function-sublis-nsublis}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-tree.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_substcm_s_subst-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SUBLIS, NSUBLIS}

@strong{Syntax:}

@strong{sublis} @emph{alist tree &key key test test-not} =>
@emph{new-tree}

@strong{nsublis} @emph{alist tree &key key test test-not} =>
@emph{new-tree}

@strong{Arguments and Values:}

@emph{alist}---an @uref{glo_a.html#association_list,@emph{association
list}}.

@emph{tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@strong{Description:}

@ref{#sublis,@strong{sublis}} makes substitutions for
@uref{glo_o.html#object,@emph{objects}} in @emph{tree} (a structure of
@uref{glo_c.html#cons,@emph{conses}}). @ref{#nsublis,@strong{nsublis}}
is like @ref{#sublis,@strong{sublis}} but destructively modifies the
relevant parts of the @emph{tree}.

@ref{#sublis,@strong{sublis}} looks at all subtrees and leaves of
@emph{tree}; if a subtree or leaf appears as a key in @emph{alist} (that
is, the key and the subtree or leaf
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}), it is
replaced by the @uref{glo_o.html#object,@emph{object}} with which that
key is associated. This operation is non-destructive. In effect,
@ref{#sublis,@strong{sublis}} can perform several
@uref{fun_substcm_s_subst-if-not.html#subst,@strong{subst}} operations
simultaneously.

If @ref{#sublis,@strong{sublis}} succeeds, a new copy of @emph{tree} is
returned in which each occurrence of such a subtree or leaf is replaced
by the @uref{glo_o.html#object,@emph{object}} with which it is
associated. If no changes are made, the original tree is returned. The
original @emph{tree} is left unchanged, but the result tree may share
cells with it.

@ref{#nsublis,@strong{nsublis}} is permitted to modify @emph{tree} but
otherwise returns the same values as @ref{#sublis,@strong{sublis}}.

@strong{Examples:}

@verbatim
 (sublis '((x . 100) (z . zprime))
         '(plus x (minus g z x p) 4 . x))
=>  (PLUS 100 (MINUS G ZPRIME 100 P) 4 . 100)
 (sublis '(((+ x y) . (- x y)) ((- x y) . (+ x y)))
         '(* (/ (+ x y) (+ x p)) (- x y))
         :test #'equal)
=>  (* (/ (- X Y) (+ X P)) (+ X Y))
 (setq tree1 '(1 (1 2) ((1 2 3)) (((1 2 3 4)))))
=>  (1 (1 2) ((1 2 3)) (((1 2 3 4))))
 (sublis '((3 . "three")) tree1) 
=>  (1 (1 2) ((1 2 "three")) (((1 2 "three" 4))))
 (sublis '((t . "string"))
          (sublis '((1 . "") (4 . 44)) tree1)
          :key #'stringp)
=>  ("string" ("string" 2) (("string" 2 3)) ((("string" 2 3 44))))
 tree1 =>  (1 (1 2) ((1 2 3)) (((1 2 3 4))))
 (setq tree2 '("one" ("one" "two") (("one" "Two" "three"))))
=>  ("one" ("one" "two") (("one" "Two" "three"))) 
 (sublis '(("two" . 2)) tree2) 
=>  ("one" ("one" "two") (("one" "Two" "three"))) 
 tree2 =>  ("one" ("one" "two") (("one" "Two" "three"))) 
 (sublis '(("two" . 2)) tree2 :test 'equal) 
=>  ("one" ("one" 2) (("one" "Two" "three"))) 

 (nsublis '((t . 'temp))
           tree1
           :key #'(lambda (x) (or (atom x) (< (list-length x) 3))))
=>  ((QUOTE TEMP) (QUOTE TEMP) QUOTE TEMP) 
@end verbatim

@strong{Side Effects:}

@ref{#nsublis,@strong{nsublis}} modifies @emph{tree}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_substcm_s_subst-if-not.html#subst,@strong{subst}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

Because the side-effecting variants (e.g.,
@ref{#nsublis,@strong{nsublis}}) potentially change the path that is
being traversed, their effects in the presence of shared or circular
structure structure may vary in surprising ways when compared to their
non-side-effecting alternatives. To see this, consider the following
side-effect behavior, which might be exhibited by some implementations:

@verbatim
 (defun test-it (fn)
   (let* ((shared-piece (list 'a 'b))
          (data (list shared-piece shared-piece)))
     (funcall fn '((a . b) (b . a)) data)))
 (test-it #'sublis) =>  ((B A) (B A))
 (test-it #'nsublis) =>  ((A B) (A B))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SUBSETP
@subsubsection CLHS: Function SUBSETP
@anchor{#clhs-function-subsetp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-exclu_exclusive-or.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unioncm_nunion.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SUBSETP}

@strong{Syntax:}

@strong{subsetp} @emph{list-1 list-2 &key key test test-not} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{list-1}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-2}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#subsetp,@strong{subsetp}} returns
@uref{glo_t.html#true,@emph{true}} if every element of @emph{list-1}
@emph{matches} some element of @emph{list-2}, and
@uref{glo_f.html#false,@emph{false}} otherwise.

Whether a list element is the same as another list element is determined
by the functions specified by the keyword arguments. The first argument
to the :test or :test-not function is typically part of an element of
@emph{list-1} extracted by the :key function; the second argument is
typically part of an element of @emph{list-2} extracted by the :key
function.

The argument to the :key function is an element of either @emph{list-1}
or @emph{list-2}; the return value is part of the element of the
supplied list element. If :key is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the @emph{list-1} or @emph{list-2}
element itself is supplied to the :test or :test-not function.

@strong{Examples:}

@verbatim
 (setq cosmos '(1 "a" (1 2))) =>  (1 "a" (1 2))
 (subsetp '(1) cosmos) =>  true
 (subsetp '((1 2)) cosmos) =>  false
 (subsetp '((1 2)) cosmos :test 'equal) =>  true
 (subsetp '(1 "A") cosmos :test #'equalp) =>  true
 (subsetp '((1) (2)) '((1) (2))) =>  false
 (subsetp '((1) (2)) '((1) (2)) :key #'car) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list-1} and @emph{list-2} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SUBST SUBST-IF SUBST-IF-NOT
@subsubsection CLHS: Function SUBST, SUBST-IF, SUBST-IF-NOT...
@anchor{#clhs-function-subst-subst-if-subst-if-not...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_subliscm_nsublis.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_tree-equal.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SUBST, SUBST-IF, SUBST-IF-NOT, NSUBST,
NSUBST-IF, NSUBST-IF-NOT}

@strong{Syntax:}

@strong{subst} @emph{new old tree &key key test test-not} =>
@emph{new-tree}

@strong{subst-if} @emph{new predicate tree &key key} => @emph{new-tree}

@strong{subst-if-not} @emph{new predicate tree &key key} =>
@emph{new-tree}

@strong{nsubst} @emph{new old tree &key key test test-not} =>
@emph{new-tree}

@strong{nsubst-if} @emph{new predicate tree &key key} => @emph{new-tree}

@strong{nsubst-if-not} @emph{new predicate tree &key key} =>
@emph{new-tree}

@strong{Arguments and Values:}

@emph{new}---an @uref{glo_o.html#object,@emph{object}}.

@emph{old}---an @uref{glo_o.html#object,@emph{object}}.

@emph{predicate}---a @uref{glo_s.html#symbol,@emph{symbol}} that names a
@uref{glo_f.html#function,@emph{function}}, or a
@uref{glo_f.html#function,@emph{function}} of one argument that returns
a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}
value.

@emph{tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-tree}---a @uref{glo_t.html#tree,@emph{tree}}.

@strong{Description:}

@ref{#subst,@strong{subst}}, @ref{#subst-if,@strong{subst-if}}, and
@ref{#subst-if-not,@strong{subst-if-not}} perform substitution
operations on @emph{tree}. Each function searches @emph{tree} for
occurrences of a particular @emph{old} item of an element or
subexpression that @emph{satisfies the test}.

@ref{#nsubst,@strong{nsubst}}, @ref{#nsubst-if,@strong{nsubst-if}}, and
@ref{#nsubst-if-not,@strong{nsubst-if-not}} are like
@ref{#subst,@strong{subst}}, @ref{#subst-if,@strong{subst-if}}, and
@ref{#subst-if-not,@strong{subst-if-not}} respectively, except that the
original @emph{tree} is modified.

@ref{#subst,@strong{subst}} makes a copy of @emph{tree}, substituting
@emph{new} for every subtree or leaf of @emph{tree} (whether the subtree
or leaf is a @uref{glo_c.html#car,@emph{car}} or a
@uref{glo_c.html#cdr,@emph{cdr}} of its parent) such that @emph{old} and
the subtree or leaf @uref{glo_s.html#satisfy_the_test,@emph{satisfy the
test}}.

@ref{#nsubst,@strong{nsubst}} is a destructive version of
@ref{#subst,@strong{subst}}. The list structure of @emph{tree} is
altered by destructively replacing with @emph{new} each leaf of the
@emph{tree} such that @emph{old} and the leaf
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}.

For @ref{#subst,@strong{subst}}, @ref{#subst-if,@strong{subst-if}}, and
@ref{#subst-if-not,@strong{subst-if-not}}, if the functions succeed, a
new copy of the tree is returned in which each occurrence of such an
element is replaced by the @emph{new} element or subexpression. If no
changes are made, the original @emph{tree} may be returned. The original
@emph{tree} is left unchanged, but the result tree may share storage
with it.

For @ref{#nsubst,@strong{nsubst}}, @ref{#nsubst-if,@strong{nsubst-if}},
and @ref{#nsubst-if-not,@strong{nsubst-if-not}} the original @emph{tree}
is modified and returned as the function result, but the result may not
be @uref{fun_eq.html#eq,@strong{eq}} to @emph{tree}.

@strong{Examples:}

@verbatim
 (setq tree1 '(1 (1 2) (1 2 3) (1 2 3 4))) =>  (1 (1 2) (1 2 3) (1 2 3 4))
 (subst "two" 2 tree1) =>  (1 (1 "two") (1 "two" 3) (1 "two" 3 4))
 (subst "five" 5 tree1) =>  (1 (1 2) (1 2 3) (1 2 3 4))
 (eq tree1 (subst "five" 5 tree1)) =>  implementation-dependent
 (subst 'tempest 'hurricane
        '(shakespeare wrote (the hurricane)))
=>  (SHAKESPEARE WROTE (THE TEMPEST))
 (subst 'foo 'nil '(shakespeare wrote (twelfth night)))
=>  (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
 (subst '(a . cons) '(old . pair)
        '((old . spice) ((old . shoes) old . pair) (old . pair))
        :test #'equal)
=>  ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))

 (subst-if 5 #'listp tree1) =>  5
 (subst-if-not '(x) #'consp tree1) 
=>  (1 X)

 tree1 =>  (1 (1 2) (1 2 3) (1 2 3 4))
 (nsubst 'x 3 tree1 :key #'(lambda (y) (and (listp y) (third y)))) 
=>  (1 (1 2) X X)
 tree1 =>  (1 (1 2) X X)
@end verbatim

@strong{Side Effects:}

@ref{#nsubst,@strong{nsubst}}, @ref{#nsubst-if,@strong{nsubst-if}}, and
@ref{#nsubst-if-not,@strong{nsubst-if-not}} might alter the
@uref{glo_t.html#tree_structure,@emph{tree structure}} of @emph{tree}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_substitut_itute-if-not.html#substitute,@strong{substitute}},
@uref{fun_substitut_itute-if-not.html#nsubstitute,@strong{nsubstitute}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

The functions @ref{#subst-if-not,@strong{subst-if-not}} and
@ref{#nsubst-if-not,@strong{nsubst-if-not}} are deprecated.

One possible definition of @ref{#subst,@strong{subst}}:

@verbatim
 (defun subst (old new tree &rest x &key test test-not key)
   (cond ((satisfies-the-test old tree :test test
                              :test-not test-not :key key)
          new)
         ((atom tree) tree)
         (t (let ((a (apply #'subst old new (car tree) x))
                  (d (apply #'subst old new (cdr tree) x)))
              (if (and (eql a (car tree))
                       (eql d (cdr tree)))
                  tree
                  (cons a d))))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TREE-EQUAL
@subsubsection CLHS: Function TREE-EQUAL
@anchor{#clhs-function-tree-equal}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_substcm_s_subst-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_copy-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TREE-EQUAL}

@strong{Syntax:}

@strong{tree-equal} @emph{tree-1 tree-2 &key test test-not} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{tree-1}---a @uref{glo_t.html#tree,@emph{tree}}.

@emph{tree-2}---a @uref{glo_t.html#tree,@emph{tree}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#tree-equal,@strong{tree-equal}} tests whether two trees are of the
same shape and have the same leaves.
@ref{#tree-equal,@strong{tree-equal}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{tree-1} and @emph{tree-2}
are both @uref{glo_a.html#atom,@emph{atoms}} and
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}, or if they
are both @uref{glo_c.html#cons,@emph{conses}} and the
@uref{glo_c.html#car,@emph{car}} of @emph{tree-1} is
@ref{#tree-equal,@strong{tree-equal}} to the
@uref{glo_c.html#car,@emph{car}} of @emph{tree-2} and the
@uref{glo_c.html#cdr,@emph{cdr}} of @emph{tree-1} is
@ref{#tree-equal,@strong{tree-equal}} to the
@uref{glo_c.html#cdr,@emph{cdr}} of @emph{tree-2}. Otherwise,
@ref{#tree-equal,@strong{tree-equal}} returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#tree-equal,@strong{tree-equal}} recursively compares
@uref{glo_c.html#cons,@emph{conses}} but not any other
@uref{glo_o.html#object,@emph{objects}} that have components.

The first argument to the :test or :test-not function is @emph{tree-1}
or a @uref{glo_c.html#car,@emph{car}} or
@uref{glo_c.html#cdr,@emph{cdr}} of @emph{tree-1}; the second argument
is @emph{tree-2} or a @uref{glo_c.html#car,@emph{car}} or
@uref{glo_c.html#cdr,@emph{cdr}} of @emph{tree-2}.

@strong{Examples:}

@verbatim
 (setq tree1 '(1 (1 2))
       tree2 '(1 (1 2))) =>  (1 (1 2))
 (tree-equal tree1 tree2) =>  true
 (eql tree1 tree2) =>  false
 (setq tree1 '('a ('b 'c))
       tree2 '('a ('b 'c))) =>  ('a ('b 'c)) 
=>  ((QUOTE A) ((QUOTE B) (QUOTE C)))
 (tree-equal tree1 tree2 :test 'eq) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if both @emph{tree-1} and @emph{tree-2}
are circular.

@strong{See Also:}

@uref{fun_equal.html#equal,@strong{equal}}, @uref{sec_3-6.html,Section
3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNION NUNION
@subsubsection CLHS: Function UNION, NUNION
@anchor{#clhs-function-union-nunion}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_subsetp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-15.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNION, NUNION}

@strong{Syntax:}

@strong{union} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{nunion} @emph{list-1 list-2 &key key test test-not} =>
@emph{result-list}

@strong{Arguments and Values:}

@emph{list-1}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{list-2}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-list}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#union,@strong{union}} and @ref{#nunion,@strong{nunion}} return a
@uref{glo_l.html#list,@emph{list}} that contains every element that
occurs in either @emph{list-1} or @emph{list-2}.

For all possible ordered pairs consisting of one element from
@emph{list-1} and one element from @emph{list-2}, :test or :test-not is
used to determine whether they
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}. The first
argument to the :test or :test-not function is the part of the element
of @emph{list-1} extracted by the :key function (if supplied); the
second argument is the part of the element of @emph{list-2} extracted by
the :key function (if supplied).

The argument to the :key function is an element of @emph{list-1} or
@emph{list-2}; the return value is part of the supplied element. If :key
is not supplied or @uref{any_nil.html#nil,@strong{nil}}, the element of
@emph{list-1} or @emph{list-2} itself is supplied to the :test or
:test-not function.

For every matching pair, one of the two elements of the pair will be in
the result. Any element from either @emph{list-1} or @emph{list-2} that
matches no element of the other will appear in the result.

If there is a duplication between @emph{list-1} and @emph{list-2}, only
one of the duplicate instances will be in the result. If either
@emph{list-1} or @emph{list-2} has duplicate entries within it, the
redundant entries might or might not appear in the result.

The order of elements in the result do not have to reflect the ordering
of @emph{list-1} or @emph{list-2} in any way. The result
@uref{glo_l.html#list,@emph{list}} may be
@uref{fun_eq.html#eq,@strong{eq}} to either @emph{list-1} or
@emph{list-2} if appropriate.

@strong{Examples:}

@verbatim
 (union '(a b c) '(f a d))
=>  (A B C F D)
OR=>  (B C F A D)
OR=>  (D F A B C)
 (union '((x 5) (y 6)) '((z 2) (x 4)) :key #'car)
=>  ((X 5) (Y 6) (Z 2))
OR=>  ((X 4) (Y 6) (Z 2))

 (setq lst1 (list 1 2 '(1 2) "a" "b")
       lst2 (list 2 3 '(2 3) "B" "C"))
=>  (2 3 (2 3) "B" "C")
 (nunion lst1 lst2)
=>  (1 (1 2) "a" "b" 2 3 (2 3) "B" "C") 
OR=>  (1 2 (1 2) "a" "b" "C" "B" (2 3) 3)
@end verbatim

@strong{Side Effects:}

@ref{#nunion,@strong{nunion}} is permitted to modify any part,
@uref{glo_c.html#car,@emph{car}} or @uref{glo_c.html#cdr,@emph{cdr}}, of
the @uref{glo_l.html#list_structure,@emph{list structure}} of
@emph{list-1} or @emph{list-2}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{list-1} and @emph{list-2} are not
@uref{glo_p.html#proper_list,@emph{proper lists}}.

@strong{See Also:}

@uref{fun_intersect_intersection.html#intersection,@strong{intersection}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not parameter is deprecated.

Since the @ref{#nunion,@strong{nunion}} side effect is not required, it
should not be used in for-effect-only positions in portable code.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro POP
@subsubsection CLHS: Macro POP
@anchor{#clhs-macro-pop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_push.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_firstcm_s_inthcm_tenth.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{POP}

@strong{Syntax:}

@strong{pop} @emph{place} => @emph{element}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}, the
@uref{glo_v.html#value,@emph{value}} of which is a
@uref{glo_l.html#list,@emph{list}} (possibly, but necessarily, a
@uref{glo_d.html#dotted_list,@emph{dotted list}} or
@uref{glo_c.html#circular_list,@emph{circular list}}).

@emph{element}---an @uref{glo_o.html#object,@emph{object}} (the
@uref{glo_c.html#car,@emph{car}} of the contents of @emph{place}).

@strong{Description:}

@ref{#pop,@strong{pop}} @uref{glo_r.html#read,@emph{reads}} the
@uref{glo_v.html#value,@emph{value}} of @emph{place}, remembers the
@uref{glo_c.html#car,@emph{car}} of the
@uref{glo_l.html#list,@emph{list}} which was retrieved,
@uref{glo_w.html#write,@emph{writes}} the
@uref{glo_c.html#cdr,@emph{cdr}} of the
@uref{glo_l.html#list,@emph{list}} back into the @emph{place}, and
finally @uref{glo_y.html#yield,@emph{yields}} the
@uref{glo_c.html#car,@emph{car}} of the originally retrieved
@uref{glo_l.html#list,@emph{list}}.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{place}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (setq stack '(a b c)) =>  (A B C)
 (pop stack) =>  A  
 stack =>  (B C)
 (setq llst '((1 2 3 4))) =>  ((1 2 3 4))
 (pop (car llst)) =>  1
 llst =>  ((2 3 4))
@end verbatim

@strong{Side Effects:}

The contents of @emph{place} are modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_push.html#push,@strong{push}},
@uref{mac_pushnew.html#pushnew,@strong{pushnew}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

The effect of (pop @emph{place}) is roughly equivalent to

@verbatim
 (prog1 (car place) (setf place (cdr place)))
@end verbatim

except that the latter would evaluate any
@uref{glo_s.html#subform,@emph{subforms}} of @emph{place} three times,
while @ref{#pop,@strong{pop}} evaluates them only once.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PUSH
@subsubsection CLHS: Macro PUSH
@anchor{#clhs-macro-push}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_pop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PUSH}

@strong{Syntax:}

@strong{push} @emph{item place} => @emph{new-place-value}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{place}---a @uref{glo_p.html#place,@emph{place}}, the
@uref{glo_v.html#value,@emph{value}} of which may be any
@uref{glo_o.html#object,@emph{object}}.

@emph{new-place-value}---a @uref{glo_l.html#list,@emph{list}} (the new
@uref{glo_v.html#value,@emph{value}} of @emph{place}).

@strong{Description:}

@ref{#push,@strong{push}} prepends @emph{item} to the
@uref{glo_l.html#list,@emph{list}} that is stored in @emph{place},
stores the resulting @uref{glo_l.html#list,@emph{list}} in @emph{place},
and returns the @uref{glo_l.html#list,@emph{list}}.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{place}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (setq llst '(nil)) =>  (NIL)
 (push 1 (car llst)) =>  (1)
 llst =>  ((1))
 (push 1 (car llst)) =>  (1 1)
 llst =>  ((1 1))
 (setq x '(a (b c) d)) =>  (A (B C) D)
 (push 5 (cadr x)) =>  (5 B C)  
 x =>  (A (5 B C) D)
@end verbatim

@strong{Side Effects:}

The contents of @emph{place} are modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_pop.html#pop,@strong{pop}},
@uref{mac_pushnew.html#pushnew,@strong{pushnew}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

The effect of (push @emph{item} @emph{place}) is equivalent to

@verbatim
 (setf place (cons item place))
@end verbatim

except that the @uref{glo_s.html#subform,@emph{subforms}} of
@emph{place} are evaluated only once, and @emph{item} is evaluated
before @emph{place}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss138.html,DOTTED-LIST-ARGUMENTS:CLARIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PUSHNEW
@subsubsection CLHS: Macro PUSHNEW
@anchor{#clhs-macro-pushnew}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_adjoin.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-diffe_t-difference.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PUSHNEW}

@strong{Syntax:}

@strong{pushnew} @emph{item place &key key test test-not}

=> @emph{new-place-value}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{place}---a @uref{glo_p.html#place,@emph{place}}, the
@uref{glo_v.html#value,@emph{value}} of which is a
@uref{glo_p.html#proper_list,@emph{proper list}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-place-value}---a @uref{glo_l.html#list,@emph{list}} (the new
@uref{glo_v.html#value,@emph{value}} of @emph{place}).

@strong{Description:}

@ref{#pushnew,@strong{pushnew}} tests whether @emph{item} is the same as
any existing element of the @uref{glo_l.html#list,@emph{list}} stored in
@emph{place}. If @emph{item} is not, it is prepended to the
@uref{glo_l.html#list,@emph{list}}, and the new
@uref{glo_l.html#list,@emph{list}} is stored in @emph{place}.

@ref{#pushnew,@strong{pushnew}} returns the new
@uref{glo_l.html#list,@emph{list}} that is stored in @emph{place}.

Whether or not @emph{item} is already a member of the
@uref{glo_l.html#list,@emph{list}} that is in @emph{place} is determined
by comparisons using :test or :test-not. The first argument to the :test
or :test-not function is @emph{item}; the second argument is an element
of the @uref{glo_l.html#list,@emph{list}} in @emph{place} as returned by
the :key function (if supplied).

If :key is supplied, it is used to extract the part to be tested from
both @emph{item} and the @uref{glo_l.html#list,@emph{list}} element, as
for @uref{fun_adjoin.html#adjoin,@strong{adjoin}}.

The argument to the :key function is an element of the
@uref{glo_l.html#list,@emph{list}} stored in @emph{place}. The :key
function typically returns part part of the element of the
@uref{glo_l.html#list,@emph{list}}. If :key is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the
@uref{glo_l.html#list,@emph{list}} element is used.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{place}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether or not @ref{#pushnew,@strong{pushnew}} actually executes the
storing form for its @emph{place} in the situation where the @emph{item}
is already a member of the @uref{glo_l.html#list,@emph{list}} held by
@emph{place}.

@strong{Examples:}

@verbatim
 (setq x '(a (b c) d)) =>  (A (B C) D)
 (pushnew 5 (cadr x)) =>  (5 B C)   
 x =>  (A (5 B C) D)
 (pushnew 'b (cadr x)) =>  (5 B C)  
 x =>  (A (5 B C) D)
 (setq lst '((1) (1 2) (1 2 3))) =>  ((1) (1 2) (1 2 3))
 (pushnew '(2) lst) =>  ((2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst) =>  ((1) (2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst :test 'equal) =>  ((1) (2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst :key #'car) =>  ((1) (2) (1) (1 2) (1 2 3)) 
@end verbatim

@strong{Side Effects:}

The contents of @emph{place} may be modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_push.html#push,@strong{push}},
@uref{fun_adjoin.html#adjoin,@strong{adjoin}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

The effect of

@verbatim
 (pushnew item place :test p)
@end verbatim

is roughly equivalent to

@verbatim
 (setf place (adjoin item place :test p))
@end verbatim

except that the @uref{glo_s.html#subform,@emph{subforms}} of place are
evaluated only once, and item is evaluated before place.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss281.html,PUSHNEW-STORE-REQUIRED:UNSPECIFIED}
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro REMF
@subsubsection CLHS: Macro REMF
@anchor{#clhs-macro-remf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_getf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_intersect_intersection.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{REMF}

@strong{Syntax:}

@strong{remf} @emph{place indicator} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{indicator}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#remf,@strong{remf}} removes from the
@uref{glo_p.html#property_list,@emph{property list}} stored in
@emph{place} a @uref{glo_p.html#property,@emph{property}}[1] with a
@uref{glo_p.html#property_indicator,@emph{property indicator}}
@uref{glo_i.html#identical,@emph{identical}} to @emph{indicator}. If
there are multiple @uref{glo_p.html#property,@emph{properties}}[1] with
the @uref{glo_i.html#identical,@emph{identical}} key,
@ref{#remf,@strong{remf}} only removes the first such
@uref{glo_p.html#property,@emph{property}}. @ref{#remf,@strong{remf}}
returns @uref{glo_f.html#false,@emph{false}} if no such
@uref{glo_p.html#property,@emph{property}} was found, or
@uref{glo_t.html#true,@emph{true}} if a property was found.

The @uref{glo_p.html#property_indicator,@emph{property indicator}} and
the corresponding @uref{glo_p.html#property_value,@emph{property value}}
are removed in an undefined order by destructively splicing the property
list. @ref{#remf,@strong{remf}} is permitted to either
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} @emph{place} or to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} any part,
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}} or
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}, of the
@uref{glo_l.html#list_structure,@emph{list structure}} held by that
@emph{place}.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{place}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (setq x (cons () ())) =>  (NIL)
 (setf (getf (car x) 'prop1) 'val1) =>  VAL1
 (remf (car x) 'prop1) =>  true
 (remf (car x) 'prop1) =>  false
@end verbatim

@strong{Side Effects:}

The property list stored in @emph{place} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_remprop.html#remprop,@strong{remprop}},
@uref{acc_getf.html#getf,@strong{getf}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss269.html,PLIST-DUPLICATES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class CONS
@subsubsection CLHS: System Class CONS
@anchor{#clhs-system-class-cons}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_null.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_atom.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{CONS}

@strong{Class Precedence List:}

@ref{#cons,@strong{cons}}, @uref{syscla_list.html#list,@strong{list}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_c.html#cons,@emph{cons}} is a compound
@uref{glo_o.html#object,@emph{object}} having two components, called the
@uref{glo_c.html#car,@emph{car}} and @uref{glo_c.html#cdr,@emph{cdr}}.
These form a @uref{glo_d.html#dotted_pair,@emph{dotted pair}}. Each
component can be any @uref{glo_o.html#object,@emph{object}}.

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{cons} @emph{[car-typespec [cdr-typespec]]}

@strong{Compound Type Specifier Arguments:}

@emph{car-typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}, or the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}. The default is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@emph{cdr-typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}, or the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}. The default is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the set of @uref{glo_c.html#cons,@emph{conses}} whose
@uref{glo_c.html#car,@emph{car}} is constrained to be of
@uref{glo_t.html#type,@emph{type}} @emph{car-typespec} and whose
@uref{glo_c.html#cdr,@emph{cdr}} is constrained to be of
@uref{glo_t.html#type,@emph{type}} @emph{cdr-typespec}. (If either
@emph{car-typespec} or @emph{cdr-typespec} is
@uref{any_st.html#ST,@strong{*}}, it is as if the
@uref{glo_t.html#type,@emph{type}} @uref{syscla_t.html#t,@strong{t}} had
been denoted.)

@strong{See Also:}

@uref{sec_2-4-1.html,Section 2.4.1 (Left-Parenthesis)},
@uref{sec_22-1-3-5.html,Section 22.1.3.5 (Printing Lists and Conses)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss078.html,CONS-TYPE-SPECIFIER:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class NULL
@subsubsection CLHS: System Class NULL
@anchor{#clhs-system-class-null}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_cons.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{NULL}

@strong{Class Precedence List:}

@ref{#null,@strong{null}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{syscla_list.html#list,@strong{list}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The only @uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} @ref{#null,@strong{null}} is
@uref{any_nil.html#nil,@strong{nil}}, which represents the
@uref{glo_e.html#empty_list,@emph{empty list}} and can also be notated
().

@strong{See Also:}

@uref{sec_2-3-4.html,Section 2.3.4 (Symbols as Tokens)},
@uref{sec_2-4-1.html,Section 2.4.1 (Left-Parenthesis)},
@uref{sec_22-1-3-3.html,Section 22.1.3.3 (Printing Symbols)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type ATOM
@subsubsection CLHS: Type ATOM
@anchor{#clhs-type-atom}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_cons.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_conses_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_cons.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{ATOM}

@strong{Supertypes:}

@ref{#atom,@strong{atom}}, @uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

It is equivalent to (not cons).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 15
@section CLHS: Chapter 15
@anchor{#clhs-chapter-15}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unioncm_nunion.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_15-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
15. Arrays

@uref{sec_15-1.html,}

15.1 Array Concepts

@uref{sec_the_arrays_dictionary.html,}

15.2 The Arrays Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Arrays Dictionary::
@end menu

@node CLHS Section The Arrays Dictionary
@subsection CLHS: Section The Arrays Dictionary
@anchor{#clhs-section-the-arrays-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_15-1-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-15.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_array.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
15.2 The Arrays Dictionary

@uref{syscla_array.html,@emph{System Class} @strong{ARRAY}}

@uref{typ_simple-array.html,@emph{Type} @strong{SIMPLE-ARRAY}}

@uref{syscla_vector.html,@emph{System Class} @strong{VECTOR}}

@uref{typ_simple-vector.html,@emph{Type} @strong{SIMPLE-VECTOR}}

@uref{syscla_bit-vector.html,@emph{System Class} @strong{BIT-VECTOR}}

@uref{typ_simple-bit-vector.html,@emph{Type} @strong{SIMPLE-BIT-VECTOR}}

@uref{fun_make-array.html,@emph{Function} @strong{MAKE-ARRAY}}

@uref{fun_adjust-array.html,@emph{Function} @strong{ADJUST-ARRAY}}

@uref{fun_adjustable-array-p.html,@emph{Function}
@strong{ADJUSTABLE-ARRAY-P}}

@uref{acc_aref.html,@emph{Accessor} @strong{AREF}}

@uref{fun_array-dimension.html,@emph{Function} @strong{ARRAY-DIMENSION}}

@uref{fun_array-dimensions.html,@emph{Function}
@strong{ARRAY-DIMENSIONS}}

@uref{fun_array-element-type.html,@emph{Function}
@strong{ARRAY-ELEMENT-TYPE}}

@uref{fun_array-has_ll-pointer-p.html,@emph{Function}
@strong{ARRAY-HAS-FILL-POINTER-P}}

@uref{fun_array-displacement.html,@emph{Function}
@strong{ARRAY-DISPLACEMENT}}

@uref{fun_array-in-bounds-p.html,@emph{Function}
@strong{ARRAY-IN-BOUNDS-P}}

@uref{fun_array-rank.html,@emph{Function} @strong{ARRAY-RANK}}

@uref{fun_array-row-major-index.html,@emph{Function}
@strong{ARRAY-ROW-MAJOR-INDEX}}

@uref{fun_array-total-size.html,@emph{Function}
@strong{ARRAY-TOTAL-SIZE}}

@uref{fun_arrayp.html,@emph{Function} @strong{ARRAYP}}

@uref{acc_fill-pointer.html,@emph{Accessor} @strong{FILL-POINTER}}

@uref{acc_row-major-aref.html,@emph{Accessor} @strong{ROW-MAJOR-AREF}}

@uref{fun_upgraded-_element-type.html,@emph{Function}
@strong{UPGRADED-ARRAY-ELEMENT-TYPE}}

@uref{convar_array-_ension-limit.html,@emph{Constant Variable}
@strong{ARRAY-DIMENSION-LIMIT}}

@uref{convar_array-rank-limit.html,@emph{Constant Variable}
@strong{ARRAY-RANK-LIMIT}}

@uref{convar_array-_l-size-limit.html,@emph{Constant Variable}
@strong{ARRAY-TOTAL-SIZE-LIMIT}}

@uref{fun_simple-vector-p.html,@emph{Function} @strong{SIMPLE-VECTOR-P}}

@uref{acc_svref.html,@emph{Accessor} @strong{SVREF}}

@uref{fun_vector.html,@emph{Function} @strong{VECTOR}}

@uref{fun_vector-pop.html,@emph{Function} @strong{VECTOR-POP}}

@uref{fun_vector-pu_-push-extend.html,@emph{Function}
@strong{VECTOR-PUSH, VECTOR-PUSH-EXTEND}}

@uref{fun_vectorp.html,@emph{Function} @strong{VECTORP}}

@uref{acc_bitcm_sbit.html,@emph{Accessor} @strong{BIT, SBIT}}

@uref{fun_bit-andcm_c2cm_bit-xor.html,@emph{Function} @strong{BIT-AND,
BIT-ANDC1, BIT-ANDC2, BIT-EQV, BIT-IOR, BIT-NAND, BIT-NOR, BIT-NOT,
BIT-ORC1, BIT-ORC2, BIT-XOR}}

@uref{fun_bit-vector-p.html,@emph{Function} @strong{BIT-VECTOR-P}}

@uref{fun_simple-bit-vector-p.html,@emph{Function}
@strong{SIMPLE-BIT-VECTOR-P}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor AREF::
* CLHS Accessor BIT SBIT::
* CLHS Accessor FILL-POINTER::
* CLHS Accessor ROW-MAJOR-AREF::
* CLHS Accessor SVREF::
* CLHS Constant Variable ARRAY-DIMENSION-LIMIT::
* CLHS Constant Variable ARRAY-TOTAL-SIZE-LIMIT::
* CLHS Constant Variable ARRAY-RANK-LIMIT::
* CLHS Function ADJUST-ARRAY::
* CLHS Function ADJUSTABLE-ARRAY-P::
* CLHS Function ARRAY-DIMENSION::
* CLHS Function ARRAY-DIMENSIONS::
* CLHS Function ARRAY-DISPLACEMENT::
* CLHS Function ARRAY-ELEMENT-TYPE::
* CLHS Function ARRAY-HAS-FILL-POINTER-P::
* CLHS Function ARRAY-IN-BOUNDS-P::
* CLHS Function ARRAY-RANK::
* CLHS Function ARRAY-ROW-MAJOR-INDEX::
* CLHS Function ARRAY-TOTAL-SIZE::
* CLHS Function ARRAYP::
* CLHS Function BIT-AND BIT-ANDC1 BIT-ANDC2::
* CLHS Function BIT-VECTOR-P::
* CLHS Function MAKE-ARRAY::
* CLHS Function SIMPLE-BIT-VECTOR-P::
* CLHS Function SIMPLE-VECTOR-P::
* CLHS Function UPGRADED-ARRAY-ELEMENT-TYPE::
* CLHS Function VECTOR-POP::
* CLHS Function VECTOR-PUSH VECTOR-PUSH-EXTEND::
* CLHS Function VECTOR::
* CLHS Function VECTORP::
* CLHS System Class BIT-VECTOR::
* CLHS System Class VECTOR::
* CLHS Type SIMPLE-ARRAY::
* CLHS Type SIMPLE-BIT-VECTOR::
* CLHS Type SIMPLE-VECTOR::
@end menu

@node CLHS Accessor AREF
@subsubsection CLHS: Accessor AREF
@anchor{#clhs-accessor-aref}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_adjustable-array-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-dimension.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{AREF}

@strong{Syntax:}

@strong{aref} @emph{array &rest subscripts} => @emph{element}

(setf (@strong{aref} @emph{array &rest subscripts}) @emph{new-element})

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{subscripts}---a @uref{glo_l.html#list,@emph{list}} of @emph{valid
array indices} for the @emph{array}.

@emph{element}, @emph{new-element}---an
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the @emph{array}
@uref{glo_e.html#element,@emph{element}} specified by the
@emph{subscripts}. If no @emph{subscripts} are supplied and @emph{array}
is zero rank, @ref{#aref,@strong{aref}}
@uref{glo_a.html#access,@emph{accesses}} the sole element of
@emph{array}.

@ref{#aref,@strong{aref}} ignores
@uref{glo_f.html#fill_pointer,@emph{fill pointers}}. It is permissible
to use @ref{#aref,@strong{aref}} to
@uref{glo_a.html#access,@emph{access}} any @emph{array}
@uref{glo_e.html#element,@emph{element}}, whether
@uref{glo_a.html#active,@emph{active}} or not.

@strong{Examples:}

If the variable foo names a 3-by-5 array, then the first index could be
0, 1, or 2, and then second index could be 0, 1, 2, 3, or 4. The array
elements can be referred to by using the
@uref{glo_f.html#function,@emph{function}} @ref{#aref,@strong{aref}};
for example, (aref foo 2 1) refers to element (2, 1) of the array.

@verbatim
 (aref (setq alpha (make-array 4)) 3) =>  implementation-dependent
 (setf (aref alpha 3) 'sirens) =>  SIRENS
 (aref alpha 3) =>  SIRENS
 (aref (setq beta (make-array '(2 4) 
                    :element-type '(unsigned-byte 2)
                    :initial-contents '((0 1 2 3) (3 2 1 0))))
        1 2) =>  1
 (setq gamma '(0 2))
 (apply #'aref beta gamma) =>  2
 (setf (apply #'aref beta gamma) 3) =>  3
 (apply #'aref beta gamma) =>  3
 (aref beta 0 2) =>  3
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_bitcm_sbit.html#bit,@strong{bit}},
@uref{acc_charcm_schar.html#char,@strong{char}},
@uref{acc_elt.html#elt,@strong{elt}},
@uref{acc_row-major-aref.html#row-major-aref,@strong{row-major-aref}},
@uref{acc_svref.html#svref,@strong{svref}}, @uref{sec_3-2-1.html,Section
3.2.1 (Compiler Terminology)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor BIT SBIT
@subsubsection CLHS: Accessor BIT, SBIT
@anchor{#clhs-accessor-bit-sbit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_vectorp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_bit-andcm_c2cm_bit-xor.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{BIT, SBIT}

@strong{Syntax:}

@strong{bit} @emph{bit-array} &rest @emph{subscripts} => @emph{bit}

@strong{sbit} @emph{bit-array} &rest @emph{subscripts} => @emph{bit}

(setf (@strong{bit} @emph{bit-array} &rest @emph{subscripts})
@emph{new-bit})

(setf (@strong{sbit} @emph{bit-array} &rest @emph{subscripts})
@emph{new-bit})

@strong{Arguments and Values:}

@emph{bit-array}---for @ref{#bit,@strong{bit}}, a
@uref{glo_b.html#bit_array,@emph{bit array}}; for
@ref{#sbit,@strong{sbit}}, a
@uref{glo_s.html#simple_bit_array,@emph{simple bit array}}.

@emph{subscripts}---a @uref{glo_l.html#list,@emph{list}} of @emph{valid
array indices} for the @emph{bit-array}.

@emph{bit}---a @uref{glo_b.html#bit,@emph{bit}}.

@strong{Description:}

@ref{#bit,@strong{bit}} and @ref{#sbit,@strong{sbit}}
@uref{glo_a.html#access,@emph{access}} the @emph{bit-array}
@uref{glo_e.html#element,@emph{element}} specified by @emph{subscripts}.

These @uref{glo_f.html#function,@emph{functions}} ignore the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} when @emph{accessing}
@uref{glo_e.html#element,@emph{elements}}.

@strong{Examples:}

@verbatim
 (bit (setq ba (make-array 8 
                            :element-type 'bit 
                            :initial-element 1))
       3) =>  1
 (setf (bit ba 3) 0) =>  0
 (bit ba 3) =>  0
 (sbit ba 5) =>  1
 (setf (sbit ba 5) 1) =>  1
 (sbit ba 5) =>  1
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_aref.html#aref,@strong{aref}}, @uref{sec_3-2-1.html,Section
3.2.1 (Compiler Terminology)}

@strong{Notes:}

@ref{#bit,@strong{bit}} and @ref{#sbit,@strong{sbit}} are like
@uref{acc_aref.html#aref,@strong{aref}} except that they require
@emph{arrays} to be a @uref{glo_b.html#bit_array,@emph{bit array}} and a
@uref{glo_s.html#simple_bit_array,@emph{simple bit array}},
respectively.

@ref{#bit,@strong{bit}} and @ref{#sbit,@strong{sbit}}, unlike
@uref{acc_charcm_schar.html#char,@strong{char}} and
@uref{acc_charcm_schar.html#schar,@strong{schar}}, allow the first
argument to be an @uref{glo_a.html#array,@emph{array}} of any
@uref{glo_r.html#rank,@emph{rank}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor FILL-POINTER
@subsubsection CLHS: Accessor FILL-POINTER
@anchor{#clhs-accessor-fill-pointer}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_arrayp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_row-major-aref.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{FILL-POINTER}

@strong{Syntax:}

@strong{fill-pointer} @emph{vector} => @emph{fill-pointer}

(setf (@strong{fill-pointer} @emph{vector}) @emph{new-fill-pointer})

@strong{Arguments and Values:}

@emph{vector}---a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@emph{fill-pointer}, @emph{new-fill-pointer}---a
@uref{glo_v.html#valid_fill_pointer,@emph{valid fill pointer}} for the
@emph{vector}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} of @emph{vector}.

@strong{Examples:}

@verbatim
 (setq a (make-array 8 :fill-pointer 4)) =>  #(NIL NIL NIL NIL)
 (fill-pointer a) =>  4
 (dotimes (i (length a)) (setf (aref a i) (* i i))) =>  NIL
 a =>  #(0 1 4 9)
 (setf (fill-pointer a) 3) =>  3
 (fill-pointer a) =>  3
 a =>  #(0 1 4)
 (setf (fill-pointer a) 8) =>  8
 a =>  #(0 1 4 9 NIL NIL NIL NIL)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{vector} is not a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{fun_length.html#length,@strong{length}}

@strong{Notes:}

There is no @uref{glo_o.html#operator,@emph{operator}} that will remove
a @uref{glo_v.html#vector,@emph{vector}}'s
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor ROW-MAJOR-AREF
@subsubsection CLHS: Accessor ROW-MAJOR-AREF
@anchor{#clhs-accessor-row-major-aref}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_fill-pointer.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_upgraded-_element-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{ROW-MAJOR-AREF}

@strong{Syntax:}

@strong{row-major-aref} @emph{array index} => @emph{element}

(setf (@strong{row-major-aref} @emph{array index}) @emph{new-element})

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{index}---a
@uref{glo_v.html#valid_array_row-major_index,@emph{valid array row-major
index}} for the @emph{array}.

@emph{element}, @emph{new-element}---an
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Considers @uref{glo_a.html#array,@emph{array}} as a
@uref{glo_v.html#vector,@emph{vector}} by viewing its
@uref{glo_e.html#element,@emph{elements}} in row-major order, and
returns the @uref{glo_e.html#element,@emph{element}} of that
@uref{glo_v.html#vector,@emph{vector}} which is referred to by the given
@emph{index}.

@ref{#row-major-aref,@strong{row-major-aref}} is valid for use with
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_aref.html#aref,@strong{aref}},
@uref{fun_array-row-major-index.html#array-row-major-index,@strong{array-row-major-index}}

@strong{Notes:}

@verbatim
 (row-major-aref array index) == 
   (aref (make-array (array-total-size array)
                     :displaced-to array
                     :element-type (array-element-type array))
         index)

 (aref array i1 i2 ...) == 
     (row-major-aref array (array-row-major-index array i1 i2))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@item
@uref{../Issues/iss009.html,AREF-1D}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor SVREF
@subsubsection CLHS: Accessor SVREF
@anchor{#clhs-accessor-svref}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_simple-vector-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_vector.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{SVREF}

@strong{Syntax:}

@strong{svref} @emph{simple-vector index} => @emph{element}

(setf (@strong{svref} @emph{simple-vector index}) @emph{new-element})

@strong{Arguments and Values:}

@emph{simple-vector}---a @uref{glo_s.html#simple_vector,@emph{simple
vector}}.

@emph{index}---a @uref{glo_v.html#valid_array_index,@emph{valid array
index}} for the @emph{simple-vector}.

@emph{element}, @emph{new-element}---an
@uref{glo_o.html#object,@emph{object}} (whose
@uref{glo_t.html#type,@emph{type}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of the
@uref{glo_a.html#array_element_type,@emph{array element type}} of the
@emph{simple-vector}).

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_e.html#element,@emph{element}} of @emph{simple-vector}
specified by @emph{index}.

@strong{Examples:}

@verbatim
 (simple-vector-p (setq v (vector 1 2 'sirens))) =>  true
 (svref v 0) =>  1
 (svref v 2) =>  SIRENS
 (setf (svref v 1) 'newcomer) =>  NEWCOMER               
 v =>  #(1 NEWCOMER SIRENS)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_aref.html#aref,@strong{aref}},
@uref{acc_bitcm_sbit.html#sbit,@strong{sbit}},
@uref{acc_charcm_schar.html#schar,@strong{schar}},
@uref{fun_vector.html#vector,@strong{vector}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)}

@strong{Notes:}

@ref{#svref,@strong{svref}} is identical to
@uref{acc_aref.html#aref,@strong{aref}} except that it requires its
first argument to be a @uref{glo_s.html#simple_vector,@emph{simple
vector}}.

@verbatim
 (svref v i) ==  (aref (the simple-vector v) i)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable ARRAY-DIMENSION-LIMIT
@subsubsection CLHS: Constant Variable ARRAY-DIMENSION-LIMIT
@anchor{#clhs-constant-variable-array-dimension-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_upgraded-_element-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_array-rank-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{ARRAY-DIMENSION-LIMIT}

@strong{Constant Value:}

A positive @uref{glo_f.html#fixnum,@emph{fixnum}}, the exact magnitude
of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but which is not less than 1024.

@strong{Description:}

The upper exclusive bound on each individual
@uref{glo_d.html#dimension,@emph{dimension}} of an
@uref{glo_a.html#array,@emph{array}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss158.html,FIXNUM-NON-PORTABLE:TIGHTEN-DEFINITION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable ARRAY-TOTAL-SIZE-LIMIT
@subsubsection CLHS: Constant Variable ARRAY-TOTAL-SIZE-LIMIT
@anchor{#clhs-constant-variable-array-total-size-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_array-rank-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_simple-vector-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{ARRAY-TOTAL-SIZE-LIMIT}

@strong{Constant Value:}

A positive @uref{glo_f.html#fixnum,@emph{fixnum}}, the exact magnitude
of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but which is not less than 1024.

@strong{Description:}

The upper exclusive bound on the
@uref{glo_a.html#array_total_size,@emph{array total size}} of an
@uref{glo_a.html#array,@emph{array}}.

The actual limit on the @uref{glo_a.html#array_total_size,@emph{array
total size}} imposed by the
@uref{glo_i.html#implementation,@emph{implementation}} might vary
according the @uref{glo_e.html#element_type,@emph{element type}} of the
@uref{glo_a.html#array,@emph{array}}; in this case, the value of
@ref{#array-total-size-limit,@strong{array-total-size-limit}} will be
the smallest of these possible limits.

@strong{Examples:} None.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{fun_array-element-type.html#array-element-type,@strong{array-element-type}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable ARRAY-RANK-LIMIT
@subsubsection CLHS: Constant Variable ARRAY-RANK-LIMIT
@anchor{#clhs-constant-variable-array-rank-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_array-_ension-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_array-_l-size-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{ARRAY-RANK-LIMIT}

@strong{Constant Value:}

A positive @uref{glo_f.html#fixnum,@emph{fixnum}}, the exact magnitude
of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but which is not less than 8.

@strong{Description:}

The upper exclusive bound on the @uref{glo_r.html#rank,@emph{rank}} of
an @uref{glo_a.html#array,@emph{array}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ADJUST-ARRAY
@subsubsection CLHS: Function ADJUST-ARRAY
@anchor{#clhs-function-adjust-array}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-array.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_adjustable-array-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ADJUST-ARRAY}

@strong{Syntax:}

@strong{adjust-array} @emph{array new-dimensions &key element-type
initial-element initial-contents fill-pointer displaced-to
displaced-index-offset}

=> @emph{adjusted-array}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{new-dimensions}---a
@uref{glo_v.html#valid_array_dimension,@emph{valid array dimension}} or
a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_v.html#valid_array_dimension,@emph{valid array dimensions}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{initial-element}---an @uref{glo_o.html#object,@emph{object}}.
@emph{Initial-element} must not be supplied if either
@emph{initial-contents} or @emph{displaced-to} is supplied.

@emph{initial-contents}---an @uref{glo_o.html#object,@emph{object}}. If
@uref{glo_a.html#array,@emph{array}} has rank greater than zero, then
@emph{initial-contents} is composed of nested
@uref{glo_s.html#sequence,@emph{sequences}}, the depth of which must
equal the rank of @emph{array}. Otherwise,
@uref{glo_a.html#array,@emph{array}} is zero-dimensional and
@emph{initial-contents} supplies the single element.
@emph{initial-contents} must not be supplied if either
@emph{initial-element} or @emph{displaced-to} is given.

@emph{fill-pointer}---a @uref{glo_v.html#valid_fill_pointer,@emph{valid
fill pointer}} for the @uref{glo_a.html#array,@emph{array}} to be
created, or @uref{any_t.html#t,@strong{t}}, or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{displaced-to}---an @uref{glo_a.html#array,@emph{array}} or
@uref{any_nil.html#nil,@strong{nil}}. @emph{initial-elements} and
@emph{initial-contents} must not be supplied if @emph{displaced-to} is
supplied.

@emph{displaced-index-offset}---an
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} (fixnum 0 @emph{n}) where @emph{n} is
(array-total-size @emph{displaced-to}). @emph{displaced-index-offset}
may be supplied only if @emph{displaced-to} is supplied.

@emph{adjusted-array}---an @uref{glo_a.html#array,@emph{array}}.

@strong{Description:}

@ref{#adjust-array,@strong{adjust-array}} changes the dimensions or
elements of @emph{array}. The result is an
@uref{glo_a.html#array,@emph{array}} of the same
@uref{glo_t.html#type,@emph{type}} and rank as @emph{array}, that is
either the modified @emph{array}, or a newly created
@uref{glo_a.html#array,@emph{array}} to which @emph{array} can be
displaced, and that has the given @emph{new-dimensions}.

@emph{New-dimensions} specify the size of each
@uref{glo_d.html#dimension,@emph{dimension}} of @emph{array}.

@emph{Element-type} specifies the @uref{glo_t.html#type,@emph{type}} of
the @uref{glo_e.html#element,@emph{elements}} of the resulting
@uref{glo_a.html#array,@emph{array}}. If @emph{element-type} is
supplied, the consequences are unspecified if the
@uref{glo_u.html#upgraded_array_element_type,@emph{upgraded array
element type}} of @emph{element-type} is not the same as the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of @emph{array}.

If @emph{initial-contents} is supplied, it is treated as for
@uref{fun_make-array.html#make-array,@strong{make-array}}. In this case
none of the original contents of @emph{array} appears in the resulting
@uref{glo_a.html#array,@emph{array}}.

If @emph{fill-pointer} is an @uref{glo_i.html#integer,@emph{integer}},
it becomes the @uref{glo_f.html#fill_pointer,@emph{fill pointer}} for
the resulting @uref{glo_a.html#array,@emph{array}}. If
@emph{fill-pointer} is the symbol @uref{any_t.html#t,@strong{t}}, it
indicates that the size of the resulting
@uref{glo_a.html#array,@emph{array}} should be used as the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}. If
@emph{fill-pointer} is @uref{any_nil.html#nil,@strong{nil}}, it
indicates that the @uref{glo_f.html#fill_pointer,@emph{fill pointer}}
should be left as it is.

If @emph{displaced-to} @uref{glo_n.html#non-nil,@emph{non-nil}}, a
@uref{glo_d.html#displaced_array,@emph{displaced array}} is created. The
resulting @uref{glo_a.html#array,@emph{array}} shares its contents with
the @uref{glo_a.html#array,@emph{array}} given by @emph{displaced-to}.
The resulting @uref{glo_a.html#array,@emph{array}} cannot contain more
elements than the @uref{glo_a.html#array,@emph{array}} it is displaced
to. If @emph{displaced-to} is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the resulting
@uref{glo_a.html#array,@emph{array}} is not a
@uref{glo_d.html#displaced_array,@emph{displaced array}}. If array A is
created displaced to array B and subsequently array B is given to
@ref{#adjust-array,@strong{adjust-array}}, array A will still be
displaced to array B. Although @emph{array} might be a
@uref{glo_d.html#displaced_array,@emph{displaced array}}, the resulting
@uref{glo_a.html#array,@emph{array}} is not a
@uref{glo_d.html#displaced_array,@emph{displaced array}} unless
@emph{displaced-to} is supplied and not
@uref{any_nil.html#nil,@strong{nil}}. The interaction between
@ref{#adjust-array,@strong{adjust-array}} and displaced
@uref{glo_a.html#array,@emph{arrays}} is as follows given three
@uref{glo_a.html#array,@emph{arrays}}, A, B, and C:

A is not displaced before or after the call

@verbatim
 (adjust-array A ...)
@end verbatim

The dimensions of A are altered, and the contents rearranged as
appropriate. Additional elements of A are taken from
@emph{initial-element}. The use of @emph{initial-contents} causes all
old contents to be discarded.

A is not displaced before, but is displaced to C after the call

@verbatim
 (adjust-array A ... :displaced-to C)
@end verbatim

None of the original contents of A appears in A afterwards; A now
contains the contents of C, without any rearrangement of C.

A is displaced to B before the call, and is displaced to C after the
call

@verbatim
 (adjust-array A ... :displaced-to B)
 (adjust-array A ... :displaced-to C)
@end verbatim

B and C might be the same. The contents of B do not appear in A
afterward unless such contents also happen to be in C If
@emph{displaced-index-offset} is not supplied in the
@ref{#adjust-array,@strong{adjust-array}} call, it defaults to zero; the
old offset into B is not retained.

A is displaced to B before the call, but not displaced afterward.

@verbatim
 (adjust-array A ... :displaced-to B)
 (adjust-array A ... :displaced-to nil)
@end verbatim

A gets a new ``data region,'' and contents of B are copied into it as
appropriate to maintain the existing old contents; additional elements
of A are taken from @emph{initial-element} if supplied. However, the use
of @emph{initial-contents} causes all old contents to be discarded.

If @emph{displaced-index-offset} is supplied, it specifies the offset of
the resulting @uref{glo_a.html#array,@emph{array}} from the beginning of
the @uref{glo_a.html#array,@emph{array}} that it is displaced to. If
@emph{displaced-index-offset} is not supplied, the offset is 0. The size
of the resulting @uref{glo_a.html#array,@emph{array}} plus the offset
value cannot exceed the size of the @uref{glo_a.html#array,@emph{array}}
that it is displaced to.

If only @emph{new-dimensions} and an @emph{initial-element} argument are
supplied, those elements of @emph{array} that are still in bounds appear
in the resulting @uref{glo_a.html#array,@emph{array}}. The elements of
the resulting @uref{glo_a.html#array,@emph{array}} that are not in the
bounds of @uref{glo_a.html#array,@emph{array}} are initialized to
@emph{initial-element}; if @emph{initial-element} is not provided, the
consequences of later reading any such new
@uref{glo_e.html#element,@emph{element}} of @emph{new-array} before it
has been initialized are undefined.

If @emph{initial-contents} or @emph{displaced-to} is supplied, then none
of the original contents of @emph{array} appears in the new
@uref{glo_a.html#array,@emph{array}}.

The consequences are unspecified if @emph{array} is adjusted to a size
smaller than its @uref{glo_f.html#fill_pointer,@emph{fill pointer}}
without supplying the @emph{fill-pointer} argument so that its
@uref{acc_fill-pointer.html#fill-pointer,@emph{fill-pointer}} is
properly adjusted in the process.

If A is displaced to B, the consequences are unspecified if B is
adjusted in such a way that it no longer has enough elements to satisfy
A.

If @ref{#adjust-array,@strong{adjust-array}} is applied to an
@uref{glo_a.html#array,@emph{array}} that is
@uref{glo_a.html#actually_adjustable,@emph{actually adjustable}}, the
@uref{glo_a.html#array,@emph{array}} returned is
@uref{glo_i.html#identical,@emph{identical}} to @emph{array}. If the
@uref{glo_a.html#array,@emph{array}} returned by
@ref{#adjust-array,@strong{adjust-array}} is
@uref{glo_d.html#distinct,@emph{distinct}} from @emph{array}, then the
argument @emph{array} is unchanged.

Note that if an @uref{glo_a.html#array,@emph{array}} A is displaced to
another @uref{glo_a.html#array,@emph{array}} B, and B is displaced to
another @uref{glo_a.html#array,@emph{array}} C, and B is altered by
@ref{#adjust-array,@strong{adjust-array}}, A must now refer to the
adjust contents of B. This means that an implementation cannot collapse
the chain to make A refer to C directly and forget that the chain of
reference passes through B. However, caching techniques are permitted as
long as they preserve the semantics specified here.

@strong{Examples:}

@verbatim
 (adjustable-array-p
  (setq ada (adjust-array
              (make-array '(2 3)
                          :adjustable t
                          :initial-contents '((a b c) (1 2 3)))
              '(4 6)))) =>  T 
 (array-dimensions ada) =>  (4 6) 
 (aref ada 1 1) =>  2 
 (setq beta (make-array '(2 3) :adjustable t))
=>  #2A((NIL NIL NIL) (NIL NIL NIL)) 
 (adjust-array beta '(4 6) :displaced-to ada)
=>  #2A((A B C NIL NIL NIL)
       (1 2 3 NIL NIL NIL)
       (NIL NIL NIL NIL NIL NIL) 
       (NIL NIL NIL NIL NIL NIL))
 (array-dimensions beta) =>  (4 6)
 (aref beta 1 1) =>  2 
@end verbatim

Suppose that the 4-by-4 array in m looks like this:

@verbatim
#2A(( alpha     beta      gamma     delta )
    ( epsilon   zeta      eta       theta )
    ( iota      kappa     lambda    mu    )
    ( nu        xi        omicron   pi    ))
@end verbatim

Then the result of

@verbatim
 (adjust-array m '(3 5) :initial-element 'baz)
@end verbatim

is a 3-by-5 array with contents

@verbatim
#2A(( alpha     beta      gamma     delta     baz )
    ( epsilon   zeta      eta       theta     baz )
    ( iota      kappa     lambda    mu        baz ))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if
@emph{fill-pointer} is supplied and
@uref{glo_n.html#non-nil,@emph{non-nil}} but @emph{array} has no
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@strong{See Also:}

@uref{fun_adjustable-array-p.html#adjustable-array-p,@strong{adjustable-array-p}},
@uref{fun_make-array.html#make-array,@strong{make-array}},
@strong{array-dimension-limit}, @strong{array-total-size-limit},
@uref{syscla_array.html#array,@strong{array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss005.html,ADJUST-ARRAY-NOT-ADJUSTABLE:IMPLICIT-COPY}
@item
@uref{../Issues/iss356.html,UNINITIALIZED-ELEMENTS:CONSEQUENCES-UNDEFINED}
@item
@uref{../Issues/iss003.html,ADJUST-ARRAY-DISPLACEMENT}
@item
@uref{../Issues/iss004.html,ADJUST-ARRAY-FILL-POINTER}
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ADJUSTABLE-ARRAY-P
@subsubsection CLHS: Function ADJUSTABLE-ARRAY-P
@anchor{#clhs-function-adjustable-array-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_adjust-array.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_aref.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ADJUSTABLE-ARRAY-P}

@strong{Syntax:}

@strong{adjustable-array-p} @emph{array} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns true if and only if
@uref{fun_adjust-array.html#adjust-array,@strong{adjust-array}} could
return a @uref{glo_v.html#value,@emph{value}} which is
@uref{glo_i.html#identical,@emph{identical}} to @emph{array} when given
that @uref{glo_a.html#array,@emph{array}} as its first
@uref{glo_a.html#argument,@emph{argument}}.

@strong{Examples:}

@verbatim
 (adjustable-array-p 
   (make-array 5
               :element-type 'character 
               :adjustable t 
               :fill-pointer 3)) =>  true
 (adjustable-array-p (make-array 4)) =>  implementation-dependent
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{fun_adjust-array.html#adjust-array,@strong{adjust-array}},
@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss005.html,ADJUST-ARRAY-NOT-ADJUSTABLE:IMPLICIT-COPY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-DIMENSION
@subsubsection CLHS: Function ARRAY-DIMENSION
@anchor{#clhs-function-array-dimension}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_aref.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-dimensions.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-DIMENSION}

@strong{Syntax:}

@strong{array-dimension} @emph{array axis-number} => @emph{dimension}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{axis-number}---an @uref{glo_i.html#integer,@emph{integer}} greater
than or equal to zero and less than the
@uref{glo_r.html#rank,@emph{rank}} of the @emph{array}.

@emph{dimension}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#array-dimension,@strong{array-dimension}} returns the
@emph{axis-number} @uref{glo_d.html#dimension,@emph{dimension}}[1] of
@emph{array}. (Any @uref{glo_f.html#fill_pointer,@emph{fill pointer}} is
ignored.)

@strong{Examples:}

@verbatim
 (array-dimension (make-array 4) 0) =>  4
 (array-dimension (make-array '(2 3)) 1) =>  3
@end verbatim

@strong{Affected By:}

None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_array-dimensions.html#array-dimensions,@strong{array-dimensions}},
@uref{fun_length.html#length,@strong{length}}

@strong{Notes:}

@verbatim
 (array-dimension array n) ==  (nth n (array-dimensions array))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-DIMENSIONS
@subsubsection CLHS: Function ARRAY-DIMENSIONS
@anchor{#clhs-function-array-dimensions}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-dimension.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-element-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-DIMENSIONS}

@strong{Syntax:}

@strong{array-dimensions} @emph{array} => @emph{dimensions}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{dimensions}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_i.html#integer,@emph{integers}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_d.html#dimension,@emph{dimensions}} of @emph{array}. (If
@emph{array} is a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, that
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} is ignored.)

@strong{Examples:}

@verbatim
 (array-dimensions (make-array 4)) =>  (4)
 (array-dimensions (make-array '(2 3))) =>  (2 3)
 (array-dimensions (make-array 4 :fill-pointer 2)) =>  (4)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{fun_array-dimension.html#array-dimension,@strong{array-dimension}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-DISPLACEMENT
@subsubsection CLHS: Function ARRAY-DISPLACEMENT
@anchor{#clhs-function-array-displacement}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-has_ll-pointer-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-in-bounds-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-DISPLACEMENT}

@strong{Syntax:}

@strong{array-displacement} @emph{array} => @emph{displaced-to,
displaced-index-offset}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{displaced-to}---an @emph{array} or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{displaced-index-offset}---a non-negative
@uref{glo_f.html#fixnum,@emph{fixnum}}.

@strong{Description:}

If the @emph{array} is a
@uref{glo_d.html#displaced_array,@emph{displaced array}}, returns the
@uref{glo_v.html#value,@emph{values}} of the :displaced-to and
:displaced-index-offset options for the
@uref{glo_a.html#array,@emph{array}} (see the
@uref{glo_f.html#function,@emph{functions}}
@uref{fun_make-array.html#make-array,@strong{make-array}} and
@uref{fun_adjust-array.html#adjust-array,@strong{adjust-array}}). If the
@emph{array} is not a @uref{glo_d.html#displaced_array,@emph{displaced
array}}, @uref{any_nil.html#nil,@strong{nil}} and 0 are returned.

If @ref{#array-displacement,@strong{array-displacement}} is called on an
@emph{array} for which a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_o.html#object,@emph{object}} was provided as the :displaced-to
@uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_make-array.html#make-array,@strong{make-array}} or
@uref{fun_adjust-array.html#adjust-array,@strong{adjust-array}}, it must
return that @uref{glo_o.html#object,@emph{object}} as its first value.
It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @ref{#array-displacement,@strong{array-displacement}} returns a
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_p.html#primary_value,@emph{primary value}} for any other
@emph{array}.

@strong{Examples:}

@verbatim
 (setq a1 (make-array 5)) =>  #<ARRAY 5 simple 46115576>
 (setq a2 (make-array 4 :displaced-to a1
                        :displaced-index-offset 1))
=>  #<ARRAY 4 indirect 46117134>
 (array-displacement a2)
=>  #<ARRAY 5 simple 46115576>, 1
 (setq a3 (make-array 2 :displaced-to a2
                        :displaced-index-offset 2))
=>  #<ARRAY 2 indirect 46122527>
 (array-displacement a3)
=>  #<ARRAY 4 indirect 46117134>, 2
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{array} is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss132.html,DISPLACED-ARRAY-PREDICATE:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-ELEMENT-TYPE
@subsubsection CLHS: Function ARRAY-ELEMENT-TYPE
@anchor{#clhs-function-array-element-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-dimensions.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-has_ll-pointer-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-ELEMENT-TYPE}

@strong{Syntax:}

@strong{array-element-type} @emph{array} => @emph{typespec}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

Returns a @uref{glo_t.html#type_specifier,@emph{type specifier}} which
represents the @uref{glo_a.html#actual_array_element_type,@emph{actual
array element type}} of the array, which is the set of
@uref{glo_o.html#object,@emph{objects}} that such an @emph{array} can
hold. (Because of @uref{glo_a.html#array,@emph{array}} @emph{upgrading},
this @uref{glo_t.html#type_specifier,@emph{type specifier}} can in some
cases denote a @uref{glo_s.html#supertype,@emph{supertype}} of the
@uref{glo_e.html#expressed_array_element_type,@emph{expressed array
element type}} of the @emph{array}.)

@strong{Examples:}

@verbatim
 (array-element-type (make-array 4)) =>  T
 (array-element-type (make-array 12 :element-type '(unsigned-byte 8))) 
=>  implementation-dependent
 (array-element-type (make-array 12 :element-type '(unsigned-byte 5)))
=>  implementation-dependent
@end verbatim

@verbatim
 (array-element-type (make-array 5 :element-type '(mod 5)))
@end verbatim

could be (mod 5), (mod 8), fixnum, t, or any other type of which (mod 5)
is a @uref{glo_s.html#subtype,@emph{subtype}}.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{syscla_array.html#array,@strong{array}},
@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{fun_subtypep.html#subtypep,@strong{subtypep}},
@uref{fun_upgraded-_element-type.html#upgraded-array-element-type,@strong{upgraded-array-element-type}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-HAS-FILL-POINTER-P
@subsubsection CLHS: Function ARRAY-HAS-FILL-POINTER-P
@anchor{#clhs-function-array-has-fill-pointer-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-element-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-displacement.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-HAS-FILL-POINTER-P}

@strong{Syntax:}

@strong{array-has-fill-pointer-p} @emph{array} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{array} has a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}; otherwise returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (array-has-fill-pointer-p (make-array 4)) =>  implementation-dependent
 (array-has-fill-pointer-p (make-array '(2 3))) =>  false
 (array-has-fill-pointer-p
   (make-array 8 
               :fill-pointer 2 
               :initial-element 'filler)) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{acc_fill-pointer.html#fill-pointer,@strong{fill-pointer}}

@strong{Notes:}

Since @uref{glo_a.html#array,@emph{arrays}} of
@uref{glo_r.html#rank,@emph{rank}} other than one cannot have a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}},
@ref{#array-has-fill-pointer-p,@strong{array-has-fill-pointer-p}} always
returns @uref{any_nil.html#nil,@strong{nil}} when its argument is such
an array.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-IN-BOUNDS-P
@subsubsection CLHS: Function ARRAY-IN-BOUNDS-P
@anchor{#clhs-function-array-in-bounds-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-displacement.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-rank.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-IN-BOUNDS-P}

@strong{Syntax:}

@strong{array-in-bounds-p} @emph{array &rest subscripts} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{subscripts}---a list of @uref{glo_i.html#integer,@emph{integers}}
of length equal to the @uref{glo_r.html#rank,@emph{rank}} of the
@uref{glo_a.html#array,@emph{array}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if the @emph{subscripts} are
all in bounds for @emph{array}; otherwise returns
@uref{glo_f.html#false,@emph{false}}. (If @emph{array} is a
@uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, that
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} is ignored.)

@strong{Examples:}

@verbatim
 (setq a (make-array '(7 11) :element-type 'string-char))
 (array-in-bounds-p a 0  0) =>  true
 (array-in-bounds-p a 6 10) =>  true
 (array-in-bounds-p a 0 -1) =>  false
 (array-in-bounds-p a 0 11) =>  false
 (array-in-bounds-p a 7  0) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_array-dimensions.html#array-dimensions,@strong{array-dimensions}}

@strong{Notes:}

@verbatim
 (array-in-bounds-p array subscripts)   
 ==  (and (not (some #'minusp (list subscripts)))
         (every #'< (list subscripts) (array-dimensions array)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-RANK
@subsubsection CLHS: Function ARRAY-RANK
@anchor{#clhs-function-array-rank}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-in-bounds-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-row-major-index.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-RANK}

@strong{Syntax:}

@strong{array-rank} @emph{array} => @emph{rank}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{rank}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the number of @uref{glo_d.html#dimension,@emph{dimensions}} of
@emph{array}.

@strong{Examples:}

@verbatim
 (array-rank (make-array '())) =>  0
 (array-rank (make-array 4)) =>  1
 (array-rank (make-array '(4))) =>  1
 (array-rank (make-array '(2 3))) =>  2
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{convar_array-rank-limit.html#array-rank-limit,@strong{array-rank-limit}},
@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-ROW-MAJOR-INDEX
@subsubsection CLHS: Function ARRAY-ROW-MAJOR-INDEX
@anchor{#clhs-function-array-row-major-index}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-rank.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_array-total-size.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-ROW-MAJOR-INDEX}

@strong{Syntax:}

@strong{array-row-major-index} @emph{array &rest subscripts} =>
@emph{index}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{subscripts}---a @uref{glo_l.html#list,@emph{list}} of @emph{valid
array indices} for the @emph{array}.

@emph{index}---a
@uref{glo_v.html#valid_array_row-major_index,@emph{valid array row-major
index}} for the @emph{array}.

@strong{Description:}

Computes the position according to the row-major ordering of
@emph{array} for the element that is specified by @emph{subscripts}, and
returns the offset of the element in the computed position from the
beginning of @emph{array}.

For a one-dimensional @emph{array}, the result of
@ref{#array-row-major-index,@strong{array-row-major-index}} equals
@emph{subscript}.

@ref{#array-row-major-index,@strong{array-row-major-index}} ignores
@uref{glo_f.html#fill_pointer,@emph{fill pointers}}.

@strong{Examples:}

@verbatim
 (setq a (make-array '(4 7) :element-type '(unsigned-byte 8)))
 (array-row-major-index a 1 2) =>  9
 (array-row-major-index 
    (make-array '(2 3 4) 
                :element-type '(unsigned-byte 8)
                :displaced-to a
                :displaced-index-offset 4)
    0 2 1) =>  9
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

A possible definition of
@ref{#array-row-major-index,@strong{array-row-major-index}}, with no
error-checking, is

@verbatim
 (defun array-row-major-index (a &rest subscripts)
   (apply #'+ (maplist #'(lambda (x y)
                            (* (car x) (apply #'* (cdr y))))
                       subscripts
                       (array-dimensions a))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAY-TOTAL-SIZE
@subsubsection CLHS: Function ARRAY-TOTAL-SIZE
@anchor{#clhs-function-array-total-size}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-row-major-index.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_arrayp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAY-TOTAL-SIZE}

@strong{Syntax:}

@strong{array-total-size} @emph{array} => @emph{size}

@strong{Arguments and Values:}

@emph{array}---an @uref{glo_a.html#array,@emph{array}}.

@emph{size}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the @uref{glo_a.html#array_total_size,@emph{array total size}}
of the @emph{array}.

@strong{Examples:}

@verbatim
 (array-total-size (make-array 4)) =>  4
 (array-total-size (make-array 4 :fill-pointer 2)) =>  4
 (array-total-size (make-array 0)) =>  0
 (array-total-size (make-array '(4 2))) =>  8
 (array-total-size (make-array '(4 0))) =>  0
 (array-total-size (make-array '())) =>  1
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not an @uref{glo_a.html#array,@emph{array}}.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{fun_array-dimensions.html#array-dimensions,@strong{array-dimensions}}

@strong{Notes:}

If the @emph{array} is a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} is ignored when
calculating the @uref{glo_a.html#array_total_size,@emph{array total
size}}.

Since the product of no arguments is one, the
@uref{glo_a.html#array_total_size,@emph{array total size}} of a
zero-dimensional @uref{glo_a.html#array,@emph{array}} is one.

@verbatim
 (array-total-size x)
    ==  (apply #'* (array-dimensions x))
    ==  (reduce #'* (array-dimensions x))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ARRAYP
@subsubsection CLHS: Function ARRAYP
@anchor{#clhs-function-arrayp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_array-total-size.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_fill-pointer.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ARRAYP}

@strong{Syntax:}

@strong{arrayp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_array.html#array,@strong{array}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (arrayp (make-array '(2 3 4) :adjustable t)) =>  true
 (arrayp (make-array 6)) =>  true
 (arrayp #*1011) =>  true
 (arrayp "hi") =>  true
 (arrayp 'hi) =>  false
 (arrayp 12) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_typep.html#typep,@strong{typep}}

@strong{Notes:}

@verbatim
 (arrayp object) ==  (typep object 'array)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BIT-AND BIT-ANDC1 BIT-ANDC2
@subsubsection CLHS: Function BIT-AND, BIT-ANDC1, BIT-ANDC2...
@anchor{#clhs-function-bit-and-bit-andc1-bit-andc2...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_bitcm_sbit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_bit-vector-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BIT-AND, BIT-ANDC1, BIT-ANDC2, BIT-EQV, BIT-IOR,
BIT-NAND, BIT-NOR, BIT-NOT, BIT-ORC1, BIT-ORC2, BIT-XOR}

@strong{Syntax:}

@strong{bit-and} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-andc1} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-andc2} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-eqv} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-ior} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-nand} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-nor} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-orc1} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-orc2} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-xor} @emph{bit-array1 bit-array2} &optional @emph{opt-arg}
=> @emph{resulting-bit-array}

@strong{bit-not} @emph{bit-array &optional opt-arg} =>
@emph{resulting-bit-array}

@strong{Arguments and Values:}

@emph{bit-array}, @emph{bit-array1}, @emph{bit-array2}---a
@uref{glo_b.html#bit_array,@emph{bit array}}.

@emph{Opt-arg}---a @uref{glo_b.html#bit_array,@emph{bit array}}, or
@uref{any_t.html#t,@strong{t}}, or @uref{any_nil.html#nil,@strong{nil}}.
The default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{Bit-array}, @emph{bit-array1}, @emph{bit-array2}, and
@emph{opt-arg} (if an @uref{glo_a.html#array,@emph{array}}) must all be
of the same @uref{glo_r.html#rank,@emph{rank}} and
@uref{glo_d.html#dimension,@emph{dimensions}}.

@emph{resulting-bit-array}---a @uref{glo_b.html#bit_array,@emph{bit
array}}.

@strong{Description:}

These functions perform bit-wise logical operations on @emph{bit-array1}
and @emph{bit-array2} and return an @uref{glo_a.html#array,@emph{array}}
of matching @uref{glo_r.html#rank,@emph{rank}} and
@uref{glo_d.html#dimension,@emph{dimensions}}, such that any given bit
of the result is produced by operating on corresponding bits from each
of the arguments.

In the case of @ref{#bit-not,@strong{bit-not}}, an
@uref{glo_a.html#array,@emph{array}} of
@uref{glo_r.html#rank,@emph{rank}} and
@uref{glo_d.html#dimension,@emph{dimensions}} matching @emph{bit-array}
is returned that contains a copy of @emph{bit-array} with all the bits
inverted.

If @emph{opt-arg} is of type (array bit) the contents of the result are
destructively placed into @emph{opt-arg}. If @emph{opt-arg} is the
symbol @uref{any_t.html#t,@strong{t}}, @emph{bit-array} or
@emph{bit-array1} is replaced with the result; if @emph{opt-arg} is
@uref{any_nil.html#nil,@strong{nil}} or omitted, a new
@uref{glo_a.html#array,@emph{array}} is created to contain the result.

The next figure indicates the logical operation performed by each of the
@uref{glo_f.html#function,@emph{functions}}.

@verbatim
                                                                                                       
Function                                                 Operation                                     
----------
                                                                                                       
                                                         
bit-and                                                  and                                           
bit-eqv                                                  equivalence (exclusive nor)                   
bit-not                                                  complement                                    
bit-ior                                                  inclusive or                                  
bit-xor                                                  exclusive or                                  
bit-nand                                                 complement of bit-array1 and bit-array2       
bit-nor                                                  complement of bit-array1 or bit-array2        
bit-andc1                                                and complement of bit-array1 with bit-array2  
bit-andc2                                                and bit-array1 with complement of bit-array2  
bit-orc1                                                 or complement of bit-array1 with bit-array2   
bit-orc2                                                 or bit-array1 with complement of bit-array2   
                                                                                                       
Figure 15-4.  Bit-wise Logical Operations on Bit Arrays  
@end verbatim

@strong{Examples:}

@verbatim
 (bit-and (setq ba #*11101010) #*01101011) =>  #*01101010
 (bit-and #*1100 #*1010) =>  #*1000      
 (bit-andc1 #*1100 #*1010) =>  #*0010
 (setq rba (bit-andc2 ba #*00110011 t)) =>  #*11001000
 (eq rba ba) =>  true
 (bit-not (setq ba #*11101010)) =>  #*00010101
 (setq rba (bit-not ba 
                     (setq tba (make-array 8 
                                           :element-type 'bit))))
=>  #*00010101
 (equal rba tba) =>  true
 (bit-xor #*1100 #*1010) =>  #*0110
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_logandcm__rc2cm_logxor.html#lognot,@strong{lognot}},
@uref{fun_logandcm__rc2cm_logxor.html#logand,@strong{logand}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BIT-VECTOR-P
@subsubsection CLHS: Function BIT-VECTOR-P
@anchor{#clhs-function-bit-vector-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_bit-andcm_c2cm_bit-xor.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_simple-bit-vector-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BIT-VECTOR-P}

@strong{Syntax:}

@strong{bit-vector-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_bit-vector.html#bit-vector,@strong{bit-vector}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (bit-vector-p (make-array 6 
                           :element-type 'bit 
                           :fill-pointer t)) =>  true
 (bit-vector-p #*) =>  true
 (bit-vector-p (make-array 6)) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_typep.html#typep,@strong{typep}}

@strong{Notes:}

@verbatim
 (bit-vector-p object) ==  (typep object 'bit-vector)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-ARRAY
@subsubsection CLHS: Function MAKE-ARRAY
@anchor{#clhs-function-make-array}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_simple-bit-vector.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_adjust-array.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-ARRAY}

@strong{Syntax:}

@strong{make-array} @emph{dimensions &key element-type initial-element
initial-contents adjustable fill-pointer displaced-to
displaced-index-offset}

=> @emph{new-array}

@strong{Arguments and Values:}

@emph{dimensions}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_v.html#valid_array_dimension,@emph{valid array dimensions}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}. The default is @uref{syscla_t.html#t,@strong{t}}.

@emph{initial-element}---an @uref{glo_o.html#object,@emph{object}}.

@emph{initial-contents}---an @uref{glo_o.html#object,@emph{object}}.

@emph{adjustable}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{fill-pointer}---a @uref{glo_v.html#valid_fill_pointer,@emph{valid
fill pointer}} for the @uref{glo_a.html#array,@emph{array}} to be
created, or @uref{any_t.html#t,@strong{t}} or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{displaced-to}---an @uref{glo_a.html#array,@emph{array}} or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}. This option must not be supplied
if either @emph{initial-element} or @emph{initial-contents} is supplied.

@emph{displaced-index-offset}---a
@uref{glo_v.html#valid_array_row-major_index,@emph{valid array row-major
index}} for @emph{displaced-to}. The default is 0. This option must not
be supplied unless a @uref{glo_n.html#non-nil,@emph{non-nil}}
@emph{displaced-to} is supplied.

@emph{new-array}---an @uref{glo_a.html#array,@emph{array}}.

@strong{Description:}

Creates and returns an @uref{glo_a.html#array,@emph{array}} constructed
of the most @uref{glo_s.html#specialized,@emph{specialized}}
@uref{glo_t.html#type,@emph{type}} that can accommodate elements of
@uref{glo_t.html#type,@emph{type}} given by @emph{element-type}. If
@emph{dimensions} is @uref{any_nil.html#nil,@strong{nil}} then a
zero-dimensional @uref{glo_a.html#array,@emph{array}} is created.

@emph{Dimensions} represents the dimensionality of the new
@uref{glo_a.html#array,@emph{array}}.

@emph{element-type} indicates the @uref{glo_t.html#type,@emph{type}} of
the elements intended to be stored in the @emph{new-array}. The
@emph{new-array} can actually store any
@uref{glo_o.html#object,@emph{objects}} of the
@uref{glo_t.html#type,@emph{type}} which results from @emph{upgrading}
@emph{element-type}; see @uref{sec_15-1-2-1.html,Section 15.1.2.1 (Array
Upgrading)}.

If @emph{initial-element} is supplied, it is used to initialize each
@uref{glo_e.html#element,@emph{element}} of @emph{new-array}. If
@emph{initial-element} is supplied, it must be of the
@uref{glo_t.html#type,@emph{type}} given by @emph{element-type}.
@emph{initial-element} cannot be supplied if either the
:initial-contents option is supplied or @emph{displaced-to} is
@uref{glo_n.html#non-nil,@emph{non-nil}}. If @emph{initial-element} is
not supplied, the consequences of later reading an uninitialized
@uref{glo_e.html#element,@emph{element}} of @emph{new-array} are
undefined unless either @emph{initial-contents} is supplied or
@emph{displaced-to} is @uref{glo_n.html#non-nil,@emph{non-nil}}.

@emph{initial-contents} is used to initialize the contents of
@uref{glo_a.html#array,@emph{array}}. For example:

@verbatim
 (make-array '(4 2 3) :initial-contents
             '(((a b c) (1 2 3))
              ((d e f) (3 1 2))
              ((g h i) (2 3 1))
              ((j k l) (0 0 0))))
@end verbatim

@emph{initial-contents} is composed of a nested structure of
@uref{glo_s.html#sequence,@emph{sequences}}. The numbers of levels in
the structure must equal the rank of
@uref{glo_a.html#array,@emph{array}}. Each leaf of the nested structure
must be of the @uref{glo_t.html#type,@emph{type}} given by
@emph{element-type}. If @uref{glo_a.html#array,@emph{array}} is
zero-dimensional, then @emph{initial-contents} specifies the single
@uref{glo_e.html#element,@emph{element}}. Otherwise,
@emph{initial-contents} must be a
@uref{glo_s.html#sequence,@emph{sequence}} whose length is equal to the
first dimension; each element must be a nested structure for an
@uref{glo_a.html#array,@emph{array}} whose dimensions are the remaining
dimensions, and so on. @emph{Initial-contents} cannot be supplied if
either @emph{initial-element} is supplied or @emph{displaced-to} is
@uref{glo_n.html#non-nil,@emph{non-nil}}. If @emph{initial-contents} is
not supplied, the consequences of later reading an uninitialized
@uref{glo_e.html#element,@emph{element}} of @emph{new-array} are
undefined unless either @emph{initial-element} is supplied or
@emph{displaced-to} is @uref{glo_n.html#non-nil,@emph{non-nil}}.

If @emph{adjustable} is @uref{glo_n.html#non-nil,@emph{non-nil}}, the
array is @uref{glo_e.html#expressly_adjustable,@emph{expressly
adjustable}} (and so @uref{glo_a.html#actually_adjustable,@emph{actually
adjustable}}); otherwise, the array is not
@uref{glo_e.html#expressly_adjustable,@emph{expressly adjustable}} (and
it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether the array is @uref{glo_a.html#actually_adjustable,@emph{actually
adjustable}}).

If @emph{fill-pointer} is @uref{glo_n.html#non-nil,@emph{non-nil}}, the
@uref{glo_a.html#array,@emph{array}} must be one-dimensional; that is,
the @uref{glo_a.html#array,@emph{array}} must be a
@uref{glo_v.html#vector,@emph{vector}}. If @emph{fill-pointer} is
@uref{any_t.html#t,@strong{t}}, the length of the
@uref{glo_v.html#vector,@emph{vector}} is used to initialize the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}. If
@emph{fill-pointer} is an @uref{glo_i.html#integer,@emph{integer}}, it
becomes the initial @uref{glo_f.html#fill_pointer,@emph{fill pointer}}
for the @uref{glo_v.html#vector,@emph{vector}}.

If @emph{displaced-to} is @uref{glo_n.html#non-nil,@emph{non-nil}},
@ref{#make-array,@strong{make-array}} will create a
@uref{glo_d.html#displaced_array,@emph{displaced array}} and
@emph{displaced-to} is the @uref{glo_t.html#target,@emph{target}} of
that @uref{glo_d.html#displaced_array,@emph{displaced array}}. In that
case, the consequences are undefined if the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of @emph{displaced-to} is not
@uref{glo_t.html#type_equivalent,@emph{type equivalent}} to the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of the @uref{glo_a.html#array,@emph{array}} being created. If
@emph{displaced-to} is @uref{any_nil.html#nil,@strong{nil}}, the
@uref{glo_a.html#array,@emph{array}} is not a
@uref{glo_d.html#displaced_array,@emph{displaced array}}.

The @emph{displaced-index-offset} is made to be the index offset of the
@uref{glo_a.html#array,@emph{array}}. When an array A is given as the
:displaced-to @uref{glo_a.html#argument,@emph{argument}} to
@ref{#make-array,@strong{make-array}} when creating array B, then array
B is said to be displaced to array A. The total number of elements in an
@uref{glo_a.html#array,@emph{array}}, called the total size of the
@uref{glo_a.html#array,@emph{array}}, is calculated as the product of
all the dimensions. It is required that the total size of A be no
smaller than the sum of the total size of B plus the offset n supplied
by the @emph{displaced-index-offset}. The effect of displacing is that
array B does not have any elements of its own, but instead maps
@uref{glo_a.html#access,@emph{accesses}} to itself into
@uref{glo_a.html#access,@emph{accesses}} to array A. The mapping treats
both @uref{glo_a.html#array,@emph{arrays}} as if they were
one-dimensional by taking the elements in row-major order, and then maps
an @uref{glo_a.html#access,@emph{access}} to element k of array B to an
@uref{glo_a.html#access,@emph{access}} to element k+n of array A.

If @ref{#make-array,@strong{make-array}} is called with
@emph{adjustable}, @emph{fill-pointer}, and @emph{displaced-to} each
@uref{any_nil.html#nil,@strong{nil}}, then the result is a
@uref{glo_s.html#simple_array,@emph{simple array}}. If
@ref{#make-array,@strong{make-array}} is called with one or more of
@emph{adjustable}, @emph{fill-pointer}, or @emph{displaced-to} being
@uref{glo_t.html#true,@emph{true}}, whether the resulting
@uref{glo_a.html#array,@emph{array}} is a
@uref{glo_s.html#simple_array,@emph{simple array}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

When an array A is given as the :displaced-to
@uref{glo_a.html#argument,@emph{argument}} to
@ref{#make-array,@strong{make-array}} when creating array B, then array
B is said to be displaced to array A. The total number of elements in an
@uref{glo_a.html#array,@emph{array}}, called the total size of the
@uref{glo_a.html#array,@emph{array}}, is calculated as the product of
all the dimensions. The consequences are unspecified if the total size
of A is smaller than the sum of the total size of B plus the offset n
supplied by the @emph{displaced-index-offset}. The effect of displacing
is that array B does not have any elements of its own, but instead maps
@uref{glo_a.html#access,@emph{accesses}} to itself into
@uref{glo_a.html#access,@emph{accesses}} to array A. The mapping treats
both @uref{glo_a.html#array,@emph{arrays}} as if they were
one-dimensional by taking the elements in row-major order, and then maps
an @uref{glo_a.html#access,@emph{access}} to element k of array B to an
@uref{glo_a.html#access,@emph{access}} to
@uref{glo_e.html#element,@emph{element}} k+n of array A.

@strong{Examples:}

@verbatim

 (make-array 5) ;; Creates a one-dimensional array of five elements.
 (make-array '(3 4) :element-type '(mod 16)) ;; Creates a 
                ;;two-dimensional array, 3 by 4, with four-bit elements.
 (make-array 5 :element-type 'single-float) ;; Creates an array of single-floats.
@end verbatim

@verbatim
 (make-array nil :initial-element nil) =>  #0ANIL
 (make-array 4 :initial-element nil) =>  #(NIL NIL NIL NIL)
 (make-array '(2 4) 
              :element-type '(unsigned-byte 2) 
              :initial-contents '((0 1 2 3) (3 2 1 0)))
=>  #2A((0 1 2 3) (3 2 1 0))
 (make-array 6
              :element-type 'character 
              :initial-element #\a 
              :fill-pointer 3) =>  "aaa"
@end verbatim

The following is an example of making a
@uref{glo_d.html#displaced_array,@emph{displaced array}}.

@verbatim
 (setq a (make-array '(4 3))) 
=>  #<ARRAY 4x3 simple 32546632>
 (dotimes (i 4)
   (dotimes (j 3)
     (setf (aref a i j) (list i 'x j '= (* i j)))))
=>  NIL
 (setq b (make-array 8 :displaced-to a
                       :displaced-index-offset 2))
=>  #<ARRAY 8 indirect 32550757>
 (dotimes (i 8)
   (print (list i (aref b i))))
>>  (0 (0 X 2 = 0)) 
>>  (1 (1 X 0 = 0)) 
>>  (2 (1 X 1 = 1)) 
>>  (3 (1 X 2 = 2)) 
>>  (4 (2 X 0 = 0)) 
>>  (5 (2 X 1 = 2)) 
>>  (6 (2 X 2 = 4)) 
>>  (7 (3 X 0 = 0)) 
=>  NIL
@end verbatim

The last example depends on the fact that
@uref{glo_a.html#array,@emph{arrays}} are, in effect, stored in
row-major order.

@verbatim
 (setq a1 (make-array 50))
=>  #<ARRAY 50 simple 32562043>
 (setq b1 (make-array 20 :displaced-to a1 :displaced-index-offset 10))
=>  #<ARRAY 20 indirect 32563346>
 (length b1) =>  20

 (setq a2 (make-array 50 :fill-pointer 10))
=>  #<ARRAY 50 fill-pointer 10 46100216>
 (setq b2 (make-array 20 :displaced-to a2 :displaced-index-offset 10))
=>  #<ARRAY 20 indirect 46104010>
 (length a2) =>  10
 (length b2) =>  20

 (setq a3 (make-array 50 :fill-pointer 10))
=>  #<ARRAY 50 fill-pointer 10 46105663>
 (setq b3 (make-array 20 :displaced-to a3 :displaced-index-offset 10
                         :fill-pointer 5))
=>  #<ARRAY 20 indirect, fill-pointer 5 46107432>
 (length a3) =>  10
 (length b3) =>  5
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_adjustable-array-p.html#adjustable-array-p,@strong{adjustable-array-p}},
@uref{acc_aref.html#aref,@strong{aref}},
@uref{fun_arrayp.html#arrayp,@strong{arrayp}},
@uref{fun_array-element-type.html#array-element-type,@strong{array-element-type}},
@uref{convar_array-rank-limit.html#array-rank-limit,@strong{array-rank-limit}},
@uref{convar_array-_ension-limit.html#array-dimension-limit,@strong{array-dimension-limit}},
@uref{acc_fill-pointer.html#fill-pointer,@strong{fill-pointer}},
@uref{fun_upgraded-_element-type.html#upgraded-array-element-type,@strong{upgraded-array-element-type}}

@strong{Notes:}

There is no specified way to create an
@uref{glo_a.html#array,@emph{array}} for which
@uref{fun_adjustable-array-p.html#adjustable-array-p,@strong{adjustable-array-p}}
definitely returns @uref{glo_f.html#false,@emph{false}}. There is no
specified way to create an @uref{glo_a.html#array,@emph{array}} that is
not a @uref{glo_s.html#simple_array,@emph{simple array}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss005.html,ADJUST-ARRAY-NOT-ADJUSTABLE:IMPLICIT-COPY}
@item
@uref{../Issues/iss356.html,UNINITIALIZED-ELEMENTS:CONSEQUENCES-UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIMPLE-BIT-VECTOR-P
@subsubsection CLHS: Function SIMPLE-BIT-VECTOR-P
@anchor{#clhs-function-simple-bit-vector-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_bit-vector-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-16.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIMPLE-BIT-VECTOR-P}

@strong{Syntax:}

@strong{simple-bit-vector-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_simple-bit-vector.html#simple-bit-vector,@strong{simple-bit-vector}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (simple-bit-vector-p (make-array 6)) =>  false
 (simple-bit-vector-p #*) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_simple-vector-p.html#simple-vector-p,@strong{simple-vector-p}}

@strong{Notes:}

@verbatim
 (simple-bit-vector-p object) ==  (typep object 'simple-bit-vector)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIMPLE-VECTOR-P
@subsubsection CLHS: Function SIMPLE-VECTOR-P
@anchor{#clhs-function-simple-vector-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_array-_l-size-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_svref.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIMPLE-VECTOR-P}

@strong{Syntax:}

@strong{simple-vector-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_simple-vector.html#simple-vector,@strong{simple-vector}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}..

@strong{Examples:}

@verbatim
 (simple-vector-p (make-array 6)) =>  true
 (simple-vector-p "aaaaaa") =>  false
 (simple-vector-p (make-array 6 :fill-pointer t)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{typ_simple-vector.html#simple-vector,@strong{simple-vector}}

@strong{Notes:}

@verbatim
 (simple-vector-p object) ==  (typep object 'simple-vector)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UPGRADED-ARRAY-ELEMENT-TYPE
@subsubsection CLHS: Function UPGRADED-ARRAY-ELEMENT-TYPE
@anchor{#clhs-function-upgraded-array-element-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_row-major-aref.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_array-_ension-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UPGRADED-ARRAY-ELEMENT-TYPE}

@strong{Syntax:}

@strong{upgraded-array-element-type} @emph{typespec &optional
environment} => @emph{upgraded-typespec}

@strong{Arguments and Values:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}, denoting the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} and the current
@uref{glo_g.html#global_environment,@emph{global environment}}.

@emph{upgraded-typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

Returns the @uref{glo_e.html#element_type,@emph{element type}} of the
most @uref{glo_s.html#specialized,@emph{specialized}}
@uref{glo_a.html#array,@emph{array}} representation capable of holding
items of the @uref{glo_t.html#type,@emph{type}} denoted by
@emph{typespec}.

The @emph{typespec} is a @uref{glo_s.html#subtype,@emph{subtype}} of
(and possibly @uref{glo_t.html#type_equivalent,@emph{type equivalent}}
to) the @emph{upgraded-typespec}.

If @emph{typespec} is @uref{typ_bit.html#bit,@strong{bit}}, the result
is @uref{glo_t.html#type_equivalent,@emph{type equivalent}} to bit. If
@emph{typespec} is
@uref{typ_base-char.html#base-char,@strong{base-char}}, the result is
@uref{glo_t.html#type_equivalent,@emph{type equivalent}} to base-char.
If @emph{typespec} is
@uref{syscla_character.html#character,@strong{character}}, the result is
@uref{glo_t.html#type_equivalent,@emph{type equivalent}} to character.

The purpose of
@ref{#upgraded-array-element-type,@strong{upgraded-array-element-type}}
is to reveal how an implementation does its @emph{upgrading}.

The @emph{environment} is used to expand any
@uref{glo_d.html#derived_type_specifier,@emph{derived type specifiers}}
that are mentioned in the @emph{typespec}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_array-element-type.html#array-element-type,@strong{array-element-type}},
@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:}

Except for storage allocation consequences and dealing correctly with
the optional @emph{environment}
@uref{glo_a.html#argument,@emph{argument}},
@ref{#upgraded-array-element-type,@strong{upgraded-array-element-type}}
could be defined as:

@verbatim
 (defun upgraded-array-element-type (type &optional environment)
   (array-element-type (make-array 0 :element-type type)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss335.html,SUBTYPEP-ENVIRONMENT:ADD-ARG}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function VECTOR-POP
@subsubsection CLHS: Function VECTOR-POP
@anchor{#clhs-function-vector-pop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_vector.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_vector-pu_-push-extend.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{VECTOR-POP}

@strong{Syntax:}

@strong{vector-pop} @emph{vector} => @emph{element}

@strong{Arguments and Values:}

@emph{vector}---a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@emph{element}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Decreases the @uref{glo_f.html#fill_pointer,@emph{fill pointer}} of
@emph{vector} by one, and retrieves the
@uref{glo_e.html#element,@emph{element}} of @emph{vector} that is
designated by the new @uref{glo_f.html#fill_pointer,@emph{fill
pointer}}.

@strong{Examples:}

@verbatim
 (vector-push (setq fable (list 'fable))
              (setq fa (make-array 8
                                   :fill-pointer 2
                                   :initial-element 'sisyphus))) =>  2 
 (fill-pointer fa) =>  3 
 (eq (vector-pop fa) fable) =>  true
 (vector-pop fa) =>  SISYPHUS 
 (fill-pointer fa) =>  1 
@end verbatim

@strong{Side Effects:}

The @uref{glo_f.html#fill_pointer,@emph{fill pointer}} is decreased by
one.

@strong{Affected By:}

The value of the @uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is signaled
if @emph{vector} does not have a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

If the @uref{glo_f.html#fill_pointer,@emph{fill pointer}} is zero,
@ref{#vector-pop,@strong{vector-pop}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@uref{fun_vector-pu_-push-extend.html#vector-push,@strong{vector-push}},
@uref{fun_vector-pu_-push-extend.html#vector-push-extend,@strong{vector-push-extend}},
@uref{acc_fill-pointer.html#fill-pointer,@strong{fill-pointer}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function VECTOR-PUSH VECTOR-PUSH-EXTEND
@subsubsection CLHS: Function VECTOR-PUSH, VECTOR-PUSH-EXTEND
@anchor{#clhs-function-vector-push-vector-push-extend}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_vector-pop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_vectorp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{VECTOR-PUSH, VECTOR-PUSH-EXTEND}

@strong{Syntax:}

@strong{vector-push} @emph{new-element vector} => @emph{new-index-p}

@strong{vector-push-extend} @emph{new-element vector &optional
extension} => @emph{new-index}

@strong{Arguments and Values:}

@emph{new-element}---an @uref{glo_o.html#object,@emph{object}}.

@emph{vector}---a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@emph{extension}---a positive @uref{glo_i.html#integer,@emph{integer}}.
The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{new-index-p}---a @uref{glo_v.html#valid_array_index,@emph{valid
array index}} for @emph{vector}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-index}---a @uref{glo_v.html#valid_array_index,@emph{valid
array index}} for @emph{vector}.

@strong{Description:}

@ref{#vector-push,@strong{vector-push}} and
@ref{#vector-push-extend,@strong{vector-push-extend}} store
@emph{new-element} in @emph{vector}.
@ref{#vector-push,@strong{vector-push}} attempts to store
@emph{new-element} in the element of @emph{vector} designated by the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, and to increase the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} by one. If the (>=
(fill-pointer @emph{vector}) (array-dimension @emph{vector} 0)), neither
@emph{vector} nor its @uref{glo_f.html#fill_pointer,@emph{fill pointer}}
are affected. Otherwise, the store and increment take place and
@ref{#vector-push,@strong{vector-push}} returns the former value of the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} which is one less
than the one it leaves in @emph{vector}.

@ref{#vector-push-extend,@strong{vector-push-extend}} is just like
@ref{#vector-push,@strong{vector-push}} except that if the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} gets too large,
@emph{vector} is extended using
@uref{fun_adjust-array.html#adjust-array,@strong{adjust-array}} so that
it can contain more elements. @emph{Extension} is the minimum number of
elements to be added to @emph{vector} if it must be extended.

@ref{#vector-push,@strong{vector-push}} and
@ref{#vector-push-extend,@strong{vector-push-extend}} return the index
of @emph{new-element} in @emph{vector}. If (>= (fill-pointer
@emph{vector}) (array-dimension @emph{vector} 0)),
@ref{#vector-push,@strong{vector-push}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (vector-push (setq fable (list 'fable))
              (setq fa (make-array 8 
                                   :fill-pointer 2
                                   :initial-element 'first-one))) =>  2 
 (fill-pointer fa) =>  3 
 (eq (aref fa 2) fable) =>  true
 (vector-push-extend #\X
                    (setq aa 
                          (make-array 5
                                      :element-type 'character
                                      :adjustable t
                                      :fill-pointer 3))) =>  3 
 (fill-pointer aa) =>  4 
 (vector-push-extend #\Y aa 4) =>  4 
 (array-total-size aa) =>  at least 5 
 (vector-push-extend #\Z aa 4) =>  5 
 (array-total-size aa) =>  9 ;(or more)
@end verbatim

@strong{Affected By:}

The value of the @uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

How @emph{vector} was created.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled by
@ref{#vector-push-extend,@strong{vector-push-extend}} if it tries to
extend @emph{vector} and @emph{vector} is not
@uref{glo_a.html#actually_adjustable,@emph{actually adjustable}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if
@emph{vector} does not have a @uref{glo_f.html#fill_pointer,@emph{fill
pointer}}.

@strong{See Also:}

@uref{fun_adjustable-array-p.html#adjustable-array-p,@strong{adjustable-array-p}},
@uref{acc_fill-pointer.html#fill-pointer,@strong{fill-pointer}},
@uref{fun_vector-pop.html#vector-pop,@strong{vector-pop}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function VECTOR
@subsubsection CLHS: Function VECTOR
@anchor{#clhs-function-vector}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_svref.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_vector-pop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{VECTOR}

@strong{Syntax:}

@strong{vector} @emph{&rest objects} => @emph{vector}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{vector}---a @uref{glo_v.html#vector,@emph{vector}} of
@uref{glo_t.html#type,@emph{type}} (vector t *).

@strong{Description:}

Creates a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_s.html#simple_general_vector,@emph{simple general vector}}
whose size corresponds to the number of @emph{objects}.

The @uref{glo_v.html#vector,@emph{vector}} is initialized to contain the
@emph{objects}.

@strong{Examples:}

@verbatim
 (arrayp (setq v (vector 1 2 'sirens))) =>  true
 (vectorp v) =>  true
 (simple-vector-p v) =>  true         
 (length v) =>  3
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}}

@strong{Notes:}

@ref{#vector,@strong{vector}} is analogous to
@uref{fun_listcm_listst.html#list,@strong{list}}.

@verbatim
 (vector a1 a2 ... an)
  ==  (make-array (list n) :element-type t
                          :initial-contents 
                            (list a1 a2 ... an))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function VECTORP
@subsubsection CLHS: Function VECTORP
@anchor{#clhs-function-vectorp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_vector-pu_-push-extend.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_bitcm_sbit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{VECTORP}

@strong{Syntax:}

@strong{vectorp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_vector.html#vector,@strong{vector}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (vectorp "aaaaaa") =>  true
 (vectorp (make-array 6 :fill-pointer t)) =>  true
 (vectorp (make-array '(2 3 4))) =>  false
 (vectorp #*11) =>  true
 (vectorp #b11) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (vectorp object) ==  (typep object 'vector)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class BIT-VECTOR
@subsubsection CLHS: System Class BIT-VECTOR
@anchor{#clhs-system-class-bit-vector}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_simple-vector.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_simple-bit-vector.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{BIT-VECTOR}

@strong{Class Precedence List:}

@ref{#bit-vector,@strong{bit-vector}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_b.html#bit_vector,@emph{bit vector}} is a
@uref{glo_v.html#vector,@emph{vector}} the
@uref{glo_e.html#element_type,@emph{element type}} of which is
@uref{glo_b.html#bit,@emph{bit}}.

The @uref{glo_t.html#type,@emph{type}}
@ref{#bit-vector,@strong{bit-vector}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_vector.html#vector,@strong{vector}}, for
@ref{#bit-vector,@strong{bit-vector}} means (vector bit).

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{bit-vector} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the same @uref{glo_t.html#type,@emph{type}} as the
@uref{glo_t.html#type,@emph{type}} (array bit (@emph{size})); that is,
the set of @uref{glo_b.html#bit_vector,@emph{bit vectors}} of size
@emph{size}.

@strong{See Also:}

@uref{sec_2-4-8-4.html,Section 2.4.8.4 (Sharpsign Asterisk)},
@uref{sec_22-1-3-6.html,Section 22.1.3.6 (Printing Bit Vectors)},
@uref{sec_15-1-2-2.html,Section 15.1.2.2 (Required Kinds of Specialized
Arrays)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class VECTOR
@subsubsection CLHS: System Class VECTOR
@anchor{#clhs-system-class-vector}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_simple-array.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_simple-vector.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{VECTOR}

@strong{Class Precedence List:}

@ref{#vector,@strong{vector}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

Any one-dimensional @uref{glo_a.html#array,@emph{array}} is a
@uref{glo_v.html#vector,@emph{vector}}.

The @uref{glo_t.html#type,@emph{type}} @ref{#vector,@strong{vector}} is
a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_array.html#array,@strong{array}}; for all
@uref{glo_t.html#type,@emph{types}} x, (vector x) is the same as (array
x (*)).

The @uref{glo_t.html#type,@emph{type}} (vector t), the
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_string.html#string,@strong{string}}, and the
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_bit-vector.html#bit-vector,@strong{bit-vector}} are
@uref{glo_d.html#disjoint,@emph{disjoint}}
@uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}} @ref{#vector,@strong{vector}}.

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{vector} @emph{[@{element-type |
@uref{any_st.html#ST,@strong{*}}@} [@{size |
@uref{any_st.html#ST,@strong{*}}@}]]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

This denotes the set of specialized
@uref{glo_v.html#vector,@emph{vectors}} whose
@uref{glo_e.html#element_type,@emph{element type}} and @emph{dimension}
match the specified values. Specifically:

If @emph{element-type} is the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}},
@uref{glo_v.html#vector,@emph{vectors}} are not excluded on the basis of
their @uref{glo_e.html#element_type,@emph{element type}}. Otherwise,
only those @emph{vectors} are included whose
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} is the result of @emph{upgrading} @emph{element-type}; see
@uref{sec_15-1-2-1.html,Section 15.1.2.1 (Array Upgrading)}.

If a @emph{size} is specified, the set includes only those
@emph{vectors} whose only @uref{glo_d.html#dimension,@emph{dimension}}
is @emph{size}. If the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}} is specified instead of a @emph{size},
the set is not restricted on the basis of
@uref{glo_d.html#dimension,@emph{dimension}}.

@strong{See Also:}

@uref{sec_15-1-2-2.html,Section 15.1.2.2 (Required Kinds of Specialized
Arrays)}, @uref{sec_2-4-8-3.html,Section 2.4.8.3 (Sharpsign
Left-Parenthesis)}, @uref{sec_22-1-3-7.html,Section 22.1.3.7 (Printing
Other Vectors)}, @uref{sec_2-4-8-12.html,Section 2.4.8.12 (Sharpsign A)}

@strong{Notes:}

The @uref{glo_t.html#type,@emph{type}} (vector @emph{e} @emph{s}) is
equivalent to the @uref{glo_t.html#type,@emph{type}} (array @emph{e}
(@emph{s})).

The type (vector bit) has the name
@uref{syscla_bit-vector.html#bit-vector,@strong{bit-vector}}.

The union of all @uref{glo_t.html#type,@emph{types}} (vector C), where C
is any @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{syscla_character.html#character,@strong{character}}, has the name
@uref{syscla_string.html#string,@strong{string}}.

(vector *) refers to all @uref{glo_v.html#vector,@emph{vectors}}
regardless of element type, (vector @emph{type-specifier}) refers only
to those @uref{glo_v.html#vector,@emph{vectors}} that can result from
giving @emph{type-specifier} as the :element-type argument to
@uref{fun_make-array.html#make-array,@strong{make-array}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIMPLE-ARRAY
@subsubsection CLHS: Type SIMPLE-ARRAY
@anchor{#clhs-type-simple-array}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_array.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_vector.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIMPLE-ARRAY}

@strong{Supertypes:}

@ref{#simple-array,@strong{simple-array}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} of an
@uref{glo_a.html#array,@emph{array}} that is not displaced to another
@uref{glo_a.html#array,@emph{array}}, has no
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, and is not
@uref{glo_e.html#expressly_adjustable,@emph{expressly adjustable}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#simple-array,@strong{simple-array}}. The concept of a
@uref{glo_s.html#simple_array,@emph{simple array}} exists to allow the
implementation to use a specialized representation and to allow the user
to declare that certain values will always be
@uref{glo_s.html#simple_array,@emph{simple arrays}}.

The @uref{glo_t.html#type,@emph{types}}
@uref{typ_simple-vector.html#simple-vector,@strong{simple-vector}},
@uref{typ_simple-string.html#simple-string,@strong{simple-string}}, and
@uref{typ_simple-bit-vector.html#simple-bit-vector,@strong{simple-bit-vector}}
are @uref{glo_d.html#disjoint,@emph{disjoint}}
@uref{glo_s.html#subtype,@emph{subtypes}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#simple-array,@strong{simple-array}}, for they respectively mean
(simple-array t (*)), the union of all (simple-array @emph{c} (*)) for
any @emph{c} being a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}, and
(simple-array bit (*)).

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{simple-array} @emph{[@{element-type |
@uref{any_st.html#ST,@strong{*}}@} [dimension-spec]]}

@verbatim
dimension-spec::= rank | * | ({dimension | *}*) 
@end verbatim

@strong{Compound Type Specifier Arguments:}

@emph{dimension}---a @uref{glo_v.html#valid_array_dimension,@emph{valid
array dimension}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{rank}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}.

@strong{Compound Type Specifier Description:}

This @uref{glo_c.html#compound_type_specifier,@emph{compound type
specifier}} is treated exactly as the corresponding
@uref{glo_c.html#compound_type_specifier,@emph{compound type specifier}}
for @uref{glo_t.html#type,@emph{type}}
@uref{syscla_array.html#array,@strong{array}} would be treated, except
that the set is further constrained to include only
@uref{glo_s.html#simple_array,@emph{simple arrays}}.

@strong{Notes:}

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @uref{glo_d.html#displaced_array,@emph{displaced arrays}},
@uref{glo_v.html#vector,@emph{vectors}} with
@uref{glo_f.html#fill_pointer,@emph{fill pointers}}, or arrays that are
@uref{glo_a.html#actually_adjustable,@emph{actually adjustable}} are
@uref{glo_s.html#simple_array,@emph{simple arrays}}.

(simple-array *) refers to all
@uref{glo_s.html#simple_array,@emph{simple arrays}} regardless of
element type, (simple-array @emph{type-specifier}) refers only to those
@uref{glo_s.html#simple_array,@emph{simple arrays}} that can result from
giving @emph{type-specifier} as the :element-type argument to
@uref{fun_make-array.html#make-array,@strong{make-array}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIMPLE-BIT-VECTOR
@subsubsection CLHS: Type SIMPLE-BIT-VECTOR
@anchor{#clhs-type-simple-bit-vector}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_bit-vector.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-array.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIMPLE-BIT-VECTOR}

@strong{Supertypes:}

@ref{#simple-bit-vector,@strong{simple-bit-vector}},
@uref{syscla_bit-vector.html#bit-vector,@strong{bit-vector}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{typ_simple-array.html#simple-array,@strong{simple-array}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} of a
@uref{glo_b.html#bit_vector,@emph{bit vector}} that is not displaced to
another @uref{glo_a.html#array,@emph{array}}, has no
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, and is not
@uref{glo_e.html#expressly_adjustable,@emph{expressly adjustable}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#simple-bit-vector,@strong{simple-bit-vector}}.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{simple-bit-vector} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}. The default is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the same type as the @uref{glo_t.html#type,@emph{type}}
(simple-array bit (@emph{size})); that is, the set of
@uref{glo_s.html#simple_bit_vector,@emph{simple bit vectors}} of size
@emph{size}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIMPLE-VECTOR
@subsubsection CLHS: Type SIMPLE-VECTOR
@anchor{#clhs-type-simple-vector}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_vector.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_arrays_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_bit-vector.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIMPLE-VECTOR}

@strong{Supertypes:}

@ref{#simple-vector,@strong{simple-vector}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{typ_simple-array.html#simple-array,@strong{simple-array}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} of a
@uref{glo_v.html#vector,@emph{vector}} that is not displaced to another
@uref{glo_a.html#array,@emph{array}}, has no
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, is not
@uref{glo_e.html#expressly_adjustable,@emph{expressly adjustable}} and
is able to hold elements of any @uref{glo_t.html#type,@emph{type}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#simple-vector,@strong{simple-vector}}.

The @uref{glo_t.html#type,@emph{type}}
@ref{#simple-vector,@strong{simple-vector}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_vector.html#vector,@strong{vector}}, and is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}} (vector t).

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{simple-vector} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}. The default is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This is the same as (simple-array t (@emph{size})).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 16
@section CLHS: Chapter 16
@anchor{#clhs-chapter-16}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_simple-bit-vector-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_16-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
16. Strings

@uref{sec_16-1.html,}

16.1 String Concepts

@uref{sec_the_strings_dictionary.html,}

16.2 The Strings Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Strings Dictionary::
@end menu

@node CLHS Section The Strings Dictionary
@subsection CLHS: Section The Strings Dictionary
@anchor{#clhs-section-the-strings-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_16-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-16.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
16.2 The Strings Dictionary

@uref{syscla_string.html,@emph{System Class} @strong{STRING}}

@uref{typ_base-string.html,@emph{Type} @strong{BASE-STRING}}

@uref{typ_simple-string.html,@emph{Type} @strong{SIMPLE-STRING}}

@uref{typ_simple-base-string.html,@emph{Type}
@strong{SIMPLE-BASE-STRING}}

@uref{fun_simple-string-p.html,@emph{Function} @strong{SIMPLE-STRING-P}}

@uref{acc_charcm_schar.html,@emph{Accessor} @strong{CHAR, SCHAR}}

@uref{fun_string.html,@emph{Function} @strong{STRING}}

@uref{fun_string-up_g-capitalize.html,@emph{Function}
@strong{STRING-UPCASE, STRING-DOWNCASE, STRING-CAPITALIZE,
NSTRING-UPCASE, NSTRING-DOWNCASE, NSTRING-CAPITALIZE}}

@uref{fun_string-tr_g-right-trim.html,@emph{Function}
@strong{STRING-TRIM, STRING-LEFT-TRIM, STRING-RIGHT-TRIM}}

@uref{fun_stringeqc_ng-not-lessp.html,@emph{Function} @strong{STRING=,
STRING/=, STRING<, STRING>, STRING<=, STRING>=, STRING-EQUAL,
STRING-NOT-EQUAL, STRING-LESSP, STRING-GREATERP, STRING-NOT-GREATERP,
STRING-NOT-LESSP}}

@uref{fun_stringp.html,@emph{Function} @strong{STRINGP}}

@uref{fun_make-string.html,@emph{Function} @strong{MAKE-STRING}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss034.html,CHARACTER-PROPOSAL:2-3-5}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor CHAR SCHAR::
* CLHS Function MAKE-STRING::
* CLHS Function SIMPLE-STRING-P::
* CLHS Function STRING-TRIM STRING-LEFT-TRIM::
* CLHS Function STRING-UPCASE STRING-DOWNCASE::
* CLHS Function STRING::
* CLHS Function STRING= STRING/= STRING<::
* CLHS Function STRINGP::
* CLHS Type BASE-STRING::
* CLHS Type SIMPLE-BASE-STRING::
* CLHS Type SIMPLE-STRING::
@end menu

@node CLHS Accessor CHAR SCHAR
@subsubsection CLHS: Accessor CHAR, SCHAR
@anchor{#clhs-accessor-char-schar}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_simple-string-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{CHAR, SCHAR}

@strong{Syntax:}

@strong{char} @emph{string index} => @emph{character}

@strong{schar} @emph{string index} => @emph{character}

(setf (@strong{char} @emph{string index}) @emph{new-character})

(setf (@strong{schar} @emph{string index}) @emph{new-character})

@strong{Arguments and Values:}

@emph{string}---for @ref{#char,@strong{char}}, a
@uref{glo_s.html#string,@emph{string}}; for @ref{#schar,@strong{schar}},
a @uref{glo_s.html#simple_string,@emph{simple string}}.

@emph{index}---a @uref{glo_v.html#valid_array_index,@emph{valid array
index}} for the @emph{string}.

@emph{character}, @emph{new-character}---a
@uref{glo_c.html#character,@emph{character}}.

@strong{Description:}

@ref{#char,@strong{char}} and @ref{#schar,@strong{schar}}
@uref{glo_a.html#access,@emph{access}} the
@uref{glo_e.html#element,@emph{element}} of @emph{string} specified by
@emph{index}.

@ref{#char,@strong{char}} ignores
@uref{glo_f.html#fill_pointer,@emph{fill pointers}} when
@emph{accessing} @uref{glo_e.html#element,@emph{elements}}.

@strong{Examples:}

@verbatim
 (setq my-simple-string (make-string 6 :initial-element #\A)) =>  "AAAAAA"
 (schar my-simple-string 4) =>  #\A
 (setf (schar my-simple-string 4) #\B) =>  #\B
 my-simple-string =>  "AAAABA"
 (setq my-filled-string
       (make-array 6 :element-type 'character
                     :fill-pointer 5
                     :initial-contents my-simple-string))
=>  "AAAAB"
 (char my-filled-string 4) =>  #\B
 (char my-filled-string 5) =>  #\A
 (setf (char my-filled-string 3) #\C) =>  #\C
 (setf (char my-filled-string 5) #\D) =>  #\D
 (setf (fill-pointer my-filled-string) 6) =>  6
 my-filled-string =>  "AAACBD"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_aref.html#aref,@strong{aref}},
@uref{acc_elt.html#elt,@strong{elt}}, @uref{sec_3-2-1.html,Section 3.2.1
(Compiler Terminology)}

@strong{Notes:}

@verbatim
 (char s j) ==  (aref (the string s) j)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-STRING
@subsubsection CLHS: Function MAKE-STRING
@anchor{#clhs-function-make-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_stringp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-17.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-STRING}

@strong{Syntax:}

@strong{make-string} @emph{size &key initial-element element-type} =>
@emph{string}

@strong{Arguments and Values:}

@emph{size}---a @uref{glo_v.html#valid_array_dimension,@emph{valid array
dimension}}.

@emph{initial-element}---a @uref{glo_c.html#character,@emph{character}}.
The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}. The default is
@uref{syscla_character.html#character,@strong{character}}.

@emph{string}---a @uref{glo_s.html#simple_string,@emph{simple string}}.

@strong{Description:}

@ref{#make-string,@strong{make-string}} returns a
@uref{glo_s.html#simple_string,@emph{simple string}} of length
@emph{size} whose elements have been initialized to
@emph{initial-element}.

The @emph{element-type} names the @uref{glo_t.html#type,@emph{type}} of
the @uref{glo_e.html#element,@emph{elements}} of the
@uref{glo_s.html#string,@emph{string}}; a
@uref{glo_s.html#string,@emph{string}} is constructed of the most
@uref{glo_s.html#specialized,@emph{specialized}}
@uref{glo_t.html#type,@emph{type}} that can accommodate
@uref{glo_e.html#element,@emph{elements}} of the given
@uref{glo_t.html#type,@emph{type}}.

@strong{Examples:}

@verbatim
 (make-string 10 :initial-element #\5) =>  "5555555555"
 (length (make-string 10)) =>  10
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss035.html,CHARACTER-PROPOSAL:2-3-6}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIMPLE-STRING-P
@subsubsection CLHS: Function SIMPLE-STRING-P
@anchor{#clhs-function-simple-string-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_simple-base-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_charcm_schar.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIMPLE-STRING-P}

@strong{Syntax:}

@strong{simple-string-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_simple-string.html#simple-string,@strong{simple-string}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (simple-string-p "aaaaaa") =>  true
 (simple-string-p (make-array 6 
                              :element-type 'character 
                              :fill-pointer t)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (simple-string-p object) ==  (typep object 'simple-string)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STRING-TRIM STRING-LEFT-TRIM
@subsubsection CLHS: Function STRING-TRIM, STRING-LEFT-TRIM...
@anchor{#clhs-function-string-trim-string-left-trim...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_string-up_g-capitalize.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_stringeqc_ng-not-lessp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STRING-TRIM, STRING-LEFT-TRIM,
STRING-RIGHT-TRIM}

@strong{Syntax:}

@strong{string-trim} @emph{character-bag string} =>
@emph{trimmed-string}

@strong{string-left-trim} @emph{character-bag string} =>
@emph{trimmed-string}

@strong{string-right-trim} @emph{character-bag string} =>
@emph{trimmed-string}

@strong{Arguments and Values:}

@emph{character-bag}---a @uref{glo_s.html#sequence,@emph{sequence}}
containing @uref{glo_c.html#character,@emph{characters}}.

@emph{string}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{trimmed-string}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

@ref{#string-trim,@strong{string-trim}} returns a substring of
@emph{string}, with all characters in @emph{character-bag} stripped off
the beginning and end. @ref{#string-left-trim,@strong{string-left-trim}}
is similar but strips characters off only the beginning;
@ref{#string-right-trim,@strong{string-right-trim}} strips off only the
end.

If no @uref{glo_c.html#character,@emph{characters}} need to be trimmed
from the @emph{string}, then either @emph{string} itself or a copy of it
may be returned, at the discretion of the implementation.

All of these @uref{glo_f.html#function,@emph{functions}} observe the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@strong{Examples:}

@verbatim
 (string-trim "abc" "abcaakaaakabcaaa") =>  "kaaak"
 (string-trim '(#\Space #\Tab #\Newline) " garbanzo beans
        ") =>  "garbanzo beans"
 (string-trim " (*)" " ( *three (silly) words* ) ")
=>  "three (silly) words"

 (string-left-trim "abc" "labcabcabc") =>  "labcabcabc"
 (string-left-trim " (*)" " ( *three (silly) words* ) ")
=>  "three (silly) words* ) "

 (string-right-trim " (*)" " ( *three (silly) words* ) ") 
=>  " ( *three (silly) words"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss329.html,STRING-COERCION:MAKE-CONSISTENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STRING-UPCASE STRING-DOWNCASE
@subsubsection CLHS: Function STRING-UPCASE, STRING-DOWNCASE...
@anchor{#clhs-function-string-upcase-string-downcase...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_string-tr_g-right-trim.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STRING-UPCASE, STRING-DOWNCASE,
STRING-CAPITALIZE, NSTRING-UPCASE, NSTRING-DOWNCASE, NSTRING-CAPITALIZE}

@strong{Syntax:}

@strong{string-upcase} @emph{string} &key @emph{start end} =>
@emph{cased-string}

@strong{string-downcase} @emph{string} &key @emph{start end} =>
@emph{cased-string}

@strong{string-capitalize} @emph{string} &key @emph{start end} =>
@emph{cased-string}

@strong{nstring-upcase} @emph{string} &key @emph{start end} =>
@emph{string}

@strong{nstring-downcase} @emph{string} &key @emph{start end} =>
@emph{string}

@strong{nstring-capitalize} @emph{string} &key @emph{start end} =>
@emph{string}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string_designator,@emph{string
designator}}. For @ref{#nstring-upcase,@strong{nstring-upcase}},
@ref{#nstring-downcase,@strong{nstring-downcase}}, and
@ref{#nstring-capitalize,@strong{nstring-capitalize}}, the @emph{string}
@uref{glo_d.html#designator,@emph{designator}} must be a
@uref{glo_s.html#string,@emph{string}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{cased-string}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

@ref{#string-upcase,@strong{string-upcase}},
@ref{#string-downcase,@strong{string-downcase}},
@ref{#string-capitalize,@strong{string-capitalize}},
@ref{#nstring-upcase,@strong{nstring-upcase}},
@ref{#nstring-downcase,@strong{nstring-downcase}},
@ref{#nstring-capitalize,@strong{nstring-capitalize}} change the case of
the subsequence of @emph{string}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
as follows:

@strong{string-upcase}

@ref{#string-upcase,@strong{string-upcase}} returns a
@uref{glo_s.html#string,@emph{string}} just like @emph{string} with all
lowercase characters replaced by the corresponding uppercase characters.
More precisely, each character of the result
@uref{glo_s.html#string,@emph{string}} is produced by applying the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_char-upca_har-downcase.html#char-upcase,@strong{char-upcase}}
to the corresponding character of @emph{string}.

@strong{string-downcase}

@ref{#string-downcase,@strong{string-downcase}} is like
@ref{#string-upcase,@strong{string-upcase}} except that all uppercase
characters are replaced by the corresponding lowercase characters (using
@uref{fun_char-upca_har-downcase.html#char-downcase,@strong{char-downcase}}).

@strong{string-capitalize}

@ref{#string-capitalize,@strong{string-capitalize}} produces a copy of
@emph{string} such that, for every word in the copy, the first
@uref{glo_c.html#character,@emph{character}} of the ``word,'' if it has
@uref{glo_c.html#case,@emph{case}}, is
@uref{glo_u.html#uppercase,@emph{uppercase}} and any other
@uref{glo_c.html#character,@emph{characters}} with
@uref{glo_c.html#case,@emph{case}} in the word are
@uref{glo_l.html#lowercase,@emph{lowercase}}. For the purposes of
@ref{#string-capitalize,@strong{string-capitalize}}, a ``word'' is
defined to be a consecutive subsequence consisting of
@uref{glo_a.html#alphanumeric,@emph{alphanumeric}}
@uref{glo_c.html#character,@emph{characters}}, delimited at each end
either by a non-@uref{glo_a.html#alphanumeric,@emph{alphanumeric}}
@uref{glo_c.html#character,@emph{character}} or by an end of the
@uref{glo_s.html#string,@emph{string}}.

@strong{nstring-upcase, nstring-downcase, nstring-capitalize}

@ref{#nstring-upcase,@strong{nstring-upcase}},
@ref{#nstring-downcase,@strong{nstring-downcase}}, and
@ref{#nstring-capitalize,@strong{nstring-capitalize}} are identical to
@ref{#string-upcase,@strong{string-upcase}},
@ref{#string-downcase,@strong{string-downcase}}, and
@ref{#string-capitalize,@strong{string-capitalize}} respectively except
that they modify @emph{string}.

For @ref{#string-upcase,@strong{string-upcase}},
@ref{#string-downcase,@strong{string-downcase}}, and
@ref{#string-capitalize,@strong{string-capitalize}}, @emph{string} is
not modified. However, if no characters in @emph{string} require
conversion, the result may be either @emph{string} or a copy of it, at
the implementation's discretion.

@strong{Examples:}

@verbatim
 (string-upcase "abcde") =>  "ABCDE"
 (string-upcase "Dr. Livingston, I presume?")
=>  "DR. LIVINGSTON, I PRESUME?"
 (string-upcase "Dr. Livingston, I presume?" :start 6 :end 10)
=>  "Dr. LiVINGston, I presume?"
 (string-downcase "Dr. Livingston, I presume?")
=>  "dr. livingston, i presume?"

 (string-capitalize "elm 13c arthur;fig don't") =>  "Elm 13c Arthur;Fig Don'T"
 (string-capitalize " hello ") =>  " Hello "
 (string-capitalize "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")
=>   "Occluded Casements Forestall Inadvertent Defenestration"
 (string-capitalize 'kludgy-hash-search) =>  "Kludgy-Hash-Search"
 (string-capitalize "DON'T!") =>  "Don'T!"    ;not "Don't!"
 (string-capitalize "pipe 13a, foo16c") =>  "Pipe 13a, Foo16c"

 (setq str (copy-seq "0123ABCD890a")) =>  "0123ABCD890a"
 (nstring-downcase str :start 5 :end 7) =>  "0123AbcD890a"
 str =>  "0123AbcD890a"
@end verbatim

@strong{Side Effects:}

@ref{#nstring-upcase,@strong{nstring-upcase}},
@ref{#nstring-downcase,@strong{nstring-downcase}}, and
@ref{#nstring-capitalize,@strong{nstring-capitalize}} modify
@emph{string} as appropriate rather than constructing a new
@uref{glo_s.html#string,@emph{string}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_char-upca_har-downcase.html#char-upcase,@strong{char-upcase}},
@uref{fun_char-upca_har-downcase.html#char-downcase,@strong{char-downcase}}

@strong{Notes:}

The result is always of the same length as @emph{string}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@item
@uref{../Issues/iss329.html,STRING-COERCION:MAKE-CONSISTENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STRING
@subsubsection CLHS: Function STRING
@anchor{#clhs-function-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_charcm_schar.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_string-up_g-capitalize.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STRING}

@strong{Syntax:}

@strong{string} @emph{x} => @emph{string}

@strong{Arguments and Values:}

@emph{x}---a @uref{glo_s.html#string,@emph{string}}, a
@uref{glo_s.html#symbol,@emph{symbol}}, or a
@uref{glo_c.html#character,@emph{character}}.

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} described by @emph{x};
specifically:

@itemize
@item
If @emph{x} is a @uref{glo_s.html#string,@emph{string}}, it is returned.
@item
If @emph{x} is a @uref{glo_s.html#symbol,@emph{symbol}}, its
@uref{glo_n.html#name,@emph{name}} is returned.
@item
If @emph{x} is a @uref{glo_c.html#character,@emph{character}}, then a
@uref{glo_s.html#string,@emph{string}} containing that one
@uref{glo_c.html#character,@emph{character}} is returned.
@item
@ref{#string,@strong{string}} might perform additional,
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
conversions.
@end itemize

@strong{Examples:}

@verbatim
 (string "already a string") =>  "already a string"
 (string 'elm) =>  "ELM"
 (string #\c) =>  "c"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

In the case where a conversion is defined neither by this specification
nor by the @uref{glo_i.html#implementation,@emph{implementation}}, an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

@strong{See Also:}

@uref{fun_coerce.html#coerce,@strong{coerce}},
@uref{syscla_string.html#string,@strong{string}}
(@uref{glo_t.html#type,@emph{type}}).

@strong{Notes:}

@uref{fun_coerce.html#coerce,@strong{coerce}} can be used to convert a
@uref{glo_s.html#sequence,@emph{sequence}} of
@uref{glo_c.html#character,@emph{characters}} to a
@uref{glo_s.html#string,@emph{string}}.

@uref{fun_write-to-_nc-to-string.html#prin1-to-string,@strong{prin1-to-string}},
@uref{fun_write-to-_nc-to-string.html#princ-to-string,@strong{princ-to-string}},
@uref{fun_write-to-_nc-to-string.html#write-to-string,@strong{write-to-string}},
or @uref{fun_format.html#format,@strong{format}} (with a first argument
of @uref{any_nil.html#nil,@strong{nil}}) can be used to get a
@uref{glo_s.html#string,@emph{string}} representation of a
@uref{glo_n.html#number,@emph{number}} or any other
@uref{glo_o.html#object,@emph{object}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss329.html,STRING-COERCION:MAKE-CONSISTENT}
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STRING= STRING/= STRING<
@subsubsection CLHS: Function STRING=, STRING/=, STRING<...
@anchor{#clhs-function-string-string-string...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_string-tr_g-right-trim.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_stringp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STRING=, STRING/=, STRING<, STRING>, STRING<=,
STRING>=, STRING-EQUAL, STRING-NOT-EQUAL, STRING-LESSP, STRING-GREATERP,
STRING-NOT-GREATERP, STRING-NOT-LESSP}

@strong{Syntax:}

@strong{string=} @emph{string1 string2 &key start1 end1 start2 end2} =>
@emph{generalized-boolean}

@strong{string/=} @emph{string1 string2} &key @emph{start1 end1 start2
end2} => @emph{mismatch-index}

@strong{string<} @emph{string1 string2} &key @emph{start1 end1 start2
end2} => @emph{mismatch-index}

@strong{string>} @emph{string1 string2} &key @emph{start1 end1 start2
end2} => @emph{mismatch-index}

@strong{string<=} @emph{string1 string2} &key @emph{start1 end1 start2
end2} => @emph{mismatch-index}

@strong{string>=} @emph{string1 string2} &key @emph{start1 end1 start2
end2} => @emph{mismatch-index}

@strong{string-equal} @emph{string1 string2 &key start1 end1 start2
end2} => @emph{generalized-boolean}

@strong{string-not-equal} @emph{string1 string2} &key @emph{start1 end1
start2 end2} => @emph{mismatch-index}

@strong{string-lessp} @emph{string1 string2} &key @emph{start1 end1
start2 end2} => @emph{mismatch-index}

@strong{string-greaterp} @emph{string1 string2} &key @emph{start1 end1
start2 end2} => @emph{mismatch-index}

@strong{string-not-greaterp} @emph{string1 string2} &key @emph{start1
end1 start2 end2} => @emph{mismatch-index}

@strong{string-not-lessp} @emph{string1 string2} &key @emph{start1 end1
start2 end2} => @emph{mismatch-index}

@strong{Arguments and Values:}

@emph{string1}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{string2}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{start1},
@emph{end1}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string1}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{start2},
@emph{end2}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string2}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{mismatch-index}---a @uref{glo_b.html#bounding_index,@emph{bounding
index}} of @emph{string1}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

These functions perform lexicographic comparisons on @emph{string1} and
@emph{string2}. @ref{#stringEQ,@strong{string=}} and
@ref{#string-equal,@strong{string-equal}} are called equality functions;
the others are called inequality functions. The comparison operations
these @uref{glo_f.html#function,@emph{functions}} perform are restricted
to the subsequence of @emph{string1}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start1} and
@emph{end1} and to the subsequence of @emph{string2}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start2} and
@emph{end2}.

A string @emph{a} is equal to a string @emph{b} if it contains the same
number of characters, and the corresponding characters are the
@uref{glo_s.html#same,@emph{same}} under
@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}} or
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}},
as appropriate.

A string @emph{a} is less than a string @emph{b} if in the first
position in which they differ the character of @emph{a} is less than the
corresponding character of @emph{b} according to
@uref{fun_chareqcm__ar-not-lessp.html#charLT,@strong{char<}} or
@uref{fun_chareqcm__ar-not-lessp.html#char-lessp,@strong{char-lessp}} as
appropriate, or if string @emph{a} is a proper prefix of string @emph{b}
(of shorter length and matching in all the characters of @emph{a}).

The equality functions return a @emph{generalized boolean} that is
@uref{glo_t.html#true,@emph{true}} if the strings are equal, or
@uref{glo_f.html#false,@emph{false}} otherwise.

The inequality functions return a @emph{mismatch-index} that is
@uref{glo_t.html#true,@emph{true}} if the strings are not equal, or
@uref{glo_f.html#false,@emph{false}} otherwise. When the
@emph{mismatch-index} is @uref{glo_t.html#true,@emph{true}}, it is an
@uref{glo_i.html#integer,@emph{integer}} representing the first
character position at which the two substrings differ, as an offset from
the beginning of @emph{string1}.

The comparison has one of the following results:

@ref{#stringEQ,@strong{string=}}

@ref{#stringEQ,@strong{string=}} is @uref{glo_t.html#true,@emph{true}}
if the supplied substrings are of the same length and contain the
@uref{glo_s.html#same,@emph{same}} characters in corresponding
positions; otherwise it is @uref{glo_f.html#false,@emph{false}}.

@ref{#stringSLEQ,@strong{string/=}}

@ref{#stringSLEQ,@strong{string/=}} is
@uref{glo_t.html#true,@emph{true}} if the supplied substrings are
different; otherwise it is @uref{glo_f.html#false,@emph{false}}.

@ref{#string-equal,@strong{string-equal}}

@ref{#string-equal,@strong{string-equal}} is just like
@ref{#stringEQ,@strong{string=}} except that differences in case are
ignored; two characters are considered to be the same if
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}} is
@uref{glo_t.html#true,@emph{true}} of them.

@ref{#stringLT,@strong{string<}}

@ref{#stringLT,@strong{string<}} is @uref{glo_t.html#true,@emph{true}}
if substring1 is less than substring2; otherwise it is
@uref{glo_f.html#false,@emph{false}}.

@ref{#stringGT,@strong{string>}}

@ref{#stringGT,@strong{string>}} is @uref{glo_t.html#true,@emph{true}}
if substring1 is greater than substring2; otherwise it is
@uref{glo_f.html#false,@emph{false}}.

@ref{#string-lessp,@strong{string-lessp}},
@ref{#string-greaterp,@strong{string-greaterp}}

@ref{#string-lessp,@strong{string-lessp}} and
@ref{#string-greaterp,@strong{string-greaterp}} are exactly like
@ref{#stringLT,@strong{string<}} and @ref{#stringGT,@strong{string>}},
respectively, except that distinctions between uppercase and lowercase
letters are ignored. It is as if
@uref{fun_chareqcm__ar-not-lessp.html#char-lessp,@strong{char-lessp}}
were used instead of
@uref{fun_chareqcm__ar-not-lessp.html#charLT,@strong{char<}} for
comparing characters.

@ref{#stringLTEQ,@strong{string<=}}

@ref{#stringLTEQ,@strong{string<=}} is
@uref{glo_t.html#true,@emph{true}} if substring1 is less than or equal
to substring2; otherwise it is @uref{glo_f.html#false,@emph{false}}.

@ref{#stringGTEQ,@strong{string>=}}

@ref{#stringGTEQ,@strong{string>=}} is
@uref{glo_t.html#true,@emph{true}} if substring1 is greater than or
equal to substring2; otherwise it is
@uref{glo_f.html#false,@emph{false}}.

@ref{#string-not-greaterp,@strong{string-not-greaterp}},
@ref{#string-not-lessp,@strong{string-not-lessp}}

@ref{#string-not-greaterp,@strong{string-not-greaterp}} and
@ref{#string-not-lessp,@strong{string-not-lessp}} are exactly like
@ref{#stringLTEQ,@strong{string<=}} and
@ref{#stringGTEQ,@strong{string>=}}, respectively, except that
distinctions between uppercase and lowercase letters are ignored. It is
as if
@uref{fun_chareqcm__ar-not-lessp.html#char-lessp,@strong{char-lessp}}
were used instead of
@uref{fun_chareqcm__ar-not-lessp.html#charLT,@strong{char<}} for
comparing characters.

@strong{Examples:}

@verbatim
 (string= "foo" "foo") =>  true
 (string= "foo" "Foo") =>  false
 (string= "foo" "bar") =>  false
 (string= "together" "frog" :start1 1 :end1 3 :start2 2) =>  true
 (string-equal "foo" "Foo") =>  true
 (string= "abcd" "01234abcd9012" :start2 5 :end2 9) =>  true
 (string< "aaaa" "aaab") =>  3
 (string>= "aaaaa" "aaaa") =>  4
 (string-not-greaterp "Abcde" "abcdE") =>  5
 (string-lessp "012AAAA789" "01aaab6" :start1 3 :end1 7
                                      :start2 2 :end2 6) =>  6
 (string-not-equal "AAAA" "aaaA") =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}}

@strong{Notes:}

@uref{fun_equal.html#equal,@strong{equal}} calls
@ref{#stringEQ,@strong{string=}} if applied to two
@uref{glo_s.html#string,@emph{strings}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@item
@uref{../Issues/iss329.html,STRING-COERCION:MAKE-CONSISTENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STRINGP
@subsubsection CLHS: Function STRINGP
@anchor{#clhs-function-stringp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_stringeqc_ng-not-lessp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STRINGP}

@strong{Syntax:}

@strong{stringp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_string.html#string,@strong{string}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (stringp "aaaaaa") =>  true
 (stringp #\a) =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_typep.html#typep,@strong{typep}},
@uref{syscla_string.html#string,@strong{string}}
(@uref{glo_t.html#type,@emph{type}})

@strong{Notes:}

@verbatim
 (stringp object) ==  (typep object 'string)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type BASE-STRING
@subsubsection CLHS: Type BASE-STRING
@anchor{#clhs-type-base-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_simple-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{BASE-STRING}

@strong{Supertypes:}

@ref{#base-string,@strong{base-string}},
@uref{syscla_string.html#string,@strong{string}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#base-string,@strong{base-string}} is equivalent to (vector
base-char). The @uref{glo_b.html#base_string,@emph{base string}}
representation is the most efficient
@uref{glo_s.html#string,@emph{string}} representation that can hold an
arbitrary sequence of @uref{glo_s.html#standard_character,@emph{standard
characters}}.

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{base-string} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This is equivalent to the type (vector base-char @emph{size}); that is,
the set of @uref{glo_b.html#base_string,@emph{base strings}} of size
@emph{size}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@item
@uref{../Issues/iss201.html,JUN90-TRIVIAL-ISSUES:24}
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@item
@uref{../Issues/iss032.html,CHARACTER-PROPOSAL:2-3-3}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIMPLE-BASE-STRING
@subsubsection CLHS: Type SIMPLE-BASE-STRING
@anchor{#clhs-type-simple-base-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_simple-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_simple-string-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIMPLE-BASE-STRING}

@strong{Supertypes:}

@ref{#simple-base-string,@strong{simple-base-string}},
@uref{typ_base-string.html#base-string,@strong{base-string}},
@uref{typ_simple-string.html#simple-string,@strong{simple-string}},
@uref{syscla_string.html#string,@strong{string}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{typ_simple-array.html#simple-array,@strong{simple-array}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#simple-base-string,@strong{simple-base-string}} is equivalent to
(simple-array base-char (*)).

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{simple-base-string} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This is equivalent to the type (simple-array base-char (@emph{size}));
that is, the set of @uref{glo_s.html#simple,@emph{simple}}
@uref{glo_b.html#base_string,@emph{base strings}} of size @emph{size}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@item
@uref{../Issues/iss201.html,JUN90-TRIVIAL-ISSUES:24}
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type SIMPLE-STRING
@subsubsection CLHS: Type SIMPLE-STRING
@anchor{#clhs-type-simple-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_base-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_strings_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_simple-base-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{SIMPLE-STRING}

@strong{Supertypes:}

@ref{#simple-string,@strong{simple-string}},
@uref{syscla_string.html#string,@strong{string}},
@uref{syscla_vector.html#vector,@strong{vector}},
@uref{typ_simple-array.html#simple-array,@strong{simple-array}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_sequence.html#sequence,@strong{sequence}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_s.html#simple_string,@emph{simple string}} is a specialized
one-dimensional @uref{glo_s.html#simple_array,@emph{simple array}} whose
@uref{glo_e.html#element,@emph{elements}} are of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}} or a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}. When used as
a @uref{glo_t.html#type_specifier,@emph{type specifier}} for object
creation, @ref{#simple-string,@strong{simple-string}} means
(simple-array character (@emph{size})).

@strong{Compound Type Specifier Kind:}

Abbreviating.

@strong{Compound Type Specifier Syntax:}

@strong{simple-string} @emph{[size]}

@strong{Compound Type Specifier Arguments:}

@emph{size}---a non-negative @uref{glo_f.html#fixnum,@emph{fixnum}}, or
the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}.

@strong{Compound Type Specifier Description:}

This denotes the union of all @uref{glo_t.html#type,@emph{types}}
(simple-array @emph{c} (@emph{size})) for all
@uref{glo_s.html#subtype,@emph{subtypes}} @emph{c} of
@uref{syscla_character.html#character,@strong{character}}; that is, the
set of @uref{glo_s.html#simple_string,@emph{simple strings}} of size
@emph{size}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss014.html,ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM}
@item
@uref{../Issues/iss033.html,CHARACTER-PROPOSAL:2-3-4}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 17
@section CLHS: Chapter 17
@anchor{#clhs-chapter-17}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_17-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
17. Sequences

@uref{sec_17-1.html,}

17.1 Sequence Concepts

@uref{sec_17-2.html,}

17.2 Rules about Test Functions

@uref{sec_the_seque_s_dictionary.html,}

17.3 The Sequences Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 172::
* CLHS Section The Sequences Dictionary::
@end menu

@node CLHS Section 172
@subsection CLHS: Section 17.2
@anchor{#clhs-section-17.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_17-1-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-17.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_17-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
17.2 Rules about Test Functions

@uref{sec_17-2-1.html,}

17.2.1 Satisfying a Two-Argument Test

@uref{sec_17-2-2.html,}

17.2.2 Satisfying a One-Argument Test

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 1722::
@end menu

@node CLHS Section 1722
@subsubsection CLHS: Section 17.2.2
@anchor{#clhs-section-17.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_17-2-1-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_17-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_17-2-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
17.2.2 Satisfying a One-Argument Test

When using one of the @uref{glo_f.html#function,@emph{functions}} in the
next figure, the elements E of a
@uref{glo_s.html#sequence,@emph{sequence}} S are filtered not on the
basis of the presence or absence of an object O under a two
@uref{glo_a.html#argument,@emph{argument}}
@uref{glo_p.html#predicate,@emph{predicate}}, as with the
@uref{glo_f.html#function,@emph{functions}} described in
@uref{sec_17-2-1.html,Section 17.2.1 (Satisfying a Two-Argument Test)},
but rather on the basis of a one
@uref{glo_a.html#argument,@emph{argument}}
@uref{glo_p.html#predicate,@emph{predicate}}.

@verbatim
assoc-if       member-if           rassoc-if          
assoc-if-not   member-if-not       rassoc-if-not      
count-if       nsubst-if           remove-if          
count-if-not   nsubst-if-not       remove-if-not      
delete-if      nsubstitute-if      subst-if           
delete-if-not  nsubstitute-if-not  subst-if-not       
find-if        position-if         substitute-if      
find-if-not    position-if-not     substitute-if-not  
@end verbatim

@strong{Figure 17-3. Operators that have One-Argument Tests to be
Satisfied}

The element Ei might not be considered directly. If a :key
@uref{glo_a.html#argument,@emph{argument}} is provided, it is a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} to be called with each Ei as
an @uref{glo_a.html#argument,@emph{argument}}, and @emph{yielding} an
@uref{glo_o.html#object,@emph{object}} Zi to be used for comparison. (If
there is no :key @uref{glo_a.html#argument,@emph{argument}}, Zi is Ei.)

@uref{glo_f.html#function,@emph{Functions}} defined in this
specification and having a name that ends in ``-if'' accept a first
@uref{glo_a.html#argument,@emph{argument}} that is a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}}, Zi. An Ei is said to
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}} if this :test
@uref{glo_f.html#function,@emph{function}} returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}
representing @uref{glo_t.html#true,@emph{true}}.

@uref{glo_f.html#function,@emph{Functions}} defined in this
specification and having a name that ends in ``-if-not'' accept a first
@uref{glo_a.html#argument,@emph{argument}} that is a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}}, Zi. An Ei is said to
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}} if this :test
@uref{glo_f.html#function,@emph{function}} returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}
representing @uref{glo_f.html#false,@emph{false}}.

@uref{sec_17-2-2-1.html,}

17.2.2.1 Examples of Satisfying a One-Argument Test

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Sequences Dictionary
@subsection CLHS: Section The Sequences Dictionary
@anchor{#clhs-section-the-sequences-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_17-2-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-17.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_sequence.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
17.3 The Sequences Dictionary

@uref{syscla_sequence.html,@emph{System Class} @strong{SEQUENCE}}

@uref{fun_copy-seq.html,@emph{Function} @strong{COPY-SEQ}}

@uref{acc_elt.html,@emph{Accessor} @strong{ELT}}

@uref{fun_fill.html,@emph{Function} @strong{FILL}}

@uref{fun_make-sequence.html,@emph{Function} @strong{MAKE-SEQUENCE}}

@uref{acc_subseq.html,@emph{Accessor} @strong{SUBSEQ}}

@uref{fun_map.html,@emph{Function} @strong{MAP}}

@uref{fun_map-into.html,@emph{Function} @strong{MAP-INTO}}

@uref{fun_reduce.html,@emph{Function} @strong{REDUCE}}

@uref{fun_countcm_c_count-if-not.html,@emph{Function} @strong{COUNT,
COUNT-IF, COUNT-IF-NOT}}

@uref{fun_length.html,@emph{Function} @strong{LENGTH}}

@uref{fun_reversecm_nreverse.html,@emph{Function} @strong{REVERSE,
NREVERSE}}

@uref{fun_sortcm_stable-sort.html,@emph{Function} @strong{SORT,
STABLE-SORT}}

@uref{fun_findcm_fi__find-if-not.html,@emph{Function} @strong{FIND,
FIND-IF, FIND-IF-NOT}}

@uref{fun_positionc_ition-if-not.html,@emph{Function} @strong{POSITION,
POSITION-IF, POSITION-IF-NOT}}

@uref{fun_search.html,@emph{Function} @strong{SEARCH}}

@uref{fun_mismatch.html,@emph{Function} @strong{MISMATCH}}

@uref{fun_replace.html,@emph{Function} @strong{REPLACE}}

@uref{fun_substitut_itute-if-not.html,@emph{Function}
@strong{SUBSTITUTE, SUBSTITUTE-IF, SUBSTITUTE-IF-NOT, NSUBSTITUTE,
NSUBSTITUTE-IF, NSUBSTITUTE-IF-NOT}}

@uref{fun_concatenate.html,@emph{Function} @strong{CONCATENATE}}

@uref{fun_merge.html,@emph{Function} @strong{MERGE}}

@uref{fun_removecm__elete-if-not.html,@emph{Function} @strong{REMOVE,
REMOVE-IF, REMOVE-IF-NOT, DELETE, DELETE-IF, DELETE-IF-NOT}}

@uref{fun_remove-du_e-duplicates.html,@emph{Function}
@strong{REMOVE-DUPLICATES, DELETE-DUPLICATES}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor ELT::
* CLHS Accessor SUBSEQ::
* CLHS Function CONCATENATE::
* CLHS Function COPY-SEQ::
* CLHS Function COUNT COUNT-IF COUNT-IF-NOT::
* CLHS Function FILL::
* CLHS Function FIND FIND-IF FIND-IF-NOT::
* CLHS Function LENGTH::
* CLHS Function MAKE-SEQUENCE::
* CLHS Function MAP-INTO::
* CLHS Function MAP::
* CLHS Function MERGE::
* CLHS Function MISMATCH::
* CLHS Function POSITION POSITION-IF POSITION-IF-NOT::
* CLHS Function REDUCE::
* CLHS Function REMOVE-DUPLICATES DELETE-DUPLICATES::
* CLHS Function REMOVE REMOVE-IF REMOVE-IF-NOT::
* CLHS Function REPLACE::
* CLHS Function REVERSE NREVERSE::
* CLHS Function SEARCH::
* CLHS Function SORT STABLE-SORT::
* CLHS Function SUBSTITUTE SUBSTITUTE-IF::
@end menu

@node CLHS Accessor ELT
@subsubsection CLHS: Accessor ELT
@anchor{#clhs-accessor-elt}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-seq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_fill.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{ELT}

@strong{Syntax:}

@strong{elt} @emph{sequence index} => @emph{object}

(setf (@strong{elt} @emph{sequence index}) @emph{new-object})

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{index}---a @uref{glo_v.html#valid_sequence_index,@emph{valid
sequence index}} for @emph{sequence}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{new-object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_e.html#element,@emph{element}} of @emph{sequence} specified by
@emph{index}.

@strong{Examples:}

@verbatim
 (setq str (copy-seq "0123456789")) =>  "0123456789"
 (elt str 6) =>  #\6
 (setf (elt str 0) #\#) =>  #\#
 str =>  "#123456789"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}. Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{index} is not a @uref{glo_v.html#valid_sequence_index,@emph{valid
sequence index}} for @emph{sequence}.

@strong{See Also:}

@uref{acc_aref.html#aref,@strong{aref}},
@uref{acc_nth.html#nth,@strong{nth}}, @uref{sec_3-2-1.html,Section 3.2.1
(Compiler Terminology)}

@strong{Notes:}

@uref{acc_aref.html#aref,@strong{aref}} may be used to
@uref{glo_a.html#access,@emph{access}}
@uref{glo_v.html#vector,@emph{vector}} elements that are beyond the
@uref{glo_v.html#vector,@emph{vector}}'s
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor SUBSEQ
@subsubsection CLHS: Accessor SUBSEQ
@anchor{#clhs-accessor-subseq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-sequence.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_map.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{SUBSEQ}

@strong{Syntax:}

@strong{subseq} @emph{sequence start &optional end} =>
@emph{subsequence}

(setf (@strong{subseq} @emph{sequence start &optional end})
@emph{new-subsequence})

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The default for @emph{end} is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{subsequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{new-subsequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{Description:}

@ref{#subseq,@strong{subseq}} creates a
@uref{glo_s.html#sequence,@emph{sequence}} that is a copy of the
subsequence of @emph{sequence} @emph{bounded} by @emph{start} and
@emph{end}.

@emph{Start} specifies an offset into the original @emph{sequence} and
marks the beginning position of the subsequence. @emph{end} marks the
position following the last element of the subsequence.

@ref{#subseq,@strong{subseq}} always allocates a new
@uref{glo_s.html#sequence,@emph{sequence}} for a result; it never shares
storage with an old @uref{glo_s.html#sequence,@emph{sequence}}. The
result subsequence is always of the same
@uref{glo_t.html#type,@emph{type}} as @emph{sequence}.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_s.html#simple_array,@emph{simple array}} of
@uref{glo_r.html#rank,@emph{rank}} one that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_f.html#fresh,@emph{fresh}} @uref{glo_l.html#list,@emph{list}}.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} may be used with
@ref{#subseq,@strong{subseq}} to destructively replace
@uref{glo_e.html#element,@emph{elements}} of a subsequence with
@uref{glo_e.html#element,@emph{elements}} taken from a
@uref{glo_s.html#sequence,@emph{sequence}} of new values. If the
subsequence and the new sequence are not of equal length, the shorter
length determines the number of elements that are replaced. The
remaining @uref{glo_e.html#element,@emph{elements}} at the end of the
longer sequence are not modified in the operation.

@strong{Examples:}

@verbatim
 (setq str "012345") =>  "012345"
 (subseq str 2) =>  "2345"
 (subseq str 3 5) =>  "34"
 (setf (subseq str 4) "abc") =>  "abc"
 str =>  "0123ab"
 (setf (subseq str 0 2) "A") =>  "A"
 str =>  "A123ab"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}. Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{new-subsequence} is not a
@uref{glo_p.html#proper_sequence,@emph{proper sequence}}.

@strong{See Also:}

@uref{fun_replace.html#replace,@strong{replace}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONCATENATE
@subsubsection CLHS: Function CONCATENATE
@anchor{#clhs-function-concatenate}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_substitut_itute-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_merge.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONCATENATE}

@strong{Syntax:}

@strong{concatenate} @emph{result-type &rest sequences} =>
@emph{result-sequence}

@strong{Arguments and Values:}

@emph{result-type}---a
@uref{syscla_sequence.html#sequence,@strong{sequence}}
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@emph{sequences}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{result-sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}} of @uref{glo_t.html#type,@emph{type}} @emph{result-type}.

@strong{Description:}

@ref{#concatenate,@strong{concatenate}} returns a
@uref{glo_s.html#sequence,@emph{sequence}} that contains all the
individual elements of all the @emph{sequences} in the order that they
are supplied. The @uref{glo_s.html#sequence,@emph{sequence}} is of type
@emph{result-type}, which must be a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_sequence.html#sequence,@strong{sequence}}.

All of the @emph{sequences} are copied from; the result does not share
any structure with any of the @emph{sequences}. Therefore, if only one
@emph{sequence} is provided and it is of type @emph{result-type},
@ref{#concatenate,@strong{concatenate}} is required to copy
@emph{sequence} rather than simply returning it.

It is an error if any element of the @emph{sequences} cannot be an
element of the @uref{glo_s.html#sequence,@emph{sequence}} result. If the
@emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{syscla_list.html#list,@strong{list}}, the result will be a
@uref{glo_l.html#list,@emph{list}}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_vector.html#vector,@strong{vector}}, then if the
implementation can determine the element type specified for the
@emph{result-type}, the element type of the resulting array is the
result of @emph{upgrading} that element type; or, if the implementation
can determine that the element type is unspecified (or *), the element
type of the resulting array is @uref{syscla_t.html#t,@strong{t}};
otherwise, an error is signaled.

@strong{Examples:}

@verbatim
(concatenate 'string "all" " " "together" " " "now") =>  "all together now"
(concatenate 'list "ABC" '(d e f) #(1 2 3) #*1011)
=>  (#\A #\B #\C D E F 1 2 3 1 0 1 1)
(concatenate 'list) =>  NIL
@end verbatim

@verbatim
  (concatenate '(vector * 2) "a" "bc") should signal an error
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error is signaled if the @emph{result-type} is neither a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_list.html#list,@strong{list}}, nor a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_vector.html#vector,@strong{vector}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} should be
signaled if @emph{result-type} specifies the number of elements and the
sum of @emph{sequences} is different from that number.

@strong{See Also:}

@uref{fun_append.html#append,@strong{append}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss302.html,SEQUENCE-TYPE-LENGTH:MUST-MATCH}
@item
@uref{../Issues/iss073.html,CONCATENATE-SEQUENCE:SIGNAL-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-SEQ
@subsubsection CLHS: Function COPY-SEQ
@anchor{#clhs-function-copy-seq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_sequence.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_elt.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-SEQ}

@strong{Syntax:}

@strong{copy-seq} @emph{sequence} => @emph{copied-sequence}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{copied-sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{Description:}

Creates a copy of @emph{sequence}. The
@uref{glo_e.html#element,@emph{elements}} of the new
@uref{glo_s.html#sequence,@emph{sequence}} are the
@uref{glo_s.html#same,@emph{same}} as the corresponding
@uref{glo_e.html#element,@emph{elements}} of the given @emph{sequence}.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_s.html#simple_array,@emph{simple array}} of
@uref{glo_r.html#rank,@emph{rank}} one that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_f.html#fresh,@emph{fresh}} @uref{glo_l.html#list,@emph{list}}.

@strong{Examples:}

@verbatim
 (setq str "a string") =>  "a string"
 (equalp str (copy-seq str)) =>  true
 (eql str (copy-seq str)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_copy-list.html#copy-list,@strong{copy-list}}

@strong{Notes:}

From a functional standpoint,

@verbatim
 (copy-seq x) ==  (subseq x 0)
@end verbatim

However, the programmer intent is typically very different in these two
cases.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COUNT COUNT-IF COUNT-IF-NOT
@subsubsection CLHS: Function COUNT, COUNT-IF, COUNT-IF-NOT
@anchor{#clhs-function-count-count-if-count-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_reduce.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_length.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COUNT, COUNT-IF, COUNT-IF-NOT}

@strong{Syntax:}

@strong{count} @emph{item sequence &key from-end start end key test
test-not} => @emph{n}

@strong{count-if} @emph{predicate sequence &key from-end start end key}
=> @emph{n}

@strong{count-if-not} @emph{predicate sequence &key from-end start end
key} => @emph{n}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}} less
than or equal to the @uref{glo_l.html#length,@emph{length}} of
@emph{sequence}.

@strong{Description:}

@ref{#count,@strong{count}}, @ref{#count-if,@strong{count-if}}, and
@ref{#count-if-not,@strong{count-if-not}} count and return the number of
@uref{glo_e.html#element,@emph{elements}} in the @emph{sequence}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
that @uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}.

The @emph{from-end} has no direct effect on the result. However, if
@emph{from-end} is @uref{glo_t.html#true,@emph{true}}, the
@uref{glo_e.html#element,@emph{elements}} of @emph{sequence} will be
supplied as @uref{glo_a.html#argument,@emph{arguments}} to the
@emph{test}, @emph{test-not}, and @emph{key} in reverse order, which may
change the side-effects, if any, of those functions.

@strong{Examples:}

@verbatim
 (count #\a "how many A's are there in here?") =>  2
 (count-if-not #'oddp '((1) (2) (3) (4)) :key #'car) =>  2
 (count-if #'upper-case-p "The Crying of Lot 49" :start 4) =>  2 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{sec_17-2.html,Section 17.2 (Rules about Test Functions)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#count-if-not,@strong{count-if-not}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILL
@subsubsection CLHS: Function FILL
@anchor{#clhs-function-fill}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_elt.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-sequence.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILL}

@strong{Syntax:}

@strong{fill} @emph{sequence item &key start end} => @emph{sequence}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{item}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@strong{Description:}

Replaces the @uref{glo_e.html#element,@emph{elements}} of
@emph{sequence} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end} with @emph{item}.

@strong{Examples:}

@verbatim
 (fill (list 0 1 2 3 4 5) '(444)) =>  ((444) (444) (444) (444) (444) (444))
 (fill (copy-seq "01234") #\e :start 3) =>  "012ee"
 (setq x (vector 'a 'b 'c 'd 'e)) =>  #(A B C D E)
 (fill x 'z :start 1 :end 3) =>  #(A Z Z D E)
 x =>  #(A Z Z D E)
 (fill x 'p) =>  #(P P P P P)
 x =>  #(P P P P P)
@end verbatim

@strong{Side Effects:}

@emph{Sequence} is destructively modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}. Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{start} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}}. Should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{end} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{See Also:}

@uref{fun_replace.html#replace,@strong{replace}},
@uref{fun_substitut_itute-if-not.html#nsubstitute,@strong{nsubstitute}}

@strong{Notes:}

(fill @emph{sequence} @emph{item}) == (nsubstitute-if @emph{item}
(constantly t) @emph{sequence})

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FIND FIND-IF FIND-IF-NOT
@subsubsection CLHS: Function FIND, FIND-IF, FIND-IF-NOT
@anchor{#clhs-function-find-find-if-find-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sortcm_stable-sort.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_positionc_ition-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FIND, FIND-IF, FIND-IF-NOT}

@strong{Syntax:}

@strong{find} @emph{item sequence &key from-end test test-not start end
key} => @emph{element}

@strong{find-if} @emph{predicate sequence &key from-end start end key}
=> @emph{element}

@strong{find-if-not} @emph{predicate sequence &key from-end start end
key} => @emph{element}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{element}---an @uref{glo_e.html#element,@emph{element}} of the
@emph{sequence}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#find,@strong{find}}, @ref{#find-if,@strong{find-if}}, and
@ref{#find-if-not,@strong{find-if-not}} each search for an
@uref{glo_e.html#element,@emph{element}} of the @emph{sequence}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
that @emph{satisfies the predicate} @emph{predicate} or that
@emph{satisfies the test} @emph{test} or @emph{test-not}, as
appropriate.

If @emph{from-end} is @uref{glo_t.html#true,@emph{true}}, then the
result is the rightmost @uref{glo_e.html#element,@emph{element}} that
@emph{satisfies the test}.

If the @emph{sequence} contains an
@uref{glo_e.html#element,@emph{element}} that @emph{satisfies the test},
then the leftmost or rightmost @emph{sequence} element, depending on
@emph{from-end}, is returned; otherwise
@uref{any_nil.html#nil,@strong{nil}} is returned.

@strong{Examples:}

@verbatim
 (find #\d "here are some letters that can be looked at" :test #'char>)
=>  #\Space 
 (find-if #'oddp '(1 2 3 4 5) :end 3 :from-end t) =>  3
 (find-if-not #'complexp                                    
             '#(3.5 2 #C(1.0 0.0) #C(0.0 1.0))
             :start 2) =>  NIL 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_positionc_ition-if-not.html#position,@strong{position}},
@uref{sec_17-2.html,Section 17.2 (Rules about Test Functions)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#find-if-not,@strong{find-if-not}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LENGTH
@subsubsection CLHS: Function LENGTH
@anchor{#clhs-function-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_countcm_c_count-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_reversecm_nreverse.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LENGTH}

@strong{Syntax:}

@strong{length} @emph{sequence} => @emph{n}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the number of @uref{glo_e.html#element,@emph{elements}} in
@emph{sequence}.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the active length as
specified by the @uref{glo_f.html#fill_pointer,@emph{fill pointer}} is
returned.

@strong{Examples:}

@verbatim
 (length "abc") =>  3
 (setq str (make-array '(3) :element-type 'character 
                            :initial-contents "abc"
                            :fill-pointer t)) =>  "abc"
 (length str) =>  3
 (setf (fill-pointer str) 2) =>  2
 (length str) =>  2
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_list-length.html#list-length,@strong{list-length}},
@uref{syscla_sequence.html#sequence,@strong{sequence}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-SEQUENCE
@subsubsection CLHS: Function MAKE-SEQUENCE
@anchor{#clhs-function-make-sequence}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_fill.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_subseq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-SEQUENCE}

@strong{Syntax:}

@strong{make-sequence} @emph{result-type size &key initial-element} =>
@emph{sequence}

@strong{Arguments and Values:}

@emph{result-type}---a
@uref{syscla_sequence.html#sequence,@strong{sequence}}
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@emph{size}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{initial-element}---an @uref{glo_o.html#object,@emph{object}}. The
default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{Description:}

Returns a @uref{glo_s.html#sequence,@emph{sequence}} of the type
@emph{result-type} and of length @emph{size}, each of the
@uref{glo_e.html#element,@emph{elements}} of which has been initialized
to @emph{initial-element}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_list.html#list,@strong{list}}, the result will be a
@uref{glo_l.html#list,@emph{list}}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_vector.html#vector,@strong{vector}}, then if the
implementation can determine the element type specified for the
@emph{result-type}, the element type of the resulting array is the
result of @emph{upgrading} that element type; or, if the implementation
can determine that the element type is unspecified (or *), the element
type of the resulting array is @uref{syscla_t.html#t,@strong{t}};
otherwise, an error is signaled.

@strong{Examples:}

@verbatim
 (make-sequence 'list 0) =>  ()
 (make-sequence 'string 26 :initial-element #\.) 
=>  ".........................."
 (make-sequence '(vector double-float) 2
                :initial-element 1d0)
=>  #(1.0d0 1.0d0)
@end verbatim

@verbatim
 (make-sequence '(vector * 2) 3) should signal an error
 (make-sequence '(vector * 4) 3) should signal an error
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:}

The consequences are unspecified if @emph{initial-element} is not an
@uref{glo_o.html#object,@emph{object}} which can be stored in the
resulting @uref{glo_s.html#sequence,@emph{sequence}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} must be
signaled if the @emph{result-type} is neither a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_list.html#list,@strong{list}}, nor a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_vector.html#vector,@strong{vector}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} should be
signaled if @emph{result-type} specifies the number of elements and
@emph{size} is different from that number.

@strong{See Also:}

@uref{fun_make-array.html#make-array,@strong{make-array}},
@uref{fun_make-list.html#make-list,@strong{make-list}}

@strong{Notes:}

@verbatim
 (make-sequence 'string 5) ==  (make-string 5)               
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss045.html,CHARACTER-PROPOSAL:2-6-5}
@item
@uref{../Issues/iss302.html,SEQUENCE-TYPE-LENGTH:MUST-MATCH}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@item
@uref{../Issues/iss073.html,CONCATENATE-SEQUENCE:SIGNAL-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAP-INTO
@subsubsection CLHS: Function MAP-INTO
@anchor{#clhs-function-map-into}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_map.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_reduce.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAP-INTO}

@strong{Syntax:}

@strong{map-into} @emph{result-sequence function &rest sequences} =>
@emph{result-sequence}

@strong{Arguments and Values:}

@emph{result-sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{function}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of as many
@uref{glo_a.html#argument,@emph{arguments}} as there are
@emph{sequences}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{Description:}

Destructively modifies @emph{result-sequence} to contain the results of
applying @emph{function} to each element in the argument
@emph{sequences} in turn.

@emph{result-sequence} and each element of @emph{sequences} can each be
either a @uref{glo_l.html#list,@emph{list}} or a
@uref{glo_v.html#vector,@emph{vector}}. If @emph{result-sequence} and
each element of @emph{sequences} are not all the same length, the
iteration terminates when the shortest
@uref{glo_s.html#sequence,@emph{sequence}} (of any of the
@emph{sequences} or the @emph{result-sequence}) is exhausted. If
@emph{result-sequence} is a @uref{glo_v.html#vector,@emph{vector}} with
a @uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} is ignored when
deciding how many iterations to perform, and afterwards the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} is set to the number
of times @emph{function} was applied. If @emph{result-sequence} is
longer than the shortest element of @emph{sequences}, extra elements at
the end of @emph{result-sequence} are left unchanged. If
@emph{result-sequence} is @uref{any_nil.html#nil,@strong{nil}},
@ref{#map-into,@strong{map-into}} immediately returns
@uref{any_nil.html#nil,@strong{nil}}, since
@uref{any_nil.html#nil,@strong{nil}} is a
@uref{glo_s.html#sequence,@emph{sequence}} of length zero.

If @emph{function} has side effects, it can count on being called first
on all of the elements with index 0, then on all of those numbered 1,
and so on.

@strong{Examples:}

@verbatim
 (setq a (list 1 2 3 4) b (list 10 10 10 10)) =>  (10 10 10 10)
 (map-into a #'+ a b) =>  (11 12 13 14)
 a =>  (11 12 13 14)
 b =>  (10 10 10 10)
 (setq k '(one two three)) =>  (ONE TWO THREE)
 (map-into a #'cons k a) =>  ((ONE . 11) (TWO . 12) (THREE . 13) 14)
 (map-into a #'gensym) =>  (#:G9090 #:G9091 #:G9092 #:G9093)
 a =>  (#:G9090 #:G9091 #:G9092 #:G9093)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{result-sequence} is not a
@uref{glo_p.html#proper_sequence,@emph{proper sequence}}. Should be
prepared to signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:} None.

@strong{Notes:}

@ref{#map-into,@strong{map-into}} differs from
@uref{fun_map.html#map,@strong{map}} in that it modifies an existing
@uref{glo_s.html#sequence,@emph{sequence}} rather than creating a new
one. In addition, @ref{#map-into,@strong{map-into}} can be called with
only two arguments, while @uref{fun_map.html#map,@strong{map}} requires
at least three arguments.

@ref{#map-into,@strong{map-into}} could be defined by:

@verbatim
 (defun map-into (result-sequence function &rest sequences)
   (loop for index below (apply #'min 
                                (length result-sequence)
                                (mapcar #'length sequences))
         do (setf (elt result-sequence index)
                  (apply function
                         (mapcar #'(lambda (seq) (elt seq index))
                                 sequences))))
   result-sequence)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss239.html,MAP-INTO:ADD-FUNCTION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAP
@subsubsection CLHS: Function MAP
@anchor{#clhs-function-map}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_subseq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_map-into.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAP}

@strong{Syntax:}

@strong{map} @emph{result-type function &rest sequences+} =>
@emph{result}

@strong{Arguments and Values:}

@emph{result-type} -- a
@uref{syscla_sequence.html#sequence,@strong{sequence}}
@uref{glo_t.html#type_specifier,@emph{type specifier}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{function}---a @uref{glo_f.html#function_designator,@emph{function
designator}}. @emph{function} must take as many arguments as there are
@emph{sequences}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{result}---if @emph{result-type} is a
@uref{glo_t.html#type_specifier,@emph{type specifier}} other than
@uref{any_nil.html#nil,@strong{nil}}, then a
@uref{glo_s.html#sequence,@emph{sequence}} of the
@uref{glo_t.html#type,@emph{type}} it denotes; otherwise (if the
@emph{result-type} is @uref{any_nil.html#nil,@strong{nil}}),
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Applies @emph{function} to successive sets of arguments in which one
argument is obtained from each
@uref{glo_s.html#sequence,@emph{sequence}}. The @emph{function} is
called first on all the elements with index 0, then on all those with
index 1, and so on. The @emph{result-type} specifies the
@uref{glo_t.html#type,@emph{type}} of the resulting
@uref{glo_s.html#sequence,@emph{sequence}}.

@ref{#map,@strong{map}} returns @uref{any_nil.html#nil,@strong{nil}} if
@emph{result-type} is @uref{any_nil.html#nil,@strong{nil}}. Otherwise,
@ref{#map,@strong{map}} returns a
@uref{glo_s.html#sequence,@emph{sequence}} such that element j is the
result of applying @emph{function} to element j of each of the
@emph{sequences}. The result @uref{glo_s.html#sequence,@emph{sequence}}
is as long as the shortest of the @emph{sequences}. The consequences are
undefined if the result of applying @emph{function} to the successive
elements of the @emph{sequences} cannot be contained in a
@uref{glo_s.html#sequence,@emph{sequence}} of the
@uref{glo_t.html#type,@emph{type}} given by @emph{result-type}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_list.html#list,@strong{list}}, the result will be a
@uref{glo_l.html#list,@emph{list}}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_vector.html#vector,@strong{vector}}, then if the
implementation can determine the element type specified for the
@emph{result-type}, the element type of the resulting array is the
result of @emph{upgrading} that element type; or, if the implementation
can determine that the element type is unspecified (or *), the element
type of the resulting array is @uref{syscla_t.html#t,@strong{t}};
otherwise, an error is signaled.

@strong{Examples:}

@verbatim
 (map 'string #'(lambda (x y)
                  (char "01234567890ABCDEF" (mod (+ x y) 16)))
       '(1 2 3 4)
       '(10 9 8 7)) =>  "AAAA"
 (setq seq '("lower" "UPPER" "" "123")) =>  ("lower" "UPPER" "" "123")
 (map nil #'nstring-upcase seq) =>  NIL
 seq =>  ("LOWER" "UPPER" "" "123")
 (map 'list #'- '(1 2 3 4)) =>  (-1 -2 -3 -4)
 (map 'string
      #'(lambda (x) (if (oddp x) #\1 #\0))
      '(1 2 3 4)) =>  "1010"
@end verbatim

@verbatim
 (map '(vector * 4) #'cons "abc" "de") should signal an error
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} must be
signaled if the @emph{result-type} is not a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_list.html#list,@strong{list}}, not a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_vector.html#vector,@strong{vector}}, and not
@uref{any_nil.html#nil,@strong{nil}}.

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} should be
signaled if @emph{result-type} specifies the number of elements and the
minimum length of the @emph{sequences} is different from that number.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss302.html,SEQUENCE-TYPE-LENGTH:MUST-MATCH}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss073.html,CONCATENATE-SEQUENCE:SIGNAL-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MERGE
@subsubsection CLHS: Function MERGE
@anchor{#clhs-function-merge}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_concatenate.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_removecm__elete-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MERGE}

@strong{Syntax:}

@strong{merge} @emph{result-type sequence-1 sequence-2 predicate &key
key} => @emph{result-sequence}

@strong{Arguments and Values:}

@emph{result-type}---a
@uref{syscla_sequence.html#sequence,@strong{sequence}}
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@emph{sequence-1}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{sequence-2}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of two arguments that
returns a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}} of @uref{glo_t.html#type,@emph{type}} @emph{result-type}.

@strong{Description:}

Destructively merges @emph{sequence-1} with @emph{sequence-2} according
to an order determined by the @emph{predicate}.
@ref{#merge,@strong{merge}} determines the relationship between two
elements by giving keys extracted from the sequence elements to the
@emph{predicate}.

The first argument to the @emph{predicate} function is an element of
@emph{sequence-1} as returned by the @emph{key} (if supplied); the
second argument is an element of @emph{sequence-2} as returned by the
@emph{key} (if supplied). @emph{Predicate} should return
@uref{glo_t.html#true,@emph{true}} if and only if its first argument is
strictly less than the second (in some appropriate sense). If the first
argument is greater than or equal to the second (in the appropriate
sense), then @emph{predicate} should return
@uref{glo_f.html#false,@emph{false}}. @ref{#merge,@strong{merge}}
considers two elements x and y to be equal if (funcall predicate x y)
and (funcall predicate y x) both @uref{glo_y.html#yield,@emph{yield}}
@uref{glo_f.html#false,@emph{false}}.

The argument to the @emph{key} is the @emph{sequence} element.
Typically, the return value of the @emph{key} becomes the argument to
@emph{predicate}. If @emph{key} is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the sequence element itself is
used. The @emph{key} may be executed more than once for each
@uref{glo_s.html#sequence,@emph{sequence}}
@uref{glo_e.html#element,@emph{element}}, and its side effects may occur
in any order.

If @emph{key} and @emph{predicate} return, then the merging operation
will terminate. The result of merging two
@uref{glo_s.html#sequence,@emph{sequences}} x and y is a new
@uref{glo_s.html#sequence,@emph{sequence}} of type @emph{result-type} z,
such that the length of z is the sum of the lengths of x and y, and z
contains all the elements of x and y. If x1 and x2 are two elements of
x, and x1 precedes x2 in x, then x1 precedes x2 in z, and similarly for
elements of y. In short, z is an interleaving of x and y.

If x and y were correctly sorted according to the @emph{predicate}, then
z will also be correctly sorted. If x or y is not so sorted, then z will
not be sorted, but will nevertheless be an interleaving of x and y.

The merging operation is guaranteed stable; if two or more elements are
considered equal by the @emph{predicate}, then the elements from
@emph{sequence-1} will precede those from @emph{sequence-2} in the
result.

@emph{sequence-1} and/or @emph{sequence-2} may be destroyed.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_list.html#list,@strong{list}}, the result will be a
@uref{glo_l.html#list,@emph{list}}.

If the @emph{result-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_vector.html#vector,@strong{vector}}, then if the
implementation can determine the element type specified for the
@emph{result-type}, the element type of the resulting array is the
result of @emph{upgrading} that element type; or, if the implementation
can determine that the element type is unspecified (or *), the element
type of the resulting array is @uref{syscla_t.html#t,@strong{t}};
otherwise, an error is signaled.

@strong{Examples:}

@verbatim
 (setq test1 (list 1 3 4 6 7))
 (setq test2 (list 2 5 8))
 (merge 'list test1 test2 #'<) =>  (1 2 3 4 5 6 7 8)
 (setq test1 (copy-seq "BOY"))
 (setq test2 (copy-seq :nosy"))
 (merge 'string test1 test2 #'char-lessp) =>  "BnOosYy"
 (setq test1 (vector ((red . 1) (blue . 4))))
 (setq test2 (vector ((yellow . 2) (green . 7))))
 (merge 'vector test1 test2 #'< :key #'cdr) 
=>  #((RED . 1) (YELLOW . 2) (BLUE . 4) (GREEN . 7)) 
@end verbatim

@verbatim
 (merge '(vector * 4) '(1 5) '(2 4 6) #'<) should signal an error
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error must be signaled if the @emph{result-type} is neither a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_list.html#list,@strong{list}}, nor a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_vector.html#vector,@strong{vector}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} should be
signaled if @emph{result-type} specifies the number of elements and the
sum of the lengths of @emph{sequence-1} and @emph{sequence-2} is
different from that number.

@strong{See Also:}

@uref{fun_sortcm_stable-sort.html#sort,@strong{sort}},
@uref{fun_sortcm_stable-sort.html#stable-sort,@strong{stable-sort}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss302.html,SEQUENCE-TYPE-LENGTH:MUST-MATCH}
@item
@uref{../Issues/iss073.html,CONCATENATE-SEQUENCE:SIGNAL-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MISMATCH
@subsubsection CLHS: Function MISMATCH
@anchor{#clhs-function-mismatch}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_search.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_replace.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MISMATCH}

@strong{Syntax:}

@strong{mismatch} @emph{sequence-1 sequence-2 &key from-end test
test-not key start1 start2 end1 end2}

=> @emph{position}

@strong{Arguments and Values:}

@emph{Sequence-1}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{Sequence-2}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start1},
@emph{end1}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-1}. The defaults for @emph{start1}
and @emph{end1} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{start2},
@emph{end2}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-2}. The defaults for @emph{start2}
and @emph{end2} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{position}---a @uref{glo_b.html#bounding_index,@emph{bounding
index}} of @emph{sequence-1}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

The specified subsequences of @emph{sequence-1} and @emph{sequence-2}
are compared element-wise.

The @emph{key} argument is used for both the @emph{sequence-1} and the
@emph{sequence-2}.

If @emph{sequence-1} and @emph{sequence-2} are of equal length and match
in every element, the result is @uref{glo_f.html#false,@emph{false}}.
Otherwise, the result is a non-negative
@uref{glo_i.html#integer,@emph{integer}}, the index within
@emph{sequence-1} of the leftmost or rightmost position, depending on
@emph{from-end}, at which the two subsequences fail to match. If one
subsequence is shorter than and a matching prefix of the other, the
result is the index relative to @emph{sequence-1} beyond the last
position tested.

If @emph{from-end} is @uref{glo_t.html#true,@emph{true}}, then one plus
the index of the rightmost position in which the @emph{sequences} differ
is returned. In effect, the subsequences are aligned at their right-hand
ends; then, the last elements are compared, the penultimate elements,
and so on. The index returned is an index relative to @emph{sequence-1}.

@strong{Examples:}

@verbatim
 (mismatch "abcd" "ABCDE" :test #'char-equal) =>  4
 (mismatch '(3 2 1 1 2 3) '(1 2 3) :from-end t) =>  3
 (mismatch '(1 2 3) '(2 3 4) :test-not #'eq :key #'oddp) =>  NIL
 (mismatch '(1 2 3 4 5 6) '(3 4 5 6 7) :start1 2 :end2 4) =>  NIL 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function POSITION POSITION-IF POSITION-IF-NOT
@subsubsection CLHS: Function POSITION, POSITION-IF, POSITION-IF-NOT
@anchor{#clhs-function-position-position-if-position-if-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_findcm_fi__find-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_search.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{POSITION, POSITION-IF, POSITION-IF-NOT}

@strong{Syntax:}

@strong{position} @emph{item sequence &key from-end test test-not start
end key} => @emph{position}

@strong{position-if} @emph{predicate sequence &key from-end start end
key} => @emph{position}

@strong{position-if-not} @emph{predicate sequence &key from-end start
end key} => @emph{position}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one argument that
returns a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{position}---a @uref{glo_b.html#bounding_index,@emph{bounding
index}} of @emph{sequence}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#position,@strong{position}},
@ref{#position-if,@strong{position-if}}, and
@ref{#position-if-not,@strong{position-if-not}} each search
@emph{sequence} for an @uref{glo_e.html#element,@emph{element}} that
@emph{satisfies the test}.

The @emph{position} returned is the index within @emph{sequence} of the
leftmost (if @emph{from-end} is @uref{glo_t.html#true,@emph{true}}) or
of the rightmost (if @emph{from-end} is
@uref{glo_f.html#false,@emph{false}})
@uref{glo_e.html#element,@emph{element}} that @emph{satisfies the test};
otherwise @uref{any_nil.html#nil,@strong{nil}} is returned. The index
returned is relative to the left-hand end of the entire @emph{sequence},
regardless of the value of @emph{start}, @emph{end}, or @emph{from-end}.

@strong{Examples:}

@verbatim
 (position #\a "baobab" :from-end t) =>  4
 (position-if #'oddp '((1) (2) (3) (4)) :start 1 :key #'car) =>  2
 (position 595 '()) =>  NIL
 (position-if-not #'integerp '(1 2 3 4 5.0)) =>  4 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_findcm_fi__find-if-not.html#find,@strong{find}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

The @uref{glo_f.html#function,@emph{function}}
@ref{#position-if-not,@strong{position-if-not}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REDUCE
@subsubsection CLHS: Function REDUCE
@anchor{#clhs-function-reduce}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_map-into.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_countcm_c_count-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REDUCE}

@strong{Syntax:}

@strong{reduce} @emph{function sequence &key key from-end start end
initial-value} => @emph{result}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} that might be called with
either zero or two @uref{glo_a.html#argument,@emph{arguments}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{initial-value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#reduce,@strong{reduce}} uses a binary operation, @emph{function},
to combine the @uref{glo_e.html#element,@emph{elements}} of
@emph{sequence} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end}.

The @emph{function} must accept as
@uref{glo_a.html#argument,@emph{arguments}} two
@uref{glo_e.html#element,@emph{elements}} of @emph{sequence} or the
results from combining those @uref{glo_e.html#element,@emph{elements}}.
The @emph{function} must also be able to accept no arguments.

If @emph{key} is supplied, it is used is used to extract the values to
reduce. The @emph{key} function is applied exactly once to each element
of @emph{sequence} in the order implied by the reduction order but not
to the value of @emph{initial-value}, if supplied. The @emph{key}
function typically returns part of the
@uref{glo_e.html#element,@emph{element}} of @emph{sequence}. If
@emph{key} is not supplied or is @uref{any_nil.html#nil,@strong{nil}},
the @emph{sequence} @uref{glo_e.html#element,@emph{element}} itself is
used.

The reduction is left-associative, unless @emph{from-end} is
@uref{glo_t.html#true,@emph{true}} in which case it is
right-associative.

If @emph{initial-value} is supplied, it is logically placed before the
subsequence (or after it if @emph{from-end} is
@uref{glo_t.html#true,@emph{true}}) and included in the reduction
operation.

In the normal case, the result of @ref{#reduce,@strong{reduce}} is the
combined result of @emph{function}'s being applied to successive pairs
of @uref{glo_e.html#element,@emph{elements}} of @emph{sequence}. If the
subsequence contains exactly one
@uref{glo_e.html#element,@emph{element}} and no @emph{initial-value} is
given, then that @uref{glo_e.html#element,@emph{element}} is returned
and @emph{function} is not called. If the subsequence is empty and an
@emph{initial-value} is given, then the @emph{initial-value} is returned
and @emph{function} is not called. If the subsequence is empty and no
@emph{initial-value} is given, then the @emph{function} is called with
zero arguments, and @ref{#reduce,@strong{reduce}} returns whatever
@emph{function} does. This is the only case where the @emph{function} is
called with other than two arguments.

@strong{Examples:}

@verbatim
 (reduce #'* '(1 2 3 4 5)) =>  120
 (reduce #'append '((1) (2)) :initial-value '(i n i t)) =>  (I N I T 1 2)
 (reduce #'append '((1) (2)) :from-end t                  
                             :initial-value '(i n i t)) =>  (1 2 I N I T) 
 (reduce #'- '(1 2 3 4)) ==  (- (- (- 1 2) 3) 4) =>  -8
 (reduce #'- '(1 2 3 4) :from-end t)    ;Alternating sum.
==  (- 1 (- 2 (- 3 4))) =>  -2
 (reduce #'+ '()) =>  0
 (reduce #'+ '(3)) =>  3
 (reduce #'+ '(foo)) =>  FOO
 (reduce #'list '(1 2 3 4)) =>  (((1 2) 3) 4)
 (reduce #'list '(1 2 3 4) :from-end t) =>  (1 (2 (3 4)))
 (reduce #'list '(1 2 3 4) :initial-value 'foo) =>  ((((foo 1) 2) 3) 4)
 (reduce #'list '(1 2 3 4)
        :from-end t :initial-value 'foo) =>  (1 (2 (3 (4 foo))))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@item
@uref{../Issues/iss292.html,REDUCE-ARGUMENT-EXTRACTION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REMOVE-DUPLICATES DELETE-DUPLICATES
@subsubsection CLHS: Function REMOVE-DUPLICATES, DELETE-DUPLICATES
@anchor{#clhs-function-remove-duplicates-delete-duplicates}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_removecm__elete-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-18.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REMOVE-DUPLICATES, DELETE-DUPLICATES}

@strong{Syntax:}

@strong{remove-duplicates} @emph{sequence &key from-end test test-not
start end key}

=> @emph{result-sequence}

@strong{delete-duplicates} @emph{sequence &key from-end test test-not
start end key}

=> @emph{result-sequence}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@strong{Description:}

@ref{#remove-duplicates,@strong{remove-duplicates}} returns a modified
copy of @emph{sequence} from which any element that matches another
element occurring in @emph{sequence} has been removed.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_v.html#vector,@emph{vector}} that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_l.html#list,@emph{list}}.

@ref{#delete-duplicates,@strong{delete-duplicates}} is like
@ref{#remove-duplicates,@strong{remove-duplicates}}, but
@ref{#delete-duplicates,@strong{delete-duplicates}} may modify
@emph{sequence}.

The elements of @emph{sequence} are compared
@uref{glo_p.html#pairwise,@emph{pairwise}}, and if any two match, then
the one occurring earlier in @emph{sequence} is discarded, unless
@emph{from-end} is @uref{glo_t.html#true,@emph{true}}, in which case the
one later in @emph{sequence} is discarded.

@ref{#remove-duplicates,@strong{remove-duplicates}} and
@ref{#delete-duplicates,@strong{delete-duplicates}} return a
@uref{glo_s.html#sequence,@emph{sequence}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{sequence} with enough
elements removed so that no two of the remaining elements match. The
order of the elements remaining in the result is the same as the order
in which they appear in @emph{sequence}.

@ref{#remove-duplicates,@strong{remove-duplicates}} returns a
@uref{glo_s.html#sequence,@emph{sequence}} that may share with
@emph{sequence} or may be @uref{glo_i.html#identical,@emph{identical}}
to @emph{sequence} if no elements need to be removed.

@ref{#delete-duplicates,@strong{delete-duplicates}}, when
@emph{sequence} is a @uref{glo_l.html#list,@emph{list}}, is permitted to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} any part,
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}} or
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}, of the
top-level list structure in that @emph{sequence}. When @emph{sequence}
is a @uref{glo_v.html#vector,@emph{vector}},
@ref{#delete-duplicates,@strong{delete-duplicates}} is permitted to
change the dimensions of the @uref{glo_v.html#vector,@emph{vector}} and
to slide its elements into new positions without permuting them to
produce the resulting @uref{glo_v.html#vector,@emph{vector}}.

@strong{Examples:}

@verbatim
 (remove-duplicates "aBcDAbCd" :test #'char-equal :from-end t) =>  "aBcD"
 (remove-duplicates '(a b c b d d e)) =>  (A C B D E)
 (remove-duplicates '(a b c b d d e) :from-end t) =>  (A B C D E)
 (remove-duplicates '((foo #\a) (bar #\%) (baz #\A))
     :test #'char-equal :key #'cadr) =>  ((BAR #\%) (BAZ #\A))
 (remove-duplicates '((foo #\a) (bar #\%) (baz #\A)) 
     :test #'char-equal :key #'cadr :from-end t) =>  ((FOO #\a) (BAR #\%))
 (setq tester (list 0 1 2 3 4 5 6))
 (delete-duplicates tester :key #'oddp :start 1 :end 6) =>  (0 4 5 6)
@end verbatim

@strong{Side Effects:}

@ref{#delete-duplicates,@strong{delete-duplicates}} might destructively
modify @emph{sequence}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result might or might not be simple, and might or might not be
@uref{glo_i.html#identical,@emph{identical}} to @emph{sequence}.

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

These functions are useful for converting @emph{sequence} into a
canonical form suitable for representing a set.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REMOVE REMOVE-IF REMOVE-IF-NOT
@subsubsection CLHS: Function REMOVE, REMOVE-IF, REMOVE-IF-NOT...
@anchor{#clhs-function-remove-remove-if-remove-if-not...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_merge.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_remove-du_e-duplicates.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REMOVE, REMOVE-IF, REMOVE-IF-NOT, DELETE,
DELETE-IF, DELETE-IF-NOT}

@strong{Syntax:}

@strong{remove} @emph{item sequence &key from-end test test-not start
end count key} => @emph{result-sequence}

@strong{remove-if} @emph{test sequence &key from-end start end count
key} => @emph{result-sequence}

@strong{remove-if-not} @emph{test sequence &key from-end start end count
key} => @emph{result-sequence}

@strong{delete} @emph{item sequence &key from-end test test-not start
end count key} => @emph{result-sequence}

@strong{delete-if} @emph{test sequence &key from-end start end count
key} => @emph{result-sequence}

@strong{delete-if-not} @emph{test sequence &key from-end start end count
key} => @emph{result-sequence}

@strong{Arguments and Values:}

@emph{item}---an @uref{glo_o.html#object,@emph{object}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{count}---an @uref{glo_i.html#integer,@emph{integer}} or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@strong{Description:}

@ref{#remove,@strong{remove}}, @ref{#remove-if,@strong{remove-if}}, and
@ref{#remove-if-not,@strong{remove-if-not}} return a @emph{sequence}
from which the elements that
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}} have been
removed.

@ref{#delete,@strong{delete}}, @ref{#delete-if,@strong{delete-if}}, and
@ref{#delete-if-not,@strong{delete-if-not}} are like
@ref{#remove,@strong{remove}}, @ref{#remove-if,@strong{remove-if}}, and
@ref{#remove-if-not,@strong{remove-if-not}} respectively, but they may
modify @emph{sequence}.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_v.html#vector,@emph{vector}} that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_l.html#list,@emph{list}}.

Supplying a @emph{from-end} of @uref{glo_t.html#true,@emph{true}}
matters only when the @emph{count} is provided; in that case only the
rightmost @emph{count} elements @emph{satisfying the test} are deleted.

@emph{Count}, if supplied, limits the number of elements removed or
deleted; if more than @emph{count} elements
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}, then of
these elements only the leftmost or rightmost, depending on
@emph{from-end}, are deleted or removed, as many as specified by
@emph{count}. If @emph{count} is supplied and negative, the behavior is
as if zero had been supplied instead. If @emph{count} is
@uref{any_nil.html#nil,@strong{nil}}, all matching items are affected.

For all these functions, elements not removed or deleted occur in the
same order in the result as they did in @emph{sequence}.

@ref{#remove,@strong{remove}}, @ref{#remove-if,@strong{remove-if}},
@ref{#remove-if-not,@strong{remove-if-not}} return a
@uref{glo_s.html#sequence,@emph{sequence}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{sequence} that has the same
elements except that those in the subsequence
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
and @emph{satisfying the test} have been removed. This is a
non-destructive operation. If any elements need to be removed, the
result will be a copy. The result of @ref{#remove,@strong{remove}} may
share with @emph{sequence}; the result may be
@uref{glo_i.html#identical,@emph{identical}} to the input
@emph{sequence} if no elements need to be removed.

@ref{#delete,@strong{delete}}, @ref{#delete-if,@strong{delete-if}}, and
@ref{#delete-if-not,@strong{delete-if-not}} return a
@uref{glo_s.html#sequence,@emph{sequence}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{sequence} that has the same
elements except that those in the subsequence
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
and @emph{satisfying the test} have been deleted. @emph{Sequence} may be
destroyed and used to construct the result; however, the result might or
might not be @uref{glo_i.html#identical,@emph{identical}} to
@emph{sequence}.

@ref{#delete,@strong{delete}}, when @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, is permitted to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} any part,
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}} or
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}, of the
top-level list structure in that @emph{sequence}. When @emph{sequence}
is a @uref{glo_v.html#vector,@emph{vector}},
@ref{#delete,@strong{delete}} is permitted to change the dimensions of
the @uref{glo_v.html#vector,@emph{vector}} and to slide its elements
into new positions without permuting them to produce the resulting
@uref{glo_v.html#vector,@emph{vector}}.

@ref{#delete-if,@strong{delete-if}} is constrained to behave exactly as
follows:

@verbatim
 (delete nil sequence
             :test #'(lambda (ignore item) (funcall test item))
             ...)
@end verbatim

@strong{Examples:}

@verbatim
 (remove 4 '(1 3 4 5 9)) =>  (1 3 5 9)
 (remove 4 '(1 2 4 1 3 4 5)) =>  (1 2 1 3 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1) =>  (1 2 1 3 4 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1 :from-end t) =>  (1 2 4 1 3 5)
 (remove 3 '(1 2 4 1 3 4 5) :test #'>) =>  (4 3 4 5)
 (setq lst '(list of four elements)) =>  (LIST OF FOUR ELEMENTS)
 (setq lst2 (copy-seq lst)) =>  (LIST OF FOUR ELEMENTS)
 (setq lst3 (delete 'four lst)) =>  (LIST OF ELEMENTS)
 (equal lst lst2) =>  false
 (remove-if #'oddp '(1 2 4 1 3 4 5)) =>  (2 4 4)
 (remove-if #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) 
=>  (1 2 4 1 3 5)
 (remove-if-not #'evenp '(1 2 3 4 5 6 7 8 9) :count 2 :from-end t)
=>  (1 2 3 4 5 6 8)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete 4 tester) =>  (1 2 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete 4 tester :count 1) =>  (1 2 1 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete 4 tester :count 1 :from-end t) =>  (1 2 4 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete 3 tester :test #'>) =>  (4 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete-if #'oddp tester) =>  (2 4 4)
 (setq tester (list 1 2 4 1 3 4 5)) =>  (1 2 4 1 3 4 5)
 (delete-if #'evenp tester :count 1 :from-end t) =>  (1 2 4 1 3 5)    
 (setq tester (list 1 2 3 4 5 6)) =>  (1 2 3 4 5 6) 
 (delete-if #'evenp tester) =>  (1 3 5) 
 tester =>  implementation-dependent
@end verbatim

@verbatim
 (setq foo (list 'a 'b 'c)) =>  (A B C)
 (setq bar (cdr foo)) =>  (B C)
 (setq foo (delete 'b foo)) =>  (A C)
 bar =>  ((C)) or ...
 (eq (cdr foo) (car bar)) =>  T or ...
@end verbatim

@strong{Side Effects:}

For @ref{#delete,@strong{delete}}, @ref{#delete-if,@strong{delete-if}},
and @ref{#delete-if-not,@strong{delete-if-not}}, @emph{sequence} may be
destroyed and used to construct the result.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result might or might not be simple, and might or might not be
@uref{glo_i.html#identical,@emph{identical}} to @emph{sequence}.

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

The functions @ref{#delete-if-not,@strong{delete-if-not}} and
@ref{#remove-if-not,@strong{remove-if-not}} are deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss283.html,RANGE-OF-COUNT-KEYWORD:NIL-OR-INTEGER}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REPLACE
@subsubsection CLHS: Function REPLACE
@anchor{#clhs-function-replace}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_mismatch.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_substitut_itute-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REPLACE}

@strong{Syntax:}

@strong{replace} @emph{sequence-1 sequence-2 &key start1 end1 start2
end2} => @emph{sequence-1}

@strong{Arguments and Values:}

@emph{sequence-1}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{sequence-2}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{start1},
@emph{end1}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-1}. The defaults for @emph{start1}
and @emph{end1} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{start2},
@emph{end2}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-2}. The defaults for @emph{start2}
and @emph{end2} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@strong{Description:}

Destructively modifies @emph{sequence-1} by replacing the
@uref{glo_e.html#element,@emph{elements}} of @emph{subsequence-1}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start1} and
@emph{end1} with the @uref{glo_e.html#element,@emph{elements}} of
@emph{subsequence-2} @uref{glo_b.html#bounded,@emph{bounded}} by
@emph{start2} and @emph{end2}.

@emph{Sequence-1} is destructively modified by copying successive
@uref{glo_e.html#element,@emph{elements}} into it from
@emph{sequence-2}. @uref{glo_e.html#element,@emph{Elements}} of the
subsequence of @emph{sequence-2}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start2} and
@emph{end2} are copied into the subsequence of @emph{sequence-1}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start1} and
@emph{end1}. If these subsequences are not of the same length, then the
shorter length determines how many
@uref{glo_e.html#element,@emph{elements}} are copied; the extra
@uref{glo_e.html#element,@emph{elements}} near the end of the longer
subsequence are not involved in the operation. The number of elements
copied can be expressed as:

@verbatim
 (min (- end1 start1) (- end2 start2))
@end verbatim

If @emph{sequence-1} and @emph{sequence-2} are the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_o.html#object,@emph{object}} and the region being modified
overlaps the region being copied from, then it is as if the entire
source region were copied to another place and only then copied back
into the target region. However, if @emph{sequence-1} and
@emph{sequence-2} are not the same, but the region being modified
overlaps the region being copied from (perhaps because of shared list
structure or displaced @uref{glo_a.html#array,@emph{arrays}}), then
after the @ref{#replace,@strong{replace}} operation the subsequence of
@emph{sequence-1} being modified will have unpredictable contents. It is
an error if the elements of @emph{sequence-2} are not of a
@uref{glo_t.html#type,@emph{type}} that can be stored into
@emph{sequence-1}.

@strong{Examples:}

@verbatim
 (replace "abcdefghij" "0123456789" :start1 4 :end1 7 :start2 4) 
=>  "abcd456hij"
 (setq lst "012345678") =>  "012345678"
 (replace lst lst :start1 2 :start2 0) =>  "010123456"
 lst =>  "010123456"
@end verbatim

@strong{Side Effects:}

The @emph{sequence-1} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_fill.html#fill,@strong{fill}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REVERSE NREVERSE
@subsubsection CLHS: Function REVERSE, NREVERSE
@anchor{#clhs-function-reverse-nreverse}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_length.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sortcm_stable-sort.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REVERSE, NREVERSE}

@strong{Syntax:}

@strong{reverse} @emph{sequence} => @emph{reversed-sequence}

@strong{nreverse} @emph{sequence} => @emph{reversed-sequence}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{reversed-sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@strong{Description:}

@ref{#reverse,@strong{reverse}} and @ref{#nreverse,@strong{nreverse}}
return a new @uref{glo_s.html#sequence,@emph{sequence}} of the same kind
as @emph{sequence}, containing the same
@uref{glo_e.html#element,@emph{elements}}, but in reverse order.

@ref{#reverse,@strong{reverse}} and @ref{#nreverse,@strong{nreverse}}
differ in that @ref{#reverse,@strong{reverse}} always creates and
returns a new @uref{glo_s.html#sequence,@emph{sequence}}, whereas
@ref{#nreverse,@strong{nreverse}} might modify and return the given
@emph{sequence}. @ref{#reverse,@strong{reverse}} never modifies the
given @emph{sequence}.

For @ref{#reverse,@strong{reverse}}, if @emph{sequence} is a
@uref{glo_v.html#vector,@emph{vector}}, the result is a
@uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_s.html#simple_array,@emph{simple array}} of
@uref{glo_r.html#rank,@emph{rank}} one that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_f.html#fresh,@emph{fresh}} @uref{glo_l.html#list,@emph{list}}.

For @ref{#nreverse,@strong{nreverse}}, if @emph{sequence} is a
@uref{glo_v.html#vector,@emph{vector}}, the result is a
@uref{glo_v.html#vector,@emph{vector}} that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_l.html#list,@emph{list}}.

For @ref{#nreverse,@strong{nreverse}}, @emph{sequence} might be
destroyed and re-used to produce the result. The result might or might
not be @uref{glo_i.html#identical,@emph{identical}} to @emph{sequence}.
Specifically, when @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, @ref{#nreverse,@strong{nreverse}} is
permitted to @uref{mac_setfcm_psetf.html#setf,@strong{setf}} any part,
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}} or
@uref{acc_carcm_cdr_darcm_cddddr.html#cdr,@strong{cdr}}, of any
@uref{glo_c.html#cons,@emph{cons}} that is part of the
@uref{glo_l.html#list_structure,@emph{list structure}} of
@emph{sequence}. When @emph{sequence} is a
@uref{glo_v.html#vector,@emph{vector}},
@ref{#nreverse,@strong{nreverse}} is permitted to re-order the elements
of @emph{sequence} in order to produce the resulting
@uref{glo_v.html#vector,@emph{vector}}.

@strong{Examples:}

@verbatim
 (setq str "abc") =>  "abc"
 (reverse str) =>  "cba"
 str =>  "abc"
 (setq str (copy-seq str)) =>  "abc"
 (nreverse str) =>  "cba"
 str =>  implementation-dependent
 (setq l (list 1 2 3)) =>  (1 2 3)
 (nreverse l) =>  (3 2 1)
 l =>  implementation-dependent
@end verbatim

@strong{Side Effects:}

@ref{#nreverse,@strong{nreverse}} might either create a new
@uref{glo_s.html#sequence,@emph{sequence}}, modify the argument
@emph{sequence}, or both. (@ref{#reverse,@strong{reverse}} does not
modify @emph{sequence}.)

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SEARCH
@subsubsection CLHS: Function SEARCH
@anchor{#clhs-function-search}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_positionc_ition-if-not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_mismatch.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SEARCH}

@strong{Syntax:}

@strong{search} @emph{sequence-1 sequence-2 &key from-end test test-not
key start1 start2 end1 end2}

=> @emph{position}

@strong{Arguments and Values:}

@emph{Sequence-1}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{Sequence-2}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{start1},
@emph{end1}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-1}. The defaults for @emph{start1}
and @emph{end1} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{start2},
@emph{end2}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence-2}. The defaults for @emph{start2}
and @emph{end2} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{position}---a @uref{glo_b.html#bounding_index,@emph{bounding
index}} of @emph{sequence-2}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Searches @emph{sequence-2} for a subsequence that matches
@emph{sequence-1}.

The implementation may choose to search @emph{sequence-2} in any order;
there is no guarantee on the number of times the test is made. For
example, when @emph{start-end} is @uref{glo_t.html#true,@emph{true}},
the @emph{sequence} might actually be searched from left to right
instead of from right to left (but in either case would return the
rightmost matching subsequence). If the search succeeds,
@ref{#search,@strong{search}} returns the offset into @emph{sequence-2}
of the first element of the leftmost or rightmost matching subsequence,
depending on @emph{from-end}; otherwise @ref{#search,@strong{search}}
returns @uref{any_nil.html#nil,@strong{nil}}.

If @emph{from-end} is @uref{glo_t.html#true,@emph{true}}, the index of
the leftmost element of the rightmost matching subsequence is returned.

@strong{Examples:}

@verbatim
 (search "dog" "it's a dog's life") =>  7
 (search '(0 1) '(2 4 6 1 3 5) :key #'oddp) =>  2
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SORT STABLE-SORT
@subsubsection CLHS: Function SORT, STABLE-SORT
@anchor{#clhs-function-sort-stable-sort}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_reversecm_nreverse.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_findcm_fi__find-if-not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SORT, STABLE-SORT}

@strong{Syntax:}

@strong{sort} @emph{sequence predicate &key key} =>
@emph{sorted-sequence}

@strong{stable-sort} @emph{sequence predicate &key key} =>
@emph{sorted-sequence}

@strong{Arguments and Values:}

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of two arguments that
returns a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{sorted-sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@strong{Description:}

@ref{#sort,@strong{sort}} and @ref{#stable-sort,@strong{stable-sort}}
destructively sort @emph{sequences} according to the order determined by
the @emph{predicate} function.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_v.html#vector,@emph{vector}} that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_l.html#list,@emph{list}}.

@ref{#sort,@strong{sort}} determines the relationship between two
elements by giving keys extracted from the elements to the
@emph{predicate}. The first argument to the @emph{predicate} function is
the part of one element of @emph{sequence} extracted by the @emph{key}
function (if supplied); the second argument is the part of another
element of @emph{sequence} extracted by the @emph{key} function (if
supplied). @emph{Predicate} should return
@uref{glo_t.html#true,@emph{true}} if and only if the first argument is
strictly less than the second (in some appropriate sense). If the first
argument is greater than or equal to the second (in the appropriate
sense), then the @emph{predicate} should return
@uref{glo_f.html#false,@emph{false}}.

The argument to the @emph{key} function is the @emph{sequence} element.
The return value of the @emph{key} function becomes an argument to
@emph{predicate}. If @emph{key} is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the @emph{sequence} element itself
is used. There is no guarantee on the number of times the @emph{key}
will be called.

If the @emph{key} and @emph{predicate} always return, then the sorting
operation will always terminate, producing a
@uref{glo_s.html#sequence,@emph{sequence}} containing the same
@uref{glo_e.html#element,@emph{elements}} as @emph{sequence} (that is,
the result is a permutation of @emph{sequence}). This is guaranteed even
if the @emph{predicate} does not really consistently represent a total
order (in which case the @uref{glo_e.html#element,@emph{elements}} will
be scrambled in some unpredictable way, but no
@uref{glo_e.html#element,@emph{element}} will be lost). If the
@emph{key} consistently returns meaningful keys, and the
@emph{predicate} does reflect some total ordering criterion on those
keys, then the @uref{glo_e.html#element,@emph{elements}} of the
@emph{sorted-sequence} will be properly sorted according to that
ordering.

The sorting operation performed by @ref{#sort,@strong{sort}} is not
guaranteed stable. Elements considered equal by the @emph{predicate}
might or might not stay in their original order. The @emph{predicate} is
assumed to consider two elements x and y to be equal if (funcall
@emph{predicate} @emph{x} @emph{y}) and (funcall @emph{predicate}
@emph{y} @emph{x}) are both @uref{glo_f.html#false,@emph{false}}.
@ref{#stable-sort,@strong{stable-sort}} guarantees stability.

The sorting operation can be destructive in all cases. In the case of a
@uref{glo_v.html#vector,@emph{vector}} argument, this is accomplished by
permuting the elements in place. In the case of a
@uref{glo_l.html#list,@emph{list}}, the
@uref{glo_l.html#list,@emph{list}} is destructively reordered in the
same manner as for
@uref{fun_reversecm_nreverse.html#nreverse,@strong{nreverse}}.

@strong{Examples:}

@verbatim
 (setq tester (copy-seq "lkjashd")) =>  "lkjashd"
 (sort tester #'char-lessp) =>  "adhjkls"
 (setq tester (list '(1 2 3) '(4 5 6) '(7 8 9))) =>  ((1 2 3) (4 5 6) (7 8 9))
 (sort tester #'> :key #'car)  =>  ((7 8 9) (4 5 6) (1 2 3)) 
 (setq tester (list 1 2 3 4 5 6 7 8 9 0)) =>  (1 2 3 4 5 6 7 8 9 0)
 (stable-sort tester #'(lambda (x y) (and (oddp x) (evenp y))))
=>  (1 3 5 7 9 2 4 6 8 0)
 (sort (setq committee-data
             (vector (list (list "JonL" "White") "Iteration")
                     (list (list "Dick" "Waters") "Iteration")
                     (list (list "Dick" "Gabriel") "Objects")
                     (list (list "Kent" "Pitman") "Conditions")
                     (list (list "Gregor" "Kiczales") "Objects")
                     (list (list "David" "Moon") "Objects")
                     (list (list "Kathy" "Chapman") "Editorial")
                     (list (list "Larry" "Masinter") "Cleanup")
                     (list (list "Sandra" "Loosemore") "Compiler")))
       #'string-lessp :key #'cadar)
=>  #((("Kathy" "Chapman") "Editorial")
     (("Dick" "Gabriel") "Objects")
     (("Gregor" "Kiczales") "Objects")
     (("Sandra" "Loosemore") "Compiler")
     (("Larry" "Masinter") "Cleanup")
     (("David" "Moon") "Objects")
     (("Kent" "Pitman") "Conditions")
     (("Dick" "Waters") "Iteration")
     (("JonL" "White") "Iteration"))
 ;; Note that individual alphabetical order within `committees'
 ;; is preserved.
 (setq committee-data 
       (stable-sort committee-data #'string-lessp :key #'cadr))
=>  #((("Larry" "Masinter") "Cleanup")
     (("Sandra" "Loosemore") "Compiler")
     (("Kent" "Pitman") "Conditions")
     (("Kathy" "Chapman") "Editorial")
     (("Dick" "Waters") "Iteration")
     (("JonL" "White") "Iteration")
     (("Dick" "Gabriel") "Objects")
     (("Gregor" "Kiczales") "Objects")
     (("David" "Moon") "Objects"))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_merge.html#merge,@strong{merge}}, @uref{sec_3-2-1.html,Section
3.2.1 (Compiler Terminology)}, @uref{sec_3-6.html,Section 3.6 (Traversal
Rules and Side Effects)}, @uref{sec_3-7.html,Section 3.7 (Destructive
Operations)}

@strong{Notes:}

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result might or might not be simple, and might or might not be
@uref{glo_i.html#identical,@emph{identical}} to @emph{sequence}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SUBSTITUTE SUBSTITUTE-IF
@subsubsection CLHS: Function SUBSTITUTE, SUBSTITUTE-IF...
@anchor{#clhs-function-substitute-substitute-if...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_replace.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_seque_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_concatenate.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SUBSTITUTE, SUBSTITUTE-IF, SUBSTITUTE-IF-NOT,
NSUBSTITUTE, NSUBSTITUTE-IF, NSUBSTITUTE-IF-NOT}

@strong{Syntax:}

@strong{substitute} @emph{newitem olditem sequence &key from-end test
test-not start end count key}

=> @emph{result-sequence}

@strong{substitute-if} @emph{newitem predicate sequence &key from-end
start end count key}

=> @emph{result-sequence}

@strong{substitute-if-not} @emph{newitem predicate sequence &key
from-end start end count key}

=> @emph{result-sequence}

@strong{nsubstitute} @emph{newitem olditem sequence &key from-end test
test-not start end count key}

=> @emph{sequence}

@strong{nsubstitute-if} @emph{newitem predicate sequence &key from-end
start end count key}

=> @emph{sequence}

@strong{nsubstitute-if-not} @emph{newitem predicate sequence &key
from-end start end count key}

=> @emph{sequence}

@strong{Arguments and Values:}

@emph{newitem}---an @uref{glo_o.html#object,@emph{object}}.

@emph{olditem}---an @uref{glo_o.html#object,@emph{object}}.

@emph{sequence}---a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{from-end}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{test-not}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} that returns a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{count}---an @uref{glo_i.html#integer,@emph{integer}} or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{key}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one argument, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{result-sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@strong{Description:}

@ref{#substitute,@strong{substitute}},
@ref{#substitute-if,@strong{substitute-if}}, and
@ref{#substitute-if-not,@strong{substitute-if-not}} return a copy of
@emph{sequence} in which each @uref{glo_e.html#element,@emph{element}}
that @emph{satisfies the test} has been replaced with @emph{newitem}.

@ref{#nsubstitute,@strong{nsubstitute}},
@ref{#nsubstitute-if,@strong{nsubstitute-if}}, and
@ref{#nsubstitute-if-not,@strong{nsubstitute-if-not}} are like
@ref{#substitute,@strong{substitute}},
@ref{#substitute-if,@strong{substitute-if}}, and
@ref{#substitute-if-not,@strong{substitute-if-not}} respectively, but
they may modify @emph{sequence}.

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result is a @uref{glo_v.html#vector,@emph{vector}} that has the same
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} as @emph{sequence}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, the result is a
@uref{glo_l.html#list,@emph{list}}.

@emph{Count}, if supplied, limits the number of elements altered; if
more than @emph{count} @uref{glo_e.html#element,@emph{elements}}
@uref{glo_s.html#satisfy_the_test,@emph{satisfy the test}}, then of
these @uref{glo_e.html#element,@emph{elements}} only the leftmost or
rightmost, depending on @emph{from-end}, are replaced, as many as
specified by @emph{count}. If @emph{count} is supplied and negative, the
behavior is as if zero had been supplied instead. If @emph{count} is
@uref{any_nil.html#nil,@strong{nil}}, all matching items are affected.

Supplying a @emph{from-end} of @uref{glo_t.html#true,@emph{true}}
matters only when the @emph{count} is provided (and
@uref{glo_n.html#non-nil,@emph{non-nil}}); in that case, only the
rightmost @emph{count} @uref{glo_e.html#element,@emph{elements}}
@emph{satisfying the test} are removed (instead of the leftmost).

@emph{predicate}, @emph{test}, and @emph{test-not} might be called more
than once for each @uref{glo_s.html#sequence,@emph{sequence}}
@uref{glo_e.html#element,@emph{element}}, and their side effects can
happen in any order.

The result of all these functions is a
@uref{glo_s.html#sequence,@emph{sequence}} of the same
@uref{glo_t.html#type,@emph{type}} as @emph{sequence} that has the same
elements except that those in the subsequence
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
and @emph{satisfying the test} have been replaced by @emph{newitem}.

@ref{#substitute,@strong{substitute}},
@ref{#substitute-if,@strong{substitute-if}}, and
@ref{#substitute-if-not,@strong{substitute-if-not}} return a
@emph{sequence} which can share with @emph{sequence} or may be
@uref{glo_i.html#identical,@emph{identical}} to the input
@emph{sequence} if no elements need to be changed.

@ref{#nsubstitute,@strong{nsubstitute}} and
@ref{#nsubstitute-if,@strong{nsubstitute-if}} are required to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} any
@uref{acc_carcm_cdr_darcm_cddddr.html#car,@strong{car}} (if
@emph{sequence} is a @uref{glo_l.html#list,@emph{list}}) or
@uref{acc_aref.html#aref,@strong{aref}} (if @emph{sequence} is a
@uref{glo_v.html#vector,@emph{vector}}) of @emph{sequence} that is
required to be replaced with @emph{newitem}. If @emph{sequence} is a
@uref{glo_l.html#list,@emph{list}}, none of the
@uref{glo_c.html#cdr,@emph{cdrs}} of the top-level
@uref{glo_l.html#list,@emph{list}} can be modified.

@strong{Examples:}

@verbatim
 (substitute #\. #\SPACE "0 2 4 6") =>  "0.2.4.6"
 (substitute 9 4 '(1 2 4 1 3 4 5)) =>  (1 2 9 1 3 9 5)
 (substitute 9 4 '(1 2 4 1 3 4 5) :count 1) =>  (1 2 9 1 3 4 5)
 (substitute 9 4 '(1 2 4 1 3 4 5) :count 1 :from-end t)
=>  (1 2 4 1 3 9 5)
 (substitute 9 3 '(1 2 4 1 3 4 5) :test #'>) =>  (9 9 4 9 3 4 5)

 (substitute-if 0 #'evenp '((1) (2) (3) (4)) :start 2 :key #'car)
=>  ((1) (2) (3) 0)
 (substitute-if 9 #'oddp '(1 2 4 1 3 4 5)) =>  (9 2 4 9 9 4 9)
 (substitute-if 9 #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t)
=>  (1 2 4 1 3 9 5)

 (setq some-things (list 'a 'car 'b 'cdr 'c)) =>  (A CAR B CDR C)
 (nsubstitute-if "function was here" #'fboundp some-things
                 :count 1 :from-end t) =>  (A CAR B "function was here" C)
 some-things =>  (A CAR B "function was here" C)
 (setq alpha-tester (copy-seq "ab ")) =>  "ab "
 (nsubstitute-if-not #\z #'alpha-char-p alpha-tester) =>  "abz"
 alpha-tester =>  "abz"
@end verbatim

@strong{Side Effects:}

@ref{#nsubstitute,@strong{nsubstitute}},
@ref{#nsubstitute-if,@strong{nsubstitute-if}}, and
@ref{#nsubstitute-if-not,@strong{nsubstitute-if-not}} modify
@emph{sequence}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}.

@strong{See Also:}

@uref{fun_substcm_s_subst-if-not.html#subst,@strong{subst}},
@uref{fun_substcm_s_subst-if-not.html#nsubst,@strong{nsubst}},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

If @emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}}, the
result might or might not be simple, and might or might not be
@uref{glo_i.html#identical,@emph{identical}} to @emph{sequence}.

The :test-not @uref{glo_a.html#argument,@emph{argument}} is deprecated.

The functions @ref{#substitute-if-not,@strong{substitute-if-not}} and
@ref{#nsubstitute-if-not,@strong{nsubstitute-if-not}} are deprecated.

@ref{#nsubstitute,@strong{nsubstitute}} and
@ref{#nsubstitute-if,@strong{nsubstitute-if}} can be used in
for-effect-only positions in code.

Because the side-effecting variants (e.g.,
@ref{#nsubstitute,@strong{nsubstitute}}) potentially change the path
that is being traversed, their effects in the presence of shared or
circular structure may vary in surprising ways when compared to their
non-side-effecting alternatives. To see this, consider the following
side-effect behavior, which might be exhibited by some implementations:

@verbatim
 (defun test-it (fn)
   (let ((x (cons 'b nil)))
     (rplacd x x)
     (funcall fn 'a 'b x :count 1)))
 (test-it #'substitute) =>  (A . #1=(B . #1#))
 (test-it #'nsubstitute) =>  (A . #1#)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss346.html,TEST-NOT-IF-NOT:FLUSH-ALL}
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@item
@uref{../Issues/iss293.html,REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89}
@item
@uref{../Issues/iss283.html,RANGE-OF-COUNT-KEYWORD:NIL-OR-INTEGER}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 18
@section CLHS: Chapter 18
@anchor{#clhs-chapter-18}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_remove-du_e-duplicates.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_18-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
18. Hash Tables

@uref{sec_18-1.html,}

18.1 Hash Table Concepts

@uref{sec_the_hash__s_dictionary.html,}

18.2 The Hash Tables Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Hash Tables Dictionary::
@end menu

@node CLHS Section The Hash Tables Dictionary
@subsection CLHS: Section The Hash Tables Dictionary
@anchor{#clhs-section-the-hash-tables-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_18-1-2-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-18.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_hash-table.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
18.2 The Hash Tables Dictionary

@uref{syscla_hash-table.html,@emph{System Class} @strong{HASH-TABLE}}

@uref{fun_make-hash-table.html,@emph{Function} @strong{MAKE-HASH-TABLE}}

@uref{fun_hash-table-p.html,@emph{Function} @strong{HASH-TABLE-P}}

@uref{fun_hash-table-count.html,@emph{Function}
@strong{HASH-TABLE-COUNT}}

@uref{fun_hash-table-rehash-size.html,@emph{Function}
@strong{HASH-TABLE-REHASH-SIZE}}

@uref{fun_hash-tabl_sh-threshold.html,@emph{Function}
@strong{HASH-TABLE-REHASH-THRESHOLD}}

@uref{fun_hash-table-size.html,@emph{Function} @strong{HASH-TABLE-SIZE}}

@uref{fun_hash-table-test.html,@emph{Function} @strong{HASH-TABLE-TEST}}

@uref{acc_gethash.html,@emph{Accessor} @strong{GETHASH}}

@uref{fun_remhash.html,@emph{Function} @strong{REMHASH}}

@uref{fun_maphash.html,@emph{Function} @strong{MAPHASH}}

@uref{mac_with-hash_ble-iterator.html,@emph{Macro}
@strong{WITH-HASH-TABLE-ITERATOR}}

@uref{fun_clrhash.html,@emph{Function} @strong{CLRHASH}}

@uref{fun_sxhash.html,@emph{Function} @strong{SXHASH}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor GETHASH::
* CLHS Function CLRHASH::
* CLHS Function HASH-TABLE-REHASH-THRESHOLD::
* CLHS Function HASH-TABLE-COUNT::
* CLHS Function HASH-TABLE-P::
* CLHS Function HASH-TABLE-REHASH-SIZE::
* CLHS Function HASH-TABLE-SIZE::
* CLHS Function HASH-TABLE-TEST::
* CLHS Function MAKE-HASH-TABLE::
* CLHS Function MAPHASH::
* CLHS Function REMHASH::
* CLHS Function SXHASH::
* CLHS Macro WITH-HASH-TABLE-ITERATOR::
@end menu

@node CLHS Accessor GETHASH
@subsubsection CLHS: Accessor GETHASH
@anchor{#clhs-accessor-gethash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-table-test.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_remhash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{GETHASH}

@strong{Syntax:}

@strong{gethash} @emph{key hash-table &optional default} => @emph{value,
present-p}

(setf (@strong{gethash} @emph{key hash-table &optional default})
@emph{new-value})

@strong{Arguments and Values:}

@emph{key}---an @uref{glo_o.html#object,@emph{object}}.

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{default}---an @uref{glo_o.html#object,@emph{object}}. The default
is @uref{any_nil.html#nil,@strong{nil}}.

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{present-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@emph{Value} is the @uref{glo_o.html#object,@emph{object}} in
@emph{hash-table} whose @uref{glo_k.html#key,@emph{key}} is the
@uref{glo_s.html#same,@emph{same}} as @emph{key} under the
@emph{hash-table}'s equivalence test. If there is no such entry,
@emph{value} is the @emph{default}.

@emph{Present-p} is @uref{glo_t.html#true,@emph{true}} if an entry is
found; otherwise, it is @uref{glo_f.html#false,@emph{false}}.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} may be used with
@ref{#gethash,@strong{gethash}} to modify the
@uref{glo_v.html#value,@emph{value}} associated with a given
@uref{glo_k.html#key,@emph{key}}, or to add a new entry. When a
@ref{#gethash,@strong{gethash}} @uref{glo_f.html#form,@emph{form}} is
used as a @uref{mac_setfcm_psetf.html#setf,@strong{setf}} @emph{place},
any @emph{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its
@uref{glo_v.html#value,@emph{value}} is ignored.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32206334>
 (gethash 1 table) =>  NIL, false
 (gethash 1 table 2) =>  2, false
 (setf (gethash 1 table) "one") =>  "one"
 (setf (gethash 2 table "two") "two") =>  "two"
 (gethash 1 table) =>  "one", true
 (gethash 2 table) =>  "two", true
 (gethash nil table) =>  NIL, false
 (setf (gethash nil table) nil) =>  NIL 
 (gethash nil table) =>  NIL, true
 (defvar *counters* (make-hash-table)) =>  *COUNTERS*
 (gethash 'foo *counters*) =>  NIL, false
 (gethash 'foo *counters* 0) =>  0, false
 (defmacro how-many (obj) `(values (gethash ,obj *counters* 0))) =>  HOW-MANY
 (defun count-it (obj) (incf (how-many obj))) =>  COUNT-IT
 (dolist (x '(bar foo foo bar bar baz)) (count-it x))
 (how-many 'foo) =>  2
 (how-many 'bar) =>  3
 (how-many 'quux) =>  0
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_remhash.html#remhash,@strong{remhash}}

@strong{Notes:}

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{present-p}, can be used to distinguish the absence of an entry
from the presence of an entry that has a value of @emph{default}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss306.html,SETF-GET-DEFAULT:EVALUATED-BUT-IGNORED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CLRHASH
@subsubsection CLHS: Function CLRHASH
@anchor{#clhs-function-clrhash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-hash_ble-iterator.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sxhash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CLRHASH}

@strong{Syntax:}

@strong{clrhash} @emph{hash-table} => @emph{hash-table}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@strong{Description:}

Removes all entries from @emph{hash-table}, and then returns that empty
@uref{glo_h.html#hash_table,@emph{hash table}}.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32004073>
 (dotimes (i 100) (setf (gethash i table) (format nil "~R" i))) =>  NIL
 (hash-table-count table) =>  100
 (gethash 57 table) =>  "fifty-seven", true
 (clrhash table) =>  #<HASH-TABLE EQL 0/120 32004073>
 (hash-table-count table) =>  0
 (gethash 57 table) =>  NIL, false
@end verbatim

@strong{Side Effects:}

The @emph{hash-table} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-REHASH-THRESHOLD
@subsubsection CLHS: Function HASH-TABLE-REHASH-THRESHOLD
@anchor{#clhs-function-hash-table-rehash-threshold}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-table-rehash-size.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-table-size.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-REHASH-THRESHOLD}

@strong{Syntax:}

@strong{hash-table-rehash-threshold} @emph{hash-table} =>
@emph{rehash-threshold}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{rehash-threshold}---a @uref{syscla_real.html#real,@emph{real}} of
@uref{glo_t.html#type,@emph{type}} (real 0 1).

@strong{Description:}

Returns the current rehash threshold of @emph{hash-table}, which is
suitable for use in a call to
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}
in order to produce a @uref{glo_h.html#hash_table,@emph{hash table}}
with state corresponding to the current state of the @emph{hash-table}.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table :size 100 :rehash-threshold 0.5))
=>  #<HASH-TABLE EQL 0/100 2562446>
 (hash-table-rehash-threshold table) =>  0.5
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{hash-table} is not a @uref{glo_h.html#hash_table,@emph{hash
table}}.

@strong{See Also:}

@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}},
@uref{fun_hash-table-rehash-size.html#hash-table-rehash-size,@strong{hash-table-rehash-size}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss190.html,HASH-TABLE-SIZE:INTENDED-ENTRIES}
@item
@uref{../Issues/iss186.html,HASH-TABLE-ACCESS:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-COUNT
@subsubsection CLHS: Function HASH-TABLE-COUNT
@anchor{#clhs-function-hash-table-count}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-table-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-table-rehash-size.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-COUNT}

@strong{Syntax:}

@strong{hash-table-count} @emph{hash-table} => @emph{count}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{count}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the number of entries in the @emph{hash-table}. If
@emph{hash-table} has just been created or newly cleared (see
@uref{fun_clrhash.html#clrhash,@strong{clrhash}}) the entry count is 0.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32115135>
 (hash-table-count table) =>  0
 (setf (gethash 57 table) "fifty-seven") =>  "fifty-seven"
 (hash-table-count table) =>  1
 (dotimes (i 100) (setf (gethash i table) i)) =>  NIL
 (hash-table-count table) =>  100
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{fun_clrhash.html#clrhash,@strong{clrhash}},
@uref{fun_remhash.html#remhash,@strong{remhash}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_gethash.html#gethash,@strong{gethash}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_hash-table-size.html#hash-table-size,@strong{hash-table-size}}

@strong{Notes:}

The following relationships are functionally correct, although in
practice using @ref{#hash-table-count,@strong{hash-table-count}} is
probably much faster:

@verbatim
 (hash-table-count table) == 
 (loop for value being the hash-values of table count t) == 
 (let ((total 0))
   (maphash #'(lambda (key value)
                (declare (ignore key value))
                (incf total))
            table)
   total)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-P
@subsubsection CLHS: Function HASH-TABLE-P
@anchor{#clhs-function-hash-table-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-hash-table.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-table-count.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-P}

@strong{Syntax:}

@strong{hash-table-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_hash-table.html#hash-table,@strong{hash-table}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32511220>
 (hash-table-p table) =>  true
 (hash-table-p 37) =>  false
 (hash-table-p '((a . 1) (b . 2))) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (hash-table-p object) ==  (typep object 'hash-table)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-REHASH-SIZE
@subsubsection CLHS: Function HASH-TABLE-REHASH-SIZE
@anchor{#clhs-function-hash-table-rehash-size}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-table-count.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-tabl_sh-threshold.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-REHASH-SIZE}

@strong{Syntax:}

@strong{hash-table-rehash-size} @emph{hash-table} => @emph{rehash-size}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{rehash-size}---a @uref{syscla_real.html#real,@emph{real}} of
@uref{glo_t.html#type,@emph{type}} (or (integer 1 *) (float (1.0) *)).

@strong{Description:}

Returns the current rehash size of @emph{hash-table}, suitable for use
in a call to
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}
in order to produce a @uref{glo_h.html#hash_table,@emph{hash table}}
with state corresponding to the current state of the @emph{hash-table}.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table :size 100 :rehash-size 1.4))
=>  #<HASH-TABLE EQL 0/100 2556371>
 (hash-table-rehash-size table) =>  1.4
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{hash-table} is not a @uref{glo_h.html#hash_table,@emph{hash
table}}.

@strong{See Also:}

@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}},
@uref{fun_hash-tabl_sh-threshold.html#hash-table-rehash-threshold,@strong{hash-table-rehash-threshold}}

@strong{Notes:}

If the hash table was created with an
@uref{glo_i.html#integer,@emph{integer}} rehash size, the result is an
@uref{glo_i.html#integer,@emph{integer}}, indicating that the rate of
growth of the @emph{hash-table} when rehashed is intended to be
additive; otherwise, the result is a
@uref{glo_f.html#float,@emph{float}}, indicating that the rate of growth
of the @emph{hash-table} when rehashed is intended to be multiplicative.
However, this value is only advice to the
@uref{glo_i.html#implementation,@emph{implementation}}; the actual
amount by which the @emph{hash-table} will grow upon rehash is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss189.html,HASH-TABLE-REHASH-SIZE-INTEGER}
@item
@uref{../Issues/iss186.html,HASH-TABLE-ACCESS:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-SIZE
@subsubsection CLHS: Function HASH-TABLE-SIZE
@anchor{#clhs-function-hash-table-size}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-tabl_sh-threshold.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-table-test.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-SIZE}

@strong{Syntax:}

@strong{hash-table-size} @emph{hash-table} => @emph{size}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{size}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns the current size of @emph{hash-table}, which is suitable for use
in a call to
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}
in order to produce a @uref{glo_h.html#hash_table,@emph{hash table}}
with state corresponding to the current state of the @emph{hash-table}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{hash-table} is not a @uref{glo_h.html#hash_table,@emph{hash
table}}.

@strong{See Also:}

@uref{fun_hash-table-count.html#hash-table-count,@strong{hash-table-count}},
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss186.html,HASH-TABLE-ACCESS:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function HASH-TABLE-TEST
@subsubsection CLHS: Function HASH-TABLE-TEST
@anchor{#clhs-function-hash-table-test}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_hash-table-size.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_gethash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{HASH-TABLE-TEST}

@strong{Syntax:}

@strong{hash-table-test} @emph{hash-table} => @emph{test}

@strong{Arguments and Values:}

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{test}---a @uref{glo_f.html#function_designator,@emph{function
designator}}. For the four
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_h.html#hash_table,@emph{hash table}} test
@uref{glo_f.html#function,@emph{functions}} (see
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}),
the @emph{test} value returned is always a
@uref{glo_s.html#symbol,@emph{symbol}}. If an
@uref{glo_i.html#implementation,@emph{implementation}} permits
additional tests, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether such tests are returned as
@uref{glo_f.html#function,@emph{function}}
@uref{glo_o.html#object,@emph{objects}} or
@uref{glo_f.html#function_name,@emph{function names}}.

@strong{Description:}

Returns the test used for comparing @uref{glo_k.html#key,@emph{keys}} in
@emph{hash-table}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{hash-table} is not a @uref{glo_h.html#hash_table,@emph{hash
table}}.

@strong{See Also:}

@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss186.html,HASH-TABLE-ACCESS:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-HASH-TABLE
@subsubsection CLHS: Function MAKE-HASH-TABLE
@anchor{#clhs-function-make-hash-table}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_hash-table.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_hash-table-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-HASH-TABLE}

@strong{Syntax:}

@strong{make-hash-table} @emph{&key test size rehash-size
rehash-threshold} => @emph{hash-table}

@strong{Arguments and Values:}

@emph{test}---a @uref{glo_d.html#designator,@emph{designator}} for one
of the @uref{glo_f.html#function,@emph{functions}}
@uref{fun_eq.html#eq,@strong{eq}}, @uref{fun_eql.html#eql,@strong{eql}},
@uref{fun_equal.html#equal,@strong{equal}}, or
@uref{fun_equalp.html#equalp,@strong{equalp}}. The default is
@uref{fun_eql.html#eql,@strong{eql}}.

@emph{size}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.
The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{rehash-size}---a @uref{syscla_real.html#real,@emph{real}} of
@uref{glo_t.html#type,@emph{type}} (or (integer 1 *) (float (1.0) *)).
The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{rehash-threshold}---a @uref{syscla_real.html#real,@emph{real}} of
@uref{glo_t.html#type,@emph{type}} (real 0 1). The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@strong{Description:}

Creates and returns a new @uref{glo_h.html#hash_table,@emph{hash
table}}.

@emph{test} determines how @uref{glo_k.html#key,@emph{keys}} are
compared. An @uref{glo_o.html#object,@emph{object}} is said to be
present in the @emph{hash-table} if that
@uref{glo_o.html#object,@emph{object}} is the
@uref{glo_s.html#same,@emph{same}} under the @emph{test} as the
@uref{glo_k.html#key,@emph{key}} for some entry in the
@emph{hash-table}.

@emph{size} is a hint to the
@uref{glo_i.html#implementation,@emph{implementation}} about how much
initial space to allocate in the @emph{hash-table}. This information,
taken together with the @emph{rehash-threshold}, controls the
approximate number of entries which it should be possible to insert
before the table has to grow. The actual size might be rounded up from
@emph{size} to the next `good' size; for example, some
@uref{glo_i.html#implementation,@emph{implementations}} might round to
the next prime number.

@emph{rehash-size} specifies a minimum amount to increase the size of
the @emph{hash-table} when it becomes full enough to require rehashing;
see @emph{rehash-theshold} below. If @emph{rehash-size} is an
@uref{glo_i.html#integer,@emph{integer}}, the expected growth rate for
the table is additive and the @uref{glo_i.html#integer,@emph{integer}}
is the number of entries to add; if it is a
@uref{glo_f.html#float,@emph{float}}, the expected growth rate for the
table is multiplicative and the @uref{glo_f.html#float,@emph{float}} is
the ratio of the new size to the old size. As with @emph{size}, the
actual size of the increase might be rounded up.

@emph{rehash-threshold} specifies how full the @emph{hash-table} can get
before it must grow. It specifies the maximum desired hash-table
occupancy level.

The @uref{glo_v.html#value,@emph{values}} of @emph{rehash-size} and
@emph{rehash-threshold} do not constrain the
@uref{glo_i.html#implementation,@emph{implementation}} to use any
particular method for computing when and by how much the size of
@emph{hash-table} should be enlarged. Such decisions are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
and these @uref{glo_v.html#value,@emph{values}} only hints from the
@uref{glo_p.html#programmer,@emph{programmer}} to the
@uref{glo_i.html#implementation,@emph{implementation}}, and the
@uref{glo_i.html#implementation,@emph{implementation}} is permitted to
ignore them.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 46142754>
 (setf (gethash "one" table) 1) =>  1
 (gethash "one" table) =>  NIL, false
 (setq table (make-hash-table :test 'equal)) =>  #<HASH-TABLE EQUAL 0/139 46145547>
 (setf (gethash "one" table) 1) =>  1
 (gethash "one" table) =>  1, T
 (make-hash-table :rehash-size 1.5 :rehash-threshold 0.7) 
=>  #<HASH-TABLE EQL 0/120 46156620>
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_gethash.html#gethash,@strong{gethash}},
@uref{syscla_hash-table.html#hash-table,@strong{hash-table}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss189.html,HASH-TABLE-REHASH-SIZE-INTEGER}
@item
@uref{../Issues/iss190.html,HASH-TABLE-SIZE:INTENDED-ENTRIES}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@item
@uref{../Issues/iss191.html,HASH-TABLE-TESTS:ADD-EQUALP}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAPHASH
@subsubsection CLHS: Function MAPHASH
@anchor{#clhs-function-maphash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_remhash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-hash_ble-iterator.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAPHASH}

@strong{Syntax:}

@strong{maphash} @emph{function hash-table} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}}, the
@uref{glo_k.html#key,@emph{key}} and the
@uref{glo_v.html#value,@emph{value}}.

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@strong{Description:}

Iterates over all entries in the @emph{hash-table}. For each entry, the
@emph{function} is called with two
@uref{glo_a.html#argument,@emph{arguments}}--the
@uref{glo_k.html#key,@emph{key}} and the
@uref{glo_v.html#value,@emph{value}} of that entry.

The consequences are unspecified if any attempt is made to add or remove
an entry from the @emph{hash-table} while a
@ref{#maphash,@strong{maphash}} is in progress, with two exceptions: the
@emph{function} can use can use
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_gethash.html#gethash,@strong{gethash}} to change the
@uref{glo_v.html#value,@emph{value}} part of the entry currently being
processed, or it can use
@uref{fun_remhash.html#remhash,@strong{remhash}} to remove that entry.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32304110>
 (dotimes (i 10) (setf (gethash i table) i)) =>  NIL
 (let ((sum-of-squares 0))
    (maphash #'(lambda (key val) 
                 (let ((square (* val val)))
                   (incf sum-of-squares square)
                   (setf (gethash key table) square)))
             table)
    sum-of-squares) =>  285
 (hash-table-count table) =>  10
 (maphash #'(lambda (key val)
               (when (oddp val) (remhash key table)))
           table) =>  NIL
 (hash-table-count table) =>  5
 (maphash #'(lambda (k v) (print (list k v))) table)
(0 0) 
(8 64) 
(2 4) 
(6 36) 
(4 16) 
=>  NIL
@end verbatim

@strong{Side Effects:}

None, other than any which might be done by the @emph{function}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_loop.html#loop,@strong{loop}},
@uref{mac_with-hash_ble-iterator.html#with-hash-table-iterator,@strong{with-hash-table-iterator}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function REMHASH
@subsubsection CLHS: Function REMHASH
@anchor{#clhs-function-remhash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_gethash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_maphash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{REMHASH}

@strong{Syntax:}

@strong{remhash} @emph{key hash-table} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{key}---an @uref{glo_o.html#object,@emph{object}}.

@emph{hash-table}---a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Removes the entry for @emph{key} in @emph{hash-table}, if any. Returns
@uref{glo_t.html#true,@emph{true}} if there was such an entry, or
@uref{glo_f.html#false,@emph{false}} otherwise.

@strong{Examples:}

@verbatim
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32115666>
 (setf (gethash 100 table) "C") =>  "C"
 (gethash 100 table) =>  "C", true
 (remhash 100 table) =>  true
 (gethash 100 table) =>  NIL, false
 (remhash 100 table) =>  false
@end verbatim

@strong{Side Effects:}

The @emph{hash-table} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SXHASH
@subsubsection CLHS: Function SXHASH
@anchor{#clhs-function-sxhash}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_clrhash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-19.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SXHASH}

@strong{Syntax:}

@strong{sxhash} @emph{object} => @emph{hash-code}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{hash-code}---a non-negative
@uref{glo_f.html#fixnum,@emph{fixnum}}.

@strong{Description:}

@ref{#sxhash,@strong{sxhash}} returns a hash code for @emph{object}.

The manner in which the hash code is computed is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but subject to certain constraints:

1. (equal @emph{x} @emph{y}) implies (= (sxhash @emph{x}) (sxhash
@emph{y})).

2. For any two @uref{glo_o.html#object,@emph{objects}}, @emph{x} and
@emph{y}, both of which are @uref{glo_b.html#bit_vector,@emph{bit
vectors}}, @uref{glo_c.html#character,@emph{characters}},
@uref{glo_c.html#cons,@emph{conses}},
@uref{glo_n.html#number,@emph{numbers}},
@uref{glo_p.html#pathname,@emph{pathnames}},
@uref{glo_s.html#string,@emph{strings}}, or
@uref{glo_s.html#symbol,@emph{symbols}}, and which are
@uref{glo_s.html#similar,@emph{similar}}, (sxhash @emph{x}) and (sxhash
@emph{y}) @uref{glo_y.html#yield,@emph{yield}} the same mathematical
value even if @emph{x} and @emph{y} exist in different
@uref{glo_l.html#lisp_image,@emph{Lisp images}} of the same
@uref{glo_i.html#implementation,@emph{implementation}}. See
@uref{sec_3-2-4.html,Section 3.2.4 (Literal Objects in Compiled Files)}.

3. The @emph{hash-code} for an @uref{glo_o.html#object,@emph{object}} is
always the @uref{glo_s.html#same,@emph{same}} within a single
@uref{glo_s.html#session,@emph{session}} provided that the
@uref{glo_o.html#object,@emph{object}} is not visibly modified with
regard to the equivalence test
@uref{fun_equal.html#equal,@strong{equal}}. See
@uref{sec_18-1-2.html,Section 18.1.2 (Modifying Hash Table Keys)}.

4. The @emph{hash-code} is intended for hashing. This places no
verifiable constraint on a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}}, but the intent is that an
@uref{glo_i.html#implementation,@emph{implementation}} should make a
good-faith effort to produce @emph{hash-codes} that are well distributed
within the range of non-negative @emph{fixnums}.

5. Computation of the @emph{hash-code} must terminate, even if the
@emph{object} contains circularities.

@strong{Examples:}

@verbatim
 (= (sxhash (list 'list "ab")) (sxhash (list 'list "ab"))) =>  true
 (= (sxhash "a") (sxhash (make-string 1 :initial-element #\a))) =>  true
 (let ((r (make-random-state)))
   (= (sxhash r) (sxhash (make-random-state r))))
=>  implementation-dependent
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

Many common hashing needs are satisfied by
@uref{fun_make-hash-table.html#make-hash-table,@strong{make-hash-table}}
and the related functions on @uref{glo_h.html#hash_table,@emph{hash
tables}}. @ref{#sxhash,@strong{sxhash}} is intended for use where the
pre-defined abstractions are insufficient. Its main intent is to allow
the user a convenient means of implementing more complicated hashing
paradigms than are provided through
@uref{glo_h.html#hash_table,@emph{hash tables}}.

The hash codes returned by @ref{#sxhash,@strong{sxhash}} are not
necessarily related to any hashing strategy used by any other
@uref{glo_f.html#function,@emph{function}} in Common Lisp.

For @uref{glo_o.html#object,@emph{objects}} of
@uref{glo_t.html#type,@emph{types}} that
@uref{fun_equal.html#equal,@strong{equal}} compares with
@uref{fun_eq.html#eq,@strong{eq}}, item 3 requires that the
@emph{hash-code} be based on some immutable quality of the identity of
the object. Another legitimate implementation technique would be to have
@ref{#sxhash,@strong{sxhash}} assign (and cache) a random hash code for
these @uref{glo_o.html#object,@emph{objects}}, since there is no
requirement that @uref{glo_s.html#similar,@emph{similar}} but
non-@uref{fun_eq.html#eq,@strong{eq}} objects have the same hash code.

Although @uref{glo_s.html#similarity,@emph{similarity}} is defined for
@uref{glo_s.html#symbol,@emph{symbols}} in terms of both the
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_n.html#name,@emph{name}} and the
@uref{glo_p.html#package,@emph{packages}} in which the
@uref{glo_s.html#symbol,@emph{symbol}} is
@uref{glo_a.html#accessible,@emph{accessible}}, item 3 disallows using
@uref{glo_p.html#package,@emph{package}} information to compute the hash
code, since changes to the package status of a symbol are not visible to
@emph{equal}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss337.html,SXHASH-DEFINITION:SIMILAR-FOR-SXHASH}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-HASH-TABLE-ITERATOR
@subsubsection CLHS: Macro WITH-HASH-TABLE-ITERATOR
@anchor{#clhs-macro-with-hash-table-iterator}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_maphash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_hash__s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_clrhash.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-HASH-TABLE-ITERATOR}

@strong{Syntax:}

@strong{with-hash-table-iterator} @emph{(name hash-table)
@emph{declaration}@strong{*} @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{name}---a name suitable for the first argument to
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}}.

@emph{hash-table}---a @uref{glo_f.html#form,@emph{form}}, evaluated
once, that should produce a @uref{glo_h.html#hash_table,@emph{hash
table}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
@emph{forms}.

@strong{Description:}

Within the lexical scope of the body, @emph{name} is defined via
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}} such
that successive invocations of (@emph{name}) return the items, one by
one, from the @uref{glo_h.html#hash_table,@emph{hash table}} that is
obtained by evaluating @emph{hash-table} only once.

An invocation (@emph{name}) returns three values as follows:

1. A @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}
that is @uref{glo_t.html#true,@emph{true}} if an entry is returned.

2. The key from the @emph{hash-table} entry.

3. The value from the @emph{hash-table} entry.

After all entries have been returned by successive invocations of
(@emph{name}), then only one value is returned, namely
@uref{any_nil.html#nil,@strong{nil}}.

It is unspecified what happens if any of the implicit interior state of
an iteration is returned outside the dynamic extent of the
@ref{#with-hash-table-iterator,@strong{with-hash-table-iterator}}
@uref{glo_f.html#form,@emph{form}} such as by returning some
@uref{glo_c.html#closure,@emph{closure}} over the invocation
@uref{glo_f.html#form,@emph{form}}.

Any number of invocations of
@ref{#with-hash-table-iterator,@strong{with-hash-table-iterator}} can be
nested, and the body of the innermost one can invoke all of the locally
@emph{established} @uref{glo_m.html#macro,@emph{macros}}, provided all
of those @uref{glo_m.html#macro,@emph{macros}} have
@uref{glo_d.html#distinct,@emph{distinct}} names.

@strong{Examples:}

The following function should return @uref{any_t.html#t,@strong{t}} on
any @uref{glo_h.html#hash_table,@emph{hash table}}, and signal an error
if the usage of
@ref{#with-hash-table-iterator,@strong{with-hash-table-iterator}} does
not agree with the corresponding usage of
@uref{fun_maphash.html#maphash,@strong{maphash}}.

@verbatim
 (defun test-hash-table-iterator (hash-table)
   (let ((all-entries '())
         (generated-entries '())
         (unique (list nil)))
     (maphash #'(lambda (key value) (push (list key value) all-entries))
              hash-table)
     (with-hash-table-iterator (generator-fn hash-table)
       (loop     
         (multiple-value-bind (more? key value) (generator-fn)
           (unless more? (return))
           (unless (eql value (gethash key hash-table unique))
             (error "Key ~S not found for value ~S" key value))
           (push (list key value) generated-entries))))
     (unless (= (length all-entries)
                (length generated-entries)
                (length (union all-entries generated-entries
                               :key #'car :test (hash-table-test hash-table))))
       (error "Generated entries and Maphash entries don't correspond"))
     t))
@end verbatim

The following could be an acceptable definition of
@uref{fun_maphash.html#maphash,@strong{maphash}}, implemented by
@ref{#with-hash-table-iterator,@strong{with-hash-table-iterator}}.

@verbatim
 (defun maphash (function hash-table)
   (with-hash-table-iterator (next-entry hash-table)
     (loop (multiple-value-bind (more key value) (next-entry)
             (unless more (return nil))
             (funcall function key value)))))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if the local function named @emph{name}
@emph{established} by
@ref{#with-hash-table-iterator,@strong{with-hash-table-iterator}} is
called after it has returned @uref{glo_f.html#false,@emph{false}} as its
@uref{glo_p.html#primary_value,@emph{primary value}}.

@strong{See Also:}

@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss188.html,HASH-TABLE-PACKAGE-GENERATORS:ADD-WITH-WRAPPER}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 19
@section CLHS: Chapter 19
@anchor{#clhs-chapter-19}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sxhash.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19. Filenames

@uref{sec_19-1.html,}

19.1 Overview of Filenames

@uref{sec_19-2.html,}

19.2 Pathnames

@uref{sec_19-3.html,}

19.3 Logical Pathnames

@uref{sec_the_filen_s_dictionary.html,}

19.4 The Filenames Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 192::
* CLHS Section 193::
* CLHS Section The Filenames Dictionary::
@end menu

@node CLHS Section 192
@subsection CLHS: Section 19.2
@anchor{#clhs-section-19.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-1-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-19.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2 Pathnames

@uref{sec_19-2-1.html,}

19.2.1 Pathname Components

@uref{sec_19-2-2.html,}

19.2.2 Interpreting Pathname Component Values

@uref{sec_19-2-2-3.html,}

19.2.2.3 Restrictions on Wildcard Pathnames

@uref{sec_19-2-2-4.html,}

19.2.2.4 Restrictions on Examining Pathname Components

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss257.html,PATHNAME-COMPONENT-VALUE:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 19223::
* CLHS Section 19224::
* CLHS Section 1922::
@end menu

@node CLHS Section 19223
@subsubsection CLHS: Section 19.2.2.3
@anchor{#clhs-section-19.2.2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-2-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.3 Restrictions on Wildcard Pathnames

Wildcard @uref{glo_p.html#pathname,@emph{pathnames}} can be used with
@uref{fun_directory.html#directory,@strong{directory}} but not with
@uref{fun_open.html#open,@strong{open}}, and return true from
@uref{fun_wild-pathname-p.html#wild-pathname-p,@strong{wild-pathname-p}}.
When examining wildcard components of a wildcard
@uref{glo_p.html#pathname,@emph{pathname}}, conforming programs must be
prepared to encounter any of the following additional values in any
component or any element of a @uref{glo_l.html#list,@emph{list}} that is
the directory component:

* The @uref{glo_s.html#symbol,@emph{symbol}} :wild, which matches
anything.

* A @uref{glo_s.html#string,@emph{string}} containing
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
special wildcard @uref{glo_c.html#character,@emph{characters}}.

* Any @uref{glo_o.html#object,@emph{object}}, representing an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
wildcard pattern.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 19224
@subsubsection CLHS: Section 19.2.2.4
@anchor{#clhs-section-19.2.2.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4 Restrictions on Examining Pathname Components

The space of possible @uref{glo_o.html#object,@emph{objects}} that a
@uref{glo_c.html#conforming_program,@emph{conforming program}} must be
prepared to @uref{glo_r.html#read,@emph{read}}[1] as the value of a
@uref{glo_p.html#pathname,@emph{pathname}} component is substantially
larger than the space of possible
@uref{glo_o.html#object,@emph{objects}} that a
@uref{glo_c.html#conforming_program,@emph{conforming program}} is
permitted to @uref{glo_w.html#write,@emph{write}}[1] into such a
component.

While the values discussed in the subsections of this section, in
@uref{sec_19-2-2-2.html,Section 19.2.2.2 (Special Pathname Component
Values)}, and in @uref{sec_19-2-2-3.html,Section 19.2.2.3 (Restrictions
on Wildcard Pathnames)} apply to values that might be seen when reading
the component values, substantially more restrictive rules apply to
constructing pathnames; see @uref{sec_19-2-2-5.html,Section 19.2.2.5
(Restrictions on Constructing Pathnames)}.

When examining @uref{glo_p.html#pathname,@emph{pathname}} components,
@uref{glo_c.html#conforming_program,@emph{conforming programs}} should
be aware of the following restrictions.

@uref{sec_19-2-2-4-1.html,}

19.2.2.4.1 Restrictions on Examining a Pathname Host Component

@uref{sec_19-2-2-4-2.html,}

19.2.2.4.2 Restrictions on Examining a Pathname Device Component

@uref{sec_19-2-2-4-3.html,}

19.2.2.4.3 Restrictions on Examining a Pathname Directory Component

@uref{sec_19-2-2-4-4.html,}

19.2.2.4.4 Restrictions on Examining a Pathname Name Component

@uref{sec_19-2-2-4-5.html,}

19.2.2.4.5 Restrictions on Examining a Pathname Type Component

@uref{sec_19-2-2-4-6.html,}

19.2.2.4.6 Restrictions on Examining a Pathname Version Component

@uref{sec_19-2-3.html,}

19.2.3 Merging Pathnames

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4.2 Restrictions on Examining a Pathname Device Component

The device might be a @uref{glo_s.html#string,@emph{string}}, :wild,
:unspecific, or @uref{any_nil.html#nil,@strong{nil}}.

Note that :wild might result from an attempt to
@uref{glo_r.html#read,@emph{read}}[1] the
@uref{glo_p.html#pathname,@emph{pathname}} component, even though
portable programs are restricted from @emph{writing}[1] such a component
value; see @uref{sec_19-2-2-3.html,Section 19.2.2.3 (Restrictions on
Wildcard Pathnames)} and @uref{sec_19-2-2-5.html,Section 19.2.2.5
(Restrictions on Constructing Pathnames)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.4.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4.3 Restrictions on Examining a Pathname Directory Component

The directory might be a @uref{glo_s.html#string,@emph{string}}, :wild,
:unspecific, or @uref{any_nil.html#nil,@strong{nil}}.

The directory can be a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string,@emph{strings}} and
@uref{glo_s.html#symbol,@emph{symbols}}. The
@uref{glo_c.html#car,@emph{car}} of the
@uref{glo_l.html#list,@emph{list}} is one of the symbols :absolute or
:relative, meaning:

:absolute

A @uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is the symbol :absolute represents a
directory path starting from the root directory. The list (:absolute)
represents the root directory. The list (:absolute "foo" "bar" "baz")
represents the directory called "/foo/bar/baz" in Unix (except possibly
for @uref{glo_c.html#case,@emph{case}}).

:relative

A @uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is the symbol :relative represents a
directory path starting from a default directory. The list (:relative)
has the same meaning as @uref{any_nil.html#nil,@strong{nil}} and hence
is not used. The list (:relative "foo" "bar") represents the directory
named "bar" in the directory named "foo" in the default directory.

Each remaining element of the @uref{glo_l.html#list,@emph{list}} is a
@uref{glo_s.html#string,@emph{string}} or a
@uref{glo_s.html#symbol,@emph{symbol}}.

Each @uref{glo_s.html#string,@emph{string}} names a single level of
directory structure. The @uref{glo_s.html#string,@emph{strings}} should
contain only the directory names themselves---no punctuation characters.

In place of a @uref{glo_s.html#string,@emph{string}}, at any point in
the @uref{glo_l.html#list,@emph{list}},
@uref{glo_s.html#symbol,@emph{symbols}} can occur to indicate special
file notations. The next figure lists the
@uref{glo_s.html#symbol,@emph{symbols}} that have standard meanings.
Implementations are permitted to add additional
@uref{glo_o.html#object,@emph{objects}} of any
@uref{glo_t.html#type,@emph{type}} that is disjoint from
@uref{syscla_string.html#string,@strong{string}} if necessary to
represent features of their file systems that cannot be represented with
the standard @uref{glo_s.html#string,@emph{strings}} and
@uref{glo_s.html#symbol,@emph{symbols}}.

Supplying any non-@uref{glo_s.html#string,@emph{string}}, including any
of the @uref{glo_s.html#symbol,@emph{symbols}} listed below, to a file
system for which it does not make sense signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}}. For
example, Unix does not support :wild-inferiors in most implementations.

@verbatim
Symbol           Meaning                                             
:wild            Wildcard match of one level of directory structure  
:wild-inferiors  Wildcard match of any number of directory levels    
:up              Go upward in directory structure (semantic)         
:back            Go upward in directory structure (syntactic)        
@end verbatim

@strong{Figure 19-3. Special Markers In Directory Component}

The following notes apply to the previous figure:

Invalid Combinations

Using :absolute or :wild-inferiors immediately followed by :up or :back
signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}}.

Syntactic vs Semantic

``Syntactic'' means that the action of :back depends only on the
@uref{glo_p.html#pathname,@emph{pathname}} and not on the contents of
the file system.

``Semantic'' means that the action of :up depends on the contents of the
file system; to resolve a @uref{glo_p.html#pathname,@emph{pathname}}
containing :up to a @uref{glo_p.html#pathname,@emph{pathname}} whose
directory component contains only :absolute and
@uref{glo_s.html#string,@emph{strings}} requires probing the file
system.

:up differs from :back only in file systems that support multiple names
for directories, perhaps via symbolic links. For example, suppose that
there is a directory (:absolute "X" "Y" "Z") linked to (:absolute "A"
"B" "C") and there also exist directories (:absolute "A" "B" "Q") and
(:absolute "X" "Y" "Q"). Then (:absolute "X" "Y" "Z" :up "Q") designates
(:absolute "A" "B" "Q") while (:absolute "X" "Y" "Z" :back "Q")
designates (:absolute "X" "Y" "Q")

@uref{sec_19-2-2-4-3-1.html,}

19.2.2.4.3.1 Directory Components in Non-Hierarchical File Systems

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss263.html,PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.4.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4.4 Restrictions on Examining a Pathname Name Component

The name might be a @uref{glo_s.html#string,@emph{string}}, :wild,
:unspecific, or @uref{any_nil.html#nil,@strong{nil}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.4.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4.5 Restrictions on Examining a Pathname Type Component

The type might be a @uref{glo_s.html#string,@emph{string}}, :wild,
:unspecific, or @uref{any_nil.html#nil,@strong{nil}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.4.6
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-4-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.4.6 Restrictions on Examining a Pathname Version Component

The version can be any @uref{glo_s.html#symbol,@emph{symbol}} or any
@uref{glo_i.html#integer,@emph{integer}}.

The symbol :newest refers to the largest version number that already
exists in the @uref{glo_f.html#file_system,@emph{file system}} when
reading, overwriting, appending, superseding, or directory listing an
existing @uref{glo_f.html#file,@emph{file}}. The symbol :newest refers
to the smallest version number greater than any existing version number
when creating a new file.

The symbols @uref{any_nil.html#nil,@strong{nil}}, :unspecific, and :wild
have special meanings and restrictions; see
@uref{sec_19-2-2-2.html,Section 19.2.2.2 (Special Pathname Component
Values)} and @uref{sec_19-2-2-5.html,Section 19.2.2.5 (Restrictions on
Constructing Pathnames)}.

Other @uref{glo_s.html#symbol,@emph{symbols}} and
@uref{glo_i.html#integer,@emph{integers}} have
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
meaning.

@uref{sec_19-2-2-4-7.html,}

19.2.2.4.7 Notes about the Pathname Version Component

@uref{sec_19-2-2-5.html,}

19.2.2.5 Restrictions on Constructing Pathnames

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-4-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.5 Restrictions on Constructing Pathnames

When constructing a @uref{glo_p.html#pathname,@emph{pathname}} from
components, conforming programs must follow these rules:

* Any component can be @uref{any_nil.html#nil,@strong{nil}}.
@uref{any_nil.html#nil,@strong{nil}} in the host might mean a default
host rather than an actual @uref{any_nil.html#nil,@strong{nil}} in some
implementations.

* The host, device, directory, name, and type can be
@uref{glo_s.html#string,@emph{strings}}. There are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
limits on the number and type of
@uref{glo_c.html#character,@emph{characters}} in these
@uref{glo_s.html#string,@emph{strings}}.

* The directory can be a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string,@emph{strings}} and
@uref{glo_s.html#symbol,@emph{symbols}}. There are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
limits on the @uref{glo_l.html#list,@emph{list}}'s length and contents.

* The version can be :newest.

* Any component can be taken from the corresponding component of another
@uref{glo_p.html#pathname,@emph{pathname}}. When the two
@uref{glo_p.html#pathname,@emph{pathnames}} are for different file
systems (in implementations that support multiple file systems), an
appropriate translation occurs. If no meaningful translation is
possible, an error is signaled. The definitions of ``appropriate'' and
``meaningful'' are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

* An implementation might support other values for some components, but
a portable program cannot use those values. A conforming program can use
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
values but this can make it non-portable; for example, it might work
only with Unix file systems.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.3 Merging Pathnames

Merging takes a @uref{glo_p.html#pathname,@emph{pathname}} with unfilled
components and supplies values for those components from a source of
defaults.

If a component's value is @uref{any_nil.html#nil,@strong{nil}}, that
component is considered to be unfilled. If a component's value is any
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_o.html#object,@emph{object}}, including :unspecific, that
component is considered to be filled.

Except as explicitly specified otherwise, for functions that manipulate
or inquire about @uref{glo_f.html#file,@emph{files}} in the
@uref{glo_f.html#file_system,@emph{file system}}, the pathname argument
to such a function is merged with @strong{*default-pathname-defaults*}
before accessing the @uref{glo_f.html#file_system,@emph{file system}}
(as if by
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}}).

@uref{sec_19-2-3-1.html,}

19.2.3.1 Examples of Merging Pathnames

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 1922
@subsubsection CLHS: Section 19.2.2
@anchor{#clhs-section-19.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-1-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2 Interpreting Pathname Component Values

@uref{sec_19-2-2-1.html,}

19.2.2.1 Strings in Component Values

@uref{sec_19-2-2-2.html,}

19.2.2.2 Special Pathname Component Values

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-1-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.2 Special Pathname Component Values

@uref{sec_19-2-2-2-1.html,}

19.2.2.2.1 NIL as a Component Value

@uref{sec_19-2-2-2-2.html,}

19.2.2.2.2 :WILD as a Component Value

@uref{sec_19-2-2-2-3.html,}

19.2.2.2.3 :UNSPECIFIC as a Component Value

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@item
@uref{../Issues/iss257.html,PATHNAME-COMPONENT-VALUE:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.2.2 :WILD as a Component Value

If :wild is the value of a @uref{glo_p.html#pathname,@emph{pathname}}
component, that component is considered to be a wildcard, which matches
anything.

A @uref{glo_c.html#conforming_program,@emph{conforming program}} must be
prepared to encounter a value of :wild as the value of any
@uref{glo_p.html#pathname,@emph{pathname}} component, or as an
@uref{glo_e.html#element,@emph{element}} of a
@uref{glo_l.html#list,@emph{list}} that is the value of the directory
component.

When constructing a @uref{glo_p.html#pathname,@emph{pathname}}, a
@uref{glo_c.html#conforming_program,@emph{conforming program}} may use
:wild as the value of any or all of the directory, name, type, or
version component, but must not use :wild as the value of the host, or
device component.

If :wild is used as the value of the directory component in the
construction of a @uref{glo_p.html#pathname,@emph{pathname}}, the effect
is equivalent to specifying the list (:absolute :wild-inferiors), or the
same as (:absolute :wild) in a @uref{glo_f.html#file_system,@emph{file
system}} that does not support :wild-inferiors.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss263.html,PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.2.2.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-2-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-2-2-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-2-2-2-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.2.2.2.3 :UNSPECIFIC as a Component Value

If :unspecific is the value of a
@uref{glo_p.html#pathname,@emph{pathname}} component, the component is
considered to be ``absent'' or to ``have no meaning'' in the
@uref{glo_f.html#filename,@emph{filename}} being represented by the
@uref{glo_p.html#pathname,@emph{pathname}}.

Whether a value of :unspecific is permitted for any component on any
given @uref{glo_f.html#file_system,@emph{file system}} accessible to the
@uref{glo_i.html#implementation,@emph{implementation}} is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
A @uref{glo_c.html#conforming_program,@emph{conforming program}} must
never unconditionally use a :unspecific as the value of a
@uref{glo_p.html#pathname,@emph{pathname}} component because such a
value is not guaranteed to be permissible in all implementations.
However, a @uref{glo_c.html#conforming_program,@emph{conforming
program}} can, if it is careful, successfully manipulate user-supplied
data which contains or refers to non-portable
@uref{glo_p.html#pathname,@emph{pathname}} components. And certainly a
@uref{glo_c.html#conforming_program,@emph{conforming program}} should be
prepared for the possibility that any components of a
@uref{glo_p.html#pathname,@emph{pathname}} could be :unspecific.

When @emph{reading}[1] the value of any
@uref{glo_p.html#pathname,@emph{pathname}} component,
@uref{glo_c.html#conforming_program,@emph{conforming programs}} should
be prepared for the value to be :unspecific.

When @emph{writing}[1] the value of any
@uref{glo_p.html#pathname,@emph{pathname}} component, the consequences
are undefined if :unspecific is given for a
@uref{glo_p.html#pathname,@emph{pathname}} in a
@uref{glo_f.html#file_system,@emph{file system}} for which it does not
make sense.

@uref{sec_19-2-2-2-3-1.html,}

19.2.2.2.3.1 Relation between component values NIL and :UNSPECIFIC

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 193
@subsection CLHS: Section 19.3
@anchor{#clhs-section-19.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-2-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-19.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.3 Logical Pathnames

@uref{sec_19-3-1.html,}

19.3.1 Syntax of Logical Pathname Namestrings

@uref{sec_19-3-2.html,}

19.3.2 Logical Pathname Components

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 1932::
@end menu

@node CLHS Section 1932
@subsubsection CLHS: Section 19.3.2
@anchor{#clhs-section-19.3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-3-1-1-8.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_19-3-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.3.2 Logical Pathname Components

@uref{sec_19-3-2-1.html,}

19.3.2.1 Unspecific Components of a Logical Pathname

@uref{sec_19-3-2-2.html,}

19.3.2.2 Null Strings as Components of a Logical Pathname

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 19.3.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-3-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_19-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.3.2.2 Null Strings as Components of a Logical Pathname

The null string, "", is not a valid value for any component of a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Filenames Dictionary
@subsection CLHS: Section The Filenames Dictionary
@anchor{#clhs-section-the-filenames-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_19-3-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-19.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
19.4 The Filenames Dictionary

@uref{syscla_pathname.html,@emph{System Class} @strong{PATHNAME}}

@uref{syscla_logical-pathname.html,@emph{System Class}
@strong{LOGICAL-PATHNAME}}

@uref{fun_pathname.html,@emph{Function} @strong{PATHNAME}}

@uref{fun_make-pathname.html,@emph{Function} @strong{MAKE-PATHNAME}}

@uref{fun_pathnamep.html,@emph{Function} @strong{PATHNAMEP}}

@uref{fun_pathname-_name-version.html,@emph{Function}
@strong{PATHNAME-HOST, PATHNAME-DEVICE, PATHNAME-DIRECTORY,
PATHNAME-NAME, PATHNAME-TYPE, PATHNAME-VERSION}}

@uref{fun_load-logi_translations.html,@emph{Function}
@strong{LOAD-LOGICAL-PATHNAME-TRANSLATIONS}}

@uref{acc_logical-p_translations.html,@emph{Accessor}
@strong{LOGICAL-PATHNAME-TRANSLATIONS}}

@uref{fun_logical-pathname.html,@emph{Function}
@strong{LOGICAL-PATHNAME}}

@uref{var_stdefault_e-defaultsst.html,@emph{Variable}
@strong{*DEFAULT-PATHNAME-DEFAULTS*}}

@uref{fun_namestrin_h-namestring.html,@emph{Function}
@strong{NAMESTRING, FILE-NAMESTRING, DIRECTORY-NAMESTRING,
HOST-NAMESTRING, ENOUGH-NAMESTRING}}

@uref{fun_parse-namestring.html,@emph{Function}
@strong{PARSE-NAMESTRING}}

@uref{fun_wild-pathname-p.html,@emph{Function} @strong{WILD-PATHNAME-P}}

@uref{fun_pathname-match-p.html,@emph{Function}
@strong{PATHNAME-MATCH-P}}

@uref{fun_translate_cal-pathname.html,@emph{Function}
@strong{TRANSLATE-LOGICAL-PATHNAME}}

@uref{fun_translate-pathname.html,@emph{Function}
@strong{TRANSLATE-PATHNAME}}

@uref{fun_merge-pathnames.html,@emph{Function} @strong{MERGE-PATHNAMES}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor LOGICAL-PATHNAME-TRANSLATIONS::
* CLHS Function LOAD-LOGICAL-PATHNAME-TRANSLATIONS::
* CLHS Function LOGICAL-PATHNAME::
* CLHS Function MAKE-PATHNAME::
* CLHS Function MERGE-PATHNAMES::
* CLHS Function NAMESTRING FILE-NAMESTRING::
* CLHS Function PARSE-NAMESTRING::
* CLHS Function PATHNAME-HOST PATHNAME-DEVICE::
* CLHS Function PATHNAME-MATCH-P::
* CLHS Function PATHNAME::
* CLHS Function PATHNAMEP::
* CLHS Function TRANSLATE-PATHNAME::
* CLHS Function TRANSLATE-LOGICAL-PATHNAME::
* CLHS Function WILD-PATHNAME-P::
* CLHS System Class LOGICAL-PATHNAME::
* CLHS Variable *DEFAULT-PATHNAME-DEFAULTS*::
@end menu

@node CLHS Accessor LOGICAL-PATHNAME-TRANSLATIONS
@subsubsection CLHS: Accessor LOGICAL-PATHNAME-TRANSLATIONS
@anchor{#clhs-accessor-logical-pathname-translations}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_load-logi_translations.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_logical-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{LOGICAL-PATHNAME-TRANSLATIONS}

@strong{Syntax:}

@strong{logical-pathname-translations} @emph{host} =>
@emph{translations}

(setf (@strong{logical-pathname-translations} @emph{host})
@emph{new-translations})

@strong{Arguments and Values:}

@emph{host}--a @uref{glo_l.html#logical_host_designator,@emph{logical
host designator}}.

@emph{translations}, @emph{new-translations}---a
@uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

Returns the host's @uref{glo_l.html#list,@emph{list}} of translations.
Each translation is a @uref{glo_l.html#list,@emph{list}} of at least two
elements: @emph{from-wildcard} and @emph{to-wildcard}. Any additional
elements are
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
@emph{From-wildcard} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} whose host is
@emph{host}. @emph{To-wildcard} is a
@uref{glo_p.html#pathname,@emph{pathname}}.

(setf (logical-pathname-translations @emph{host}) @emph{translations})
sets a @uref{glo_l.html#logical_pathname,@emph{logical pathname}} host's
@uref{glo_l.html#list,@emph{list}} of @emph{translations}. If
@emph{host} is a @uref{glo_s.html#string,@emph{string}} that has not
been previously used as a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} host, a new
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} host is
defined; otherwise an existing host's translations are replaced.
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} host names
are compared with
@uref{fun_stringeqc_ng-not-lessp.html#string-equal,@strong{string-equal}}.

When setting the translations list, each @emph{from-wildcard} can be a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} whose host is
@emph{host} or a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} namestring parseable by (parse-namestring
@uref{glo_s.html#string,@emph{string}} @emph{host}), where @emph{host}
represents the appropriate @uref{glo_o.html#object,@emph{object}} as
defined by
@uref{fun_parse-namestring.html#parse-namestring,@strong{parse-namestring}}.
Each @emph{to-wildcard} can be anything coercible to a
@uref{glo_p.html#pathname,@emph{pathname}} by (pathname
@emph{to-wildcard}). If @emph{to-wildcard} coerces to a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}},
@uref{fun_translate_cal-pathname.html#translate-logical-pathname,@strong{translate-logical-pathname}}
will perform repeated translation steps when it uses it.

@emph{host} is either the host component of a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} or a
@uref{glo_s.html#string,@emph{string}} that has been defined as a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} host name by
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#logical-pathname-translations,@strong{logical-pathname-translations}}.

@strong{Examples:}

@verbatim
 ;;;A very simple example of setting up a logical pathname host.  No
 ;;;translations are necessary to get around file system restrictions, so
 ;;;all that is necessary is to specify the root of the physical directory
 ;;;tree that contains the logical file system.
 ;;;The namestring syntax on the right-hand side is implementation-dependent.
 (setf (logical-pathname-translations "foo")
       '(("**;*.*.*"              "MY-LISPM:>library>foo>**>")))
 
 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "foo:bar;baz;mum.quux.3")
=>  #P"MY-LISPM:>library>foo>bar>baz>mum.quux.3"
 
 ;;;A more complex example, dividing the files among two file servers
 ;;;and several different directories.  This Unix doesn't support
 ;;;:WILD-INFERIORS in the directory, so each directory level must
 ;;;be translated individually.  No file name or type translations
 ;;;are required except for .MAIL to .MBX.
 ;;;The namestring syntax on the right-hand side is implementation-dependent.
 (setf (logical-pathname-translations "prog")
       '(("RELEASED;*.*.*"        "MY-UNIX:/sys/bin/my-prog/")
         ("RELEASED;*;*.*.*"      "MY-UNIX:/sys/bin/my-prog/*/")
         ("EXPERIMENTAL;*.*.*"    "MY-UNIX:/usr/Joe/development/prog/")
         ("EXPERIMENTAL;DOCUMENTATION;*.*.*"
                                  "MY-VAX:SYS$DISK:[JOE.DOC]")
         ("EXPERIMENTAL;*;*.*.*"  "MY-UNIX:/usr/Joe/development/prog/*/")
         ("MAIL;**;*.MAIL"        "MY-VAX:SYS$DISK:[JOE.MAIL.PROG...]*.MBX")))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:mail;save;ideas.mail.3")
=>  #P"MY-VAX:SYS$DISK:[JOE.MAIL.PROG.SAVE]IDEAS.MBX.3"

 ;;;Example translations for a program that uses three files main.lisp,
 ;;;auxiliary.lisp, and documentation.lisp.  These translations might be
 ;;;supplied by a software supplier as examples.

 ;;;For Unix with long file names
 (setf (logical-pathname-translations "prog")
       '(("CODE;*.*.*"             "/lib/prog/")))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
=>  #P"/lib/prog/documentation.lisp"

 ;;;For Unix with 14-character file names, using .lisp as the type
 (setf (logical-pathname-translations "prog")
       '(("CODE;DOCUMENTATION.*.*" "/lib/prog/docum.*")
         ("CODE;*.*.*"             "/lib/prog/")))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
=>  #P"/lib/prog/docum.lisp"

 ;;;For Unix with 14-character file names, using .l as the type
 ;;;The second translation shortens the compiled file type to .b
 (setf (logical-pathname-translations "prog")
       `(("**;*.LISP.*"            ,(logical-pathname "PROG:**;*.L.*"))
         (,(compile-file-pathname (logical-pathname "PROG:**;*.LISP.*"))
                                   ,(logical-pathname "PROG:**;*.B.*"))
         ("CODE;DOCUMENTATION.*.*" "/lib/prog/documentatio.*")
         ("CODE;*.*.*"             "/lib/prog/")))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
=>  #P"/lib/prog/documentatio.l"

 ;;;For a Cray with 6 character names and no directories, types, or versions.
 (setf (logical-pathname-translations "prog")
       (let ((l '(("MAIN" "PGMN")
                  ("AUXILIARY" "PGAUX")
                  ("DOCUMENTATION" "PGDOC")))
             (logpath (logical-pathname "prog:code;"))
             (phypath (pathname "XXX")))
         (append
           ;; Translations for source files
           (mapcar #'(lambda (x)
                       (let ((log (first x))
                             (phy (second x)))
                         (list (make-pathname :name log
                                              :type "LISP"
                                              :version :wild
                                              :defaults logpath)
                               (make-pathname :name phy
                                              :defaults phypath))))
                   l)
           ;; Translations for compiled files
           (mapcar #'(lambda (x)
                       (let* ((log (first x))
                              (phy (second x))
                              (com (compile-file-pathname
                                     (make-pathname :name log
                                                    :type "LISP"
                                                    :version :wild
                                                    :defaults logpath))))
                         (setq phy (concatenate 'string phy "B"))
                         (list com
                               (make-pathname :name phy
                                              :defaults phypath))))
                   l))))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
=>  #P"PGDOC"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{host} is incorrectly supplied, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

@strong{See Also:}

@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

Implementations can define additional
@uref{glo_f.html#function,@emph{functions}} that operate on
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} hosts, for
example to specify additional translation rules or options.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOAD-LOGICAL-PATHNAME-TRANSLATIONS
@subsubsection CLHS: Function LOAD-LOGICAL-PATHNAME-TRANSLATIONS
@anchor{#clhs-function-load-logical-pathname-translations}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pathname-_name-version.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_logical-p_translations.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOAD-LOGICAL-PATHNAME-TRANSLATIONS}

@strong{Syntax:}

@strong{load-logical-pathname-translations} @emph{host} =>
@emph{just-loaded}

@strong{Arguments and Values:}

@emph{host}---a @uref{glo_s.html#string,@emph{string}}.

@emph{just-loaded}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Searches for and loads the definition of a
@uref{glo_l.html#logical_host,@emph{logical host}} named @emph{host}, if
it is not already defined. The specific nature of the search is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

If the @emph{host} is already defined, no attempt to find or load a
definition is attempted, and @uref{glo_f.html#false,@emph{false}} is
returned. If the @emph{host} is not already defined, but a definition is
successfully found and loaded, @uref{glo_t.html#true,@emph{true}} is
returned. Otherwise, an error is signaled.

@strong{Examples:}

@verbatim
 (translate-logical-pathname "hacks:weather;barometer.lisp.newest")
>>  Error: The logical host HACKS is not defined.
 (load-logical-pathname-translations "HACKS")
>>  ;; Loading SYS:SITE;HACKS.TRANSLATIONS
>>  ;; Loading done.
=>  true
 (translate-logical-pathname "hacks:weather;barometer.lisp.newest")
=>  #P"HELIUM:[SHARED.HACKS.WEATHER]BAROMETER.LSP;0"
 (load-logical-pathname-translations "HACKS")
=>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If no definition is found, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}}

@strong{Notes:}

@uref{glo_l.html#logical_pathname,@emph{Logical pathname}} definitions
will be created not just by @emph{implementors} but also by
@uref{glo_p.html#programmer,@emph{programmers}}. As such, it is
important that the search strategy be documented. For example, an
@uref{glo_i.html#implementation,@emph{implementation}} might define that
the definition of a @emph{host} is to be found in a file called
``@emph{host}.translations'' in some specifically named directory.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOGICAL-PATHNAME
@subsubsection CLHS: Function LOGICAL-PATHNAME
@anchor{#clhs-function-logical-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_logical-p_translations.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stdefault_e-defaultsst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOGICAL-PATHNAME}

@strong{Syntax:}

@strong{logical-pathname} @emph{pathspec} => @emph{logical-pathname}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, a @uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}}, or a
@uref{glo_s.html#stream,@emph{stream}}.

@emph{logical-pathname}---a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}.

@strong{Description:}

@ref{#logical-pathname,@strong{logical-pathname}} converts
@emph{pathspec} to a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} and returns the new
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}. If
@emph{pathspec} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} @uref{glo_n.html#namestring,@emph{namestring}}, it should
contain a host component and its following
@uref{glo_c.html#colon,@emph{colon}}. If @emph{pathspec} is a
@uref{glo_s.html#stream,@emph{stream}}, it should be one for which
@uref{fun_pathname.html#pathname,@strong{pathname}} returns a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}.

If @emph{pathspec} is a @uref{glo_s.html#stream,@emph{stream}}, the
@uref{glo_s.html#stream,@emph{stream}} can be either open or closed.
@ref{#logical-pathname,@strong{logical-pathname}} returns the same
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} after a file
is closed as it did when the file was open. It is an error if
@emph{pathspec} is a @uref{glo_s.html#stream,@emph{stream}} that is
created with
@uref{fun_make-two-way-stream.html#make-two-way-stream,@strong{make-two-way-stream}},
@uref{fun_make-echo-stream.html#make-echo-stream,@strong{make-echo-stream}},
@uref{fun_make-broadcast-stream.html#make-broadcast-stream,@strong{make-broadcast-stream}},
@uref{fun_make-conc_nated-stream.html#make-concatenated-stream,@strong{make-concatenated-stream}},
@uref{fun_make-stri_input-stream.html#make-string-input-stream,@strong{make-string-input-stream}},
or
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{pathspec} isn't supplied correctly.

@strong{See Also:}

@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{fun_translate_cal-pathname.html#translate-logical-pathname,@strong{translate-logical-pathname}},
@uref{sec_19-3.html,Section 19.3 (Logical Pathnames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-PATHNAME
@subsubsection CLHS: Function MAKE-PATHNAME
@anchor{#clhs-function-make-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pathnamep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-PATHNAME}

@strong{Syntax:}

@strong{make-pathname} @emph{&key host device directory name type
version defaults case}

=> @emph{pathname}

@strong{Arguments and Values:}

@emph{host}---a
@uref{glo_v.html#valid_physical_pathname_host,@emph{valid physical
pathname host}}. Complicated defaulting behavior; see below.

@emph{device}---a @uref{glo_v.html#valid_pathname_device,@emph{valid
pathname device}}. Complicated defaulting behavior; see below.

@emph{directory}---a
@uref{glo_v.html#valid_pathname_directory,@emph{valid pathname
directory}}. Complicated defaulting behavior; see below.

@emph{name}---a @uref{glo_v.html#valid_pathname_name,@emph{valid
pathname name}}. Complicated defaulting behavior; see below.

@emph{type}---a @uref{glo_v.html#valid_pathname_type,@emph{valid
pathname type}}. Complicated defaulting behavior; see below.

@emph{version}---a @uref{glo_v.html#valid_pathname_version,@emph{valid
pathname version}}. Complicated defaulting behavior; see below.

@emph{defaults}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}. The default is a
@uref{glo_p.html#pathname,@emph{pathname}} whose host component is the
same as the host component of the @uref{glo_v.html#value,@emph{value}}
of
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}},
and whose other components are all @uref{any_nil.html#nil,@strong{nil}}.

@emph{case}---one of :common or :local. The default is :local.

@emph{pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Description:}

Constructs and returns a @uref{glo_p.html#pathname,@emph{pathname}} from
the supplied keyword arguments.

After the components supplied explicitly by @emph{host}, @emph{device},
@emph{directory}, @emph{name}, @emph{type}, and @emph{version} are
filled in, the merging rules used by
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}}
are used to fill in any unsupplied components from the defaults supplied
by @emph{defaults}.

Whenever a @uref{glo_p.html#pathname,@emph{pathname}} is constructed the
components may be canonicalized if appropriate. For the explanation of
the arguments that can be supplied for each component, see
@uref{sec_19-2-1.html,Section 19.2.1 (Pathname Components)}.

If @emph{case} is supplied, it is treated as described in
@uref{sec_19-2-2-1-2.html,Section 19.2.2.1.2 (Case in Pathname
Components)}.

The resulting @emph{pathname} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} if and only
its host component is a @uref{glo_l.html#logical_host,@emph{logical
host}} or a @uref{glo_s.html#string,@emph{string}} that names a defined
@uref{glo_l.html#logical_host,@emph{logical host}}.

If the @emph{directory} is a @uref{glo_s.html#string,@emph{string}}, it
should be the name of a top level directory, and should not contain any
punctuation characters; that is, specifying a
@uref{glo_s.html#string,@emph{string}}, @emph{str}, is equivalent to
specifying the list (:absolute @emph{str}). Specifying the symbol :wild
is equivalent to specifying the list (:absolute :wild-inferiors), or
(:absolute :wild) in a file system that does not support
:wild-inferiors.

@strong{Examples:}

@verbatim
 ;; Implementation A -- an implementation with access to a single
 ;;  Unix file system.  This implementation happens to never display
 ;;  the `host' information in a namestring, since there is only one host. 
 (make-pathname :directory '(:absolute "public" "games")
                :name "chess" :type "db")
=>  #P"/public/games/chess.db" 

 ;; Implementation B -- an implementation with access to one or more
 ;;  VMS file systems.  This implementation displays `host' information
 ;;  in the namestring only when the host is not the local host.
 ;;  It uses a double colon to separate a host name from the host's local
 ;;  file name.
 (make-pathname :directory '(:absolute "PUBLIC" "GAMES")
                :name "CHESS" :type "DB")
=>  #P"SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
 (make-pathname :host "BOBBY"
                :directory '(:absolute "PUBLIC" "GAMES")
                :name "CHESS" :type "DB")
=>  #P"BOBBY::SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 

 ;; Implementation C -- an implementation with simultaneous access to
 ;;  multiple file systems from the same Lisp image.  In this 
 ;;  implementation, there is a convention that any text preceding the
 ;;  first colon in a pathname namestring is a host name.
 (dolist (case '(:common :local))
   (dolist (host '("MY-LISPM" "MY-VAX" "MY-UNIX"))
     (print (make-pathname :host host :case case
                           :directory '(:absolute "PUBLIC" "GAMES")
                           :name "CHESS" :type "DB"))))
>>  #P"MY-LISPM:>public>games>chess.db"
>>  #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB"
>>  #P"MY-UNIX:/public/games/chess.db"
>>  #P"MY-LISPM:>public>games>chess.db" 
>>  #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
>>  #P"MY-UNIX:/PUBLIC/GAMES/CHESS.DB" 
=>  NIL
@end verbatim

@strong{Affected By:}

The @uref{glo_f.html#file_system,@emph{file system}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

Portable programs should not supply :unspecific for any component. See
@uref{sec_19-2-2-2-3.html,Section 19.2.2.2.3 (:UNSPECIFIC as a Component
Value)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss263.html,PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss256.html,PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT}
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MERGE-PATHNAMES
@subsubsection CLHS: Function MERGE-PATHNAMES
@anchor{#clhs-function-merge-pathnames}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_translate-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-20.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MERGE-PATHNAMES}

@strong{Syntax:}

@strong{merge-pathnames} @emph{pathname &optional default-pathname
default-version}

=> @emph{merged-pathname}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{default-pathname}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}. The
default is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}}.

@emph{default-version}---a
@uref{glo_v.html#valid_pathname_version,@emph{valid pathname version}}.
The default is :newest.

@emph{merged-pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Description:}

Constructs a @uref{glo_p.html#pathname,@emph{pathname}} from
@emph{pathname} by filling in any unsupplied components with the
corresponding values from @emph{default-pathname} and
@emph{default-version}.

Defaulting of pathname components is done by filling in components taken
from another @uref{glo_p.html#pathname,@emph{pathname}}. This is
especially useful for cases such as a program that has an input file and
an output file. Unspecified components of the output pathname will come
from the input pathname, except that the type should not default to the
type of the input pathname but rather to the appropriate default type
for output from the program; for example, see the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_compile-file-pathname.html#compile-file-pathname,@strong{compile-file-pathname}}.

If no version is supplied, @emph{default-version} is used. If
@emph{default-version} is @uref{any_nil.html#nil,@strong{nil}}, the
version component will remain unchanged.

If @emph{pathname} explicitly specifies a host and not a device, and if
the host component of @emph{default-pathname} matches the host component
of @emph{pathname}, then the device is taken from the
@emph{default-pathname}; otherwise the device will be the default file
device for that host. If @emph{pathname} does not specify a host,
device, directory, name, or type, each such component is copied from
@emph{default-pathname}. If @emph{pathname} does not specify a name,
then the version, if not provided, will come from
@emph{default-pathname}, just like the other components. If
@emph{pathname} does specify a name, then the version is not affected by
@emph{default-pathname}. If this process leaves the version missing, the
@emph{default-version} is used. If the host's file name syntax provides
a way to input a version without a name or type, the user can let the
name and type default but supply a version different from the one in
@emph{default-pathname}.

If @emph{pathname} is a @uref{glo_s.html#stream,@emph{stream}},
@emph{pathname} effectively becomes (pathname @emph{pathname}).
@ref{#merge-pathnames,@strong{merge-pathnames}} can be used on either an
open or a closed @uref{glo_s.html#stream,@emph{stream}}.

If @emph{pathname} is a @uref{glo_p.html#pathname,@emph{pathname}} it
represents the name used to open the file. This may be, but is not
required to be, the actual name of the file.

@ref{#merge-pathnames,@strong{merge-pathnames}} recognizes a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}} when
@emph{default-pathname} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}, or when the
@uref{glo_n.html#namestring,@emph{namestring}} begins with the name of a
defined @uref{glo_l.html#logical_host,@emph{logical host}} followed by a
@uref{glo_c.html#colon,@emph{colon}}. In the first of these two cases,
the host portion of the @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} @uref{glo_n.html#namestring,@emph{namestring}} and its
following @uref{glo_c.html#colon,@emph{colon}} are optional.

@ref{#merge-pathnames,@strong{merge-pathnames}} returns a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} if and only
if its first argument is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}, or its first
argument is a @uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}} with an explicit host, or
its first argument does not specify a host and the
@emph{default-pathname} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}.

@uref{glo_p.html#pathname,@emph{Pathname}} merging treats a relative
directory specially. If (pathname-directory @emph{pathname}) is a
@uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is :relative, and (pathname-directory
@emph{default-pathname}) is a @uref{glo_l.html#list,@emph{list}}, then
the merged directory is the value of

@verbatim
 (append (pathname-directory default-pathname)
         (cdr  ;remove :relative from the front
           (pathname-directory pathname)))
@end verbatim

except that if the resulting @uref{glo_l.html#list,@emph{list}} contains
a @uref{glo_s.html#string,@emph{string}} or :wild immediately followed
by :back, both of them are removed. This removal of redundant :back
@uref{glo_k.html#keyword,@emph{keywords}} is repeated as many times as
possible. If (pathname-directory @emph{default-pathname}) is not a
@uref{glo_l.html#list,@emph{list}} or (pathname-directory
@emph{pathname}) is not a @uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is :relative, the merged directory is
(or (pathname-directory @emph{pathname}) (pathname-directory
@emph{default-pathname}))

@ref{#merge-pathnames,@strong{merge-pathnames}} maps customary case in
@emph{pathname} into customary case in the output
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Examples:}

@verbatim
 (merge-pathnames "CMUC::FORMAT"
                  "CMUC::PS:<LISPIO>.FASL")
=>  #P"CMUC::PS:<LISPIO>FORMAT.FASL.0"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

The net effect is that if just a name is supplied, the host, device,
directory, and type will come from @emph{default-pathname}, but the
version will come from @emph{default-version}. If nothing or just a
directory is supplied, the name, type, and version will come from
@emph{default-pathname} together.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss256.html,PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT}
@item
@uref{../Issues/iss263.html,PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION}
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss060.html,COMPILE-FILE-OUTPUT-FILE-DEFAULTS:INPUT-FILE}
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NAMESTRING FILE-NAMESTRING
@subsubsection CLHS: Function NAMESTRING, FILE-NAMESTRING...
@anchor{#clhs-function-namestring-file-namestring...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stdefault_e-defaultsst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_parse-namestring.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NAMESTRING, FILE-NAMESTRING,
DIRECTORY-NAMESTRING, HOST-NAMESTRING, ENOUGH-NAMESTRING}

@strong{Syntax:}

@strong{namestring} @emph{pathname} => @emph{namestring}

@strong{file-namestring} @emph{pathname} => @emph{namestring}

@strong{directory-namestring} @emph{pathname} => @emph{namestring}

@strong{host-namestring} @emph{pathname} => @emph{namestring}

@strong{enough-namestring} @emph{pathname &optional defaults} =>
@emph{namestring}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{defaults}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}. The default is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}}.

@emph{namestring}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

These functions convert @emph{pathname} into a namestring. The name
represented by @emph{pathname} is returned as a
@uref{glo_n.html#namestring,@emph{namestring}} in an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
canonical form.

@ref{#namestring,@strong{namestring}} returns the full form of
@emph{pathname}.

@ref{#file-namestring,@strong{file-namestring}} returns just the name,
type, and version components of @emph{pathname}.

@ref{#directory-namestring,@strong{directory-namestring}} returns the
directory name portion.

@ref{#host-namestring,@strong{host-namestring}} returns the host name.

@ref{#enough-namestring,@strong{enough-namestring}} returns an
abbreviated namestring that is just sufficient to identify the file
named by @emph{pathname} when considered relative to the
@emph{defaults}. It is required that

@verbatim
 (merge-pathnames (enough-namestring pathname defaults) defaults)
==  (merge-pathnames (parse-namestring pathname nil defaults) defaults)
@end verbatim

in all cases, and the result of
@ref{#enough-namestring,@strong{enough-namestring}} is the shortest
reasonable @uref{glo_s.html#string,@emph{string}} that will satisfy this
criterion.

It is not necessarily possible to construct a valid
@uref{glo_n.html#namestring,@emph{namestring}} by concatenating some of
the three shorter @uref{glo_n.html#namestring,@emph{namestrings}} in
some order.

@strong{Examples:}

@verbatim
 (namestring "getty")            
=>  "getty"
 (setq q (make-pathname :host "kathy" 
                         :directory 
                           (pathname-directory *default-pathname-defaults*)
                         :name "getty")) 
=>  #S(PATHNAME :HOST "kathy" :DEVICE NIL :DIRECTORY directory-name 
       :NAME "getty" :TYPE NIL :VERSION NIL)
 (file-namestring q) =>  "getty"
 (directory-namestring q) =>  directory-name
 (host-namestring q) =>  "kathy" 
@end verbatim

@verbatim
 ;;;Using Unix syntax and the wildcard conventions used by the
 ;;;particular version of Unix on which this example was created:
 (namestring
   (translate-pathname "/usr/dmr/hacks/frob.l"
                       "/usr/d*/hacks/*.l"
                       "/usr/d*/backup/hacks/backup-*.*"))
=>  "/usr/dmr/backup/hacks/backup-frob.l"
 (namestring
   (translate-pathname "/usr/dmr/hacks/frob.l"
                       "/usr/d*/hacks/fr*.l"
                       "/usr/d*/backup/hacks/backup-*.*"))
=>  "/usr/dmr/backup/hacks/backup-ob.l"
 
 ;;;This is similar to the above example but uses two different hosts,
 ;;;U: which is a Unix and V: which is a VMS.  Note the translation
 ;;;of file type and alphabetic case conventions.
 (namestring
   (translate-pathname "U:/usr/dmr/hacks/frob.l"
                       "U:/usr/d*/hacks/*.l"
                       "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))
=>  "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-FROB.LSP"
 (namestring
   (translate-pathname "U:/usr/dmr/hacks/frob.l"
                       "U:/usr/d*/hacks/fr*.l"
                       "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))
=>  "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-OB.LSP"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_truename.html#truename,@strong{truename}},
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss264.html,PATHNAME-SYMBOL}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PARSE-NAMESTRING
@subsubsection CLHS: Function PARSE-NAMESTRING
@anchor{#clhs-function-parse-namestring}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_namestrin_h-namestring.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_wild-pathname-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PARSE-NAMESTRING}

@strong{Syntax:}

@strong{parse-namestring} @emph{thing &optional host default-pathname
&key start end junk-allowed}

=> @emph{pathname, position}

@strong{Arguments and Values:}

@emph{thing}---a @uref{glo_s.html#string,@emph{string}}, a
@uref{glo_p.html#pathname,@emph{pathname}}, or a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}}.

@emph{host}---a @uref{glo_v.html#valid_pathname_host,@emph{valid
pathname host}}, a @uref{glo_l.html#logical_host,@emph{logical host}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{default-pathname}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}. The
default is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{thing}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{junk-allowed}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{position}---a
@uref{glo_b.html#bounding_index_designator,@emph{bounding index
designator}} for @emph{thing}.

@strong{Description:}

Converts @emph{thing} into a @uref{glo_p.html#pathname,@emph{pathname}}.

The @emph{host} supplies a host name with respect to which the parsing
occurs.

If @emph{thing} is a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}}, processing proceeds as if the
@uref{glo_p.html#pathname,@emph{pathname}} used to open that
@uref{glo_f.html#file,@emph{file}} had been supplied instead.

If @emph{thing} is a @uref{glo_p.html#pathname,@emph{pathname}}, the
@emph{host} and the host component of @emph{thing} are compared. If they
match, two values are immediately returned: @emph{thing} and
@emph{start}; otherwise (if they do not match), an error is signaled.

Otherwise (if @emph{thing} is a @uref{glo_s.html#string,@emph{string}}),
@ref{#parse-namestring,@strong{parse-namestring}} parses the name of a
@uref{glo_f.html#file,@emph{file}} within the substring of @emph{thing}
bounded by @emph{start} and @emph{end}.

If @emph{thing} is a @uref{glo_s.html#string,@emph{string}} then the
substring of @emph{thing} @uref{glo_b.html#bounded,@emph{bounded}} by
@emph{start} and @emph{end} is parsed into a
@uref{glo_p.html#pathname,@emph{pathname}} as follows:

* If @emph{host} is a @uref{glo_l.html#logical_host,@emph{logical host}}
then @emph{thing} is parsed as a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}} on the @emph{host}.

* If @emph{host} is @uref{any_nil.html#nil,@strong{nil}} and
@emph{thing} is a syntactically valid
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}} containing an explicit
host, then it is parsed as a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}}.

* If @emph{host} is @uref{any_nil.html#nil,@strong{nil}},
@emph{default-pathname} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}, and
@emph{thing} is a syntactically valid
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}
@uref{glo_n.html#namestring,@emph{namestring}} without an explicit host,
then it is parsed as a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} @uref{glo_n.html#namestring,@emph{namestring}} on the host
that is the host component of @emph{default-pathname}.

* Otherwise, the parsing of @emph{thing} is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

In the first of these cases, the host portion of the
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} namestring
and its following @uref{glo_c.html#colon,@emph{colon}} are optional.

If the host portion of the namestring and @emph{host} are both present
and do not match, an error is signaled.

If @emph{junk-allowed} is @uref{glo_t.html#true,@emph{true}}, then the
@uref{glo_p.html#primary_value,@emph{primary value}} is the
@uref{glo_p.html#pathname,@emph{pathname}} parsed or, if no
syntactically correct @uref{glo_p.html#pathname,@emph{pathname}} was
seen, @uref{any_nil.html#nil,@strong{nil}}. If @emph{junk-allowed} is
@uref{glo_f.html#false,@emph{false}}, then the entire substring is
scanned, and the @uref{glo_p.html#primary_value,@emph{primary value}} is
the @uref{glo_p.html#pathname,@emph{pathname}} parsed.

In either case, the @uref{glo_s.html#secondary_value,@emph{secondary
value}} is the index into @emph{thing} of the delimiter that terminated
the parse, or the index beyond the substring if the parse terminated at
the end of the substring (as will always be the case if
@emph{junk-allowed} is @uref{glo_f.html#false,@emph{false}}).

Parsing a @uref{glo_n.html#null,@emph{null}}
@uref{glo_s.html#string,@emph{string}} always succeeds, producing a
@uref{glo_p.html#pathname,@emph{pathname}} with all components (except
the host) equal to @uref{any_nil.html#nil,@strong{nil}}.

If @emph{thing} contains an explicit host name and no explicit device
name, then it is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
whether @ref{#parse-namestring,@strong{parse-namestring}} will supply
the standard default device for that host as the device component of the
resulting @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Examples:}

@verbatim
 (setq q (parse-namestring "test"))  
=>  #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test" 
       :TYPE NIL :VERSION NIL)
 (pathnamep q) =>  true
 (parse-namestring "test") 
=>  #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test"
       :TYPE NIL :VERSION NIL), 4
 (setq s (open xxx)) =>  #<Input File Stream...>
 (parse-namestring s) 
=>  #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME xxx 
       :TYPE NIL :VERSION NIL), 0
 (parse-namestring "test" nil nil :start 2 :end 4 )
 =>  #S(PATHNAME ...), 15
 (parse-namestring "foo.lisp")
=>  #P"foo.lisp"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{junk-allowed} is @uref{glo_f.html#false,@emph{false}}, an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_parse-error.html#parse-error,@strong{parse-error}} is
signaled if @emph{thing} does not consist entirely of the representation
of a @uref{glo_p.html#pathname,@emph{pathname}}, possibly surrounded on
either side by @uref{glo_w.html#whitespace,@emph{whitespace}}[1]
characters if that is appropriate to the cultural conventions of the
implementation.

If @emph{host} is supplied and not @uref{any_nil.html#nil,@strong{nil}},
and @emph{thing} contains a manifest host name, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if the hosts
do not match.

If @emph{thing} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} namestring and if the host portion of the namestring and
@emph{host} are both present and do not match, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-2-2-2-3.html,Section 19.2.2.2.3 (:UNSPECIFIC as a Component
Value)}, @uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss260.html,PATHNAME-PRINT-READ:SHARPSIGN-P}
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss264.html,PATHNAME-SYMBOL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PATHNAME-HOST PATHNAME-DEVICE
@subsubsection CLHS: Function PATHNAME-HOST, PATHNAME-DEVICE...
@anchor{#clhs-function-pathname-host-pathname-device...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pathnamep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_load-logi_translations.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PATHNAME-HOST, PATHNAME-DEVICE,
PATHNAME-DIRECTORY, PATHNAME-NAME, PATHNAME-TYPE, PATHNAME-VERSION}

@strong{Syntax:}

@strong{pathname-host} @emph{pathname &key case} => @emph{host}

@strong{pathname-device} @emph{pathname &key case} => @emph{device}

@strong{pathname-directory} @emph{pathname &key case} =>
@emph{directory}

@strong{pathname-name} @emph{pathname &key case} => @emph{name}

@strong{pathname-type} @emph{pathname &key case} => @emph{type}

@strong{pathname-version} @emph{pathname} => @emph{version}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{case}---one of :local or :common. The default is :local.

@emph{host}---a @uref{glo_v.html#valid_pathname_host,@emph{valid
pathname host}}.

@emph{device}---a @uref{glo_v.html#valid_pathname_device,@emph{valid
pathname device}}.

@emph{directory}---a
@uref{glo_v.html#valid_pathname_directory,@emph{valid pathname
directory}}.

@emph{name}---a @uref{glo_v.html#valid_pathname_name,@emph{valid
pathname name}}.

@emph{type}---a @uref{glo_v.html#valid_pathname_type,@emph{valid
pathname type}}.

@emph{version}---a @uref{glo_v.html#valid_pathname_version,@emph{valid
pathname version}}.

@strong{Description:}

These functions return the components of @emph{pathname}.

If the @emph{pathname} @uref{glo_d.html#designator,@emph{designator}} is
a @uref{glo_p.html#pathname,@emph{pathname}}, it represents the name
used to open the file. This may be, but is not required to be, the
actual name of the file.

If @emph{case} is supplied, it is treated as described in
@uref{sec_19-2-2-1-2.html,Section 19.2.2.1.2 (Case in Pathname
Components)}.

@strong{Examples:}

@verbatim
 (setq q (make-pathname :host "KATHY"
                        :directory "CHAPMAN" 
                        :name "LOGIN" :type "COM"))
=>  #P"KATHY::[CHAPMAN]LOGIN.COM"
 (pathname-host q) =>  "KATHY"
 (pathname-name q) =>  "LOGIN"
 (pathname-type q) =>  "COM"

 ;; Because namestrings are used, the results shown in the remaining
 ;; examples are not necessarily the only possible results.  Mappings
 ;; from namestring representation to pathname representation are 
 ;; dependent both on the file system involved and on the implementation
 ;; (since there may be several implementations which can manipulate the
 ;; the same file system, and those implementations are not constrained
 ;; to agree on all details). Consult the documentation for each
 ;; implementation for specific information on how namestrings are treated
 ;; that implementation.

 ;; VMS
 (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP"))
=>  (:ABSOLUTE "FOO" "BAR")
 (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP") :case :common)
=>  (:ABSOLUTE "FOO" "BAR")

 ;; Unix
 (pathname-directory "foo.l") =>  NIL
 (pathname-device "foo.l") =>  :UNSPECIFIC
 (pathname-name "foo.l") =>  "foo"
 (pathname-name "foo.l" :case :local) =>  "foo"
 (pathname-name "foo.l" :case :common) =>  "FOO"
 (pathname-type "foo.l") =>  "l"
 (pathname-type "foo.l" :case :local) =>  "l"
 (pathname-type "foo.l" :case :common) =>  "L"
 (pathname-type "foo") =>  :UNSPECIFIC
 (pathname-type "foo" :case :common) =>  :UNSPECIFIC
 (pathname-type "foo.") =>  ""
 (pathname-type "foo." :case :common) =>  ""
 (pathname-directory (parse-namestring "/foo/bar/baz.lisp") :case :local)
=>  (:ABSOLUTE "foo" "bar")
 (pathname-directory (parse-namestring "/foo/bar/baz.lisp") :case :local)
=>  (:ABSOLUTE "FOO" "BAR")
 (pathname-directory (parse-namestring "../baz.lisp"))
=>  (:RELATIVE :UP)
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz"))
=>  (:ABSOLUTE "foo" "BAR" :UP "Mum")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz") :case :common)
=>  (:ABSOLUTE "FOO" "bar" :UP "Mum")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l"))
=>  (:ABSOLUTE "foo" :WILD "bar")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l") :case :common)
=>  (:ABSOLUTE "FOO" :WILD "BAR")

 ;; Symbolics LMFS
 (pathname-directory (parse-namestring ">foo>**>bar>baz.lisp"))
=>  (:ABSOLUTE "foo" :WILD-INFERIORS "bar")
 (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp"))
=>  (:ABSOLUTE "foo" :WILD "bar")
 (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp") :case :common)
=>  (:ABSOLUTE "FOO" :WILD "BAR")
 (pathname-device (parse-namestring ">foo>baz.lisp")) =>  :UNSPECIFIC
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}} and the host
@uref{glo_f.html#file_system,@emph{file system}}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
first argument is not a @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss263.html,PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION}
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss256.html,PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PATHNAME-MATCH-P
@subsubsection CLHS: Function PATHNAME-MATCH-P
@anchor{#clhs-function-pathname-match-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_wild-pathname-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_translate_cal-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PATHNAME-MATCH-P}

@strong{Syntax:}

@strong{pathname-match-p} @emph{pathname wildcard} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{wildcard}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_w.html#wild,@emph{wild}}
@uref{glo_p.html#pathname,@emph{pathname}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#pathname-match-p,@strong{pathname-match-p}} returns true if
@emph{pathname} matches @emph{wildcard}, otherwise
@uref{any_nil.html#nil,@strong{nil}}. The matching rules are
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
but should be consistent with
@uref{fun_directory.html#directory,@strong{directory}}. Missing
components of @emph{wildcard} default to :wild.

It is valid for @emph{pathname} to be a wild
@uref{glo_p.html#pathname,@emph{pathname}}; a wildcard field in
@emph{pathname} only matches a wildcard field in @emph{wildcard} (i.e.,
@ref{#pathname-match-p,@strong{pathname-match-p}} is not commutative).
It is valid for @emph{wildcard} to be a non-wild
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{pathname} or @emph{wildcard} is not a
@uref{glo_p.html#pathname,@emph{pathname}},
@uref{glo_s.html#string,@emph{string}}, or
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}} an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

@strong{See Also:}

@uref{fun_directory.html#directory,@strong{directory}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PATHNAME
@subsubsection CLHS: Function PATHNAME
@anchor{#clhs-function-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_logical-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PATHNAME}

@strong{Syntax:}

@strong{pathname} @emph{pathspec} => @emph{pathname}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Description:}

Returns the @uref{glo_p.html#pathname,@emph{pathname}} denoted by
@emph{pathspec}.

If the @emph{pathspec} @uref{glo_d.html#designator,@emph{designator}} is
a @uref{glo_s.html#stream,@emph{stream}}, the
@uref{glo_s.html#stream,@emph{stream}} can be either open or closed; in
both cases, the @ref{#pathname,@strong{pathname}} returned corresponds
to the @uref{glo_f.html#filename,@emph{filename}} used to open the
@uref{glo_f.html#file,@emph{file}}. @ref{#pathname,@strong{pathname}}
returns the same @uref{glo_p.html#pathname,@emph{pathname}} for a
@uref{glo_f.html#file_stream,@emph{file stream}} after it is closed as
it did when it was open.

If the @emph{pathspec} @uref{glo_d.html#designator,@emph{designator}} is
a @uref{glo_f.html#file_stream,@emph{file stream}} created by opening a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}, a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} is returned.

@strong{Examples:}

@verbatim
 ;; There is a great degree of variability permitted here.  The next
 ;; several examples are intended to illustrate just a few of the many
 ;; possibilities.  Whether the name is canonicalized to a particular
 ;; case (either upper or lower) depends on both the file system and the
 ;; implementation since two different implementations using the same
 ;; file system might differ on many issues.  How information is stored
 ;; internally (and possibly presented in #S notation) might vary,
 ;; possibly requiring `accessors' such as PATHNAME-NAME to perform case
 ;; conversion upon access.  The format of a namestring is dependent both
 ;; on the file system and the implementation since, for example, one
 ;; implementation might include the host name in a namestring, and
 ;; another might not.  #S notation would generally only be used in a
 ;; situation where no appropriate namestring could be constructed for use
 ;; with #P.
 (setq p1 (pathname "test"))
=>  #P"CHOCOLATE:TEST" ; with case canonicalization (e.g., VMS)
OR=>  #P"VANILLA:test"   ; without case canonicalization (e.g., Unix)
OR=>  #P"test"
OR=>  #S(PATHNAME :HOST "STRAWBERRY" :NAME "TEST")
OR=>  #S(PATHNAME :HOST "BELGIAN-CHOCOLATE" :NAME "test")
 (setq p2 (pathname "test"))
=>  #P"CHOCOLATE:TEST"
OR=>  #P"VANILLA:test"
OR=>  #P"test"
OR=>  #S(PATHNAME :HOST "STRAWBERRY" :NAME "TEST")
OR=>  #S(PATHNAME :HOST "BELGIAN-CHOCOLATE" :NAME "test")
 (pathnamep p1) =>  true
 (eq p1 (pathname p1)) =>  true
 (eq p1 p2)
=>  true
OR=>  false
 (with-open-file (stream "test" :direction :output)
   (pathname stream))
=>  #P"ORANGE-CHOCOLATE:>Gus>test.lisp.newest"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PATHNAMEP
@subsubsection CLHS: Function PATHNAMEP
@anchor{#clhs-function-pathnamep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pathname-_name-version.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PATHNAMEP}

@strong{Syntax:}

@strong{pathnamep} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_pathname.html#pathname,@strong{pathname}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (setq q "test")  =>  "test"
 (pathnamep q) =>  false
 (setq q (pathname "test"))
=>  #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test" :TYPE NIL
       :VERSION NIL)
 (pathnamep q) =>  true 
 (setq q (logical-pathname "SYS:SITE;FOO.SYSTEM"))
=>  #P"SYS:SITE;FOO.SYSTEM"
 (pathnamep q) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (pathnamep object) ==  (typep object 'pathname)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TRANSLATE-PATHNAME
@subsubsection CLHS: Function TRANSLATE-PATHNAME
@anchor{#clhs-function-translate-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_translate_cal-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_merge-pathnames.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TRANSLATE-PATHNAME}

@strong{Syntax:}

@strong{translate-pathname} @emph{source from-wildcard to-wildcard &key}

=> @emph{translated-pathname}

@strong{Arguments and Values:}

@emph{source}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{from-wildcard}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}.

@emph{to-wildcard}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}.

@emph{translated-pathname}---a
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Description:}

@ref{#translate-pathname,@strong{translate-pathname}} translates
@emph{source} (that matches @emph{from-wildcard}) into a corresponding
@uref{glo_p.html#pathname,@emph{pathname}} that matches
@emph{to-wildcard}, and returns the corresponding
@uref{glo_p.html#pathname,@emph{pathname}}.

The resulting @uref{glo_p.html#pathname,@emph{pathname}} is
@emph{to-wildcard} with each wildcard or missing field replaced by a
portion of @emph{source}. A ``wildcard field'' is a
@uref{glo_p.html#pathname,@emph{pathname}} component with a value of
:wild, a :wild element of a @uref{glo_l.html#list,@emph{list}}-valued
directory component, or an
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
portion of a component, such as the "*" in the complex wildcard string
"foo*bar" that some implementations support. An implementation that adds
other wildcard features, such as regular expressions, must define how
@ref{#translate-pathname,@strong{translate-pathname}} extends to those
features. A ``missing field'' is a
@uref{glo_p.html#pathname,@emph{pathname}} component with a value of
@uref{any_nil.html#nil,@strong{nil}}.

The portion of @emph{source} that is copied into the resulting
@uref{glo_p.html#pathname,@emph{pathname}} is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
Typically it is determined by the user interface conventions of the file
systems involved. Usually it is the portion of @emph{source} that
matches a wildcard field of @emph{from-wildcard} that is in the same
position as the wildcard or missing field of @emph{to-wildcard}. If
there is no wildcard field in @emph{from-wildcard} at that position,
then usually it is the entire corresponding
@uref{glo_p.html#pathname,@emph{pathname}} component of @emph{source},
or in the case of a @uref{glo_l.html#list,@emph{list}}-valued directory
component, the entire corresponding @uref{glo_l.html#list,@emph{list}}
element.

During the copying of a portion of @emph{source} into the resulting
@uref{glo_p.html#pathname,@emph{pathname}}, additional
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
translations of @uref{glo_c.html#case,@emph{case}} or file naming
conventions might occur, especially when @emph{from-wildcard} and
@emph{to-wildcard} are for different hosts.

It is valid for @emph{source} to be a wild
@uref{glo_p.html#pathname,@emph{pathname}}; in general this will produce
a wild result. It is valid for @emph{from-wildcard} and/or
@emph{to-wildcard} to be non-wild
@uref{glo_p.html#pathname,@emph{pathnames}}.

There are no specified keyword arguments for
@ref{#translate-pathname,@strong{translate-pathname}}, but
implementations are permitted to extend it by adding keyword arguments.

@ref{#translate-pathname,@strong{translate-pathname}} maps customary
case in @emph{source} into customary case in the output
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Examples:}

@verbatim
 ;; The results of the following five forms are all implementation-dependent.
 ;; The second item in particular is shown with multiple results just to 
 ;; emphasize one of many particular variations which commonly occurs.
 (pathname-name (translate-pathname "foobar" "foo*" "*baz")) =>  "barbaz"
 (pathname-name (translate-pathname "foobar" "foo*" "*"))
=>  "foobar"
OR=>  "bar"
 (pathname-name (translate-pathname "foobar" "*"    "foo*")) =>  "foofoobar"
 (pathname-name (translate-pathname "bar"    "*"    "foo*")) =>  "foobar"
 (pathname-name (translate-pathname "foobar" "foo*" "baz*")) =>  "bazbar"

 (defun translate-logical-pathname-1 (pathname rules)
   (let ((rule (assoc pathname rules :test #'pathname-match-p)))
     (unless rule (error "No translation rule for ~A" pathname))
     (translate-pathname pathname (first rule) (second rule))))
 (translate-logical-pathname-1 "FOO:CODE;BASIC.LISP"
                       '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")
                         ("FOO:CODE;"          "MY-UNIX:/lib/foo/")
                         ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))
=>  #P"MY-UNIX:/lib/foo/basic.l"

;;;This example assumes one particular set of wildcard conventions
;;;Not all file systems will run this example exactly as written
 (defun rename-files (from to)
   (dolist (file (directory from))
     (rename-file file (translate-pathname file from to))))
 (rename-files "/usr/me/*.lisp" "/dev/her/*.l")
   ;Renames /usr/me/init.lisp to /dev/her/init.l
 (rename-files "/usr/me/pcl*/*" "/sys/pcl/*/")
   ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp
   ;In some file systems the result might be /sys/pcl/5-may/low.lisp
 (rename-files "/usr/me/pcl*/*" "/sys/library/*/")
   ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp
   ;In some file systems the result might be /sys/library/5-may/low.lisp
 (rename-files "/usr/me/foo.bar" "/usr/me2/")
   ;Renames /usr/me/foo.bar to /usr/me2/foo.bar
 (rename-files "/usr/joe/*-recipes.text" "/usr/jim/cookbook/joe's-*-rec.text")
   ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text
   ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text
   ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If any of @emph{source}, @emph{from-wildcard}, or @emph{to-wildcard} is
not a @uref{glo_p.html#pathname,@emph{pathname}}, a
@uref{glo_s.html#string,@emph{string}}, or a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}} an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

(pathname-match-p @emph{source from-wildcard}) must be true or an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{fun_namestrin_h-namestring.html#namestring,@strong{namestring}},
@uref{fun_pathname-_name-version.html#pathname-host,@strong{pathname-host}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

The exact behavior of
@ref{#translate-pathname,@strong{translate-pathname}} cannot be dictated
by the Common Lisp language and must be allowed to vary, depending on
the user interface conventions of the file systems involved.

The following is an implementation guideline. One file system performs
this operation by examining each piece of the three
@uref{glo_p.html#pathname,@emph{pathnames}} in turn, where a piece is a
@uref{glo_p.html#pathname,@emph{pathname}} component or a
@uref{glo_l.html#list,@emph{list}} element of a structured component
such as a hierarchical directory. Hierarchical directory elements in
@emph{from-wildcard} and @emph{to-wildcard} are matched by whether they
are wildcards, not by depth in the directory hierarchy. If the piece in
@emph{to-wildcard} is present and not wild, it is copied into the
result. If the piece in @emph{to-wildcard} is :wild or
@uref{any_nil.html#nil,@strong{nil}}, the piece in @emph{source} is
copied into the result. Otherwise, the piece in @emph{to-wildcard} might
be a complex wildcard such as "foo*bar" and the piece in
@emph{from-wildcard} should be wild; the portion of the piece in
@emph{source} that matches the wildcard portion of the piece in
@emph{from-wildcard} replaces the wildcard portion of the piece in
@emph{to-wildcard} and the value produced is used in the result.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss206.html,JUN90-TRIVIAL-ISSUES:5}
@item
@uref{../Issues/iss256.html,PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TRANSLATE-LOGICAL-PATHNAME
@subsubsection CLHS: Function TRANSLATE-LOGICAL-PATHNAME
@anchor{#clhs-function-translate-logical-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pathname-match-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_translate-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TRANSLATE-LOGICAL-PATHNAME}

@strong{Syntax:}

@strong{translate-logical-pathname} @emph{pathname &key} =>
@emph{physical-pathname}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}, or a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} @uref{glo_n.html#namestring,@emph{namestring}}.

@emph{physical-pathname}---a
@uref{glo_p.html#physical_pathname,@emph{physical pathname}}.

@strong{Description:}

Translates @emph{pathname} to a
@uref{glo_p.html#physical_pathname,@emph{physical pathname}}, which it
returns.

If @emph{pathname} is a @uref{glo_s.html#stream,@emph{stream}}, the
@uref{glo_s.html#stream,@emph{stream}} can be either open or closed.
@ref{#translate-logical-pathname,@strong{translate-logical-pathname}}
returns the same physical pathname after a file is closed as it did when
the file was open. It is an error if @emph{pathname} is a
@uref{glo_s.html#stream,@emph{stream}} that is created with
@uref{fun_make-two-way-stream.html#make-two-way-stream,@strong{make-two-way-stream}},
@uref{fun_make-echo-stream.html#make-echo-stream,@strong{make-echo-stream}},
@uref{fun_make-broadcast-stream.html#make-broadcast-stream,@strong{make-broadcast-stream}},
@uref{fun_make-conc_nated-stream.html#make-concatenated-stream,@strong{make-concatenated-stream}},
@uref{fun_make-stri_input-stream.html#make-string-input-stream,@strong{make-string-input-stream}},
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}}.

If @emph{pathname} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}} namestring, the host portion of the
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} namestring
and its following @uref{glo_c.html#colon,@emph{colon}} are required.

@emph{Pathname} is first coerced to a
@uref{glo_p.html#pathname,@emph{pathname}}. If the coerced
@emph{pathname} is a physical pathname, it is returned. If the coerced
@emph{pathname} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, the first matching translation (according to
@uref{fun_pathname-match-p.html#pathname-match-p,@strong{pathname-match-p}})
of the @uref{glo_l.html#logical_pathname,@emph{logical pathname}} host
is applied, as if by calling
@uref{fun_translate-pathname.html#translate-pathname,@strong{translate-pathname}}.
If the result is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, this process is repeated. When the result is finally a
physical pathname, it is returned. If no translation matches, an error
is signaled.

@ref{#translate-logical-pathname,@strong{translate-logical-pathname}}
might perform additional translations, typically to provide translation
of file types to local naming conventions, to accomodate physical file
systems with limited length names, or to deal with special character
requirements such as translating hyphens to underscores or uppercase
letters to lowercase. Any such additional translations are
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
Some implementations do no additional translations.

There are no specified keyword arguments for
@ref{#translate-logical-pathname,@strong{translate-logical-pathname}},
but implementations are permitted to extend it by adding keyword
arguments.

@strong{Examples:}

See
@uref{acc_logical-p_translations.html#logical-pathname-translations,@strong{logical-pathname-translations}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{pathname} is incorrectly supplied, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

If no translation matches, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

@strong{See Also:}

@uref{fun_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{acc_logical-p_translations.html#logical-pathname-translations,@strong{logical-pathname-translations}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WILD-PATHNAME-P
@subsubsection CLHS: Function WILD-PATHNAME-P
@anchor{#clhs-function-wild-pathname-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_parse-namestring.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pathname-match-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WILD-PATHNAME-P}

@strong{Syntax:}

@strong{wild-pathname-p} @emph{pathname &optional field-key} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{Field-key}---one of :host, :device :directory, :name, :type,
:version, or @uref{any_nil.html#nil,@strong{nil}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#wild-pathname-p,@strong{wild-pathname-p}} tests @emph{pathname}
for the presence of wildcard components.

If @emph{pathname} is a @uref{glo_p.html#pathname,@emph{pathname}} (as
returned by @uref{fun_pathname.html#pathname,@strong{pathname}}) it
represents the name used to open the file. This may be, but is not
required to be, the actual name of the file.

If @emph{field-key} is not supplied or
@uref{any_nil.html#nil,@strong{nil}},
@ref{#wild-pathname-p,@strong{wild-pathname-p}} returns true if
@emph{pathname} has any wildcard components,
@uref{any_nil.html#nil,@strong{nil}} if @emph{pathname} has none. If
@emph{field-key} is @uref{glo_n.html#non-nil,@emph{non-nil}},
@ref{#wild-pathname-p,@strong{wild-pathname-p}} returns true if the
indicated component of @emph{pathname} is a wildcard,
@uref{any_nil.html#nil,@strong{nil}} if the component is not a wildcard.

@strong{Examples:}

@verbatim
 ;;;The following examples are not portable.  They are written to run
 ;;;with particular file systems and particular wildcard conventions.
 ;;;Other implementations will behave differently.  These examples are
 ;;;intended to be illustrative, not to be prescriptive.
 
 (wild-pathname-p (make-pathname :name :wild)) =>  true
 (wild-pathname-p (make-pathname :name :wild) :name) =>  true
 (wild-pathname-p (make-pathname :name :wild) :type) =>  false
 (wild-pathname-p (pathname "s:>foo>**>")) =>  true ;Lispm
 (wild-pathname-p (pathname :name "F*O")) =>  true ;Most places
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{pathname} is not a @uref{glo_p.html#pathname,@emph{pathname}},
a @uref{glo_s.html#string,@emph{string}}, or a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}} an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

Not all implementations support wildcards in all fields. See
@uref{sec_19-2-2-2-2.html,Section 19.2.2.2.2 (:WILD as a Component
Value)} and @uref{sec_19-2-2-3.html,Section 19.2.2.3 (Restrictions on
Wildcard Pathnames)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class LOGICAL-PATHNAME
@subsubsection CLHS: System Class LOGICAL-PATHNAME
@anchor{#clhs-system-class-logical-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{LOGICAL-PATHNAME}

@strong{Class Precedence List:}

@ref{#logical-pathname,@strong{logical-pathname}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_p.html#pathname,@emph{pathname}} that uses a
@uref{glo_n.html#namestring,@emph{namestring}} syntax that is
@uref{glo_i.html#implementation-independent,@emph{implementation-independent}},
and that has component values that are
@uref{glo_i.html#implementation-independent,@emph{implementation-independent}}.
@uref{glo_l.html#logical_pathname,@emph{Logical pathnames}} do not refer
directly to @uref{glo_f.html#filename,@emph{filenames}}

@strong{See Also:}

@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_2-4-8-14.html,Section 2.4.8.14 (Sharpsign P)},
@uref{sec_22-1-3-11.html,Section 22.1.3.11 (Printing Pathnames)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *DEFAULT-PATHNAME-DEFAULTS*
@subsubsection CLHS: Variable *DEFAULT-PATHNAME-DEFAULTS*
@anchor{#clhs-variable-default-pathname-defaults}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_logical-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_filen_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_namestrin_h-namestring.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*DEFAULT-PATHNAME-DEFAULTS*}

@strong{Value Type:}

a @uref{glo_p.html#pathname,@emph{pathname}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Initial Value:}

An
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_p.html#pathname,@emph{pathname}}, typically in the working
directory that was current when Common Lisp was started up.

@strong{Description:}

a @uref{glo_p.html#pathname,@emph{pathname}}, used as the default
whenever a @uref{glo_f.html#function,@emph{function}} needs a default
@uref{glo_p.html#pathname,@emph{pathname}} and one is not supplied.

@strong{Examples:}

@verbatim
 ;; This example illustrates a possible usage for a hypothetical Lisp running on a
 ;; DEC TOPS-20 file system.  Since pathname conventions vary between Lisp 
 ;; implementations and host file system types, it is not possible to provide a
 ;; general-purpose, conforming example.
 *default-pathname-defaults* =>  #P"PS:<FRED>"
 (merge-pathnames (make-pathname :name "CALENDAR"))
=>  #P"PS:<FRED>CALENDAR"
 (let ((*default-pathname-defaults* (pathname "<MARY>")))
   (merge-pathnames (make-pathname :name "CALENDAR")))
=>  #P"<MARY>CALENDAR"
@end verbatim

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 2
@section CLHS: Chapter 2
@anchor{#clhs-chapter-2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_1-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2. Syntax

@uref{sec_2-1.html,}

2.1 Character Syntax

@uref{sec_2-2.html,}

2.2 Reader Algorithm

@uref{sec_2-3.html,}

2.3 Interpretation of Tokens

@uref{sec_2-4.html,}

2.4 Standard Macro Characters

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 22::
* CLHS Section 23::
* CLHS Section 24::
@end menu

@node CLHS Section 22
@subsection CLHS: Section 2.2
@anchor{#clhs-section-2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-1-4-7-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.2 Reader Algorithm

This section describes the algorithm used by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} to parse
@uref{glo_o.html#object,@emph{objects}} from an
@uref{glo_i.html#input,@emph{input}}
@uref{glo_c.html#character,@emph{character}}
@uref{glo_s.html#stream,@emph{stream}}, including how the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} processes
@uref{glo_m.html#macro_character,@emph{macro characters}}.

When dealing with @uref{glo_t.html#token,@emph{tokens}}, the reader's
basic function is to distinguish representations of
@uref{glo_s.html#symbol,@emph{symbols}} from those of
@uref{glo_n.html#number,@emph{numbers}}. When a
@uref{glo_t.html#token,@emph{token}} is accumulated, it is assumed to
represent a @uref{glo_n.html#number,@emph{number}} if it satisfies the
syntax for numbers listed in
@uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9}. If it does not
represent a @uref{glo_n.html#number,@emph{number}}, it is then assumed
to be a @uref{glo_p.html#potential_number,@emph{potential number}} if it
satisfies the rules governing the syntax for a
@uref{glo_p.html#potential_number,@emph{potential number}}. If a valid
@uref{glo_t.html#token,@emph{token}} is neither a representation of a
@uref{glo_n.html#number,@emph{number}} nor a
@uref{glo_p.html#potential_number,@emph{potential number}}, it
represents a @uref{glo_s.html#symbol,@emph{symbol}}.

The algorithm performed by the @uref{glo_l.html#lisp_reader,@emph{Lisp
reader}} is as follows:

1. If at end of file, end-of-file processing is performed as specified
in @uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}. Otherwise,
one @uref{glo_c.html#character,@emph{character}}, @emph{x}, is read from
the @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}, and dispatched according to the
@uref{glo_s.html#syntax_type,@emph{syntax type}} of @emph{x} to one of
steps 2 to 7.

2. If @emph{x} is an @uref{glo_i.html#invalid,@emph{invalid}}
@uref{glo_c.html#character,@emph{character}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled.

3. If @emph{x} is a @uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}}, then it is discarded and
step 1 is re-entered.

4. If @emph{x} is a @uref{glo_t.html#terminating,@emph{terminating}} or
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}} then its
associated @uref{glo_r.html#reader_macro_function,@emph{reader macro
function}} is called with two
@uref{glo_a.html#argument,@emph{arguments}}, the
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} and @emph{x}.

The @uref{glo_r.html#reader_macro_function,@emph{reader macro function}}
may read @uref{glo_c.html#character,@emph{characters}} from the
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}; if it does, it will see those
@uref{glo_c.html#character,@emph{characters}} following the
@uref{glo_m.html#macro_character,@emph{macro character}}. The
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} may be invoked
recursively from the @uref{glo_r.html#reader_macro_function,@emph{reader
macro function}}.

The @uref{glo_r.html#reader_macro_function,@emph{reader macro function}}
must not have any side effects other than on the
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}; because of backtracking and
restarting of the
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} operation,
front ends to the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}}
(e.g., ``editors'' and ``rubout handlers'') may cause the
@uref{glo_r.html#reader_macro_function,@emph{reader macro function}} to
be called repeatedly during the reading of a single
@uref{glo_e.html#expression,@emph{expression}} in which @emph{x} only
appears once.

The @uref{glo_r.html#reader_macro_function,@emph{reader macro function}}
may return zero values or one value. If one value is returned, then that
value is returned as the result of the read operation; the algorithm is
done. If zero values are returned, then step 1 is re-entered.

5. If @emph{x} is a @uref{glo_s.html#single_escape,@emph{single escape}}
@uref{glo_c.html#character,@emph{character}} then the next
@uref{glo_c.html#character,@emph{character}}, @emph{y}, is read, or an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled if at the end of file. @emph{y} is treated as if it is a
@uref{glo_c.html#constituent,@emph{constituent}} whose only
@uref{glo_c.html#constituent_trait,@emph{constituent trait}} is
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[2]. @emph{y} is used to
begin a @uref{glo_t.html#token,@emph{token}}, and step 8 is entered.

6. If @emph{x} is a @uref{glo_m.html#multiple_escape,@emph{multiple
escape}} @uref{glo_c.html#character,@emph{character}} then a
@uref{glo_t.html#token,@emph{token}} (initially containing no
@uref{glo_c.html#character,@emph{characters}}) is begun and step 9 is
entered.

7. If @emph{x} is a @uref{glo_c.html#constituent,@emph{constituent}}
@uref{glo_c.html#character,@emph{character}}, then it begins a
@uref{glo_t.html#token,@emph{token}}. After the
@uref{glo_t.html#token,@emph{token}} is read in, it will be interpreted
either as a Lisp @uref{glo_o.html#object,@emph{object}} or as being of
invalid syntax. If the @uref{glo_t.html#token,@emph{token}} represents
an @uref{glo_o.html#object,@emph{object}}, that
@uref{glo_o.html#object,@emph{object}} is returned as the result of the
read operation. If the @uref{glo_t.html#token,@emph{token}} is of
invalid syntax, an error is signaled. If @emph{x} is a
@uref{glo_c.html#character,@emph{character}} with
@uref{glo_c.html#case,@emph{case}}, it might be replaced with the
corresponding @uref{glo_c.html#character,@emph{character}} of the
opposite @uref{glo_c.html#case,@emph{case}}, depending on the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@uref{glo_c.html#current_readtable,@emph{current readtable}}, as
outlined in @uref{sec_23-1-2.html,Section 23.1.2 (Effect of Readtable
Case on the Lisp Reader)}. @emph{X} is used to begin a
@uref{glo_t.html#token,@emph{token}}, and step 8 is entered.

8. At this point a @uref{glo_t.html#token,@emph{token}} is being
accumulated, and an even number of
@uref{glo_m.html#multiple_escape,@emph{multiple escape}}
@uref{glo_c.html#character,@emph{characters}} have been encountered. If
at end of file, step 10 is entered. Otherwise, a
@uref{glo_c.html#character,@emph{character}}, @emph{y}, is read, and one
of the following actions is performed according to its
@uref{glo_s.html#syntax_type,@emph{syntax type}}:

* If @emph{y} is a @uref{glo_c.html#constituent,@emph{constituent}} or
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}:

-- If @emph{y} is a @uref{glo_c.html#character,@emph{character}} with
@uref{glo_c.html#case,@emph{case}}, it might be replaced with the
corresponding @uref{glo_c.html#character,@emph{character}} of the
opposite @uref{glo_c.html#case,@emph{case}}, depending on the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@uref{glo_c.html#current_readtable,@emph{current readtable}}, as
outlined in @uref{sec_23-1-2.html,Section 23.1.2 (Effect of Readtable
Case on the Lisp Reader)}.

-- @emph{Y} is appended to the @uref{glo_t.html#token,@emph{token}}
being built.

-- Step 8 is repeated.

* If @emph{y} is a @uref{glo_s.html#single_escape,@emph{single escape}}
@uref{glo_c.html#character,@emph{character}}, then the next
@uref{glo_c.html#character,@emph{character}}, @emph{z}, is read, or an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled if at end of file. @emph{Z} is treated as if it is a
@uref{glo_c.html#constituent,@emph{constituent}} whose only
@uref{glo_c.html#constituent_trait,@emph{constituent trait}} is
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[2]. @emph{Z} is appended
to the @uref{glo_t.html#token,@emph{token}} being built, and step 8 is
repeated.

* If @emph{y} is a @uref{glo_m.html#multiple_escape,@emph{multiple
escape}} @uref{glo_c.html#character,@emph{character}}, then step 9 is
entered.

* If @emph{y} is an @uref{glo_i.html#invalid,@emph{invalid}}
@uref{glo_c.html#character,@emph{character}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled.

* If @emph{y} is a @uref{glo_t.html#terminating,@emph{terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}, then it
terminates the @uref{glo_t.html#token,@emph{token}}. First the
@uref{glo_c.html#character,@emph{character}} @emph{y} is unread (see
@uref{fun_unread-char.html#unread-char,@strong{unread-char}}), and then
step 10 is entered.

* If @emph{y} is a @uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}}, then it terminates the
@uref{glo_t.html#token,@emph{token}}. First the
@uref{glo_c.html#character,@emph{character}} @emph{y} is unread if
appropriate (see
@uref{fun_readcm_re_g-whitespace.html#read-preserving-whitespace,@strong{read-preserving-whitespace}}),
and then step 10 is entered.

9. At this point a @uref{glo_t.html#token,@emph{token}} is being
accumulated, and an odd number of
@uref{glo_m.html#multiple_escape,@emph{multiple escape}}
@uref{glo_c.html#character,@emph{characters}} have been encountered. If
at end of file, an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled. Otherwise, a @uref{glo_c.html#character,@emph{character}},
@emph{y}, is read, and one of the following actions is performed
according to its @uref{glo_s.html#syntax_type,@emph{syntax type}}:

* If @emph{y} is a @uref{glo_c.html#constituent,@emph{constituent}},
macro, or @uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}}, @emph{y} is treated as a
@uref{glo_c.html#constituent,@emph{constituent}} whose only
@uref{glo_c.html#constituent_trait,@emph{constituent trait}} is
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[2]. @emph{Y} is appended
to the @uref{glo_t.html#token,@emph{token}} being built, and step 9 is
repeated.

* If @emph{y} is a @uref{glo_s.html#single_escape,@emph{single escape}}
@uref{glo_c.html#character,@emph{character}}, then the next
@uref{glo_c.html#character,@emph{character}}, @emph{z}, is read, or an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled if at end of file. @emph{Z} is treated as a
@uref{glo_c.html#constituent,@emph{constituent}} whose only
@uref{glo_c.html#constituent_trait,@emph{constituent trait}} is
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[2]. @emph{Z} is appended
to the @uref{glo_t.html#token,@emph{token}} being built, and step 9 is
repeated.

* If @emph{y} is a @uref{glo_m.html#multiple_escape,@emph{multiple
escape}} @uref{glo_c.html#character,@emph{character}}, then step 8 is
entered.

* If @emph{y} is an @uref{glo_i.html#invalid,@emph{invalid}}
@uref{glo_c.html#character,@emph{character}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled.

10. An entire @uref{glo_t.html#token,@emph{token}} has been accumulated.
The @uref{glo_o.html#object,@emph{object}} represented by the
@uref{glo_t.html#token,@emph{token}} is returned as the result of the
read operation, or an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled if the @uref{glo_t.html#token,@emph{token}} is not of valid
syntax.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 23
@subsection CLHS: Section 2.3
@anchor{#clhs-section-2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3 Interpretation of Tokens

@uref{sec_2-3-1.html,}

2.3.1 Numbers as Tokens

@uref{sec_2-3-2.html,}

2.3.2 Constructing Numbers from Tokens

@uref{sec_2-3-3.html,}

2.3.3 The Consing Dot

@uref{sec_2-3-4.html,}

2.3.4 Symbols as Tokens

@uref{sec_2-3-5.html,}

2.3.5 Valid Patterns for Tokens

@uref{sec_2-3-6.html,}

2.3.6 Package System Consistency Rules

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 232::
* CLHS Section 233::
* CLHS Section 234::
* CLHS Section 235::
* CLHS Section 236::
@end menu

@node CLHS Section 232
@subsubsection CLHS: Section 2.3.2
@anchor{#clhs-section-2.3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-1-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.2 Constructing Numbers from Tokens

A @uref{syscla_real.html#real,@emph{real}} is constructed directly from
a corresponding numeric @uref{glo_t.html#token,@emph{token}}; see
@uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9}.

A @uref{glo_c.html#complex,@emph{complex}} is notated as a #C (or #c)
followed by a @uref{glo_l.html#list,@emph{list}} of two @emph{reals};
see @uref{sec_2-4-8-11.html,Section 2.4.8.11 (Sharpsign C)}.

The @uref{glo_r.html#reader_macro,@emph{reader macros}} #B, #O, #X, and
#R may also be useful in controlling the input
@uref{glo_r.html#radix,@emph{radix}} in which
@uref{glo_r.html#rational,@emph{rationals}} are parsed; see
@uref{sec_2-4-8-7.html,Section 2.4.8.7 (Sharpsign B)},
@uref{sec_2-4-8-8.html,Section 2.4.8.8 (Sharpsign O)},
@uref{sec_2-4-8-9.html,Section 2.4.8.9 (Sharpsign X)}, and
@uref{sec_2-4-8-10.html,Section 2.4.8.10 (Sharpsign R)}.

This section summarizes the full syntax for
@uref{glo_n.html#number,@emph{numbers}}.

@uref{sec_2-3-2-1.html,}

2.3.2.1 Syntax of a Rational

@uref{sec_2-3-2-2.html,}

2.3.2.2 Syntax of a Float

@uref{sec_2-3-2-3.html,}

2.3.2.3 Syntax of a Complex

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.3.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-2-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.2.2 Syntax of a Float

@uref{glo_f.html#float,@emph{Floats}} can be written in either decimal
fraction or computerized scientific notation: an optional sign, then a
non-empty sequence of digits with an embedded decimal point, then an
optional decimal exponent specification. If there is no exponent
specifier, then the decimal point is required, and there must be digits
after it. The exponent specifier consists of an
@uref{glo_e.html#exponent_marker,@emph{exponent marker}}, an optional
sign, and a non-empty sequence of digits. If no exponent specifier is
present, or if the @uref{glo_e.html#exponent_marker,@emph{exponent
marker}} e (or E) is used, then the format specified by
@uref{var_stread-de_oat-formatst.html#STread-default-float-formatST,@strong{*read-default-float-format*}}
is used. See @uref{sec_2-3-1.html#syntaxfornumerictokens,Figure 2-9}.

An implementation may provide one or more kinds of
@uref{glo_f.html#float,@emph{float}} that collectively make up the
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}}. The letters s, f, d, and
l (or their respective uppercase equivalents) explicitly specify the use
of the @uref{glo_t.html#type,@emph{types}}
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}},
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}},
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}},
and
@uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}},
respectively.

The internal format used for an external representation depends only on
the @uref{glo_e.html#exponent_marker,@emph{exponent marker}}, and not on
the number of decimal digits in the external representation.

The next figure contains examples of notations for
@uref{glo_f.html#float,@emph{floats}}:

@verbatim
0.0       ;Floating-point zero in default format                          
0E0       ;As input, this is also floating-point zero in default format.  
          ;As output, this would appear as 0.0.                           
0e0       ;As input, this is also floating-point zero in default format.  
          ;As output, this would appear as 0.0.                           
-.0       ;As input, this might be a zero or a minus zero,                
          ; depending on whether the implementation supports              
          ; a distinct minus zero.                                        
          ;As output, 0.0 is zero and -0.0 is minus zero.                 
0.        ;On input, the integer zero---not a floating-point number!      
          ;Whether this appears as 0 or 0. on output depends              
          ;on the value of *print-radix*.                                 
0.0s0     ;A floating-point zero in short format                          
0s0       ;As input, this is a floating-point zero in short format.       
          ;As output, such a zero would appear as 0.0s0                   
          ; (or as 0.0 if short-float was the default format).            
6.02E+23  ;Avogadro's number, in default format                           
602E+21   ;Also Avogadro's number, in default format                      
@end verbatim

@strong{Figure 2-14. Examples of Floating-point numbers}

For information on how @uref{glo_f.html#float,@emph{floats}} are
printed, see @uref{sec_22-1-3-1-3.html,Section 22.1.3.1.3 (Printing
Floats)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.3.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.2.3 Syntax of a Complex

A @uref{glo_c.html#complex,@emph{complex}} has a Cartesian structure,
with a real part and an imaginary part each of which is a
@uref{syscla_real.html#real,@emph{real}}. The parts of a
@uref{glo_c.html#complex,@emph{complex}} are not necessarily
@uref{glo_f.html#float,@emph{floats}} but both parts must be of the same
@uref{glo_t.html#type,@emph{type}}: either both are
@uref{glo_r.html#rational,@emph{rationals}}, or both are of the same
@uref{glo_f.html#float,@emph{float}}
@uref{glo_s.html#subtype,@emph{subtype}}. When constructing a
@uref{glo_c.html#complex,@emph{complex}}, if the specified parts are not
the same @uref{glo_t.html#type,@emph{type}}, the parts are converted to
be the same @uref{glo_t.html#type,@emph{type}} internally (i.e., the
@uref{glo_r.html#rational,@emph{rational}} part is converted to a
@uref{glo_f.html#float,@emph{float}}). An
@uref{glo_o.html#object,@emph{object}} of type (complex rational) is
converted internally and represented thereafter as a
@uref{glo_r.html#rational,@emph{rational}} if its imaginary part is an
@uref{glo_i.html#integer,@emph{integer}} whose value is 0.

For further information, see @uref{sec_2-4-8-11.html,Section 2.4.8.11
(Sharpsign C)} and @uref{sec_22-1-3-1-4.html,Section 22.1.3.1.4
(Printing Complexes)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 233
@subsubsection CLHS: Section 2.3.3
@anchor{#clhs-section-2.3.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.3 The Consing Dot

If a @uref{glo_t.html#token,@emph{token}} consists solely of dots (with
no escape characters), then an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled, except in one circumstance: if the
@uref{glo_t.html#token,@emph{token}} is a single
@uref{glo_d.html#dot,@emph{dot}} and appears in a situation where
@uref{glo_d.html#dotted_pair,@emph{dotted pair}} notation permits a
@uref{glo_d.html#dot,@emph{dot}}, then it is accepted as part of such
syntax and no error is signaled. See @uref{sec_2-4-1.html,Section 2.4.1
(Left-Parenthesis)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 234
@subsubsection CLHS: Section 2.3.4
@anchor{#clhs-section-2.3.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.4 Symbols as Tokens

Any @uref{glo_t.html#token,@emph{token}} that is not a
@uref{glo_p.html#potential_number,@emph{potential number}}, does not
contain a @uref{glo_p.html#package_marker,@emph{package marker}}, and
does not consist entirely of dots will always be interpreted as a
@uref{glo_s.html#symbol,@emph{symbol}}. Any
@uref{glo_t.html#token,@emph{token}} that is a
@uref{glo_p.html#potential_number,@emph{potential number}} but does not
fit the number syntax is a reserved @uref{glo_t.html#token,@emph{token}}
and has an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
interpretation. In all other cases, the
@uref{glo_t.html#token,@emph{token}} is construed to be the name of a
@uref{glo_s.html#symbol,@emph{symbol}}.

Examples of the printed representation of
@uref{glo_s.html#symbol,@emph{symbols}} are in the next figure. For
presentational simplicity, these examples assume that the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@uref{glo_c.html#current_readtable,@emph{current readtable}} is :upcase.

@verbatim
FROBBOZ         The symbol whose name is FROBBOZ.                
frobboz         Another way to notate the same symbol.           
fRObBoz         Yet another way to notate it.                    
unwind-protect  A symbol with a hyphen in its name.              
+$              The symbol named +$.                             
1+              The symbol named 1+.                             
+1              This is the integer 1, not a symbol.             
pascal_style    This symbol has an underscore in its name.       
file.rel.43     This symbol has periods in its name.             
\(              The symbol whose name is (.                      
\+1             The symbol whose name is +1.                     
+\1             Also the symbol whose name is +1.                
\frobboz        The symbol whose name is fROBBOZ.                
3.14159265\s0   The symbol whose name is 3.14159265s0.           
3.14159265\S0   A different symbol, whose name is 3.14159265S0.  
3.14159265s0    A possible short float approximation to <PI>.    
@end verbatim

@strong{Figure 2-15. Examples of the printed representation of symbols
(Part 1 of 2)}

@verbatim
APL\\360            The symbol whose name is APL\360.       
apl\\360            Also the symbol whose name is APL\360.  
\(b^2\)\-\4*a*c     The name is (B^2) - 4*A*C.              
                    Parentheses and two spaces in it.       
\(\b^2\)\-\4*\a*\c  The name is (b^2) - 4*a*c.              
                    Letters explicitly lowercase.           
|"|                 The same as writing \".                 
|(b^2) - 4*a*c|     The name is (b^2) - 4*a*c.              
|frobboz|           The name is frobboz, not FROBBOZ.       
|APL\360|           The name is APL360.                     
|APL\\360|          The name is APL\360.                    
|apl\\360|          The name is apl\360.                    
|\|\||              Same as \|\| ---the name is ||.         
|(B^2) - 4*A*C|     The name is (B^2) - 4*A*C.              
                    Parentheses and two spaces in it.       
|(b^2) - 4*a*c|     The name is (b^2) - 4*a*c.              
@end verbatim

@strong{Figure 2-16. Examples of the printed representation of symbols
(Part 2 of 2)}

In the process of parsing a @uref{glo_s.html#symbol,@emph{symbol}}, it
is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
which
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}} are removed from the
@uref{glo_c.html#character,@emph{characters}} forming a
@uref{glo_t.html#token,@emph{token}} that represents a
@uref{glo_s.html#symbol,@emph{symbol}}.

When parsing the syntax for a @uref{glo_s.html#symbol,@emph{symbol}},
the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} looks up the
@uref{glo_n.html#name,@emph{name}} of that
@uref{glo_s.html#symbol,@emph{symbol}} in the
@uref{glo_c.html#current_package,@emph{current package}}. This lookup
may involve looking in other @uref{glo_p.html#package,@emph{packages}}
whose @uref{glo_e.html#external_symbol,@emph{external symbols}} are
inherited by the @uref{glo_c.html#current_package,@emph{current
package}}. If the name is found, the corresponding
@uref{glo_s.html#symbol,@emph{symbol}} is returned. If the name is not
found (that is, there is no @uref{glo_s.html#symbol,@emph{symbol}} of
that name @uref{glo_a.html#accessible,@emph{accessible}} in the
@uref{glo_c.html#current_package,@emph{current package}}), a new
@uref{glo_s.html#symbol,@emph{symbol}} is created and is placed in the
@uref{glo_c.html#current_package,@emph{current package}} as an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}. The
@uref{glo_c.html#current_package,@emph{current package}} becomes the
owner (@uref{glo_h.html#home_package,@emph{home package}}) of the
@uref{glo_s.html#symbol,@emph{symbol}}, and the
@uref{glo_s.html#symbol,@emph{symbol}} becomes interned in the
@uref{glo_c.html#current_package,@emph{current package}}. If the name is
later read again while this same
@uref{glo_p.html#package,@emph{package}} is current, the same
@uref{glo_s.html#symbol,@emph{symbol}} will be found and returned.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 235
@subsubsection CLHS: Section 2.3.5
@anchor{#clhs-section-2.3.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-3-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.5 Valid Patterns for Tokens

The valid patterns for @uref{glo_t.html#token,@emph{tokens}} are
summarized in the next figure.

@verbatim
nnnnn              a number                                           
xxxxx              a symbol in the current package                    
:xxxxx             a symbol in the the KEYWORD package                
ppppp:xxxxx        an external symbol in the ppppp package            
ppppp::xxxxx       a (possibly internal) symbol in the ppppp package  
:nnnnn             undefined                                          
ppppp:nnnnn        undefined                                          
ppppp::nnnnn       undefined                                          
::aaaaa            undefined                                          
aaaaa:             undefined                                          
aaaaa:aaaaa:aaaaa  undefined                                          
@end verbatim

@strong{Figure 2-17. Valid patterns for tokens}

Note that @emph{nnnnn} has number syntax, neither @emph{xxxxx} nor
@emph{ppppp} has number syntax, and @emph{aaaaa} has any syntax.

A summary of rules concerning
@uref{glo_p.html#package_marker,@emph{package markers}} follows. In each
case, examples are offered to illustrate the case; for presentational
simplicity, the examples assume that the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@uref{glo_c.html#current_readtable,@emph{current readtable}} is :upcase.

1. If there is a single @uref{glo_p.html#package_marker,@emph{package
marker}}, and it occurs at the beginning of the
@uref{glo_t.html#token,@emph{token}}, then the
@uref{glo_t.html#token,@emph{token}} is interpreted as a
@uref{glo_s.html#symbol,@emph{symbol}} in the KEYWORD package. It also
sets the @uref{acc_symbol-value.html#symbol-value,@strong{symbol-value}}
of the newly-created @uref{glo_s.html#symbol,@emph{symbol}} to that same
@uref{glo_s.html#symbol,@emph{symbol}} so that the
@uref{glo_s.html#symbol,@emph{symbol}} will self-evaluate.

For example, :bar, when read, interns BAR as an
@uref{glo_e.html#external_symbol,@emph{external symbol}} in the KEYWORD
package.

2. If there is a single @uref{glo_p.html#package_marker,@emph{package
marker}} not at the beginning or end of the
@uref{glo_t.html#token,@emph{token}}, then it divides the
@uref{glo_t.html#token,@emph{token}} into two parts. The first part
specifies a @uref{glo_p.html#package,@emph{package}}; the second part is
the name of an @uref{glo_e.html#external_symbol,@emph{external symbol}}
available in that package.

For example, foo:bar, when read, looks up BAR among the
@uref{glo_e.html#external_symbol,@emph{external symbols}} of the
@uref{glo_p.html#package,@emph{package}} named FOO.

3. If there are two adjacent
@uref{glo_p.html#package_marker,@emph{package markers}} not at the
beginning or end of the @uref{glo_t.html#token,@emph{token}}, then they
divide the @uref{glo_t.html#token,@emph{token}} into two parts. The
first part specifies a @uref{glo_p.html#package,@emph{package}}; the
second part is the name of a @uref{glo_s.html#symbol,@emph{symbol}}
within that @uref{glo_p.html#package,@emph{package}} (possibly an
@uref{glo_i.html#internal_symbol,@emph{internal symbol}}).

For example, foo::bar, when read, interns BAR in the
@uref{glo_p.html#package,@emph{package}} named FOO.

4. If the @uref{glo_t.html#token,@emph{token}} contains no
@uref{glo_p.html#package_marker,@emph{package markers}}, and does not
have @uref{glo_p.html#potential_number,@emph{potential number}} syntax,
then the entire @uref{glo_t.html#token,@emph{token}} is the name of the
@uref{glo_s.html#symbol,@emph{symbol}}. The
@uref{glo_s.html#symbol,@emph{symbol}} is looked up in the
@uref{glo_c.html#current_package,@emph{current package}}.

For example, bar, when read, interns BAR in the
@uref{glo_c.html#current_package,@emph{current package}}.

5. The consequences are unspecified if any other pattern of
@uref{glo_p.html#package_marker,@emph{package markers}} in a
@uref{glo_t.html#token,@emph{token}} is used. All other uses of
@uref{glo_p.html#package_marker,@emph{package markers}} within names of
@uref{glo_s.html#symbol,@emph{symbols}} are not defined by this standard
but are reserved for
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
use.

For example, assuming the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@uref{glo_c.html#current_readtable,@emph{current readtable}} is :upcase,
editor:buffer refers to the
@uref{glo_e.html#external_symbol,@emph{external symbol}} named BUFFER
present in the @uref{glo_p.html#package,@emph{package}} named editor,
regardless of whether there is a @uref{glo_s.html#symbol,@emph{symbol}}
named BUFFER in the @uref{glo_c.html#current_package,@emph{current
package}}. If there is no @uref{glo_p.html#package,@emph{package}} named
editor, or if no @uref{glo_s.html#symbol,@emph{symbol}} named BUFFER is
present in editor, or if BUFFER is not exported by editor, the reader
signals a correctable error. If editor::buffer is seen, the effect is
exactly the same as reading buffer with the EDITOR package being the
@uref{glo_c.html#current_package,@emph{current package}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 236
@subsubsection CLHS: Section 2.3.6
@anchor{#clhs-section-2.3.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.3.6 Package System Consistency Rules

The following rules apply to the package system as long as the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stpackagest.html#STpackageST,@strong{*package*}} is not
changed:

@strong{Read-read consistency}

Reading the same @uref{glo_s.html#symbol,@emph{symbol}}
@uref{glo_n.html#name,@emph{name}} always results in the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Print-read consistency}

An @uref{glo_i.html#interned,@emph{interned}}
@uref{glo_s.html#symbol,@emph{symbol}} always prints as a sequence of
characters that, when read back in, yields the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#symbol,@emph{symbol}}.

For information about how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} treats @uref{glo_s.html#symbol,@emph{symbols}}, see
@uref{sec_22-1-3-3.html,Section 22.1.3.3 (Printing Symbols)}.

@strong{Print-print consistency}

If two interned @uref{glo_s.html#symbol,@emph{symbols}} are not the
@uref{glo_s.html#same,@emph{same}}, then their printed representations
will be different sequences of characters.

These rules are true regardless of any implicit interning. As long as
the @uref{glo_c.html#current_package,@emph{current package}} is not
changed, results are reproducible regardless of the order of
@emph{loading} files or the exact history of what
@uref{glo_s.html#symbol,@emph{symbols}} were typed in when. If the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stpackagest.html#STpackageST,@strong{*package*}} is changed
and then changed back to the previous value, consistency is maintained.
The rules can be violated by changing the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stpackagest.html#STpackageST,@strong{*package*}}, forcing a
change to @uref{glo_s.html#symbol,@emph{symbols}} or to
@uref{glo_p.html#package,@emph{packages}} or to both by continuing from
an error, or calling one of the following
@uref{glo_f.html#function,@emph{functions}}:
@uref{fun_unintern.html#unintern,@strong{unintern}},
@uref{fun_unexport.html#unexport,@strong{unexport}},
@uref{fun_shadow.html#shadow,@strong{shadow}},
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}},
or @uref{fun_unuse-package.html#unuse-package,@strong{unuse-package}}.

An inconsistency only applies if one of the restrictions is violated
between two of the named @uref{glo_s.html#symbol,@emph{symbols}}.
@uref{fun_shadow.html#shadow,@strong{shadow}},
@uref{fun_unexport.html#unexport,@strong{unexport}},
@uref{fun_unintern.html#unintern,@strong{unintern}}, and
@uref{fun_shadowing-import.html#shadowing-import,@strong{shadowing-import}}
can only affect the consistency of
@uref{glo_s.html#symbol,@emph{symbols}} with the same
@uref{glo_n.html#name,@emph{names}} (under
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}}) as the
ones supplied as arguments.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 24
@subsection CLHS: Section 2.4
@anchor{#clhs-section-2.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-3-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4 Standard Macro Characters

If the reader encounters a @uref{glo_m.html#macro_character,@emph{macro
character}}, then its associated
@uref{glo_r.html#reader_macro_function,@emph{reader macro function}} is
invoked and may produce an @uref{glo_o.html#object,@emph{object}} to be
returned. This @uref{glo_f.html#function,@emph{function}} may read the
@uref{glo_c.html#character,@emph{characters}} following the
@uref{glo_m.html#macro_character,@emph{macro character}} in the
@uref{glo_s.html#stream,@emph{stream}} in any syntax and return the
@uref{glo_o.html#object,@emph{object}} represented by that syntax.

Any @uref{glo_c.html#character,@emph{character}} can be made to be a
@uref{glo_m.html#macro_character,@emph{macro character}}. The
@uref{glo_m.html#macro_character,@emph{macro characters}} defined
initially in a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} include the following:

@uref{sec_2-4-1.html,}

2.4.1 Left-Parenthesis

@uref{sec_2-4-2.html,}

2.4.2 Right-Parenthesis

@uref{sec_2-4-3.html,}

2.4.3 Single-Quote

@uref{sec_2-4-4.html,}

2.4.4 Semicolon

@uref{sec_2-4-5.html,}

2.4.5 Double-Quote

@uref{sec_2-4-6.html,}

2.4.6 Backquote

@uref{sec_2-4-7.html,}

2.4.7 Comma

@uref{sec_2-4-8.html,}

2.4.8 Sharpsign

@uref{sec_2-4-9.html,}

2.4.9 Re-Reading Abbreviated Expressions

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 242::
* CLHS Section 243::
* CLHS Section 244::
* CLHS Section 245::
* CLHS Section 246::
* CLHS Section 247::
* CLHS Section 248::
* CLHS Section 249::
@end menu

@node CLHS Section 242
@subsubsection CLHS: Section 2.4.2
@anchor{#clhs-section-2.4.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.2 Right-Parenthesis

The @uref{glo_r.html#right-parenthesis,@emph{right-parenthesis}} is
invalid except when used in conjunction with the left parenthesis
character. For more information, see @uref{sec_2-2.html,Section 2.2
(Reader Algorithm)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 243
@subsubsection CLHS: Section 2.4.3
@anchor{#clhs-section-2.4.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.3 Single-Quote

@strong{Syntax:} '<<@emph{exp}>>

A @uref{glo_s.html#single-quote,@emph{single-quote}} introduces an
@uref{glo_e.html#expression,@emph{expression}} to be ``quoted.''
@uref{glo_s.html#single-quote,@emph{Single-quote}} followed by an
@uref{glo_e.html#expression,@emph{expression}} @emph{exp} is treated by
the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} as an abbreviation
for and is parsed identically to the
@uref{glo_e.html#expression,@emph{expression}} (quote @emph{exp}). See
the @uref{glo_s.html#special_operator,@emph{special operator}}
@uref{speope_quote.html#quote,@strong{quote}}.

@uref{sec_2-4-3-1.html,}

2.4.3.1 Examples of Single-Quote

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 244
@subsubsection CLHS: Section 2.4.4
@anchor{#clhs-section-2.4.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4 Semicolon

@strong{Syntax:} ;<<@emph{text}>>

A @uref{glo_s.html#semicolon,@emph{semicolon}} introduces
@uref{glo_c.html#character,@emph{characters}} that are to be ignored,
such as comments. The @uref{glo_s.html#semicolon,@emph{semicolon}} and
all @uref{glo_c.html#character,@emph{characters}} up to and including
the next @uref{glo_n.html#newline,@emph{newline}} or end of file are
ignored.

@uref{sec_2-4-4-1.html,}

2.4.4.1 Examples of Semicolon

@uref{sec_2-4-4-2.html,}

2.4.4.2 Notes about Style for Semicolon

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-4-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4.2 Notes about Style for Semicolon

Some text editors make assumptions about desired indentation based on
the number of @uref{glo_s.html#semicolon,@emph{semicolons}} that begin a
comment. The following style conventions are common, although not by any
means universal.

@uref{sec_2-4-4-2-1.html,}

2.4.4.2.1 Use of Single Semicolon

@uref{sec_2-4-4-2-2.html,}

2.4.4.2.2 Use of Double Semicolon

@uref{sec_2-4-4-2-3.html,}

2.4.4.2.3 Use of Triple Semicolon

@uref{sec_2-4-4-2-4.html,}

2.4.4.2.4 Use of Quadruple Semicolon

@uref{sec_2-4-4-2-5.html,}

2.4.4.2.5 Examples of Style for Semicolon

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.4.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-4-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4.2.2 Use of Double Semicolon

Comments that begin with a double
@uref{glo_s.html#semicolon,@emph{semicolon}} are all aligned to the same
level of indentation as a @uref{glo_f.html#form,@emph{form}} would be at
that same position in the @uref{glo_c.html#code,@emph{code}}. The text
of such a comment usually describes the state of the
@uref{glo_p.html#program,@emph{program}} at the point where the comment
occurs, the @uref{glo_c.html#code,@emph{code}} which follows the
comment, or both.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.4.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-4-2-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4.2.3 Use of Triple Semicolon

Comments that begin with a triple
@uref{glo_s.html#semicolon,@emph{semicolon}} are all aligned to the left
margin. Usually they are used prior to a definition or set of
definitions, rather than within a definition.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.4.2.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-4-2-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4.2.4 Use of Quadruple Semicolon

Comments that begin with a quadruple
@uref{glo_s.html#semicolon,@emph{semicolon}} are all aligned to the left
margin, and generally contain only a short piece of text that serve as a
title for the code which follows, and might be used in the header or
footer of a program that prepares code for presentation as a hardcopy
document.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.4.2.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-2-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.4.2.5 Examples of Style for Semicolon

@verbatim
;;;; Math Utilities

;;; FIB computes the the Fibonacci function in the traditional
;;; recursive way.

(defun fib (n)
  (check-type n integer)
  ;; At this point we're sure we have an integer argument.
  ;; Now we can get down to some serious computation.
  (cond ((< n 0)
         ;; Hey, this is just supposed to be a simple example.
         ;; Did you really expect me to handle the general case?
         (error "FIB got ~D as an argument." n))
        ((< n 2) n)             ;fib[0]=0 and fib[1]=1
        ;; The cheap cases didn't work.
        ;; Nothing more to do but recurse.
        (t (+ (fib (- n 1))     ;The traditional formula
              (fib (- n 2)))))) ; is fib[n-1]+fib[n-2].
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 245
@subsubsection CLHS: Section 2.4.5
@anchor{#clhs-section-2.4.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-4-2-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.5 Double-Quote

@strong{Syntax:} "<<@emph{text}>>"

The @uref{glo_d.html#double-quote,@emph{double-quote}} is used to begin
and end a @uref{glo_s.html#string,@emph{string}}. When a
@uref{glo_d.html#double-quote,@emph{double-quote}} is encountered,
@uref{glo_c.html#character,@emph{characters}} are read from the
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} and accumulated until another
@uref{glo_d.html#double-quote,@emph{double-quote}} is encountered. If a
@uref{glo_s.html#single_escape,@emph{single escape}}
@uref{glo_c.html#character,@emph{character}} is seen, the
@uref{glo_s.html#single_escape,@emph{single escape}}
@uref{glo_c.html#character,@emph{character}} is discarded, the next
@uref{glo_c.html#character,@emph{character}} is accumulated, and
accumulation continues. The accumulated
@uref{glo_c.html#character,@emph{characters}} up to but not including
the matching @uref{glo_d.html#double-quote,@emph{double-quote}} are made
into a @uref{glo_s.html#simple_string,@emph{simple string}} and
returned. It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
which @uref{glo_a.html#attribute,@emph{attributes}} of the accumulated
characters are removed in this process.

Examples of the use of the
@uref{glo_d.html#double-quote,@emph{double-quote}} character are in the
next figure.

@verbatim
"Foo"                      ;A string with three characters in it  
""                         ;An empty string                       
"\"APL\\360?\" he cried."  ;A string with twenty characters       
"|x| = |-x|"               ;A ten-character string                
@end verbatim

@strong{Figure 2-18. Examples of the use of double-quote}

Note that to place a single escape character or a
@uref{glo_d.html#double-quote,@emph{double-quote}} into a string, such a
character must be preceded by a single escape character. Note, too, that
a multiple escape character need not be quoted by a single escape
character within a string.

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_s.html#string,@emph{strings}}, see
@uref{sec_22-1-3-4.html,Section 22.1.3.4 (Printing Strings)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss027.html,CHARACTER-PROPOSAL:2-1-1}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 246
@subsubsection CLHS: Section 2.4.6
@anchor{#clhs-section-2.4.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.6 Backquote

The @uref{glo_b.html#backquote,@emph{backquote}} introduces a template
of a data structure to be built. For example, writing

@verbatim
 `(cond ((numberp ,x) ,@y) (t (print ,x) ,@y))
@end verbatim

is roughly equivalent to writing

@verbatim
 (list 'cond 
       (cons (list 'numberp x) y) 
       (list* 't (list 'print x) y))
@end verbatim

Where a comma occurs in the template, the
@uref{glo_e.html#expression,@emph{expression}} following the comma is to
be evaluated to produce an @uref{glo_o.html#object,@emph{object}} to be
inserted at that point. Assume b has the value 3, for example, then
evaluating the @uref{glo_f.html#form,@emph{form}} denoted by `(a b ,b
,(+ b 1) b) produces the result (a b 3 4 b).

If a comma is immediately followed by an
@uref{glo_a.html#at-sign,@emph{at-sign}}, then the
@uref{glo_f.html#form,@emph{form}} following the
@uref{glo_a.html#at-sign,@emph{at-sign}} is evaluated to produce a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_o.html#object,@emph{objects}}. These
@uref{glo_o.html#object,@emph{objects}} are then ``spliced'' into place
in the template. For example, if x has the value (a b c), then

@verbatim
 `(x ,x ,@x foo ,(cadr x) bar ,(cdr x) baz ,@(cdr x))
=>  (x (a b c) a b c foo b bar (b c) baz b c)
@end verbatim

The backquote syntax can be summarized formally as follows.

* `@emph{basic} is the same as '@emph{basic}, that is, (quote
@emph{basic}), for any @uref{glo_e.html#expression,@emph{expression}}
@emph{basic} that is not a @uref{glo_l.html#list,@emph{list}} or a
general @uref{glo_v.html#vector,@emph{vector}}.

* `,@emph{form} is the same as @emph{form}, for any @emph{form},
provided that the representation of @emph{form} does not begin with
@uref{glo_a.html#at-sign,@emph{at-sign}} or
@uref{glo_d.html#dot,@emph{dot}}. (A similar caveat holds for all
occurrences of a form after a @uref{glo_c.html#comma,@emph{comma}}.)

* `,@@@emph{form} has undefined consequences.

* `(x1 x2 x3 ... xn . atom) may be interpreted to mean

@verbatim
 (append [ x1] [ x2] [ x3] ... [ xn] (quote atom))
@end verbatim

where the brackets are used to indicate a transformation of an @emph{xj}
as follows:

-- [@emph{form}] is interpreted as (list `@emph{form}), which contains a
backquoted form that must then be further interpreted.

-- [,@emph{form}] is interpreted as (list @emph{form}).

-- [,@@@emph{form}] is interpreted as @emph{form}.

* `(x1 x2 x3 ... xn) may be interpreted to mean the same as the
backquoted form `(x1 x2 x3 ... xn .
@uref{any_nil.html#nil,@strong{nil}}), thereby reducing it to the
previous case.

* `(x1 x2 x3 ... xn . ,form) may be interpreted to mean

@verbatim
 (append [ x1] [ x2] [ x3] ... [ xn] form)
@end verbatim

where the brackets indicate a transformation of an xj as described
above.

* `(x1 x2 x3 ... xn . ,@@form) has undefined consequences.

* `#(x1 x2 x3 ... xn) may be interpreted to mean (apply #'vector `(x1 x2
x3 ... xn)).

Anywhere ``,@@'' may be used, the syntax ``,.'' may be used instead to
indicate that it is permissible to operate @emph{destructively} on the
@uref{glo_l.html#list_structure,@emph{list structure}} produced by the
form following the ``,.'' (in effect, to use
@uref{fun_nconc.html#nconc,@strong{nconc}} instead of
@uref{fun_append.html#append,@strong{append}}).

If the backquote syntax is nested, the innermost backquoted form should
be expanded first. This means that if several commas occur in a row, the
leftmost one belongs to the innermost
@uref{glo_b.html#backquote,@emph{backquote}}.

An @uref{glo_i.html#implementation,@emph{implementation}} is free to
interpret a backquoted @uref{glo_f.html#form,@emph{form}} F1 as any
@uref{glo_f.html#form,@emph{form}} F2 that, when evaluated, will produce
a result that is the @uref{glo_s.html#same,@emph{same}} under
@uref{fun_equal.html#equal,@strong{equal}} as the result implied by the
above definition, provided that the side-effect behavior of the
substitute @uref{glo_f.html#form,@emph{form}} F2 is also consistent with
the description given above. The constructed copy of the template might
or might not share @uref{glo_l.html#list,@emph{list}} structure with the
template itself. As an example, the above definition implies that

@verbatim
 `((,a b) ,c ,@d)
@end verbatim

will be interpreted as if it were

@verbatim
 (append (list (append (list a) (list 'b) 'nil)) (list c) d 'nil)
@end verbatim

but it could also be legitimately interpreted to mean any of the
following:

@verbatim
 (append (list (append (list a) (list 'b))) (list c) d)
 (append (list (append (list a) '(b))) (list c) d)
 (list* (cons a '(b)) c d)
 (list* (cons a (list 'b)) c d)
 (append (list (cons a '(b))) (list c) d)
 (list* (cons a '(b)) c (copy-list d))
@end verbatim

@uref{sec_2-4-6-1.html,}

2.4.6.1 Notes about Backquote

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 247
@subsubsection CLHS: Section 2.4.7
@anchor{#clhs-section-2.4.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-6-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.7 Comma

The @uref{glo_c.html#comma,@emph{comma}} is part of the backquote
syntax; see @uref{sec_2-4-6.html,Section 2.4.6 (Backquote)}.
@uref{glo_c.html#comma,@emph{Comma}} is invalid if used other than
inside the body of a backquote
@uref{glo_e.html#expression,@emph{expression}} as described above.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 248
@subsubsection CLHS: Section 2.4.8
@anchor{#clhs-section-2.4.8}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8 Sharpsign

@uref{glo_s.html#sharpsign,@emph{Sharpsign}} is a
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}}. It reads an optional sequence of digits and then one more
character, and uses that character to select a
@uref{glo_f.html#function,@emph{function}} to run as a
@uref{glo_r.html#reader_macro_function,@emph{reader macro function}}.

The @uref{glo_s.html#standard_syntax,@emph{standard syntax}} includes
constructs introduced by the # character. The syntax of these constructs
is as follows: a character that identifies the type of construct is
followed by arguments in some form. If the character is a letter, its
@uref{glo_c.html#case,@emph{case}} is not important; #O and #o are
considered to be equivalent, for example.

Certain # constructs allow an unsigned decimal number to appear between
the # and the character.

The @uref{glo_r.html#reader_macro,@emph{reader macros}} associated with
the @uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} # are described later in this section and summarized in the
next figure.

@verbatim
dispatch char  purpose                  dispatch char  purpose                
Backspace      signals error            {              undefined*             
Tab            signals error            }              undefined*             
Newline        signals error            +              read-time conditional  
Linefeed       signals error            -              read-time conditional  
Page           signals error            .              read-time evaluation   
Return         signals error            /              undefined              
Space          signals error            A, a           array                  
!              undefined*               B, b           binary rational        
"              undefined                C, c           complex number         
#              reference to = label     D, d           undefined              
$              undefined                E, e           undefined              
%              undefined                F, f           undefined              
&              undefined                G, g           undefined              
'              function abbreviation    H, h           undefined              
(              simple vector            I, i           undefined              
)              signals error            J, j           undefined              
*              bit vector               K, k           undefined              
,              undefined                L, l           undefined              
:              uninterned symbol        M, m           undefined              
;              undefined                N, n           undefined              
<              signals error            O, o           octal rational         
=              labels following object  P, p           pathname               
>              undefined                Q, q           undefined              
?              undefined*               R, r           radix-n rational       
@              undefined                S, s           structure              
[              undefined*               T, t           undefined              
\              character object         U, u           undefined              
]              undefined*               V, v           undefined              
^              undefined                W, w           undefined              
_              undefined                X, x           hexadecimal rational   
`              undefined                Y, y           undefined              
|              balanced comment         Z, z           undefined              
~              undefined                Rubout         undefined              
@end verbatim

@strong{Figure 2-19. Standard #Dispatching Macro Character Syntax}

The combinations marked by an asterisk (*) are explicitly reserved to
the user. No @uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} defines them.

Note also that @uref{glo_d.html#digit,@emph{digits}} do not appear in
the preceding table. This is because the notations #0, #1, ..., #9 are
reserved for another purpose which occupies the same syntactic space.
When a @uref{glo_d.html#digit,@emph{digit}} follows a
@uref{glo_s.html#sharpsign,@emph{sharpsign}}, it is not treated as a
dispatch character. Instead, an unsigned integer argument is accumulated
and passed as an @uref{glo_a.html#argument,@emph{argument}} to the
@uref{glo_r.html#reader_macro,@emph{reader macro}} for the
@uref{glo_c.html#character,@emph{character}} that follows the digits.
For example, #2A((1 2) (3 4)) is a use of #A with an argument of 2.

@uref{sec_2-4-8-1.html,}

2.4.8.1 Sharpsign Backslash

@uref{sec_2-4-8-2.html,}

2.4.8.2 Sharpsign Single-Quote

@uref{sec_2-4-8-3.html,}

2.4.8.3 Sharpsign Left-Parenthesis

@uref{sec_2-4-8-4.html,}

2.4.8.4 Sharpsign Asterisk

@uref{sec_2-4-8-5.html,}

2.4.8.5 Sharpsign Colon

@uref{sec_2-4-8-6.html,}

2.4.8.6 Sharpsign Dot

@uref{sec_2-4-8-7.html,}

2.4.8.7 Sharpsign B

@uref{sec_2-4-8-8.html,}

2.4.8.8 Sharpsign O

@uref{sec_2-4-8-9.html,}

2.4.8.9 Sharpsign X

@uref{sec_2-4-8-10.html,}

2.4.8.10 Sharpsign R

@uref{sec_2-4-8-11.html,}

2.4.8.11 Sharpsign C

@uref{sec_2-4-8-12.html,}

2.4.8.12 Sharpsign A

@uref{sec_2-4-8-13.html,}

2.4.8.13 Sharpsign S

@uref{sec_2-4-8-14.html,}

2.4.8.14 Sharpsign P

@uref{sec_2-4-8-15.html,}

2.4.8.15 Sharpsign Equal-Sign

@uref{sec_2-4-8-16.html,}

2.4.8.16 Sharpsign Sharpsign

@uref{sec_2-4-8-17.html,}

2.4.8.17 Sharpsign Plus

@uref{sec_2-4-8-18.html,}

2.4.8.18 Sharpsign Minus

@uref{sec_2-4-8-19.html,}

2.4.8.19 Sharpsign Vertical-Bar

@uref{sec_2-4-8-20.html,}

2.4.8.20 Sharpsign Less-Than-Sign

@uref{sec_2-4-8-21.html,}

2.4.8.21 Sharpsign Whitespace

@uref{sec_2-4-8-22.html,}

2.4.8.22 Sharpsign Right-Parenthesis

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss315.html,SHARP-COMMA-CONFUSION:REMOVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.10
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-11.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.10 Sharpsign R

#@emph{n}R

#@emph{radix}R@emph{rational} reads @emph{rational} in radix
@emph{radix}. @emph{radix} must consist of only digits that are
interpreted as an @uref{glo_i.html#integer,@emph{integer}} in decimal
radix; its value must be between 2 and 36 (inclusive). Only valid digits
for the specified radix may be used.

For example, #3r102 is another way of writing 11 (decimal), and #11R32
is another way of writing 35 (decimal). For radices larger than 10,
letters of the alphabet are used in order for the digits after 9. No
alternate # notation exists for the decimal radix since a decimal point
suffices.

The next figure contains examples of the use of #B, #O, #X, and #R.

@verbatim
#2r11010101  ;Another way of writing 213 decimal  
#b11010101   ;Ditto                               
#b+11010101  ;Ditto                               
#o325        ;Ditto, in octal radix               
#xD5         ;Ditto, in hexadecimal radix         
#16r+D5      ;Ditto                               
#o-300       ;Decimal -192, written in base 8     
#3r-21010    ;Same thing in base 3                
#25R-7H      ;Same thing in base 25               
#xACCEDED    ;181202413, in hexadecimal radix     
@end verbatim

@strong{Figure 2-20. Radix Indicator Example}

The consequences are undefined if the token immediately following the
#@emph{n}R does not have the syntax of a
@uref{glo_r.html#rational,@emph{rational}} in radix @emph{n}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss316.html,SHARP-O-FOOBAR:CONSEQUENCES-UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.11
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-10.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-12.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.11 Sharpsign C

#C reads a following @uref{glo_o.html#object,@emph{object}}, which must
be a @uref{glo_l.html#list,@emph{list}} of length two whose
@uref{glo_e.html#element,@emph{elements}} are both @emph{reals}. These
@emph{reals} denote, respectively, the real and imaginary parts of a
@uref{glo_c.html#complex,@emph{complex}} number. If the two parts as
notated are not of the same data type, then they are converted according
to the rules of floating-point
@uref{glo_c.html#contagion,@emph{contagion}} described in
@uref{sec_12-1-1-2.html,Section 12.1.1.2 (Contagion in Numeric
Operations)}.

#C(@emph{real} @emph{imag}) is equivalent to #.(complex (quote
@emph{real}) (quote @emph{imag})), except that #C is not affected by
@uref{var_stread-evalst.html#STread-evalST,@strong{*read-eval*}}. See
the @uref{glo_f.html#function,@emph{function}}
@uref{fun_complex.html#complex,@strong{complex}}.

The next figure contains examples of the use of #C.

@verbatim
#C(3.0s1 2.0s-1)  ;A complex with small float parts.                
#C(5 -3)          ;A ``Gaussian integer''                           
#C(5/3 7.0)       ;Will be converted internally to #C(1.66666 7.0)  
#C(0 1)           ;The imaginary unit; that is, i.                  
@end verbatim

@strong{Figure 2-21. Complex Number Example}

For further information, see @uref{sec_22-1-3-1-4.html,Section
22.1.3.1.4 (Printing Complexes)} and @uref{sec_2-3-2-3.html,Section
2.3.2.3 (Syntax of a Complex)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss288.html,READ-SUPPRESS-CONFUSING:GENERALIZE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.12
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-11.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-13.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.12 Sharpsign A

#@emph{n}A

#@emph{n}A@emph{object} constructs an @emph{n}-dimensional
@uref{glo_a.html#array,@emph{array}}, using @emph{object} as the value
of the :initial-contents argument to
@uref{fun_make-array.html#make-array,@strong{make-array}}.

For example, #2A((0 1 5) (foo 2 (hot dog))) represents a 2-by-3 matrix:

@verbatim
 0       1       5
 foo     2       (hot dog)
@end verbatim

In contrast, #1A((0 1 5) (foo 2 (hot dog))) represents a
@uref{glo_v.html#vector,@emph{vector}} of
@uref{glo_l.html#length,@emph{length}} 2 whose
@uref{glo_e.html#element,@emph{elements}} are
@uref{glo_l.html#list,@emph{lists}}:

@verbatim
 (0 1 5) (foo 2 (hot dog))
@end verbatim

#0A((0 1 5) (foo 2 (hot dog))) represents a zero-dimensional
@uref{glo_a.html#array,@emph{array}} whose sole element is a
@uref{glo_l.html#list,@emph{list}}:

@verbatim
 ((0 1 5) (foo 2 (hot dog)))
@end verbatim

#0A foo represents a zero-dimensional
@uref{glo_a.html#array,@emph{array}} whose sole element is the
@uref{glo_s.html#symbol,@emph{symbol}} foo. The notation #1A foo is not
valid because foo is not a @uref{glo_s.html#sequence,@emph{sequence}}.

If some @uref{glo_d.html#dimension,@emph{dimension}} of the
@uref{glo_a.html#array,@emph{array}} whose representation is being
parsed is found to be 0, all
@uref{glo_d.html#dimension,@emph{dimensions}} to the right (i.e., the
higher numbered @uref{glo_d.html#dimension,@emph{dimensions}}) are also
considered to be 0.

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_a.html#array,@emph{arrays}}, see
@uref{sec_22-1-3-4.html,Section 22.1.3.4 (Printing Strings)},
@uref{sec_22-1-3-6.html,Section 22.1.3.6 (Printing Bit Vectors)},
@uref{sec_22-1-3-7.html,Section 22.1.3.7 (Printing Other Vectors)}, or
@uref{sec_22-1-3-8.html,Section 22.1.3.8 (Printing Other Arrays)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.13
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-12.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-14.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.13 Sharpsign S

#s(name slot1 value1 slot2 value2 ...) denotes a
@uref{glo_s.html#structure,@emph{structure}}. This is valid only if
@emph{name} is the name of a
@uref{glo_s.html#structure,@emph{structure}}
@uref{glo_t.html#type,@emph{type}} already defined by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} and if the
@uref{glo_s.html#structure,@emph{structure}}
@uref{glo_t.html#type,@emph{type}} has a standard constructor function.
Let @emph{cm} stand for the name of this constructor function; then this
syntax is equivalent to

@verbatim
 #.(cm keyword1 'value1 keyword2 'value2 ...)
@end verbatim

where each @emph{keywordj} is the result of computing

@verbatim
 (intern (string slotj) (find-package 'keyword))
@end verbatim

The net effect is that the constructor function is called with the
specified slots having the specified values. (This coercion feature is
deprecated; in the future, keyword names will be taken in the package
they are read in, so @uref{glo_s.html#symbol,@emph{symbols}} that are
actually in the KEYWORD package should be used if that is what is
desired.)

Whatever @uref{glo_o.html#object,@emph{object}} the constructor function
returns is returned by the #S syntax.

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_s.html#structure,@emph{structures}}, see
@uref{sec_22-1-3-12.html,Section 22.1.3.12 (Printing Structures)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss331.html,STRUCTURE-READ-PRINT-SYNTAX:KEYWORDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.14
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-13.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-15.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.14 Sharpsign P

#P reads a following @uref{glo_o.html#object,@emph{object}}, which must
be a @uref{glo_s.html#string,@emph{string}}.

#P<<@emph{expression}>> is equivalent to #.(parse-namestring
'<<@emph{expression}>>), except that #P is not affected by
@uref{var_stread-evalst.html#STread-evalST,@strong{*read-eval*}}.

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_p.html#pathname,@emph{pathnames}}, see
@uref{sec_22-1-3-11.html,Section 22.1.3.11 (Printing Pathnames)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss260.html,PATHNAME-PRINT-READ:SHARPSIGN-P}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.15
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-14.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-16.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.15 Sharpsign Equal-Sign

#@emph{n}=

#@emph{n}=@emph{object} reads as whatever
@uref{glo_o.html#object,@emph{object}} has @emph{object} as its printed
representation. However, that @uref{glo_o.html#object,@emph{object}} is
labeled by @emph{n}, a required unsigned decimal integer, for possible
reference by the syntax #@emph{n}#. The scope of the label is the
@uref{glo_e.html#expression,@emph{expression}} being read by the
outermost call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}; within this
@uref{glo_e.html#expression,@emph{expression}}, the same label may not
appear twice.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.16
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-15.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-17.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.16 Sharpsign Sharpsign

#@emph{n}#

#@emph{n}#, where @emph{n} is a required unsigned decimal
@uref{glo_i.html#integer,@emph{integer}}, provides a reference to some
@uref{glo_o.html#object,@emph{object}} labeled by #@emph{n}=; that is,
#@emph{n}# represents a pointer to the same
(@uref{fun_eq.html#eq,@strong{eq}})
@uref{glo_o.html#object,@emph{object}} labeled by #@emph{n}=. For
example, a structure created in the variable y by this code:

@verbatim
 (setq x (list 'p 'q))
 (setq y (list (list 'a 'b) x 'foo x))
 (rplacd (last y) (cdr y))
@end verbatim

could be represented in this way:

@verbatim
 ((a b) . #1=(#2=(p q) foo #2# . #1#))
@end verbatim

Without this notation, but with
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
set to 10 and
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
set to @uref{any_nil.html#nil,@strong{nil}}, the structure would print
in this way:

@verbatim
 ((a b) (p q) foo (p q) (p q) foo (p q) (p q) foo (p q) ...)
@end verbatim

A reference #@emph{n}# may only occur after a label #@emph{n}=; forward
references are not permitted. The reference may not appear as the
labeled object itself (that is, #@emph{n}=#@emph{n}#) may not be written
because the @uref{glo_o.html#object,@emph{object}} labeled by #@emph{n}=
is not well defined in this case.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.17
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-16.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-18.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.17 Sharpsign Plus

#+ provides a read-time conditionalization facility; the syntax is
#+@emph{test} @emph{expression}. If the
@uref{glo_f.html#feature_expression,@emph{feature expression}}
@emph{test} succeeds, then this textual notation represents an
@uref{glo_o.html#object,@emph{object}} whose printed representation is
@emph{expression}. If the
@uref{glo_f.html#feature_expression,@emph{feature expression}}
@emph{test} fails, then this textual notation is treated as
@uref{glo_w.html#whitespace,@emph{whitespace}}[2]; that is, it is as if
the ``#+ @emph{test} @emph{expression}'' did not appear and only a
@uref{glo_s.html#space,@emph{space}} appeared in its place.

For a detailed description of success and failure in
@uref{glo_f.html#feature_expression,@emph{feature expressions}}, see
@uref{sec_24-1-2-1.html,Section 24.1.2.1 (Feature Expressions)}.

#+ operates by first reading the
@uref{glo_f.html#feature_expression,@emph{feature expression}} and then
skipping over the @emph{form} if the
@uref{glo_f.html#feature_expression,@emph{feature expression}} fails.
While reading the @emph{test}, the
@uref{glo_c.html#current_package,@emph{current package}} is the KEYWORD
package. Skipping over the @emph{form} is accomplished by
@uref{glo_b.html#binding,@emph{binding}}
@uref{var_stread-suppressst.html#STread-suppressST,@strong{*read-suppress*}}
to @uref{glo_t.html#true,@emph{true}} and then calling
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}.

For examples, see @uref{sec_24-1-2-1-1.html,Section 24.1.2.1.1 (Examples
of Feature Expressions)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss318.html,SHARPSIGN-PLUS-MINUS-PACKAGE:KEYWORD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.18
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-17.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-19.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.18 Sharpsign Minus

#- is like #+ except that it skips the @emph{expression} if the
@emph{test} succeeds; that is,

@verbatim
#-test expression ==  #+(not test) expression
@end verbatim

For examples, see @uref{sec_24-1-2-1-1.html,Section 24.1.2.1.1 (Examples
of Feature Expressions)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.19
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-18.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-19-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.19 Sharpsign Vertical-Bar

#|...|# is treated as a comment by the reader. It must be balanced with
respect to other occurrences of #| and |#, but otherwise may contain any
characters whatsoever.

@uref{sec_2-4-8-19-1.html,}

2.4.8.19.1 Examples of Sharpsign Vertical-Bar

@uref{sec_2-4-8-19-2.html,}

2.4.8.19.2 Notes about Style for Sharpsign Vertical-Bar

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.19.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-19-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8-19.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-20.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.19.2 Notes about Style for Sharpsign Vertical-Bar

Some text editors that purport to understand Lisp syntax treat any |...|
as balanced pairs that cannot nest (as if they were just balanced pairs
of the multiple escapes used in notating certain symbols). To compensate
for this deficiency, some programmers use the notation
#||...#||...||#...||# instead of #|...#|...|#...|#. Note that this
alternate usage is not a different
@uref{glo_r.html#reader_macro,@emph{reader macro}}; it merely exploits
the fact that the additional vertical-bars occur within the comment in a
way that tricks certain text editor into better supporting nested
comments. As such, one might sometimes see code like:

@verbatim
 #|| (+ #|| 3 ||# 4 5) ||# 
@end verbatim

Such code is equivalent to:

@verbatim
 #| (+ #| 3 |# 4 5) |#
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.2 Sharpsign Single-Quote

Any @emph{expression} preceded by #'
(@uref{glo_s.html#sharpsign,@emph{sharpsign}} followed by
@uref{glo_s.html#single-quote,@emph{single-quote}}), as in
#'@emph{expression}, is treated by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} as an abbreviation for
and parsed identically to the
@uref{glo_e.html#expression,@emph{expression}} (function
@emph{expression}). See
@uref{speope_function.html#function,@strong{function}}. For example,

@verbatim
(apply #'+ l) ==  (apply (function +) l)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.20
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-19-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-21.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.20 Sharpsign Less-Than-Sign

#< is not valid reader syntax. The
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} will signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} on
encountering #<. This syntax is typically used in the printed
representation of @uref{glo_o.html#object,@emph{objects}} that cannot be
read back in.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss255.html,PARSE-ERROR-STREAM:SPLIT-TYPES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.21
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-20.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-22.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.21 Sharpsign Whitespace

# followed immediately by
@uref{glo_w.html#whitespace,@emph{whitespace}}[1] is not valid reader
syntax. The @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} will signal
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} if it
encounters the reader macro notation #<Newline> or #<Space>.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.22
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-21.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.22 Sharpsign Right-Parenthesis

This is not valid reader syntax.

The @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} will signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} upon
encountering #).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss255.html,PARSE-ERROR-STREAM:SPLIT-TYPES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.3 Sharpsign Left-Parenthesis

#( and ) are used to notate a
@uref{glo_s.html#simple_vector,@emph{simple vector}}.

If an unsigned decimal integer appears between the # and (, it specifies
explicitly the length of the @uref{glo_v.html#vector,@emph{vector}}. The
consequences are undefined if the number of
@uref{glo_o.html#object,@emph{objects}} specified before the closing )
exceeds the unsigned decimal integer. If the number of
@uref{glo_o.html#object,@emph{objects}} supplied before the closing ) is
less than the unsigned decimal integer but greater than zero, the last
@uref{glo_o.html#object,@emph{object}} is used to fill all remaining
elements of the @uref{glo_v.html#vector,@emph{vector}}. The consequences
are undefined if the unsigned decimal integer is non-zero and number of
@uref{glo_o.html#object,@emph{objects}} supplied before the closing ) is
zero. For example,

@verbatim
 #(a b c c c c)
 #6(a b c c c c)
 #6(a b c)
 #6(a b c c)
@end verbatim

all mean the same thing: a @uref{glo_v.html#vector,@emph{vector}} of
length 6 with @uref{glo_e.html#element,@emph{elements}} a, b, and four
occurrences of c. Other examples follow:

@verbatim
 #(a b c)               ;A vector of length 3
 #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47)
                        ;A vector containing the primes below 50
 #()                    ;An empty vector
@end verbatim

The notation #() denotes an empty
@uref{glo_v.html#vector,@emph{vector}}, as does #0().

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_v.html#vector,@emph{vectors}}, see
@uref{sec_22-1-3-4.html,Section 22.1.3.4 (Printing Strings)},
@uref{sec_22-1-3-6.html,Section 22.1.3.6 (Printing Bit Vectors)}, or
@uref{sec_22-1-3-7.html,Section 22.1.3.7 (Printing Other Vectors)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.4 Sharpsign Asterisk

@strong{Syntax:} #*<<@emph{bits}>>

A @uref{glo_s.html#simple_bit_vector,@emph{simple bit vector}} is
constructed containing the indicated @uref{glo_b.html#bit,@emph{bits}}
(0's and 1's), where the leftmost @emph{bit} has index zero and the
subsequent @emph{bits} have increasing indices.

@strong{Syntax:} #<<@emph{n}>>*<<@emph{bits}>>

With an argument @emph{n}, the @uref{glo_v.html#vector,@emph{vector}} to
be created is of @uref{glo_l.html#length,@emph{length}} @emph{n}. If the
number of @emph{bits} is less than @emph{n} but greater than zero, the
last bit is used to fill all remaining bits of the
@uref{glo_b.html#bit_vector,@emph{bit vector}}.

The notations #* and #0* each denote an empty
@uref{glo_b.html#bit_vector,@emph{bit vector}}.

Regardless of whether the optional numeric argument @emph{n} is
provided, the @uref{glo_t.html#token,@emph{token}} that follows the
@uref{glo_a.html#asterisk,@emph{asterisk}} is delimited by a normal
@uref{glo_t.html#token,@emph{token}} delimiter. However, (unless the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stread-suppressst.html#STread-suppressST,@strong{*read-suppress*}}
is @uref{glo_t.html#true,@emph{true}}) an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled if that @uref{glo_t.html#token,@emph{token}} is not composed
entirely of 0's and 1's, or if @emph{n} was supplied and the
@uref{glo_t.html#token,@emph{token}} is composed of more than @emph{n}
@emph{bits}, or if @emph{n} is greater than one, but no @emph{bits} were
specified. Neither a @uref{glo_s.html#single_escape,@emph{single
escape}} nor a @uref{glo_m.html#multiple_escape,@emph{multiple escape}}
is permitted in this @uref{glo_t.html#token,@emph{token}}.

For information on how the @uref{glo_l.html#lisp_printer,@emph{Lisp
printer}} prints @uref{glo_b.html#bit_vector,@emph{bit vectors}}, see
@uref{sec_22-1-3-6.html,Section 22.1.3.6 (Printing Bit Vectors)}.

@uref{sec_2-4-8-4-1.html,}

2.4.8.4.1 Examples of Sharpsign Asterisk

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss317.html,SHARP-STAR-DELIMITER:NORMAL-DELIMITER}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.5 Sharpsign Colon

@strong{Syntax:} #:<<@emph{symbol-name}>>

#: introduces an @uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}} whose
@uref{glo_n.html#name,@emph{name}} is @emph{symbol-name}. Every time
this syntax is encountered, a @uref{glo_d.html#distinct,@emph{distinct}}
@uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}} is created. The
@emph{symbol-name} must have the syntax of a
@uref{glo_s.html#symbol,@emph{symbol}} with no
@uref{glo_p.html#package_prefix,@emph{package prefix}}.

For information on how the @uref{glo_l.html#lisp_reader,@emph{Lisp
reader}} prints @uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbols}}, see
@uref{sec_22-1-3-3.html,Section 22.1.3.3 (Printing Symbols)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.6
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.6 Sharpsign Dot

#.@emph{foo} is read as the @uref{glo_o.html#object,@emph{object}}
resulting from the evaluation of the
@uref{glo_o.html#object,@emph{object}} represented by @emph{foo}. The
evaluation is done during the
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} process, when
the #. notation is encountered. The #. syntax therefore performs a
read-time evaluation of @emph{foo}.

The normal effect of #. is inhibited when the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stread-evalst.html#STread-evalST,@strong{*read-eval*}} is
@uref{glo_f.html#false,@emph{false}}. In that situation, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} is
signaled.

For an @uref{glo_o.html#object,@emph{object}} that does not have a
convenient printed representation, a @uref{glo_f.html#form,@emph{form}}
that computes the @uref{glo_o.html#object,@emph{object}} can be given
using the #. notation.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss315.html,SHARP-COMMA-CONFUSION:REMOVE}
@item
@uref{../Issues/iss255.html,PARSE-ERROR-STREAM:SPLIT-TYPES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.7
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.7 Sharpsign B

#B@emph{rational} reads @emph{rational} in binary (radix 2). For
example,

@verbatim
 #B1101 ==  13 ;11012
 #b101/11 ==  5/3
@end verbatim

The consequences are undefined if the token immediately following the #B
does not have the syntax of a binary (i.e., radix 2)
@uref{glo_r.html#rational,@emph{rational}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss316.html,SHARP-O-FOOBAR:CONSEQUENCES-UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.8
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.8 Sharpsign O

#O@emph{rational} reads @emph{rational} in octal (radix 8). For example,

@verbatim
 #o37/15 ==  31/13
 #o777 ==  511
 #o105 ==  69 ;1058
@end verbatim

The consequences are undefined if the token immediately following the #O
does not have the syntax of an octal (i.e., radix 8)
@uref{glo_r.html#rational,@emph{rational}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss316.html,SHARP-O-FOOBAR:CONSEQUENCES-UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 2.4.8.9
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-8.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_2-4-8-10.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.8.9 Sharpsign X

#X@emph{rational} reads @emph{rational} in hexadecimal (radix 16). The
digits above 9 are the letters A through F (the lowercase letters a
through f are also acceptable). For example,

@verbatim
 #xF00 ==  3840             
 #x105 ==  261 ;10516
@end verbatim

The consequences are undefined if the token immediately following the #X
does not have the syntax of a hexadecimal (i.e., radix 16)
@uref{glo_r.html#rational,@emph{rational}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss316.html,SHARP-O-FOOBAR:CONSEQUENCES-UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 249
@subsubsection CLHS: Section 2.4.9
@anchor{#clhs-section-2.4.9}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-8-22.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
2.4.9 Re-Reading Abbreviated Expressions

Note that the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} will
generally signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}} when
reading an @uref{glo_e.html#expression,@emph{expression}}[2] that has
been abbreviated because of length or level limits (see
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
and
@uref{var_stprint-linesst.html#STprint-linesST,@strong{*print-lines*}})
due to restrictions on ``..'', ``...'', ``#'' followed by
@uref{glo_w.html#whitespace,@emph{whitespace}}[1], and ``#)''.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 20
@section CLHS: Chapter 20
@anchor{#clhs-chapter-20}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_merge-pathnames.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_20-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
20. Files

@uref{sec_20-1.html,}

20.1 File System Concepts

@uref{sec_the_files_dictionary.html,}

20.2 The Files Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Files Dictionary::
@end menu

@node CLHS Section The Files Dictionary
@subsection CLHS: Section The Files Dictionary
@anchor{#clhs-section-the-files-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_20-1-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-20.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_directory.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
20.2 The Files Dictionary

@uref{fun_directory.html,@emph{Function} @strong{DIRECTORY}}

@uref{fun_probe-file.html,@emph{Function} @strong{PROBE-FILE}}

@uref{fun_ensure-di_tories-exist.html,@emph{Function}
@strong{ENSURE-DIRECTORIES-EXIST}}

@uref{fun_truename.html,@emph{Function} @strong{TRUENAME}}

@uref{fun_file-author.html,@emph{Function} @strong{FILE-AUTHOR}}

@uref{fun_file-write-date.html,@emph{Function} @strong{FILE-WRITE-DATE}}

@uref{fun_rename-file.html,@emph{Function} @strong{RENAME-FILE}}

@uref{fun_delete-file.html,@emph{Function} @strong{DELETE-FILE}}

@uref{contyp_file-error.html,@emph{Condition Type} @strong{FILE-ERROR}}

@uref{fun_file-error-pathname.html,@emph{Function}
@strong{FILE-ERROR-PATHNAME}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Condition Type FILE-ERROR::
* CLHS Function DELETE-FILE::
* CLHS Function ENSURE-DIRECTORIES-EXIST::
* CLHS Function FILE-AUTHOR::
* CLHS Function FILE-ERROR-PATHNAME::
* CLHS Function FILE-WRITE-DATE::
* CLHS Function PROBE-FILE::
* CLHS Function RENAME-FILE::
* CLHS Function TRUENAME::
@end menu

@node CLHS Condition Type FILE-ERROR
@subsubsection CLHS: Condition Type FILE-ERROR
@anchor{#clhs-condition-type-file-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_delete-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-error-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{FILE-ERROR}

@strong{Class Precedence List:}

@ref{#file-error,@strong{file-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#file-error,@strong{file-error}} consists of error conditions that
occur during an attempt to open or close a file, or during some
low-level transactions with a file system. The ``offending pathname'' is
initialized by the :pathnameinitialization argument to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_file-error-pathname.html#file-error-pathname,@strong{file-error-pathname}}.

@strong{See Also:}

@strong{file-error-pathname, @uref{fun_open.html#open,open},
@uref{fun_probe-file.html#probe-file,probe-file},
@uref{fun_directory.html#directory,directory},
@uref{fun_ensure-di_tories-exist.html#ensure-directories-exist,ensure-directories-exist}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DELETE-FILE
@subsubsection CLHS: Function DELETE-FILE
@anchor{#clhs-function-delete-file}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_rename-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_file-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DELETE-FILE}

@strong{Syntax:}

@strong{delete-file} @emph{filespec} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{filespec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@strong{Description:}

Deletes the @uref{glo_f.html#file,@emph{file}} specified by
@emph{filespec}.

If the @emph{filespec} @uref{glo_d.html#designator,@emph{designator}} is
an open @uref{glo_s.html#stream,@emph{stream}}, then @emph{filespec} and
the file associated with it are affected (if the file system permits),
in which case @emph{filespec} might be closed immediately, and the
deletion might be immediate or delayed until @emph{filespec} is
explicitly closed, depending on the requirements of the file system.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether an attempt to delete a nonexistent file is considered to be
successful.

@ref{#delete-file,@strong{delete-file}} returns
@uref{glo_t.html#true,@emph{true}} if it succeeds, or signals an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} if it does
not.

The consequences are undefined if @emph{filespec} has a
@uref{glo_w.html#wild,@emph{wild}} component, or if @emph{filespec} has
a @uref{any_nil.html#nil,@strong{nil}} component and the file system
does not permit a @uref{any_nil.html#nil,@strong{nil}} component.

@strong{Examples:}

@verbatim
 (with-open-file (s "delete-me.text" :direction :output :if-exists :error))
=>  NIL
 (setq p (probe-file "delete-me.text")) =>  #P"R:>fred>delete-me.text.1"
 (delete-file p) =>  T
 (probe-file "delete-me.text") =>  false
 (with-open-file (s "delete-me.text" :direction :output :if-exists :error)
   (delete-file s))
=>  T
 (probe-file "delete-me.text") =>  false
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If the deletion operation is not successful, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if @emph{filespec} is @uref{glo_w.html#wild,@emph{wild}}.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ENSURE-DIRECTORIES-EXIST
@subsubsection CLHS: Function ENSURE-DIRECTORIES-EXIST
@anchor{#clhs-function-ensure-directories-exist}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_probe-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_truename.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ENSURE-DIRECTORIES-EXIST}

@strong{Syntax:}

@strong{ensure-directories-exist} @emph{pathspec &key verbose} =>
@emph{pathspec, created}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{verbose}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{created}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Tests whether the directories containing the specified
@uref{glo_f.html#file,@emph{file}} actually exist, and attempts to
create them if they do not.

If the containing directories do not exist and if @emph{verbose} is
@uref{glo_t.html#true,@emph{true}}, then the
@uref{glo_i.html#implementation,@emph{implementation}} is permitted (but
not required) to perform output to
@uref{glo_s.html#standard_output,@emph{standard output}} saying what
directories were created. If the containing directories exist, or if
@emph{verbose} is @uref{glo_f.html#false,@emph{false}}, this function
performs no output.

The @uref{glo_p.html#primary_value,@emph{primary value}} is the given
@emph{pathspec} so that this operation can be straightforwardly composed
with other file manipulation expressions. The
@uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{created}, is @uref{glo_t.html#true,@emph{true}} if any directories
were created.

@strong{Examples:} None.

@strong{Affected By:}

The host computer's file system.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if the host, device, or directory part of @emph{pathspec} is
@uref{glo_w.html#wild,@emph{wild}}.

If the directory creation attempt is not successful, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled; if this occurs, it might be the case that none, some, or all
of the requested creations have actually occurred within the
@uref{glo_f.html#file_system,@emph{file system}}.

@strong{See Also:}

@uref{fun_probe-file.html#probe-file,@strong{probe-file}},
@uref{fun_open.html#open,@strong{open}}, @uref{sec_19-1-2.html,Section
19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-AUTHOR
@subsubsection CLHS: Function FILE-AUTHOR
@anchor{#clhs-function-file-author}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_truename.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-write-date.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-AUTHOR}

@strong{Syntax:}

@strong{file-author} @emph{pathspec} => @emph{author}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{author}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} naming the author of
the @uref{glo_f.html#file,@emph{file}} specified by @emph{pathspec}, or
@uref{any_nil.html#nil,@strong{nil}} if the author's name cannot be
determined.

@strong{Examples:}

@verbatim
 (with-open-file (stream ">relativity>general.text")
   (file-author s))
=>  "albert"
@end verbatim

@strong{Affected By:}

The host computer's file system.

Other users of the @uref{glo_f.html#file,@emph{file}} named by
@emph{pathspec}.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if @emph{pathspec} is @uref{glo_w.html#wild,@emph{wild}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if the @uref{glo_f.html#file_system,@emph{file system}} cannot perform
the requested operation.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-ERROR-PATHNAME
@subsubsection CLHS: Function FILE-ERROR-PATHNAME
@anchor{#clhs-function-file-error-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_file-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-21.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-ERROR-PATHNAME}

@strong{Syntax:}

@strong{file-error-pathname} @emph{condition} => @emph{pathspec}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}}.

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@strong{Description:}

Returns the ``offending pathname'' of a
@uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

@strong{See Also:}

@uref{contyp_file-error.html#file-error,@strong{file-error}},
@uref{chap-9.html,Section 9 (Conditions)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-WRITE-DATE
@subsubsection CLHS: Function FILE-WRITE-DATE
@anchor{#clhs-function-file-write-date}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-author.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_rename-file.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-WRITE-DATE}

@strong{Syntax:}

@strong{file-write-date} @emph{pathspec} => @emph{date}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{date}---a @uref{glo_u.html#universal_time,@emph{universal time}}
or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_u.html#universal_time,@emph{universal time}}
representing the time at which the @uref{glo_f.html#file,@emph{file}}
specified by @emph{pathspec} was last written (or created), or returns
@uref{any_nil.html#nil,@strong{nil}} if such a time cannot be
determined.

@strong{Examples:}

@verbatim
 (with-open-file (s "noel.text" 
                    :direction :output :if-exists :error)
   (format s "~&Dear Santa,~2%I was good this year.  ~
                Please leave lots of toys.~2%Love, Sue~
             ~2%attachments: milk, cookies~%")
   (truename s))
=>  #P"CUPID:/susan/noel.text"
 (with-open-file (s "noel.text")
   (file-write-date s))
=>  2902600800
@end verbatim

@strong{Affected By:}

The host computer's file system.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if @emph{pathspec} is @uref{glo_w.html#wild,@emph{wild}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if the @uref{glo_f.html#file_system,@emph{file system}} cannot perform
the requested operation.

@strong{See Also:}

@uref{sec_25-1-4-2.html,Section 25.1.4.2 (Universal Time)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PROBE-FILE
@subsubsection CLHS: Function PROBE-FILE
@anchor{#clhs-function-probe-file}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_directory.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_ensure-di_tories-exist.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PROBE-FILE}

@strong{Syntax:}

@strong{probe-file} @emph{pathspec} => @emph{truename}

@strong{Arguments and Values:}

@emph{pathspec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{truename}---a @uref{glo_p.html#physical_pathname,@emph{physical
pathname}} or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#probe-file,@strong{probe-file}} tests whether a file exists.

@ref{#probe-file,@strong{probe-file}} returns
@uref{glo_f.html#false,@emph{false}} if there is no file named
@emph{pathspec}, and otherwise returns the
@uref{glo_t.html#truename,@emph{truename}} of @emph{pathspec}.

If the @emph{pathspec} @uref{glo_d.html#designator,@emph{designator}} is
an open @uref{glo_s.html#stream,@emph{stream}}, then
@ref{#probe-file,@strong{probe-file}} produces the
@uref{glo_t.html#truename,@emph{truename}} of its associated
@uref{glo_f.html#file,@emph{file}}. If @emph{pathspec} is a
@uref{glo_s.html#stream,@emph{stream}}, whether open or closed, it is
coerced to a @uref{glo_p.html#pathname,@emph{pathname}} as if by the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_pathname.html#pathname,@strong{pathname}}.

@strong{Examples:} None.

@strong{Affected By:}

The host computer's file system.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if @emph{pathspec} is @uref{glo_w.html#wild,@emph{wild}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if the @uref{glo_f.html#file_system,@emph{file system}} cannot perform
the requested operation.

@strong{See Also:}

@uref{fun_truename.html#truename,@strong{truename}},
@uref{fun_open.html#open,@strong{open}},
@uref{fun_ensure-di_tories-exist.html#ensure-directories-exist,@strong{ensure-directories-exist}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_20-1-2.html,Section 20.1.2 (File Operations on Open and Closed
Streams)}, @uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as
Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RENAME-FILE
@subsubsection CLHS: Function RENAME-FILE
@anchor{#clhs-function-rename-file}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-write-date.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_delete-file.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RENAME-FILE}

@strong{Syntax:}

@strong{rename-file} @emph{filespec new-name} =>
@emph{defaulted-new-name, old-truename, new-truename}

@strong{Arguments and Values:}

@emph{filespec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{new-name}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}} other than a @uref{glo_s.html#stream,@emph{stream}}.

@emph{defaulted-new-name}---a @uref{glo_p.html#pathname,@emph{pathname}}

@emph{old-truename}---a
@uref{glo_p.html#physical_pathname,@emph{physical pathname}}.

@emph{new-truename}---a
@uref{glo_p.html#physical_pathname,@emph{physical pathname}}.

@strong{Description:}

@ref{#rename-file,@strong{rename-file}} modifies the file system in such
a way that the file indicated by @emph{filespec} is renamed to
@emph{defaulted-new-name}.

It is an error to specify a filename containing a
@uref{glo_w.html#wild,@emph{wild}} component, for @emph{filespec} to
contain a @uref{any_nil.html#nil,@strong{nil}} component where the file
system does not permit a @uref{any_nil.html#nil,@strong{nil}} component,
or for the result of defaulting missing components of @emph{new-name}
from @emph{filespec} to contain a @uref{any_nil.html#nil,@strong{nil}}
component where the file system does not permit a
@uref{any_nil.html#nil,@strong{nil}} component.

If @emph{new-name} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, @ref{#rename-file,@strong{rename-file}} returns a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} as its
@uref{glo_p.html#primary_value,@emph{primary value}}.

@ref{#rename-file,@strong{rename-file}} returns three values if
successful. The @uref{glo_p.html#primary_value,@emph{primary value}},
@emph{defaulted-new-name}, is the resulting name which is composed of
@emph{new-name} with any missing components filled in by performing a
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}}
operation using @emph{filespec} as the defaults. The
@uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{old-truename}, is the @uref{glo_t.html#truename,@emph{truename}}
of the @uref{glo_f.html#file,@emph{file}} before it was renamed. The
@uref{glo_t.html#tertiary_value,@emph{tertiary value}},
@emph{new-truename}, is the @uref{glo_t.html#truename,@emph{truename}}
of the @uref{glo_f.html#file,@emph{file}} after it was renamed.

If the @emph{filespec} @uref{glo_d.html#designator,@emph{designator}} is
an open @uref{glo_s.html#stream,@emph{stream}}, then the
@uref{glo_s.html#stream,@emph{stream}} itself and the file associated
with it are affected (if the @uref{glo_f.html#file_system,@emph{file
system}} permits).

@strong{Examples:}

@verbatim
;; An example involving logical pathnames.
 (with-open-file (stream "sys:chemistry;lead.text"
                         :direction :output :if-exists :error)
   (princ "eureka" stream)
   (values (pathname stream) (truename stream)))
=>  #P"SYS:CHEMISTRY;LEAD.TEXT.NEWEST", #P"Q:>sys>chem>lead.text.1"
 (rename-file "sys:chemistry;lead.text" "gold.text")
=>  #P"SYS:CHEMISTRY;GOLD.TEXT.NEWEST",
   #P"Q:>sys>chem>lead.text.1",
   #P"Q:>sys>chem>gold.text.1"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If the renaming operation is not successful, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if @emph{filespec} is @uref{glo_w.html#wild,@emph{wild}}.

@strong{See Also:}

@uref{fun_truename.html#truename,@strong{truename}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TRUENAME
@subsubsection CLHS: Function TRUENAME
@anchor{#clhs-function-truename}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ensure-di_tories-exist.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_files_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-author.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TRUENAME}

@strong{Syntax:}

@strong{truename} @emph{filespec} => @emph{truename}

@strong{Arguments and Values:}

@emph{filespec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{truename}---a @uref{glo_p.html#physical_pathname,@emph{physical
pathname}}.

@strong{Description:}

@ref{#truename,@strong{truename}} tries to find the
@uref{glo_f.html#file,@emph{file}} indicated by @emph{filespec} and
returns its @uref{glo_t.html#truename,@emph{truename}}. If the
@emph{filespec} @uref{glo_d.html#designator,@emph{designator}} is an
open @uref{glo_s.html#stream,@emph{stream}}, its associated
@uref{glo_f.html#file,@emph{file}} is used. If @emph{filespec} is a
@uref{glo_s.html#stream,@emph{stream}},
@ref{#truename,@strong{truename}} can be used whether the
@uref{glo_s.html#stream,@emph{stream}} is open or closed. It is
permissible for @ref{#truename,@strong{truename}} to return more
specific information after the @uref{glo_s.html#stream,@emph{stream}} is
closed than when the @uref{glo_s.html#stream,@emph{stream}} was open. If
@emph{filespec} is a @uref{glo_p.html#pathname,@emph{pathname}} it
represents the name used to open the file. This may be, but is not
required to be, the actual name of the file.

@strong{Examples:}

@verbatim
;; An example involving version numbers.  Note that the precise nature of
;; the truename is implementation-dependent while the file is still open.
 (with-open-file (stream ">vistor>test.text.newest")
   (values (pathname stream)
           (truename stream)))
=>  #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.1"
OR=>  #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.newest"
OR=>  #P"S:>vistor>test.text.newest", #P"S:>vistor>_temp_._temp_.1"

;; In this case, the file is closed when the truename is tried, so the
;; truename information is reliable.
 (with-open-file (stream ">vistor>test.text.newest")
   (close stream)
   (values (pathname stream)
           (truename stream)))
=>  #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.1"

;; An example involving TOP-20's implementation-dependent concept 
;; of logical devices -- in this case, "DOC:" is shorthand for
;; "PS:<DOCUMENTATION>" ...
 (with-open-file (stream "CMUC::DOC:DUMPER.HLP")
   (values (pathname stream)
           (truename stream)))
=>  #P"CMUC::DOC:DUMPER.HLP", #P"CMUC::PS:<DOCUMENTATION>DUMPER.HLP.13"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if an appropriate @uref{glo_f.html#file,@emph{file}} cannot be located
within the @uref{glo_f.html#file_system,@emph{file system}} for the
given @emph{filespec}, or if the @uref{glo_f.html#file_system,@emph{file
system}} cannot perform the requested operation.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if @emph{pathname} is @uref{glo_w.html#wild,@emph{wild}}.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

@ref{#truename,@strong{truename}} may be used to account for any
@uref{glo_f.html#filename,@emph{filename}} translations performed by the
@uref{glo_f.html#file_system,@emph{file system}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 21
@section CLHS: Chapter 21
@anchor{#clhs-chapter-21}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-error-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_21-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
21. Streams

@uref{sec_21-1.html,}

21.1 Stream Concepts

@uref{sec_the_streams_dictionary.html,}

21.2 The Streams Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Streams Dictionary::
@end menu

@node CLHS Section The Streams Dictionary
@subsection CLHS: Section The Streams Dictionary
@anchor{#clhs-section-the-streams-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_21-1-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-21.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
21.2 The Streams Dictionary

@uref{syscla_stream.html,@emph{System Class} @strong{STREAM}}

@uref{syscla_broadcast-stream.html,@emph{System Class}
@strong{BROADCAST-STREAM}}

@uref{syscla_concatenated-stream.html,@emph{System Class}
@strong{CONCATENATED-STREAM}}

@uref{syscla_echo-stream.html,@emph{System Class} @strong{ECHO-STREAM}}

@uref{syscla_file-stream.html,@emph{System Class} @strong{FILE-STREAM}}

@uref{syscla_string-stream.html,@emph{System Class}
@strong{STRING-STREAM}}

@uref{syscla_synonym-stream.html,@emph{System Class}
@strong{SYNONYM-STREAM}}

@uref{syscla_two-way-stream.html,@emph{System Class}
@strong{TWO-WAY-STREAM}}

@uref{fun_input-str_put-stream-p.html,@emph{Function}
@strong{INPUT-STREAM-P, OUTPUT-STREAM-P}}

@uref{fun_interactive-stream-p.html,@emph{Function}
@strong{INTERACTIVE-STREAM-P}}

@uref{fun_open-stream-p.html,@emph{Function} @strong{OPEN-STREAM-P}}

@uref{fun_stream-element-type.html,@emph{Function}
@strong{STREAM-ELEMENT-TYPE}}

@uref{fun_streamp.html,@emph{Function} @strong{STREAMP}}

@uref{fun_read-byte.html,@emph{Function} @strong{READ-BYTE}}

@uref{fun_write-byte.html,@emph{Function} @strong{WRITE-BYTE}}

@uref{fun_peek-char.html,@emph{Function} @strong{PEEK-CHAR}}

@uref{fun_read-char.html,@emph{Function} @strong{READ-CHAR}}

@uref{fun_read-char-no-hang.html,@emph{Function}
@strong{READ-CHAR-NO-HANG}}

@uref{fun_terpricm_fresh-line.html,@emph{Function} @strong{TERPRI,
FRESH-LINE}}

@uref{fun_unread-char.html,@emph{Function} @strong{UNREAD-CHAR}}

@uref{fun_write-char.html,@emph{Function} @strong{WRITE-CHAR}}

@uref{fun_read-line.html,@emph{Function} @strong{READ-LINE}}

@uref{fun_write-str_m_write-line.html,@emph{Function}
@strong{WRITE-STRING, WRITE-LINE}}

@uref{fun_read-sequence.html,@emph{Function} @strong{READ-SEQUENCE}}

@uref{fun_write-sequence.html,@emph{Function} @strong{WRITE-SEQUENCE}}

@uref{fun_file-length.html,@emph{Function} @strong{FILE-LENGTH}}

@uref{fun_file-position.html,@emph{Function} @strong{FILE-POSITION}}

@uref{fun_file-string-length.html,@emph{Function}
@strong{FILE-STRING-LENGTH}}

@uref{fun_open.html,@emph{Function} @strong{OPEN}}

@uref{fun_stream-external-format.html,@emph{Function}
@strong{STREAM-EXTERNAL-FORMAT}}

@uref{mac_with-open-file.html,@emph{macro} @strong{WITH-OPEN-FILE}}

@uref{fun_close.html,@emph{Function} @strong{CLOSE}}

@uref{mac_with-open-stream.html,@emph{Macro} @strong{WITH-OPEN-STREAM}}

@uref{fun_listen.html,@emph{Function} @strong{LISTEN}}

@uref{fun_clear-input.html,@emph{Function} @strong{CLEAR-INPUT}}

@uref{fun_finish-ou_clear-output.html,@emph{Function}
@strong{FINISH-OUTPUT, FORCE-OUTPUT, CLEAR-OUTPUT}}

@uref{fun_y-or-n-pcm_yes-or-no-p.html,@emph{Function} @strong{Y-OR-N-P,
YES-OR-NO-P}}

@uref{fun_make-synonym-stream.html,@emph{Function}
@strong{MAKE-SYNONYM-STREAM}}

@uref{fun_synonym-stream-symbol.html,@emph{Function}
@strong{SYNONYM-STREAM-SYMBOL}}

@uref{fun_broadcast_ream-streams.html,@emph{Function}
@strong{BROADCAST-STREAM-STREAMS}}

@uref{fun_make-broadcast-stream.html,@emph{Function}
@strong{MAKE-BROADCAST-STREAM}}

@uref{fun_make-two-way-stream.html,@emph{Function}
@strong{MAKE-TWO-WAY-STREAM}}

@uref{fun_two-way-s_utput-stream.html,@emph{Function}
@strong{TWO-WAY-STREAM-INPUT-STREAM, TWO-WAY-STREAM-OUTPUT-STREAM}}

@uref{fun_echo-stre_utput-stream.html,@emph{Function}
@strong{ECHO-STREAM-INPUT-STREAM, ECHO-STREAM-OUTPUT-STREAM}}

@uref{fun_make-echo-stream.html,@emph{Function}
@strong{MAKE-ECHO-STREAM}}

@uref{fun_concatena_ream-streams.html,@emph{Function}
@strong{CONCATENATED-STREAM-STREAMS}}

@uref{fun_make-conc_nated-stream.html,@emph{Function}
@strong{MAKE-CONCATENATED-STREAM}}

@uref{fun_get-outpu_tream-string.html,@emph{Function}
@strong{GET-OUTPUT-STREAM-STRING}}

@uref{fun_make-stri_input-stream.html,@emph{Function}
@strong{MAKE-STRING-INPUT-STREAM}}

@uref{fun_make-stri_utput-stream.html,@emph{Function}
@strong{MAKE-STRING-OUTPUT-STREAM}}

@uref{mac_with-input-from-string.html,@emph{Macro}
@strong{WITH-INPUT-FROM-STRING}}

@uref{mac_with-output-to-string.html,@emph{Macro}
@strong{WITH-OUTPUT-TO-STRING}}

@uref{var_stdebug-i_ace-outputst.html,@emph{Variable}
@strong{*DEBUG-IO*, *ERROR-OUTPUT*, *QUERY-IO*, *STANDARD-INPUT*,
*STANDARD-OUTPUT*, *TRACE-OUTPUT*}}

@uref{var_stterminal-iost.html,@emph{Variable} @strong{*TERMINAL-IO*}}

@uref{contyp_stream-error.html,@emph{Condition Type}
@strong{STREAM-ERROR}}

@uref{fun_stream-error-stream.html,@emph{Function}
@strong{STREAM-ERROR-STREAM}}

@uref{contyp_end-of-file.html,@emph{Condition Type}
@strong{END-OF-FILE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss285.html,READ-AND-WRITE-BYTES:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Condition Type END-OF-FILE::
* CLHS Condition Type STREAM-ERROR::
* CLHS Function BROADCAST-STREAM-STREAMS::
* CLHS Function CLEAR-INPUT::
* CLHS Function CLOSE::
* CLHS Function CONCATENATED-STREAM-STREAMS::
* CLHS Function ECHO-STREAM-INPUT-STREAM::
* CLHS Function FILE-LENGTH::
* CLHS Function FILE-POSITION::
* CLHS Function FILE-STRING-LENGTH::
* CLHS Function FINISH-OUTPUT FORCE-OUTPUT::
* CLHS Function GET-OUTPUT-STREAM-STRING::
* CLHS Function INPUT-STREAM-P OUTPUT-STREAM-P::
* CLHS Function INTERACTIVE-STREAM-P::
* CLHS Function LISTEN::
* CLHS Function MAKE-BROADCAST-STREAM::
* CLHS Function MAKE-CONCATENATED-STREAM::
* CLHS Function MAKE-ECHO-STREAM::
* CLHS Function MAKE-STRING-INPUT-STREAM::
* CLHS Function MAKE-STRING-OUTPUT-STREAM::
* CLHS Function MAKE-SYNONYM-STREAM::
* CLHS Function MAKE-TWO-WAY-STREAM::
* CLHS Function OPEN-STREAM-P::
* CLHS Function OPEN::
* CLHS Function PEEK-CHAR::
* CLHS Function READ-BYTE::
* CLHS Function READ-CHAR-NO-HANG::
* CLHS Function READ-CHAR::
* CLHS Function READ-LINE::
* CLHS Function READ-SEQUENCE::
* CLHS Function STREAM-ELEMENT-TYPE::
* CLHS Function STREAM-ERROR-STREAM::
* CLHS Function STREAM-EXTERNAL-FORMAT::
* CLHS Function STREAMP::
* CLHS Function SYNONYM-STREAM-SYMBOL::
* CLHS Function TERPRI FRESH-LINE::
* CLHS Function TWO-WAY-STREAM-INPUT-STREAM::
* CLHS Function UNREAD-CHAR::
* CLHS Function WRITE-BYTE::
* CLHS Function WRITE-CHAR::
* CLHS Function WRITE-SEQUENCE::
* CLHS Function WRITE-STRING WRITE-LINE::
* CLHS Function Y-OR-N-P YES-OR-NO-P::
* CLHS Macro WITH-INPUT-FROM-STRING::
* CLHS macro WITH-OPEN-FILE::
* CLHS Macro WITH-OPEN-STREAM::
* CLHS Macro WITH-OUTPUT-TO-STRING::
* CLHS System Class BROADCAST-STREAM::
* CLHS System Class CONCATENATED-STREAM::
* CLHS System Class ECHO-STREAM::
* CLHS System Class FILE-STREAM::
* CLHS System Class STRING-STREAM::
* CLHS System Class SYNONYM-STREAM::
* CLHS System Class TWO-WAY-STREAM::
* CLHS Variable *DEBUG-IO* *ERROR-OUTPUT*::
* CLHS Variable *TERMINAL-IO*::
@end menu

@node CLHS Condition Type END-OF-FILE
@subsubsection CLHS: Condition Type END-OF-FILE
@anchor{#clhs-condition-type-end-of-file}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_stream-error-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-22.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{END-OF-FILE}

@strong{Class Precedence List:}

@ref{#end-of-file,@strong{end-of-file}},
@uref{contyp_stream-error.html#stream-error,@strong{stream-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#end-of-file,@strong{end-of-file}} consists of error conditions
related to read operations that are done on
@uref{glo_s.html#stream,@emph{streams}} that have no more data.

@strong{See Also:}

@uref{fun_stream-error-stream.html#stream-error-stream,@strong{stream-error-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type STREAM-ERROR
@subsubsection CLHS: Condition Type STREAM-ERROR
@anchor{#clhs-condition-type-stream-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stterminal-iost.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_stream-error-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{STREAM-ERROR}

@strong{Class Precedence List:}

@ref{#stream-error,@strong{stream-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#stream-error,@strong{stream-error}} consists of error conditions
that are related to receiving input from or sending output to a
@uref{glo_s.html#stream,@emph{stream}}. The ``offending stream'' is
initialized by the :streaminitialization argument to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_stream-error-stream.html#stream-error-stream,@strong{stream-error-stream}}.

@strong{See Also:}

@uref{fun_stream-error-stream.html#stream-error-stream,@strong{stream-error-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BROADCAST-STREAM-STREAMS
@subsubsection CLHS: Function BROADCAST-STREAM-STREAMS
@anchor{#clhs-function-broadcast-stream-streams}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_synonym-stream-symbol.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-broadcast-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BROADCAST-STREAM-STREAMS}

@strong{Syntax:}

@strong{broadcast-stream-streams} @emph{broadcast-stream} =>
@emph{streams}

@strong{Arguments and Values:}

@emph{broadcast-stream}---a
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}}.

@emph{streams}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#stream,@emph{streams}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of output
@uref{glo_s.html#stream,@emph{streams}} that constitute all the
@uref{glo_s.html#stream,@emph{streams}} to which the
@emph{broadcast-stream} is broadcasting.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CLEAR-INPUT
@subsubsection CLHS: Function CLEAR-INPUT
@anchor{#clhs-function-clear-input}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_listen.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_finish-ou_clear-output.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CLEAR-INPUT}

@strong{Syntax:}

@strong{clear-input} @emph{&optional input-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@strong{Description:}

Clears any available input from @emph{input-stream}.

If @ref{#clear-input,@strong{clear-input}} does not make sense for
@emph{input-stream}, then @ref{#clear-input,@strong{clear-input}} does
nothing.

@strong{Examples:}

@verbatim
;; The exact I/O behavior of this example might vary from implementation
;; to implementation depending on the kind of interactive buffering that
;; occurs.  (The call to SLEEP here is intended to help even out the 
;; differences in implementations which do not do line-at-a-time buffering.)

(defun read-sleepily (&optional (clear-p nil) (zzz 0))
  (list (progn (print '>) (read))
        ;; Note that input typed within the first ZZZ seconds 
        ;; will be discarded.
        (progn (print '>) 
               (if zzz (sleep zzz))
               (print '>>)
               (if clear-p (clear-input))
               (read))))

(read-sleepily)
>>  > 10
>>  >
>>  >> 20
=>  (10 20)

(read-sleepily t)
>>  > 10
>>  >
>>  >> 20
=>  (10 20)

(read-sleepily t 10)
>>  > 10
>>  > 20  ; Some implementations won't echo typeahead here.
>>  >> 30
=>  (10 30)
@end verbatim

@strong{Side Effects:}

The @emph{input-stream} is modified.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{input-stream} is not a
@uref{glo_s.html#stream_designator,@emph{stream designator}}.

@strong{See Also:}

@uref{fun_finish-ou_clear-output.html#clear-output,@strong{clear-output}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CLOSE
@subsubsection CLHS: Function CLOSE
@anchor{#clhs-function-close}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-open-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-open-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CLOSE}

@strong{Syntax:}

@strong{close} @emph{stream &key abort} => @emph{result}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}} (either
@uref{glo_o.html#open,@emph{open}} or
@uref{glo_c.html#closed,@emph{closed}}).

@emph{abort}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}. The default is @uref{glo_f.html#false,@emph{false}}.

@emph{result}---@uref{any_t.html#t,@strong{t}} if the @emph{stream} was
@uref{glo_o.html#open,@emph{open}} at the time it was received as an
@uref{glo_a.html#argument,@emph{argument}}, or
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
otherwise.

@strong{Description:}

@ref{#close,@strong{close}} closes @emph{stream}. Closing a
@uref{glo_s.html#stream,@emph{stream}} means that it may no longer be
used in input or output operations. The act of @emph{closing} a
@uref{glo_f.html#file_stream,@emph{file stream}} ends the association
between the @uref{glo_s.html#stream,@emph{stream}} and its associated
@uref{glo_f.html#file,@emph{file}}; the transaction with the
@uref{glo_f.html#file_system,@emph{file system}} is terminated, and
input/output may no longer be performed on the
@uref{glo_s.html#stream,@emph{stream}}.

If @emph{abort} is @uref{glo_t.html#true,@emph{true}}, an attempt is
made to clean up any side effects of having created @emph{stream}. If
@emph{stream} performs output to a file that was created when the
@uref{glo_s.html#stream,@emph{stream}} was created, the file is deleted
and any previously existing file is not superseded.

It is permissible to close an already closed
@uref{glo_s.html#stream,@emph{stream}}, but in that case the
@emph{result} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

After @emph{stream} is closed, it is still possible to perform the
following query operations upon it:
@uref{fun_streamp.html#streamp,@strong{streamp}},
@uref{fun_pathname.html#pathname,@strong{pathname}},
@uref{fun_truename.html#truename,@strong{truename}},
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}},
@uref{fun_pathname-_name-version.html#pathname-host,@strong{pathname-host}},
@uref{fun_pathname-_name-version.html#pathname-device,@strong{pathname-device}},
@uref{fun_pathname-_name-version.html#pathname-directory,@strong{pathname-directory}},@uref{fun_pathname-_name-version.html#pathname-name,@strong{pathname-name}},
@uref{fun_pathname-_name-version.html#pathname-type,@strong{pathname-type}},
@uref{fun_pathname-_name-version.html#pathname-version,@strong{pathname-version}},
@uref{fun_namestrin_h-namestring.html#namestring,@strong{namestring}},
@uref{fun_namestrin_h-namestring.html#file-namestring,@strong{file-namestring}},
@uref{fun_namestrin_h-namestring.html#directory-namestring,@strong{directory-namestring}},
@uref{fun_namestrin_h-namestring.html#host-namestring,@strong{host-namestring}},
@uref{fun_namestrin_h-namestring.html#enough-namestring,@strong{enough-namestring}},
@uref{fun_open.html#open,@strong{open}},
@uref{fun_probe-file.html#probe-file,@strong{probe-file}}, and
@uref{fun_directory.html#directory,@strong{directory}}.

The effect of @ref{#close,@strong{close}} on a
@uref{glo_c.html#constructed_stream,@emph{constructed stream}} is to
close the argument @emph{stream} only. There is no effect on the
@uref{glo_c.html#constituent,@emph{constituents}} of
@uref{glo_c.html#composite_stream,@emph{composite streams}}.

For a @uref{glo_s.html#stream,@emph{stream}} created with
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}},
the result of
@uref{fun_get-outpu_tream-string.html#get-output-stream-string,@strong{get-output-stream-string}}
is unspecified after @ref{#close,@strong{close}}.

@strong{Examples:}

@verbatim
 (setq s (make-broadcast-stream)) =>  #<BROADCAST-STREAM>
 (close s) =>  T
 (output-stream-p s) =>  true
@end verbatim

@strong{Side Effects:}

The @emph{stream} is @uref{glo_c.html#closed,@emph{closed}} (if
necessary). If @emph{abort} is @uref{glo_t.html#true,@emph{true}} and
the @emph{stream} is an @uref{glo_o.html#output,@emph{output}}
@uref{glo_f.html#file_stream,@emph{file stream}}, its associated
@uref{glo_f.html#file,@emph{file}} might be deleted.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_open.html#open,@strong{open}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss052.html,CLOSE-CONSTRUCTED-STREAM:ARGUMENT-STREAM-ONLY}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss299.html,RETURN-VALUES-UNSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONCATENATED-STREAM-STREAMS
@subsubsection CLHS: Function CONCATENATED-STREAM-STREAMS
@anchor{#clhs-function-concatenated-stream-streams}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-echo-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-conc_nated-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONCATENATED-STREAM-STREAMS}

@strong{Syntax:}

@strong{concatenated-stream-streams} @emph{concatenated-stream} =>
@emph{streams}

@strong{Arguments and Values:}

@emph{concatenated-stream} -- a
@uref{glo_c.html#concatenated_stream,@emph{concatenated stream}}.

@emph{streams}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}} that constitute the ordered set
of @uref{glo_s.html#stream,@emph{streams}} the
@emph{concatenated-stream} still has to read from, starting with the
current one it is reading from. The list may be @emph{empty} if no more
@uref{glo_s.html#stream,@emph{streams}} remain to be read.

The consequences are undefined if the
@uref{glo_l.html#list_structure,@emph{list structure}} of the
@emph{streams} is ever modified.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ECHO-STREAM-INPUT-STREAM
@subsubsection CLHS: Function ECHO-STREAM-INPUT-STREAM...
@anchor{#clhs-function-echo-stream-input-stream...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_two-way-s_utput-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-echo-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ECHO-STREAM-INPUT-STREAM,
ECHO-STREAM-OUTPUT-STREAM}

@strong{Syntax:}

@strong{echo-stream-input-stream} @emph{echo-stream} =>
@emph{input-stream}

@strong{echo-stream-output-stream} @emph{echo-stream} =>
@emph{output-stream}

@strong{Arguments and Values:}

@emph{echo-stream}---an @uref{glo_e.html#echo_stream,@emph{echo
stream}}.

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{output-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

@ref{#echo-stream-input-stream,@strong{echo-stream-input-stream}}
returns the @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} from which @emph{echo-stream}
receives input.

@ref{#echo-stream-output-stream,@strong{echo-stream-output-stream}}
returns the @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}} to which @emph{echo-stream} sends
output.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-LENGTH
@subsubsection CLHS: Function FILE-LENGTH
@anchor{#clhs-function-file-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_write-sequence.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-position.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-LENGTH}

@strong{Syntax:}

@strong{file-length} @emph{stream} => @emph{length}

@strong{Arguments and Values:}

@emph{stream}---a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}}.

@emph{length}---a non-negative @uref{glo_i.html#integer,@emph{integer}}
or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#file-length,@strong{file-length}} returns the length of
@emph{stream}, or @uref{any_nil.html#nil,@strong{nil}} if the length
cannot be determined.

For a binary file, the length is measured in units of the
@uref{glo_e.html#element_type,@emph{element type}} of the @emph{stream}.

@strong{Examples:}

@verbatim
 (with-open-file (s "decimal-digits.text" 
                    :direction :output :if-exists :error)
   (princ "0123456789" s)
   (truename s))
=>  #P"A:>Joe>decimal-digits.text.1"
 (with-open-file (s "decimal-digits.text")
   (file-length s))
=>  10
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a
@uref{glo_s.html#stream_associated_with_a_file,@emph{stream associated
with a file}}.

@strong{See Also:}

@uref{fun_open.html#open,@strong{open}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-POSITION
@subsubsection CLHS: Function FILE-POSITION
@anchor{#clhs-function-file-position}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-length.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-string-length.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-POSITION}

@strong{Syntax:}

@strong{file-position} @emph{stream} => @emph{position}

@strong{file-position} @emph{stream position-spec} => @emph{success-p}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{position-spec}---a
@uref{glo_f.html#file_position_designator,@emph{file position
designator}}.

@emph{position}---a @uref{glo_f.html#file_position,@emph{file position}}
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{success-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns or changes the current position within a @emph{stream}.

When @emph{position-spec} is not supplied,
@ref{#file-position,@strong{file-position}} returns the current
@uref{glo_f.html#file_position,@emph{file position}} in the
@emph{stream}, or @uref{any_nil.html#nil,@strong{nil}} if this cannot be
determined.

When @emph{position-spec} is supplied, the
@uref{glo_f.html#file_position,@emph{file position}} in @emph{stream} is
set to that @uref{glo_f.html#file_position,@emph{file position}} (if
possible). @ref{#file-position,@strong{file-position}} returns
@uref{glo_t.html#true,@emph{true}} if the repositioning is performed
successfully, or @uref{glo_f.html#false,@emph{false}} if it is not.

An @uref{glo_i.html#integer,@emph{integer}} returned by
@ref{#file-position,@strong{file-position}} of one argument should be
acceptable as @emph{position-spec} for use with the same file.

For a character file, performing a single
@uref{fun_read-char.html#read-char,@strong{read-char}} or
@uref{fun_write-char.html#write-char,@strong{write-char}} operation may
cause the file position to be increased by more than 1 because of
character-set translations (such as translating between the Common Lisp
f#\Newline character and an external ASCII carriage-return/line-feed
sequence) and other aspects of the implementation. For a binary file,
every @uref{fun_read-byte.html#read-byte,@strong{read-byte}} or
@uref{fun_write-byte.html#write-byte,@strong{write-byte}} operation
increases the file position by 1.

@strong{Examples:}

@verbatim
 (defun tester ()
   (let ((noticed '()) file-written)
     (flet ((notice (x) (push x noticed) x))
       (with-open-file (s "test.bin" 
                          :element-type '(unsigned-byte 8)
                          :direction :output
                          :if-exists :error)
          (notice (file-position s)) ;1
          (write-byte 5 s) 
          (write-byte 6 s)
          (let ((p (file-position s)))
            (notice p) ;2
            (notice (when p (file-position s (1- p))))) ;3
          (write-byte 7 s)
          (notice (file-position s)) ;4
          (setq file-written (truename s)))
        (with-open-file (s file-written
                           :element-type '(unsigned-byte 8)
                           :direction :input)
          (notice (file-position s)) ;5
          (let ((length (file-length s)))
            (notice length) ;6
            (when length
              (dotimes (i length)
                (notice (read-byte s)))))) ;7,...
        (nreverse noticed))))
=>  tester
 (tester)
=>  (0 2 T 2 0 2 5 7)
OR=>  (0 2 NIL 3 0 3 5 6 7)
OR=>  (NIL NIL NIL NIL NIL NIL)
@end verbatim

@strong{Side Effects:}

When the @emph{position-spec} argument is supplied, the
@uref{glo_f.html#file_position,@emph{file position}} in the
@emph{stream} might be moved.

@strong{Affected By:}

The value returned by @ref{#file-position,@strong{file-position}}
increases monotonically as input or output operations are performed.

@strong{Exceptional Situations:}

If @emph{position-spec} is supplied, but is too large or otherwise
inappropriate, an error is signaled.

@strong{See Also:}

@uref{fun_file-length.html#file-length,@strong{file-length}},
@uref{fun_file-string-length.html#file-string-length,@strong{file-string-length}},
@uref{fun_open.html#open,@strong{open}}

@strong{Notes:}

Implementations that have character files represented as a sequence of
records of bounded size might choose to encode the file position as, for
example,
<<@emph{record-number}>>*<<@emph{max-record-size}>>+<<@emph{character-within-record}>>.
This is a valid encoding because it increases monotonically as each
character is read or written, though not necessarily by 1 at each step.
An @uref{glo_i.html#integer,@emph{integer}} might then be considered
``inappropriate'' as @emph{position-spec} to
@ref{#file-position,@strong{file-position}} if, when decoded into record
number and character number, it turned out that the supplied record was
too short for the specified character number.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FILE-STRING-LENGTH
@subsubsection CLHS: Function FILE-STRING-LENGTH
@anchor{#clhs-function-file-string-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-position.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_open.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FILE-STRING-LENGTH}

@strong{Syntax:}

@strong{file-string-length} @emph{stream object} => @emph{length}

@strong{Arguments and Values:}

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_c.html#character,@emph{character}}
@uref{glo_f.html#file_stream,@emph{file stream}}.

@emph{object}---a @uref{glo_s.html#string,@emph{string}} or a
@uref{glo_c.html#character,@emph{character}}.

@emph{length}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#file-string-length,@strong{file-string-length}} returns the
difference between what (file-position @emph{stream}) would be after
writing @emph{object} and its current value, or
@uref{any_nil.html#nil,@strong{nil}} if this cannot be determined.

The returned value corresponds to the current state of @emph{stream} at
the time of the call and might not be the same if it is called again
when the state of the @uref{glo_s.html#stream,@emph{stream}} has
changed.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss041.html,CHARACTER-PROPOSAL:2-5-7}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FINISH-OUTPUT FORCE-OUTPUT
@subsubsection CLHS: Function FINISH-OUTPUT, FORCE-OUTPUT...
@anchor{#clhs-function-finish-output-force-output...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_clear-input.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_y-or-n-pcm_yes-or-no-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FINISH-OUTPUT, FORCE-OUTPUT, CLEAR-OUTPUT}

@strong{Syntax:}

@strong{finish-output} @emph{&optional output-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{force-output} @emph{&optional output-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{clear-output} @emph{&optional output-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{output-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

@ref{#finish-output,@strong{finish-output}},
@ref{#force-output,@strong{force-output}}, and
@ref{#clear-output,@strong{clear-output}} exercise control over the
internal handling of buffered stream output.

@ref{#finish-output,@strong{finish-output}} attempts to ensure that any
buffered output sent to @emph{output-stream} has reached its
destination, and then returns.

@ref{#force-output,@strong{force-output}} initiates the emptying of any
internal buffers but does not wait for completion or acknowledgment to
return.

@ref{#clear-output,@strong{clear-output}} attempts to abort any
outstanding output operation in progress in order to allow as little
output as possible to continue to the destination.

If any of these operations does not make sense for @emph{output-stream},
then it does nothing. The precise actions of these
@uref{glo_f.html#function,@emph{functions}} are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Examples:}

@verbatim
;; Implementation A
 (progn (princ "am i seen?") (clear-output))
=>  NIL

;; Implementation B
 (progn (princ "am i seen?") (clear-output))
>>  am i seen?
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{output-stream} is not a
@uref{glo_s.html#stream_designator,@emph{stream designator}}.

@strong{See Also:}

@uref{fun_clear-input.html#clear-input,@strong{clear-input}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-OUTPUT-STREAM-STRING
@subsubsection CLHS: Function GET-OUTPUT-STREAM-STRING
@anchor{#clhs-function-get-output-stream-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-conc_nated-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-stri_input-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-OUTPUT-STREAM-STRING}

@strong{Syntax:}

@strong{get-output-stream-string} @emph{string-output-stream} =>
@emph{string}

@strong{Arguments and Values:}

@emph{string-output-stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} containing, in order,
all the @uref{glo_c.html#character,@emph{characters}} that have been
output to @emph{string-output-stream}. This operation clears any
@uref{glo_c.html#character,@emph{characters}} on
@emph{string-output-stream}, so the @emph{string} contains only those
@uref{glo_c.html#character,@emph{characters}} which have been output
since the last call to
@ref{#get-output-stream-string,@strong{get-output-stream-string}} or
since the creation of the @emph{string-output-stream}, whichever
occurred most recently.

@strong{Examples:}

@verbatim
 (setq a-stream (make-string-output-stream)
        a-string "abcdefghijklm") =>  "abcdefghijklm"
 (write-string a-string a-stream) =>  "abcdefghijklm"
 (get-output-stream-string a-stream) =>  "abcdefghijklm"
 (get-output-stream-string a-stream) =>  ""
@end verbatim

@strong{Side Effects:}

The @emph{string-output-stream} is cleared.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if @emph{stream-output-string} is
@uref{glo_c.html#closed,@emph{closed}}.

The consequences are undefined if @emph{string-output-stream} is a
@uref{glo_s.html#stream,@emph{stream}} that was not produced by
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}}.
The consequences are undefined if @emph{string-output-stream} was
created implicitly by
@uref{mac_with-output-to-string.html#with-output-to-string,@strong{with-output-to-string}}
or @uref{fun_format.html#format,@strong{format}}.

@strong{See Also:}

@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss330.html,STRING-OUTPUT-STREAM-BASHING:UNDEFINED}
@item
@uref{../Issues/iss052.html,CLOSE-CONSTRUCTED-STREAM:ARGUMENT-STREAM-ONLY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INPUT-STREAM-P OUTPUT-STREAM-P
@subsubsection CLHS: Function INPUT-STREAM-P, OUTPUT-STREAM-P
@anchor{#clhs-function-input-stream-p-output-stream-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_two-way-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_interactive-stream-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INPUT-STREAM-P, OUTPUT-STREAM-P}

@strong{Syntax:}

@strong{input-stream-p} @emph{stream} => @emph{generalized-boolean}

@strong{output-stream-p} @emph{stream} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#input-stream-p,@strong{input-stream-p}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{stream} is an
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#output-stream-p,@strong{output-stream-p}} returns
@uref{glo_t.html#true,@emph{true}} if @emph{stream} is an
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (input-stream-p *standard-input*) =>  true
 (input-stream-p *terminal-io*) =>  true
 (input-stream-p (make-string-output-stream)) =>  false

 (output-stream-p *standard-output*) =>  true
 (output-stream-p *terminal-io*) =>  true
 (output-stream-p (make-string-input-stream "jr")) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INTERACTIVE-STREAM-P
@subsubsection CLHS: Function INTERACTIVE-STREAM-P
@anchor{#clhs-function-interactive-stream-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_input-str_put-stream-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_open-stream-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INTERACTIVE-STREAM-P}

@strong{Syntax:}

@strong{interactive-stream-p} @emph{stream} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{stream} is an
@uref{glo_i.html#interactive_stream,@emph{interactive stream}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (when (> measured limit)
   (let ((error (round (* (- measured limit) 100)
                       limit)))
     (unless (if (interactive-stream-p *query-io*)
                 (yes-or-no-p "The frammis is out of tolerance by ~D%.~@
                               Is it safe to proceed? " error)
                 (< error 15))  ;15% is acceptable
       (error "The frammis is out of tolerance by ~D%." error))))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:}

@uref{sec_21-1.html,Section 21.1 (Stream Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss328.html,STREAM-CAPABILITIES:INTERACTIVE-STREAM-P}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LISTEN
@subsubsection CLHS: Function LISTEN
@anchor{#clhs-function-listen}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-open-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_clear-input.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LISTEN}

@strong{Syntax:}

@strong{listen} @emph{&optional input-stream} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if there is a character
immediately available from @emph{input-stream}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}. On a non-interactive
@emph{input-stream}, @ref{#listen,@strong{listen}} returns
@uref{glo_t.html#true,@emph{true}} except when at
@uref{glo_e.html#end_of_file,@emph{end of file}}[1]. If an
@uref{glo_e.html#end_of_file,@emph{end of file}} is encountered,
@ref{#listen,@strong{listen}} returns
@uref{glo_f.html#false,@emph{false}}. @ref{#listen,@strong{listen}} is
intended to be used when @emph{input-stream} obtains characters from an
interactive device such as a keyboard.

@strong{Examples:}

@verbatim
 (progn (unread-char (read-char)) (list (listen) (read-char)))
>>  1
=>  (T #\1)
 (progn (clear-input) (listen))
=>  NIL ;Unless you're a very fast typist!
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_interactive-stream-p.html#interactive-stream-p,@strong{interactive-stream-p}},
@uref{fun_read-char-no-hang.html#read-char-no-hang,@strong{read-char-no-hang}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-BROADCAST-STREAM
@subsubsection CLHS: Function MAKE-BROADCAST-STREAM
@anchor{#clhs-function-make-broadcast-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_broadcast_ream-streams.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-two-way-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-BROADCAST-STREAM}

@strong{Syntax:}

@strong{make-broadcast-stream} @emph{&rest streams} =>
@emph{broadcast-stream}

@strong{Arguments and Values:}

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{broadcast-stream}---a
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}}.

@strong{Description:}

Returns a @uref{glo_b.html#broadcast_stream,@emph{broadcast stream}}.

@strong{Examples:}

@verbatim
 (setq a-stream (make-string-output-stream)
        b-stream (make-string-output-stream)) =>  #<String Output Stream>
 (format (make-broadcast-stream a-stream b-stream)
          "this will go to both streams") =>  NIL
 (get-output-stream-string a-stream) =>  "this will go to both streams"
 (get-output-stream-string b-stream) =>  "this will go to both streams"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
@emph{stream} is not an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:}

@uref{fun_broadcast_ream-streams.html#broadcast-stream-streams,@strong{broadcast-stream-streams}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-CONCATENATED-STREAM
@subsubsection CLHS: Function MAKE-CONCATENATED-STREAM
@anchor{#clhs-function-make-concatenated-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_concatena_ream-streams.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-outpu_tream-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-CONCATENATED-STREAM}

@strong{Syntax:}

@strong{make-concatenated-stream} @emph{&rest input-streams} =>
@emph{concatenated-stream}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{concatenated-stream}---a
@uref{glo_c.html#concatenated_stream,@emph{concatenated stream}}.

@strong{Description:}

Returns a @uref{glo_c.html#concatenated_stream,@emph{concatenated
stream}} that has the indicated @emph{input-streams} initially
associated with it.

@strong{Examples:}

@verbatim
 (read (make-concatenated-stream
         (make-string-input-stream "1")
         (make-string-input-stream "2"))) =>  12
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if any
argument is not an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:}

@uref{fun_concatena_ream-streams.html#concatenated-stream-streams,@strong{concatenated-stream-streams}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-ECHO-STREAM
@subsubsection CLHS: Function MAKE-ECHO-STREAM
@anchor{#clhs-function-make-echo-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_echo-stre_utput-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_concatena_ream-streams.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-ECHO-STREAM}

@strong{Syntax:}

@strong{make-echo-stream} @emph{input-stream output-stream} =>
@emph{echo-stream}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{output-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{echo-stream}---an @uref{glo_e.html#echo_stream,@emph{echo
stream}}.

@strong{Description:}

Creates and returns an @uref{glo_e.html#echo_stream,@emph{echo stream}}
that takes input from @emph{input-stream} and sends output to
@emph{output-stream}.

@strong{Examples:}

@verbatim
 (let ((out (make-string-output-stream)))
    (with-open-stream 
        (s (make-echo-stream
            (make-string-input-stream "this-is-read-and-echoed")
            out))
      (read s)
      (format s " * this-is-direct-output")
      (get-output-stream-string out)))
=>  "this-is-read-and-echoed * this-is-direct-output"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_echo-stre_utput-stream.html#echo-stream-input-stream,@strong{echo-stream-input-stream}},
@uref{fun_echo-stre_utput-stream.html#echo-stream-output-stream,@strong{echo-stream-output-stream}},
@uref{fun_make-two-way-stream.html#make-two-way-stream,@strong{make-two-way-stream}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-STRING-INPUT-STREAM
@subsubsection CLHS: Function MAKE-STRING-INPUT-STREAM
@anchor{#clhs-function-make-string-input-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-outpu_tream-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-stri_utput-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-STRING-INPUT-STREAM}

@strong{Syntax:}

@strong{make-string-input-stream} @emph{string &optional start end} =>
@emph{string-stream}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{string-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}}.

@strong{Description:}

Returns an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}}. This
@uref{glo_s.html#stream,@emph{stream}} will supply, in order, the
@uref{glo_c.html#character,@emph{characters}} in the substring of
@emph{string} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end}. After the last
@uref{glo_c.html#character,@emph{character}} has been supplied, the
@uref{glo_s.html#string_stream,@emph{string stream}} will then be at
@uref{glo_e.html#end_of_file,@emph{end of file}}.

@strong{Examples:}

@verbatim
 (let ((string-stream (make-string-input-stream "1 one ")))
   (list (read string-stream nil nil)
         (read string-stream nil nil)
         (read string-stream nil nil)))
=>  (1 ONE NIL)

 (read (make-string-input-stream "prefixtargetsuffix" 6 12)) =>  TARGET
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_with-input-from-string.html#with-input-from-string,@strong{with-input-from-string}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-STRING-OUTPUT-STREAM
@subsubsection CLHS: Function MAKE-STRING-OUTPUT-STREAM
@anchor{#clhs-function-make-string-output-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-stri_input-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-input-from-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-STRING-OUTPUT-STREAM}

@strong{Syntax:}

@strong{make-string-output-stream} @emph{&key element-type} =>
@emph{string-stream}

@strong{Arguments and Values:}

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}. The default is
@uref{syscla_character.html#character,@strong{character}}.

@emph{string-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#string_stream,@emph{string stream}}.

@strong{Description:}

Returns an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#string_stream,@emph{string stream}} that accepts
@uref{glo_c.html#character,@emph{characters}} and makes available (via
@uref{fun_get-outpu_tream-string.html#get-output-stream-string,@strong{get-output-stream-string}})
a @uref{glo_s.html#string,@emph{string}} that contains the
@uref{glo_c.html#character,@emph{characters}} that were actually output.

The @emph{element-type} names the @uref{glo_t.html#type,@emph{type}} of
the @uref{glo_e.html#element,@emph{elements}} of the
@uref{glo_s.html#string,@emph{string}}; a
@uref{glo_s.html#string,@emph{string}} is constructed of the most
specialized @uref{glo_t.html#type,@emph{type}} that can accommodate
@uref{glo_e.html#element,@emph{elements}} of that @emph{element-type}.

@strong{Examples:}

@verbatim
 (let ((s (make-string-output-stream)))
   (write-string "testing... " s)
   (prin1 1234 s)
   (get-output-stream-string s))
=>  "testing... 1234"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_get-outpu_tream-string.html#get-output-stream-string,@strong{get-output-stream-string}},
@uref{mac_with-output-to-string.html#with-output-to-string,@strong{with-output-to-string}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss040.html,CHARACTER-PROPOSAL:2-5-6}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-SYNONYM-STREAM
@subsubsection CLHS: Function MAKE-SYNONYM-STREAM
@anchor{#clhs-function-make-synonym-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_y-or-n-pcm_yes-or-no-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_synonym-stream-symbol.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-SYNONYM-STREAM}

@strong{Syntax:}

@strong{make-synonym-stream} @emph{symbol} => @emph{synonym-stream}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}} that names a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}.

@emph{synonym-stream}---a @uref{glo_s.html#synonym_stream,@emph{synonym
stream}}.

@strong{Description:}

Returns a @uref{glo_s.html#synonym_stream,@emph{synonym stream}} whose
@uref{glo_s.html#synonym_stream_symbol,@emph{synonym stream symbol}} is
@emph{symbol}.

@strong{Examples:}

@verbatim
 (setq a-stream (make-string-input-stream "a-stream")
        b-stream (make-string-input-stream "b-stream"))
=>  #<String Input Stream> 
 (setq s-stream (make-synonym-stream 'c-stream))
=>  #<SYNONYM-STREAM for C-STREAM> 
 (setq c-stream a-stream)
=>  #<String Input Stream> 
 (read s-stream) =>  A-STREAM
 (setq c-stream b-stream)
=>  #<String Input Stream> 
 (read s-stream) =>  B-STREAM
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:}

@uref{sec_21-1.html,Section 21.1 (Stream Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-TWO-WAY-STREAM
@subsubsection CLHS: Function MAKE-TWO-WAY-STREAM
@anchor{#clhs-function-make-two-way-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-broadcast-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_two-way-s_utput-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-TWO-WAY-STREAM}

@strong{Syntax:}

@strong{make-two-way-stream} @emph{input-stream output-stream} =>
@emph{two-way-stream}

@strong{Arguments and Values:}

@emph{input-stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{output-stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{two-way-stream}---a @uref{glo_t.html#two-way_stream,@emph{two-way
stream}}.

@strong{Description:}

Returns a @uref{glo_t.html#two-way_stream,@emph{two-way stream}} that
gets its input from @emph{input-stream} and sends its output to
@emph{output-stream}.

@strong{Examples:}

@verbatim
 (with-output-to-string (out)
    (with-input-from-string (in "input...")
      (let ((two (make-two-way-stream in out)))
        (format two "output...")
        (setq what-is-read (read two))))) =>  "output..."
 what-is-read =>  INPUT... 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{input-stream} is not an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}. Should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{output-stream} is not an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function OPEN-STREAM-P
@subsubsection CLHS: Function OPEN-STREAM-P
@anchor{#clhs-function-open-stream-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_interactive-stream-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_stream-element-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{OPEN-STREAM-P}

@strong{Syntax:}

@strong{open-stream-p} @emph{stream} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{stream} is an
@uref{glo_o.html#open,@emph{open}}
@uref{glo_s.html#stream,@emph{stream}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@uref{glo_s.html#stream,@emph{Streams}} are open until they have been
explicitly closed with @uref{fun_close.html#close,@strong{close}}, or
until they are implicitly closed due to exit from a
@uref{mac_with-output-to-string.html#with-output-to-string,@strong{with-output-to-string}},
@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}},
@uref{mac_with-input-from-string.html#with-input-from-string,@strong{with-input-from-string}},
or
@uref{mac_with-open-stream.html#with-open-stream,@strong{with-open-stream}}
@uref{glo_f.html#form,@emph{form}}.

@strong{Examples:}

@verbatim
 (open-stream-p *standard-input*) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{fun_close.html#close,@strong{close}}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function OPEN
@subsubsection CLHS: Function OPEN
@anchor{#clhs-function-open}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_file-string-length.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_stream-external-format.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{OPEN}

@strong{Syntax:}

@strong{open} @emph{filespec &key direction element-type if-exists
if-does-not-exist external-format}

=> @emph{stream}

@strong{Arguments and Values:}

@emph{filespec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{direction}---one of :input, :output, :io, or :probe. The default
is :input.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}} for @uref{glo_r.html#recognizable_subtype,@emph{recognizable
subtype}} of @uref{syscla_character.html#character,@strong{character}};
or a @uref{glo_t.html#type_specifier,@emph{type specifier}} for a
@uref{glo_f.html#finite,@emph{finite}}
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{glo_i.html#integer,@emph{integer}}; or one of the
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{typ_signed-byte.html#signed-byte,@strong{signed-byte}},
@uref{typ_unsigned-byte.html#unsigned-byte,@strong{unsigned-byte}}, or
:default. The default is
@uref{syscla_character.html#character,@strong{character}}.

@emph{if-exists}---one of :error, :new-version, :rename,
:rename-and-delete, :overwrite, :append, :supersede, or
@uref{any_nil.html#nil,@strong{nil}}. The default is :new-version if the
version component of @emph{filespec} is :newest, or :error otherwise.

@emph{if-does-not-exist}---one of :error, :create, or
@uref{any_nil.html#nil,@strong{nil}}. The default is :error if
@emph{direction} is :input or @emph{if-exists} is :overwrite or :append;
:create if @emph{direction} is :output or :io, and @emph{if-exists} is
neither :overwrite nor :append; or @uref{any_nil.html#nil,@strong{nil}}
when @emph{direction} is :probe.

@emph{external-format}---an
@uref{glo_e.html#external_file_format_designator,@emph{external file
format designator}}. The default is :default.

@emph{stream}---a @uref{glo_f.html#file_stream,@emph{file stream}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#open,@strong{open}} creates, opens, and returns a
@uref{glo_f.html#file_stream,@emph{file stream}} that is connected to
the file specified by @emph{filespec}. @emph{Filespec} is the name of
the file to be opened. If the @emph{filespec}
@uref{glo_d.html#designator,@emph{designator}} is a
@uref{glo_s.html#stream,@emph{stream}}, that
@uref{glo_s.html#stream,@emph{stream}} is not closed first or otherwise
affected.

The keyword arguments to @ref{#open,@strong{open}} specify the
characteristics of the @uref{glo_f.html#file_stream,@emph{file stream}}
that is returned, and how to handle errors.

If @emph{direction} is :input or :probe, or if @emph{if-exists} is not
:new-version and the version component of the @emph{filespec} is
:newest, then the file opened is that file already existing in the file
system that has a version greater than that of any other file in the
file system whose other pathname components are the same as those of
@emph{filespec}.

An implementation is required to recognize all of the
@ref{#open,@strong{open}} keyword options and to do something reasonable
in the context of the host operating system. For example, if a file
system does not support distinct file versions and does not distinguish
the notions of deletion and expunging, :new-version might be treated the
same as :rename or :supersede, and :rename-and-delete might be treated
the same as :supersede.

:direction

These are the possible values for @emph{direction}, and how they affect
the nature of the @uref{glo_s.html#stream,@emph{stream}} that is
created:

:input

Causes the creation of an @uref{glo_i.html#input,@emph{input}}
@uref{glo_f.html#file_stream,@emph{file stream}}.

:output

Causes the creation of an @uref{glo_o.html#output,@emph{output}}
@uref{glo_f.html#file_stream,@emph{file stream}}.

:io

Causes the creation of a
@uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_f.html#file_stream,@emph{file stream}}.

:probe

Causes the creation of a ``no-directional''
@uref{glo_f.html#file_stream,@emph{file stream}}; in effect, the
@uref{glo_f.html#file_stream,@emph{file stream}} is created and then
closed prior to being returned by @ref{#open,@strong{open}}.

:element-type

The @emph{element-type} specifies the unit of transaction for the
@uref{glo_f.html#file_stream,@emph{file stream}}. If it is :default, the
unit is determined by @uref{glo_f.html#file_system,@emph{file system}},
possibly based on the @uref{glo_f.html#file,@emph{file}}.

:if-exists

@emph{if-exists} specifies the action to be taken if @emph{direction} is
:output or :io and a file of the name @emph{filespec} already exists. If
@emph{direction} is :input, not supplied, or :probe, @emph{if-exists} is
ignored. These are the results of @ref{#open,@strong{open}} as modified
by @emph{if-exists}:

:error

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

:new-version

A new file is created with a larger version number.

:rename

The existing file is renamed to some other name and then a new file is
created.

:rename-and-delete

The existing file is renamed to some other name, then it is deleted but
not expunged, and then a new file is created.

:overwrite

Output operations on the @uref{glo_s.html#stream,@emph{stream}}
destructively modify the existing file. If @emph{direction} is :io the
file is opened in a bidirectional mode that allows both reading and
writing. The file pointer is initially positioned at the beginning of
the file; however, the file is not truncated back to length zero when it
is opened.

:append

Output operations on the @uref{glo_s.html#stream,@emph{stream}}
destructively modify the existing file. The file pointer is initially
positioned at the end of the file.

If @emph{direction} is :io, the file is opened in a bidirectional mode
that allows both reading and writing.

:supersede

The existing file is superseded; that is, a new file with the same name
as the old one is created. If possible, the implementation should not
destroy the old file until the new
@uref{glo_s.html#stream,@emph{stream}} is closed.

@uref{any_nil.html#nil,@strong{nil}}

No file or @uref{glo_s.html#stream,@emph{stream}} is created; instead,
@uref{any_nil.html#nil,@strong{nil}} is returned to indicate failure.

:if-does-not-exist

@emph{if-does-not-exist} specifies the action to be taken if a file of
name @emph{filespec} does not already exist. These are the results of
@ref{#open,@strong{open}} as modified by @emph{if-does-not-exist}:

:error

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

:create

An empty file is created. Processing continues as if the file had
already existed but no processing as directed by @emph{if-exists} is
performed.

@uref{any_nil.html#nil,@strong{nil}}

No file or @uref{glo_s.html#stream,@emph{stream}} is created; instead,
@uref{any_nil.html#nil,@strong{nil}} is returned to indicate failure.

:external-format

This option selects an
@uref{glo_e.html#external_file_format,@emph{external file format}} for
the @uref{glo_f.html#file,@emph{file}}: The only
@uref{glo_s.html#standardized,@emph{standardized}} value for this option
is :default, although
@uref{glo_i.html#implementation,@emph{implementations}} are permitted to
define additional @uref{glo_e.html#external_file_format,@emph{external
file formats}} and
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
values returned by
@uref{fun_stream-external-format.html#stream-external-format,@strong{stream-external-format}}
can also be used by @uref{glo_c.html#conforming_program,@emph{conforming
programs}}.

The @emph{external-format} is meaningful for any kind of
@uref{glo_f.html#file_stream,@emph{file stream}} whose
@uref{glo_e.html#element_type,@emph{element type}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_c.html#character,@emph{character}}. This option is ignored for
@uref{glo_s.html#stream,@emph{streams}} for which it is not meaningful;
however, @uref{glo_i.html#implementation,@emph{implementations}} may
define other @uref{glo_e.html#element_type,@emph{element types}} for
which it is meaningful. The consequences are unspecified if a
@uref{glo_c.html#character,@emph{character}} is written that cannot be
represented by the given
@uref{glo_e.html#external_file_format,@emph{external file format}}.

When a file is opened, a @uref{glo_f.html#file_stream,@emph{file
stream}} is constructed to serve as the file system's ambassador to the
Lisp environment; operations on the
@uref{glo_f.html#file_stream,@emph{file stream}} are reflected by
operations on the file in the file system.

A file can be deleted, renamed, or destructively modified by
@ref{#open,@strong{open}}.

For information about opening relative pathnames, see
@uref{sec_19-2-3.html,Section 19.2.3 (Merging Pathnames)}.

@strong{Examples:}

@verbatim
 (open filespec :direction :probe)  =>  #<Closed Probe File Stream...>
 (setq q (merge-pathnames (user-homedir-pathname) "test"))
=>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY directory-name
    :NAME "test" :TYPE NIL :VERSION :NEWEST>
 (open filespec :if-does-not-exist :create) =>  #<Input File Stream...>
 (setq s (open filespec :direction :probe)) =>  #<Closed Probe File Stream...>
 (truename s) =>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY
    directory-name :NAME filespec :TYPE extension :VERSION 1>
 (open s :direction :output :if-exists nil) =>  NIL 
@end verbatim

@strong{Affected By:}

The nature and state of the host computer's
@uref{glo_f.html#file_system,@emph{file system}}.

@strong{Exceptional Situations:}

If @emph{if-exists} is :error, (subject to the constraints on the
meaning of @emph{if-exists} listed above), an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

If @emph{if-does-not-exist} is :error (subject to the constraints on the
meaning of @emph{if-does-not-exist} listed above), an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

If it is impossible for an implementation to handle some option in a
manner close to what is specified here, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} might be signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is signaled
if (wild-pathname-p @emph{filespec}) returns true.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if the
@emph{external-format} is not understood by the
@uref{glo_i.html#implementation,@emph{implementation}}.

The various @uref{glo_f.html#file_system,@emph{file systems}} in
existence today have widely differing capabilities, and some aspects of
the @uref{glo_f.html#file_system,@emph{file system}} are beyond the
scope of this specification to define. A given
@uref{glo_i.html#implementation,@emph{implementation}} might not be able
to support all of these options in exactly the manner stated. An
@uref{glo_i.html#implementation,@emph{implementation}} is required to
recognize all of these option keywords and to try to do something
``reasonable'' in the context of the host
@uref{glo_f.html#file_system,@emph{file system}}. Where necessary to
accomodate the @uref{glo_f.html#file_system,@emph{file system}}, an
@uref{glo_i.html#implementation,@emph{implementation}} deviate slightly
from the semantics specified here without being disqualified for
consideration as a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}}. If it is utterly impossible for an
@uref{glo_i.html#implementation,@emph{implementation}} to handle some
option in a manner similar to what is specified here, it may simply
signal an error.

With regard to the :element-type option, if a
@uref{glo_t.html#type,@emph{type}} is requested that is not supported by
the @uref{glo_f.html#file_system,@emph{file system}}, a substitution of
types such as that which goes on in @emph{upgrading} is permissible. As
a minimum requirement, it should be the case that opening an
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}} to a
@uref{glo_f.html#file,@emph{file}} in a given
@uref{glo_e.html#element_type,@emph{element type}} and later opening an
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} to the same
@uref{glo_f.html#file,@emph{file}} in the same
@uref{glo_e.html#element_type,@emph{element type}} should work
compatibly.

@strong{See Also:}

@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}},
@uref{fun_close.html#close,@strong{close}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_19-2-3.html,Section 19.2.3 (Merging Pathnames)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

@ref{#open,@strong{open}} does not automatically close the file when an
abnormal exit occurs.

When @emph{element-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{syscla_character.html#character,@strong{character}},
@uref{fun_read-char.html#read-char,@strong{read-char}} and/or
@uref{fun_write-char.html#write-char,@strong{write-char}} can be used on
the resulting @uref{glo_f.html#file_stream,@emph{file stream}}.

When @emph{element-type} is a @uref{glo_s.html#subtype,@emph{subtype}}
of @uref{glo_i.html#integer,@emph{integer}},
@uref{fun_read-byte.html#read-byte,@strong{read-byte}} and/or
@uref{fun_write-byte.html#write-byte,@strong{write-byte}} can be used on
the resulting @uref{glo_f.html#file_stream,@emph{file stream}}.

When @emph{element-type} is :default, the
@uref{glo_t.html#type,@emph{type}} can be determined by using
@uref{fun_stream-element-type.html#stream-element-type,@strong{stream-element-type}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss039.html,CHARACTER-PROPOSAL:2-5-2}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PEEK-CHAR
@subsubsection CLHS: Function PEEK-CHAR
@anchor{#clhs-function-peek-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_write-byte.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PEEK-CHAR}

@strong{Syntax:}

@strong{peek-char} @emph{&optional peek-type input-stream eof-error-p
eof-value recursive-p} => @emph{char}

@strong{Arguments and Values:}

@emph{peek-type}---a @uref{glo_c.html#character,@emph{character}} or
@uref{any_t.html#t,@strong{t}} or @uref{any_nil.html#nil,@strong{nil}}.

@emph{input-stream}---@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{char}---a @uref{glo_c.html#character,@emph{character}} or the
@emph{eof-value}.

@strong{Description:}

@ref{#peek-char,@strong{peek-char}} obtains the next character in
@emph{input-stream} without actually reading it, thus leaving the
character to be read at a later time. It can also be used to skip over
and discard intervening characters in the @emph{input-stream} until a
particular character is found.

If @emph{peek-type} is not supplied or
@uref{any_nil.html#nil,@strong{nil}},
@ref{#peek-char,@strong{peek-char}} returns the next character to be
read from @emph{input-stream}, without actually removing it from
@emph{input-stream}. The next time input is done from
@emph{input-stream}, the character will still be there. If
@emph{peek-type} is @uref{any_t.html#t,@strong{t}}, then
@ref{#peek-char,@strong{peek-char}} skips over
@uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{characters}}, but not comments, and
then performs the peeking operation on the next character. The last
character examined, the one that starts an
@uref{glo_o.html#object,@emph{object}}, is not removed from
@emph{input-stream}. If @emph{peek-type} is a
@uref{glo_c.html#character,@emph{character}}, then
@ref{#peek-char,@strong{peek-char}} skips over input characters until a
character that is
@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}} to that
@uref{glo_c.html#character,@emph{character}} is found; that character is
left in @emph{input-stream}.

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs and
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}},
@emph{eof-value} is returned.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, this call
is expected to be embedded in a higher-level call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} or a similar
@uref{glo_f.html#function,@emph{function}} used by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

When @emph{input-stream} is an @uref{glo_e.html#echo_stream,@emph{echo
stream}}, characters that are only peeked at are not echoed. In the case
that @emph{peek-type} is not @uref{any_nil.html#nil,@strong{nil}}, the
characters that are passed by @ref{#peek-char,@strong{peek-char}} are
treated as if by @uref{fun_read-char.html#read-char,@strong{read-char}},
and so are echoed unless they have been marked otherwise by
@uref{fun_unread-char.html#unread-char,@strong{unread-char}}.

@strong{Examples:}

@verbatim
 (with-input-from-string (input-stream "    1 2 3 4 5")
    (format t "~S ~S ~S" 
            (peek-char t input-stream)
            (peek-char #\4 input-stream)
            (peek-char nil input-stream)))
>>  #\1 #\4 #\4
=>  NIL
@end verbatim

@strong{Affected By:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}},
@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:}

If @emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}} and an
@uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled.

If @emph{peek-type} is a @uref{glo_c.html#character,@emph{character}},
an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs, and
@emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}} and an
@uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss268.html,PEEK-CHAR-READ-CHAR-ECHO:FIRST-READ-CHAR}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-BYTE
@subsubsection CLHS: Function READ-BYTE
@anchor{#clhs-function-read-byte}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_streamp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_write-byte.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-BYTE}

@strong{Syntax:}

@strong{read-byte} @emph{stream &optional eof-error-p eof-value} =>
@emph{byte}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_b.html#binary,@emph{binary}}
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{byte}---an @uref{glo_i.html#integer,@emph{integer}}, or the
@emph{eof-value}.

@strong{Description:}

@ref{#read-byte,@strong{read-byte}} reads and returns one byte from
@emph{stream}.

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs and
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}}, the
@emph{eof-value} is returned.

@strong{Examples:}

@verbatim
 (with-open-file (s "temp-bytes" 
                     :direction :output
                     :element-type 'unsigned-byte)
    (write-byte 101 s)) =>  101
 (with-open-file (s "temp-bytes" :element-type 'unsigned-byte)
    (format t "~S ~S" (read-byte s) (read-byte s nil 'eof)))
>>  101 EOF
=>  NIL
@end verbatim

@strong{Side Effects:}

Modifies @emph{stream}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}.

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} if @emph{stream} is not a
@uref{glo_b.html#binary,@emph{binary}}
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

If there are no @uref{glo_b.html#byte,@emph{bytes}} remaining in the
@emph{stream} and @emph{eof-error-p} is
@uref{glo_t.html#true,@emph{true}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled.

@strong{See Also:}

@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{fun_read-sequence.html#read-sequence,@strong{read-sequence}},
@uref{fun_write-byte.html#write-byte,@strong{write-byte}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss285.html,READ-AND-WRITE-BYTES:NEW-FUNCTIONS}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-CHAR-NO-HANG
@subsubsection CLHS: Function READ-CHAR-NO-HANG
@anchor{#clhs-function-read-char-no-hang}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_terpricm_fresh-line.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-CHAR-NO-HANG}

@strong{Syntax:}

@strong{read-char-no-hang} @emph{&optional input-stream eof-error-p
eof-value recursive-p} => @emph{char}

@strong{Arguments and Values:}

@emph{input-stream} -- an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{char}---a @uref{glo_c.html#character,@emph{character}} or
@uref{any_nil.html#nil,@strong{nil}} or the @emph{eof-value}.

@strong{Description:}

@ref{#read-char-no-hang,@strong{read-char-no-hang}} returns a character
from @emph{input-stream} if such a character is available. If no
character is available,
@ref{#read-char-no-hang,@strong{read-char-no-hang}} returns
@uref{any_nil.html#nil,@strong{nil}}.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, this call
is expected to be embedded in a higher-level call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} or a similar
@uref{glo_f.html#function,@emph{function}} used by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs and
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}},
@emph{eof-value} is returned.

@strong{Examples:}

@verbatim
;; This code assumes an implementation in which a newline is not
;; required to terminate input from the console.
 (defun test-it ()
   (unread-char (read-char))
   (list (read-char-no-hang) 
         (read-char-no-hang) 
         (read-char-no-hang)))
=>  TEST-IT
;; Implementation A, where a Newline is not required to terminate
;; interactive input on the console.
 (test-it)
>>  a
=>  (#\a NIL NIL)
;; Implementation B, where a Newline is required to terminate
;; interactive input on the console, and where that Newline remains
;; on the input stream.
 (test-it)
>>  a<NEWLINE>
=>  (#\a #\Newline NIL)
@end verbatim

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:}

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs when
@emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled .

@strong{See Also:}

@uref{fun_listen.html#listen,@strong{listen}}

@strong{Notes:}

@ref{#read-char-no-hang,@strong{read-char-no-hang}} is exactly like
@uref{fun_read-char.html#read-char,@strong{read-char}}, except that if
it would be necessary to wait in order to get a character (as from a
keyboard), @uref{any_nil.html#nil,@strong{nil}} is immediately returned
without waiting.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-CHAR
@subsubsection CLHS: Function READ-CHAR
@anchor{#clhs-function-read-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_peek-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-char-no-hang.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-CHAR}

@strong{Syntax:}

@strong{read-char} @emph{&optional input-stream eof-error-p eof-value
recursive-p} => @emph{char}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{char}---a @uref{glo_c.html#character,@emph{character}} or the
@emph{eof-value}.

@strong{Description:}

@ref{#read-char,@strong{read-char}} returns the next
@uref{glo_c.html#character,@emph{character}} from @emph{input-stream}.

When @emph{input-stream} is an @emph{echo stream}, the character is
echoed on @emph{input-stream} the first time the character is seen.
Characters that are not echoed by @ref{#read-char,@strong{read-char}}
are those that were put there by
@uref{fun_unread-char.html#unread-char,@strong{unread-char}} and hence
are assumed to have been echoed already by a previous call to
@ref{#read-char,@strong{read-char}}.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, this call
is expected to be embedded in a higher-level call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} or a similar
@uref{glo_f.html#function,@emph{function}} used by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs and
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}},
@emph{eof-value} is returned.

@strong{Examples:}

@verbatim
 (with-input-from-string (is "0123")
    (do ((c (read-char is) (read-char is nil 'the-end)))
        ((not (characterp c)))
     (format t "~S " c)))
>>  #\0 #\1 #\2 #\3
=>  NIL
@end verbatim

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:}

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs before
a character can be read, and @emph{eof-error-p} is
@uref{glo_t.html#true,@emph{true}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled.

@strong{See Also:}

@uref{fun_read-byte.html#read-byte,@strong{read-byte}},
@uref{fun_read-sequence.html#read-sequence,@strong{read-sequence}},
@uref{fun_write-char.html#write-char,@strong{write-char}},
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}

@strong{Notes:}

The corresponding output function is
@uref{fun_write-char.html#write-char,@strong{write-char}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss285.html,READ-AND-WRITE-BYTES:NEW-FUNCTIONS}
@item
@uref{../Issues/iss268.html,PEEK-CHAR-READ-CHAR-ECHO:FIRST-READ-CHAR}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-LINE
@subsubsection CLHS: Function READ-LINE
@anchor{#clhs-function-read-line}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_write-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_write-str_m_write-line.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-LINE}

@strong{Syntax:}

@strong{read-line} @emph{&optional input-stream eof-error-p eof-value
recursive-p}

=> @emph{line, missing-newline-p}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{line}---a @uref{glo_s.html#string,@emph{string}} or the
@emph{eof-value}.

@emph{missing-newline-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Reads from @emph{input-stream} a line of text that is terminated by a
@uref{glo_n.html#newline,@emph{newline}} or
@uref{glo_e.html#end_of_file,@emph{end of file}}.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, this call
is expected to be embedded in a higher-level call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} or a similar
@uref{glo_f.html#function,@emph{function}} used by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

The @uref{glo_p.html#primary_value,@emph{primary value}}, @emph{line},
is the line that is read, represented as a
@uref{glo_s.html#string,@emph{string}} (without the trailing
@uref{glo_n.html#newline,@emph{newline}}, if any). If @emph{eof-error-p}
is @uref{glo_f.html#false,@emph{false}} and the
@uref{glo_e.html#end_of_file,@emph{end of file}} for @emph{input-stream}
is reached before any @uref{glo_c.html#character,@emph{characters}} are
read, @emph{eof-value} is returned as the @emph{line}.

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{missing-newline-p}, is a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}} that is
@uref{glo_f.html#false,@emph{false}} if the @emph{line} was terminated
by a @uref{glo_n.html#newline,@emph{newline}}, or
@uref{glo_t.html#true,@emph{true}} if the @emph{line} was terminated by
the @uref{glo_e.html#end_of_file,@emph{end of file}} for
@emph{input-stream} (or if the @emph{line} is the @emph{eof-value}).

@strong{Examples:}

@verbatim
 (setq a "line 1
 line2")
=>  "line 1
 line2"
 (read-line (setq input-stream (make-string-input-stream a)))
=>  "line 1", false
 (read-line input-stream)
=>  "line2", true
 (read-line input-stream nil nil)
=>  NIL, true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:}

If an @uref{glo_e.html#end_of_file,@emph{end of file}}[2] occurs before
any characters are read in the line, an error is signaled if
@emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}}.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}

@strong{Notes:}

The corresponding output function is
@uref{fun_write-str_m_write-line.html#write-line,@strong{write-line}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-SEQUENCE
@subsubsection CLHS: Function READ-SEQUENCE
@anchor{#clhs-function-read-sequence}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_write-str_m_write-line.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_write-sequence.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-SEQUENCE}

@strong{Syntax:}

@strong{read-sequence} @emph{sequence stream &key start end} =>
@emph{position}

@emph{sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@emph{position}---an @uref{glo_i.html#integer,@emph{integer}} greater
than or equal to zero, and less than or equal to the
@uref{glo_l.html#length,@emph{length}} of the @emph{sequence}.

@strong{Description:}

Destructively modifies @emph{sequence} by replacing the
@uref{glo_e.html#element,@emph{elements}} of @emph{sequence}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}
with @uref{glo_e.html#element,@emph{elements}} read from @emph{stream}.

@emph{Sequence} is destructively modified by copying successive
@uref{glo_e.html#element,@emph{elements}} into it from @emph{stream}. If
the @uref{glo_e.html#end_of_file,@emph{end of file}} for @emph{stream}
is reached before copying all @uref{glo_e.html#element,@emph{elements}}
of the subsequence, then the extra
@uref{glo_e.html#element,@emph{elements}} near the end of
@emph{sequence} are not updated.

@emph{Position} is the index of the first
@uref{glo_e.html#element,@emph{element}} of @emph{sequence} that was not
updated, which might be less than @emph{end} because the
@uref{glo_e.html#end_of_file,@emph{end of file}} was reached.

@strong{Examples:}

@verbatim
 (defvar *data* (make-array 15 :initial-element nil))
 (values (read-sequence *data* (make-string-input-stream "test string")) *data*)
 =>  11, #(#\t #\e #\s #\t #\Space #\s #\t #\r #\i #\n #\g NIL NIL NIL NIL)
@end verbatim

@strong{Side Effects:}

Modifies @emph{stream} and @emph{sequence}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}. Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{start} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}}. Should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{end} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}} or
@uref{any_nil.html#nil,@strong{nil}}.

Might signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if an
@uref{glo_e.html#element,@emph{element}} read from the @emph{stream} is
not a member of the @uref{glo_e.html#element_type,@emph{element type}}
of the @emph{sequence}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{fun_write-sequence.html#write-sequence,@strong{write-sequence}},
@uref{fun_read-line.html#read-line,@strong{read-line}}

@strong{Notes:}

@ref{#read-sequence,@strong{read-sequence}} is identical in effect to
iterating over the indicated subsequence and reading one
@uref{glo_e.html#element,@emph{element}} at a time from @emph{stream}
and storing it into @emph{sequence}, but may be more efficient than the
equivalent loop. An efficient implementation is more likely to exist for
the case where the @emph{sequence} is a
@uref{glo_v.html#vector,@emph{vector}} with the same
@uref{glo_e.html#element_type,@emph{element type}} as the @emph{stream}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STREAM-ELEMENT-TYPE
@subsubsection CLHS: Function STREAM-ELEMENT-TYPE
@anchor{#clhs-function-stream-element-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_open-stream-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_streamp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STREAM-ELEMENT-TYPE}

@strong{Syntax:}

@strong{stream-element-type} @emph{stream} => @emph{typespec}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

@ref{#stream-element-type,@strong{stream-element-type}} returns a
@uref{glo_t.html#type_specifier,@emph{type specifier}} that indicates
the @uref{glo_t.html#type,@emph{types}} of
@uref{glo_o.html#object,@emph{objects}} that may be read from or written
to @emph{stream}.

@uref{glo_s.html#stream,@emph{Streams}} created by
@uref{fun_open.html#open,@strong{open}} have an
@uref{glo_e.html#element_type,@emph{element type}} restricted to
@uref{syscla_integer.html#integer,@strong{integer}} or a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}.

@strong{Examples:}

@verbatim
;; Note that the stream must accomodate at least the specified type,
;; but might accomodate other types.  Further note that even if it does
;; accomodate exactly the specified type, the type might be specified in
;; any of several ways.
 (with-open-file (s "test" :element-type '(integer 0 1)
                           :if-exists :error
                           :direction :output)
   (stream-element-type s))
=>  INTEGER
OR=>  (UNSIGNED-BYTE 16)
OR=>  (UNSIGNED-BYTE 8)
OR=>  BIT
OR=>  (UNSIGNED-BYTE 1)
OR=>  (INTEGER 0 1)
OR=>  (INTEGER 0 (2))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STREAM-ERROR-STREAM
@subsubsection CLHS: Function STREAM-ERROR-STREAM
@anchor{#clhs-function-stream-error-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_stream-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_end-of-file.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STREAM-ERROR-STREAM}

@strong{Syntax:}

@strong{stream-error-stream} @emph{condition} => @emph{stream}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_stream-error.html#stream-error,@strong{stream-error}}.

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

Returns the offending @uref{glo_s.html#stream,@emph{stream}} of a
@uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_stream-error.html#stream-error,@strong{stream-error}}.

@strong{Examples:}

@verbatim
 (with-input-from-string (s "(FOO")
   (handler-case (read s)
     (end-of-file (c)
       (format nil "~&End of file on ~S." (stream-error-stream c)))))
"End of file on #<String Stream>."
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_stream-error.html#stream-error,@strong{stream-error}},
@uref{chap-9.html,Section 9 (Conditions)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STREAM-EXTERNAL-FORMAT
@subsubsection CLHS: Function STREAM-EXTERNAL-FORMAT
@anchor{#clhs-function-stream-external-format}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_open.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-open-file.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STREAM-EXTERNAL-FORMAT}

@strong{Syntax:}

@strong{stream-external-format} @emph{stream} => @emph{format}

@strong{Arguments and Values:}

@emph{stream}---a @uref{glo_f.html#file_stream,@emph{file stream}}.

@emph{format}---an @uref{glo_e.html#external_file_format,@emph{external
file format}}.

@strong{Description:}

Returns an
@uref{glo_e.html#external_file_format_designator,@emph{external file
format designator}} for the @emph{stream}.

@strong{Examples:}

@verbatim
 (with-open-file (stream "test" :direction :output)
   (stream-external-format stream))
=>  :DEFAULT
OR=>  :ISO8859/1-1987
OR=>  (:ASCII :SAIL)
OR=>  ACME::PROPRIETARY-FILE-FORMAT-17
OR=>  #<FILE-FORMAT :ISO646-1983 2343673>
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

the :external-format @uref{glo_a.html#argument,@emph{argument}} to the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_open.html#open,@strong{open}} and the
@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}}
@uref{glo_m.html#macro,@emph{macro}}.

@strong{Notes:}

The @emph{format} returned is not necessarily meaningful to other
@uref{glo_i.html#implementation,@emph{implementations}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function STREAMP
@subsubsection CLHS: Function STREAMP
@anchor{#clhs-function-streamp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_stream-element-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-byte.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{STREAMP}

@strong{Syntax:}

@strong{streamp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_stream.html#stream,@strong{stream}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@ref{#streamp,@strong{streamp}} is unaffected by whether @emph{object},
if it is a @uref{glo_s.html#stream,@emph{stream}}, is
@uref{glo_o.html#open,@emph{open}} or closed.

@strong{Examples:}

@verbatim
 (streamp *terminal-io*) =>  true
 (streamp 1) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (streamp object) ==  (typep object 'stream)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SYNONYM-STREAM-SYMBOL
@subsubsection CLHS: Function SYNONYM-STREAM-SYMBOL
@anchor{#clhs-function-synonym-stream-symbol}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-synonym-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_broadcast_ream-streams.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SYNONYM-STREAM-SYMBOL}

@strong{Syntax:}

@strong{synonym-stream-symbol} @emph{synonym-stream} => @emph{symbol}

@strong{Arguments and Values:}

@emph{synonym-stream}---a @uref{glo_s.html#synonym_stream,@emph{synonym
stream}}.

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

Returns the @uref{glo_s.html#symbol,@emph{symbol}} whose
@uref{acc_symbol-value.html#symbol-value,@strong{symbol-value}} the
@emph{synonym-stream} is using.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-synonym-stream.html#make-synonym-stream,@strong{make-synonym-stream}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TERPRI FRESH-LINE
@subsubsection CLHS: Function TERPRI, FRESH-LINE
@anchor{#clhs-function-terpri-fresh-line}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-char-no-hang.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unread-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TERPRI, FRESH-LINE}

@strong{Syntax:}

@strong{terpri} @emph{&optional output-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{fresh-line} @emph{&optional output-stream} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{output-stream} -- an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#terpri,@strong{terpri}} outputs a
@uref{glo_n.html#newline,@emph{newline}} to @emph{output-stream}.

@ref{#fresh-line,@strong{fresh-line}} is similar to
@ref{#terpri,@strong{terpri}} but outputs a
@uref{glo_n.html#newline,@emph{newline}} only if the
@emph{output-stream} is not already at the start of a line. If for some
reason this cannot be determined, then a
@uref{glo_n.html#newline,@emph{newline}} is output anyway.
@ref{#fresh-line,@strong{fresh-line}} returns
@uref{glo_t.html#true,@emph{true}} if it outputs a
@uref{glo_n.html#newline,@emph{newline}}; otherwise it returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (with-output-to-string (s)
    (write-string "some text" s)
    (terpri s)
    (terpri s)
    (write-string "more text" s))
=>  "some text

more text"
 (with-output-to-string (s)
    (write-string "some text" s)
    (fresh-line s)
    (fresh-line s)
    (write-string "more text" s))
=>  "some text
more text"
@end verbatim

@strong{Side Effects:}

The @emph{output-stream} is modified.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:}

None.

@strong{See Also:} None.

@strong{Notes:}

@ref{#terpri,@strong{terpri}} is identical in effect to

@verbatim
 (write-char #\Newline output-stream)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TWO-WAY-STREAM-INPUT-STREAM
@subsubsection CLHS: Function TWO-WAY-STREAM-INPUT-STREAM...
@anchor{#clhs-function-two-way-stream-input-stream...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-two-way-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_echo-stre_utput-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TWO-WAY-STREAM-INPUT-STREAM,
TWO-WAY-STREAM-OUTPUT-STREAM}

@strong{Syntax:}

@strong{two-way-stream-input-stream} @emph{two-way-stream} =>
@emph{input-stream}

@strong{two-way-stream-output-stream} @emph{two-way-stream} =>
@emph{output-stream}

@strong{Arguments and Values:}

@emph{two-way-stream}---a @uref{glo_t.html#two-way_stream,@emph{two-way
stream}}.

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{output-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

@ref{#two-way-stream-input-stream,@strong{two-way-stream-input-stream}}
returns the @uref{glo_s.html#stream,@emph{stream}} from which
@emph{two-way-stream} receives input.

@ref{#two-way-stream-output-stream,@strong{two-way-stream-output-stream}}
returns the @uref{glo_s.html#stream,@emph{stream}} to which
@emph{two-way-stream} sends output.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNREAD-CHAR
@subsubsection CLHS: Function UNREAD-CHAR
@anchor{#clhs-function-unread-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_terpricm_fresh-line.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_write-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNREAD-CHAR}

@strong{Syntax:}

@strong{unread-char} @emph{character &optional input-stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}; must
be the last @uref{glo_c.html#character,@emph{character}} that was read
from @emph{input-stream}.

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@strong{Description:}

@ref{#unread-char,@strong{unread-char}} places @emph{character} back
onto the front of @emph{input-stream} so that it will again be the next
character in @emph{input-stream}.

When @emph{input-stream} is an @uref{glo_e.html#echo_stream,@emph{echo
stream}}, no attempt is made to undo any echoing of the character that
might already have been done on @emph{input-stream}. However, characters
placed on @emph{input-stream} by @ref{#unread-char,@strong{unread-char}}
are marked in such a way as to inhibit later re-echo by
@uref{fun_read-char.html#read-char,@strong{read-char}}.

It is an error to invoke @ref{#unread-char,@strong{unread-char}} twice
consecutively on the same @uref{glo_s.html#stream,@emph{stream}} without
an intervening call to
@uref{fun_read-char.html#read-char,@strong{read-char}} (or some other
input operation which implicitly reads characters) on that
@uref{glo_s.html#stream,@emph{stream}}.

Invoking @uref{fun_peek-char.html#peek-char,@strong{peek-char}} or
@uref{fun_read-char.html#read-char,@strong{read-char}} commits all
previous characters. The consequences of invoking
@ref{#unread-char,@strong{unread-char}} on any character preceding that
which is returned by
@uref{fun_peek-char.html#peek-char,@strong{peek-char}} (including those
passed over by @uref{fun_peek-char.html#peek-char,@strong{peek-char}}
that has a @uref{glo_n.html#non-nil,@emph{non-nil}} @emph{peek-type})
are unspecified. In particular, the consequences of invoking
@ref{#unread-char,@strong{unread-char}} after
@uref{fun_peek-char.html#peek-char,@strong{peek-char}} are unspecified.

@strong{Examples:}

@verbatim
 (with-input-from-string (is "0123")
    (dotimes (i 6)
      (let ((c (read-char is)))
        (if (evenp i) (format t "~&~S ~S~%" i c) (unread-char c is)))))
>>  0 #\0
>>  2 #\1
>>  4 #\2
=>  NIL
@end verbatim

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_peek-char.html#peek-char,@strong{peek-char}},
@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{sec_21-1.html,Section 21.1 (Stream Concepts)}

@strong{Notes:}

@ref{#unread-char,@strong{unread-char}} is intended to be an efficient
mechanism for allowing the @uref{glo_l.html#lisp_reader,@emph{Lisp
reader}} and other parsers to perform one-character lookahead in
@emph{input-stream}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss357.html,UNREAD-CHAR-AFTER-PEEK-CHAR:DONT-ALLOW}
@item
@uref{../Issues/iss268.html,PEEK-CHAR-READ-CHAR-ECHO:FIRST-READ-CHAR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE-BYTE
@subsubsection CLHS: Function WRITE-BYTE
@anchor{#clhs-function-write-byte}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-byte.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_peek-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE-BYTE}

@strong{Syntax:}

@strong{write-byte} @emph{byte stream} => @emph{byte}

@strong{Arguments and Values:}

@emph{byte}---an @uref{glo_i.html#integer,@emph{integer}} of the
@uref{glo_s.html#stream_element_type,@emph{stream element type}} of
@uref{glo_s.html#stream,@emph{stream}}.

@emph{stream}---a @uref{glo_b.html#binary,@emph{binary}}
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

@ref{#write-byte,@strong{write-byte}} writes one byte, @emph{byte}, to
@emph{stream}.

@strong{Examples:}

@verbatim
 (with-open-file (s "temp-bytes" 
                    :direction :output
                    :element-type 'unsigned-byte)
    (write-byte 101 s)) =>  101
@end verbatim

@strong{Side Effects:}

@emph{stream} is modified.

@strong{Affected By:}

The @uref{glo_e.html#element_type,@emph{element type}} of the
@emph{stream}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{stream} is not a @uref{glo_s.html#stream,@emph{stream}}. Should
signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} if @emph{stream} is not a
@uref{glo_b.html#binary,@emph{binary}}
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

Might signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{byte} is not an @uref{glo_i.html#integer,@emph{integer}} of the
@uref{glo_s.html#stream_element_type,@emph{stream element type}} of
@uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:}

@uref{fun_read-byte.html#read-byte,@strong{read-byte}},
@uref{fun_write-char.html#write-char,@strong{write-char}},
@uref{fun_write-sequence.html#write-sequence,@strong{write-sequence}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss285.html,READ-AND-WRITE-BYTES:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE-CHAR
@subsubsection CLHS: Function WRITE-CHAR
@anchor{#clhs-function-write-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unread-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-line.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE-CHAR}

@strong{Syntax:}

@strong{write-char} @emph{character &optional output-stream} =>
@emph{character}

@strong{Arguments and Values:}

@emph{character}---a @uref{glo_c.html#character,@emph{character}}.

@emph{output-stream} -- an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

@ref{#write-char,@strong{write-char}} outputs @emph{character} to
@emph{output-stream}.

@strong{Examples:}

@verbatim
 (write-char #\a)
>>  a
=>  #\a
 (with-output-to-string (s) 
   (write-char #\a s)
   (write-char #\Space s)
   (write-char #\b s))
=>  "a b"
@end verbatim

@strong{Side Effects:}

The @emph{output-stream} is modified.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{fun_write-byte.html#write-byte,@strong{write-byte}},
@uref{fun_write-sequence.html#write-sequence,@strong{write-sequence}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss285.html,READ-AND-WRITE-BYTES:NEW-FUNCTIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE-SEQUENCE
@subsubsection CLHS: Function WRITE-SEQUENCE
@anchor{#clhs-function-write-sequence}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-sequence.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_file-length.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE-SEQUENCE}

@strong{Syntax:}

@strong{write-sequence} @emph{sequence stream &key start end} =>
@emph{sequence}

@emph{sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{sequence}. The defaults for @emph{start}
and @emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}},
respectively.

@strong{Description:}

@ref{#write-sequence,@strong{write-sequence}} writes the
@uref{glo_e.html#element,@emph{elements}} of the subsequence of
@emph{sequence} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end} to @emph{stream}.

@strong{Examples:}

@verbatim
 (write-sequence "bookworms" *standard-output* :end 4)
 >>  book
 =>  "bookworms"
@end verbatim

@strong{Side Effects:}

Modifies @emph{stream}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should be prepared to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{sequence} is not a @uref{glo_p.html#proper_sequence,@emph{proper
sequence}}. Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{start} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}}. Should signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{end} is not a non-negative
@uref{glo_i.html#integer,@emph{integer}} or
@uref{any_nil.html#nil,@strong{nil}}.

Might signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if an
@uref{glo_e.html#element,@emph{element}} of the
@uref{glo_b.html#bounded,@emph{bounded}}
@uref{glo_s.html#sequence,@emph{sequence}} is not a member of the
@uref{glo_s.html#stream_element_type,@emph{stream element type}} of the
@emph{stream}.

@strong{See Also:}

@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)},
@uref{fun_read-sequence.html#read-sequence,@strong{read-sequence}},
@uref{fun_write-str_m_write-line.html#write-string,@strong{write-string}},
@uref{fun_write-str_m_write-line.html#write-line,@strong{write-line}}

@strong{Notes:}

@ref{#write-sequence,@strong{write-sequence}} is identical in effect to
iterating over the indicated subsequence and writing one
@uref{glo_e.html#element,@emph{element}} at a time to @emph{stream}, but
may be more efficient than the equivalent loop. An efficient
implementation is more likely to exist for the case where the
@emph{sequence} is a @uref{glo_v.html#vector,@emph{vector}} with the
same @uref{glo_e.html#element_type,@emph{element type}} as the
@emph{stream}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE-STRING WRITE-LINE
@subsubsection CLHS: Function WRITE-STRING, WRITE-LINE
@anchor{#clhs-function-write-string-write-line}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-line.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-sequence.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE-STRING, WRITE-LINE}

@strong{Syntax:}

@strong{write-string} @emph{string &optional output-stream &key start
end} => @emph{string}

@strong{write-line} @emph{string &optional output-stream &key start end}
=> @emph{string}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{output-stream} -- an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@strong{Description:}

@ref{#write-string,@strong{write-string}} writes the
@uref{glo_c.html#character,@emph{characters}} of the subsequence of
@emph{string} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end} to @emph{output-stream}.
@ref{#write-line,@strong{write-line}} does the same thing, but then
outputs a newline afterwards.

@strong{Examples:}

@verbatim
 (prog1 (write-string "books" nil :end 4) (write-string "worms"))
>>  bookworms
=>  "books"
 (progn (write-char #\*)
        (write-line "test12" *standard-output* :end 5) 
        (write-line "*test2")
        (write-char #\*)
        nil)
>>  *test1
>>  *test2
>>  *
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_read-line.html#read-line,@strong{read-line}},
@uref{fun_write-char.html#write-char,@strong{write-char}}

@strong{Notes:}

@ref{#write-line,@strong{write-line}} and
@ref{#write-string,@strong{write-string}} return @emph{string}, not the
substring @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and
@emph{end}.

@verbatim
 (write-string string)
==  (dotimes (i (length string)
      (write-char (char string i)))

 (write-line string)
==  (prog1 (write-string string) (terpri))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function Y-OR-N-P YES-OR-NO-P
@subsubsection CLHS: Function Y-OR-N-P, YES-OR-NO-P
@anchor{#clhs-function-y-or-n-p-yes-or-no-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_finish-ou_clear-output.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-synonym-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{Y-OR-N-P, YES-OR-NO-P}

@strong{Syntax:}

@strong{y-or-n-p} @emph{&optional control &rest arguments} =>
@emph{generalized-boolean}

@strong{yes-or-no-p} @emph{&optional control &rest arguments} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{control}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{arguments}---@uref{glo_f.html#format_argument,@emph{format
arguments}} for @emph{control}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

These functions ask a question and parse a response from the user. They
return @uref{glo_t.html#true,@emph{true}} if the answer is affirmative,
or @uref{glo_f.html#false,@emph{false}} if the answer is negative.

@ref{#y-or-n-p,@strong{y-or-n-p}} is for asking the user a question
whose answer is either ``yes'' or ``no.'' It is intended that the reply
require the user to answer a yes-or-no question with a single character.
@ref{#yes-or-no-p,@strong{yes-or-no-p}} is also for asking the user a
question whose answer is either ``Yes'' or ``No.'' It is intended that
the reply require the user to take more action than just a single
keystroke, such as typing the full word yes or no followed by a newline.

@ref{#y-or-n-p,@strong{y-or-n-p}} types out a message (if supplied),
reads an answer in some
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
manner (intended to be short and simple, such as reading a single
character such as Y or N). @ref{#yes-or-no-p,@strong{yes-or-no-p}} types
out a message (if supplied), attracts the user's attention (for example,
by ringing the terminal's bell), and reads an answer in some
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
manner (intended to be multiple characters, such as YES or NO).

If @emph{format-control} is supplied and not
@uref{any_nil.html#nil,@strong{nil}}, then a
@uref{fun_terpricm_fresh-line.html#fresh-line,@strong{fresh-line}}
operation is performed; then a message is printed as if
@emph{format-control} and @emph{arguments} were given to
@uref{fun_format.html#format,@strong{format}}. In any case,
@ref{#yes-or-no-p,@strong{yes-or-no-p}} and
@ref{#y-or-n-p,@strong{y-or-n-p}} will provide a prompt such as ``(Y or
N)'' or ``(Yes or No)'' if appropriate.

All input and output are performed using
@uref{glo_q.html#query_iSLo,@emph{query I/O}}.

@strong{Examples:}

@verbatim
 (y-or-n-p "(t or nil) given by")
>>  (t or nil) given by (Y or N) Y
=>  true
 (yes-or-no-p "a ~S message" 'frightening) 
>>  a FRIGHTENING message (Yes or No) no
=>  false
 (y-or-n-p "Produce listing file?") 
>>  Produce listing file?
>>  Please respond with Y or N. n
=>  false
@end verbatim

@strong{Side Effects:}

Output to and input from @uref{glo_q.html#query_iSLo,@emph{query I/O}}
will occur.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STquery-ioST,@strong{*query-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_format.html#format,@strong{format}}

@strong{Notes:}

@ref{#yes-or-no-p,@strong{yes-or-no-p}} and
@ref{#yes-or-no-p,@strong{yes-or-no-p}} do not add question marks to the
end of the prompt string, so any desired question mark or other
punctuation should be explicitly included in the text query.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-INPUT-FROM-STRING
@subsubsection CLHS: Macro WITH-INPUT-FROM-STRING
@anchor{#clhs-macro-with-input-from-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-stri_utput-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-output-to-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-INPUT-FROM-STRING}

@strong{Syntax:}

@strong{with-input-from-string} @emph{(var string &key index start end)
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{string}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @uref{glo_s.html#string,@emph{string}}.

@emph{index}---a @uref{glo_p.html#place,@emph{place}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{result}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

Creates an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}}, provides an
opportunity to perform operations on the
@uref{glo_s.html#stream,@emph{stream}} (returning zero or more
@uref{glo_v.html#value,@emph{values}}), and then closes the
@uref{glo_s.html#string_stream,@emph{string stream}}.

@emph{String} is evaluated first, and @emph{var} is bound to a character
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}} that supplies
@uref{glo_c.html#character,@emph{characters}} from the subsequence of
the resulting @uref{glo_s.html#string,@emph{string}}
@uref{glo_b.html#bounded,@emph{bounded}} by @emph{start} and @emph{end}.
The body is executed as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}.

The @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}} is automatically
closed on exit from
@ref{#with-input-from-string,@strong{with-input-from-string}}, no matter
whether the exit is normal or abnormal. The
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#string_stream,@emph{string stream}} to which the
@uref{glo_v.html#variable,@emph{variable}} @emph{var} is
@uref{glo_b.html#bound,@emph{bound}} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; its
@uref{glo_e.html#extent,@emph{extent}} ends when the
@uref{glo_f.html#form,@emph{form}} is exited.

The @emph{index} is a pointer within the @emph{string} to be advanced.
If @ref{#with-input-from-string,@strong{with-input-from-string}} is
exited normally, then @emph{index} will have as its
@uref{glo_v.html#value,@emph{value}} the index into the @emph{string}
indicating the first character not read which is (length @emph{string})
if all characters were used. The place specified by @emph{index} is not
updated as reading progresses, but only at the end of the operation.

@emph{start} and @emph{index} may both specify the same variable, which
is a pointer within the @emph{string} to be advanced, perhaps repeatedly
by some containing loop.

The consequences are undefined if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} the
@uref{glo_v.html#variable,@emph{variable}} @emph{var}.

@strong{Examples:}

@verbatim
 (with-input-from-string (s "XXX1 2 3 4xxx"
                             :index ind
                             :start 3 :end 10)
    (+ (read s) (read s) (read s))) =>  6
 ind =>  9
 (with-input-from-string (s "Animal Crackers" :index j :start 6)
   (read s)) =>  CRACKERS
@end verbatim

The variable j is set to 15.

@strong{Side Effects:}

The @uref{glo_v.html#value,@emph{value}} of the
@uref{glo_p.html#place,@emph{place}} named by @emph{index}, if any, is
modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-stri_input-stream.html#make-string-input-stream,@strong{make-string-input-stream}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss363.html,WITH-OPEN-FILE-SETQ:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss364.html,WITH-OPEN-FILE-STREAM-EXTENT:DYNAMIC-EXTENT}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss333.html,SUBSEQ-OUT-OF-BOUNDS:IS-AN-ERROR}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS macro WITH-OPEN-FILE
@subsubsection CLHS: macro WITH-OPEN-FILE
@anchor{#clhs-macro-with-open-file}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_stream-external-format.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_close.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{macro} @strong{WITH-OPEN-FILE}

@strong{Syntax:}

@strong{with-open-file} @emph{(stream filespec @emph{options}@strong{*})
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{results}

@strong{Arguments and Values:}

@emph{stream} -- a variable.

@emph{filespec}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@emph{options} -- @uref{glo_f.html#form,@emph{forms}}; evaluated.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

@ref{#with-open-file,@strong{with-open-file}} uses
@uref{fun_open.html#open,@strong{open}} to create a
@uref{glo_f.html#file_stream,@emph{file stream}} to
@uref{glo_f.html#file,@emph{file}} named by @emph{filespec}.
@emph{Filespec} is the name of the file to be opened. @emph{Options} are
used as keyword arguments to @uref{fun_open.html#open,@strong{open}}.

The @uref{glo_s.html#stream,@emph{stream}}
@uref{glo_o.html#object,@emph{object}} to which the @emph{stream}
@uref{glo_v.html#variable,@emph{variable}} is
@uref{glo_b.html#bound,@emph{bound}} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; its
@uref{glo_e.html#extent,@emph{extent}} ends when the
@uref{glo_f.html#form,@emph{form}} is exited.

@ref{#with-open-file,@strong{with-open-file}} evaluates the @emph{forms}
as an @uref{glo_i.html#implicit_progn,@emph{implicit progn}} with
@emph{stream} bound to the value returned by
@uref{fun_open.html#open,@strong{open}}.

When control leaves the body, either normally or abnormally (such as by
use of @uref{speope_throw.html#throw,@strong{throw}}), the file is
automatically closed. If a new output file is being written, and control
leaves abnormally, the file is aborted and the file system is left, so
far as possible, as if the file had never been opened.

It is possible by the use of :if-exists nil or :if-does-not-exist nil
for @emph{stream} to be bound to @uref{any_nil.html#nil,@strong{nil}}.
Users of :if-does-not-exist nil should check for a valid
@uref{glo_s.html#stream,@emph{stream}}.

The consequences are undefined if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} the @emph{stream}
@uref{glo_v.html#variable,@emph{variable}}. The compiler may choose to
issue a warning if such an attempt is detected.

@strong{Examples:}

@verbatim
 (setq p (merge-pathnames "test"))
=>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY directory-name
    :NAME "test" :TYPE NIL :VERSION :NEWEST>
 (with-open-file (s p :direction :output :if-exists :supersede)
    (format s "Here are a couple~%of test data lines~%")) =>  NIL
 (with-open-file (s p)
    (do ((l (read-line s) (read-line s nil 'eof)))
        ((eq l 'eof) "Reached end of file.")
     (format t "~&*** ~A~%" l)))
>>  *** Here are a couple
>>  *** of test data lines
=>  "Reached end of file."
@end verbatim

@verbatim
;; Normally one would not do this intentionally because it is
;; not perspicuous, but beware when using :IF-DOES-NOT-EXIST NIL
;; that this doesn't happen to you accidentally...
 (with-open-file (foo "no-such-file" :if-does-not-exist nil)
   (read foo))
>>  hello?
=>  HELLO? ;This value was read from the terminal, not a file!

;; Here's another bug to avoid...
 (with-open-file (foo "no-such-file" :direction :output :if-does-not-exist nil)
   (format foo "Hello"))
=>  "Hello" ;FORMAT got an argument of NIL!
@end verbatim

@strong{Side Effects:}

Creates a @uref{glo_s.html#stream,@emph{stream}} to the
@uref{glo_f.html#file,@emph{file}} named by @emph{filename} (upon
entry), and closes the @uref{glo_s.html#stream,@emph{stream}} (upon
exit). In some @uref{glo_i.html#implementation,@emph{implementations}},
the @uref{glo_f.html#file,@emph{file}} might be locked in some way while
it is open. If the @uref{glo_s.html#stream,@emph{stream}} is an
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}, a
@uref{glo_f.html#file,@emph{file}} might be created.

@strong{Affected By:}

The host computer's file system.

@strong{Exceptional Situations:}

See the @uref{glo_f.html#function,@emph{function}}
@uref{fun_open.html#open,@strong{open}}.

@strong{See Also:}

@uref{fun_open.html#open,@strong{open}},
@uref{fun_close.html#close,@strong{close}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss363.html,WITH-OPEN-FILE-SETQ:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss362.html,WITH-OPEN-FILE-DOES-NOT-EXIST:STREAM-IS-NIL}
@item
@uref{../Issues/iss364.html,WITH-OPEN-FILE-STREAM-EXTENT:DYNAMIC-EXTENT}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-OPEN-STREAM
@subsubsection CLHS: Macro WITH-OPEN-STREAM
@anchor{#clhs-macro-with-open-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_close.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_listen.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-OPEN-STREAM}

@strong{Syntax:}

@strong{with-open-stream} @emph{(var stream)
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{stream}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @uref{glo_s.html#stream,@emph{stream}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

@ref{#with-open-stream,@strong{with-open-stream}} performs a series of
operations on @emph{stream}, returns a value, and then closes the
@emph{stream}.

@emph{Var} is bound to the value of @emph{stream}, and then @emph{forms}
are executed as an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}. @emph{stream} is automatically closed on exit from
@ref{#with-open-stream,@strong{with-open-stream}}, no matter whether the
exit is normal or abnormal. The @emph{stream} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; its
@uref{glo_e.html#extent,@emph{extent}} ends when the
@uref{glo_f.html#form,@emph{form}} is exited.

The consequences are undefined if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} the the
@uref{glo_v.html#variable,@emph{variable}} @emph{var} with the
@emph{forms}.

@strong{Examples:}

@verbatim
 (with-open-stream (s (make-string-input-stream "1 2 3 4"))
    (+ (read s) (read s) (read s))) =>  6
@end verbatim

@strong{Side Effects:}

The @emph{stream} is closed (upon exit).

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_close.html#close,@strong{close}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss363.html,WITH-OPEN-FILE-SETQ:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss364.html,WITH-OPEN-FILE-STREAM-EXTENT:DYNAMIC-EXTENT}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-OUTPUT-TO-STRING
@subsubsection CLHS: Macro WITH-OUTPUT-TO-STRING
@anchor{#clhs-macro-with-output-to-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-input-from-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stdebug-i_ace-outputst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-OUTPUT-TO-STRING}

@strong{Syntax:}

@strong{with-output-to-string} @emph{(var &optional string-form &key
element-type) @emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{string-form}---a @uref{glo_f.html#form,@emph{form}} or
@uref{any_nil.html#nil,@strong{nil}}; if
@uref{glo_n.html#non-nil,@emph{non-nil}}, evaluated to produce
@emph{string}.

@emph{string}---a @uref{glo_s.html#string,@emph{string}} that has a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@emph{element-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}; evaluated. The default is
@uref{syscla_character.html#character,@strong{character}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---If a @emph{string-form} is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, a
@uref{glo_s.html#string,@emph{string}}; otherwise, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{forms}.

@strong{Description:}

@ref{#with-output-to-string,@strong{with-output-to-string}} creates a
character @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}, performs a series of operations
that may send results to this @uref{glo_s.html#stream,@emph{stream}},
and then closes the @uref{glo_s.html#stream,@emph{stream}}.

The @emph{element-type} names the @uref{glo_t.html#type,@emph{type}} of
the elements of the @uref{glo_s.html#stream,@emph{stream}}; a
@uref{glo_s.html#stream,@emph{stream}} is constructed of the most
specialized @uref{glo_t.html#type,@emph{type}} that can accommodate
elements of the given @uref{glo_t.html#type,@emph{type}}.

The body is executed as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}} with @emph{var}
bound to an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#string_stream,@emph{string stream}}. All output to that
@uref{glo_s.html#string_stream,@emph{string stream}} is saved in a
@uref{glo_s.html#string,@emph{string}}.

If @emph{string} is supplied, @emph{element-type} is ignored, and the
output is incrementally appended to @emph{string} as if by use of
@uref{fun_vector-pu_-push-extend.html#vector-push-extend,@strong{vector-push-extend}}.

The @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}} is automatically closed on exit
from @strong{with-output-from-string}, no matter whether the exit is
normal or abnormal. The @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#string_stream,@emph{string stream}} to which the
@uref{glo_v.html#variable,@emph{variable}} @emph{var} is
@uref{glo_b.html#bound,@emph{bound}} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; its
@uref{glo_e.html#extent,@emph{extent}} ends when the
@uref{glo_f.html#form,@emph{form}} is exited.

If no @emph{string} is provided, then @strong{with-output-from-string}
produces a @uref{glo_s.html#stream,@emph{stream}} that accepts
characters and returns a @uref{glo_s.html#string,@emph{string}} of the
indicated @emph{element-type}. If @emph{string} is provided,
@ref{#with-output-to-string,@strong{with-output-to-string}} returns the
results of evaluating the last @emph{form}.

The consequences are undefined if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} the
@uref{glo_v.html#variable,@emph{variable}} @emph{var}.

@strong{Examples:}

@verbatim
 (setq fstr (make-array '(0) :element-type 'base-char
                             :fill-pointer 0 :adjustable t)) =>  ""
 (with-output-to-string (s fstr)
    (format s "here's some output")
    (input-stream-p s)) =>  false
 fstr =>  "here's some output"
@end verbatim

@strong{Side Effects:}

The @emph{string} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if destructive modifications are
performed directly on the @emph{string} during the
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} of the call.

@strong{See Also:}

@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}},
@uref{fun_vector-pu_-push-extend.html#vector-push-extend,@strong{vector-push-extend}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss330.html,STRING-OUTPUT-STREAM-BASHING:UNDEFINED}
@item
@uref{../Issues/iss363.html,WITH-OPEN-FILE-SETQ:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss364.html,WITH-OPEN-FILE-STREAM-EXTENT:DYNAMIC-EXTENT}
@item
@uref{../Issues/iss365.html,WITH-OUTPUT-TO-STRING-APPEND-STYLE:VECTOR-PUSH-EXTEND}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss035.html,CHARACTER-PROPOSAL:2-3-6}
@item
@uref{../Issues/iss040.html,CHARACTER-PROPOSAL:2-5-6}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class BROADCAST-STREAM
@subsubsection CLHS: System Class BROADCAST-STREAM
@anchor{#clhs-system-class-broadcast-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_concatenated-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{BROADCAST-STREAM}

@strong{Class Precedence List:}

@ref{#broadcast-stream,@strong{broadcast-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_b.html#broadcast_stream,@emph{broadcast stream}} is an
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}} which has associated with it a
set of zero or more @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{streams}} such that any output sent to the
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}} gets passed
on as output to each of the associated
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{streams}}. (If a
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}} has no
@emph{component streams}, then all output to the
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}} is
discarded.)

The set of operations that may be performed on a
@uref{glo_b.html#broadcast_stream,@emph{broadcast stream}} is the
intersection of those for its associated
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{streams}}.

Some output operations (e.g.,
@uref{fun_terpricm_fresh-line.html#fresh-line,@strong{fresh-line}})
return @uref{glo_v.html#value,@emph{values}} based on the state of the
@uref{glo_s.html#stream,@emph{stream}} at the time of the operation.
Since these @uref{glo_v.html#value,@emph{values}} might differ for each
of the @emph{component streams}, it is necessary to describe their
return value specifically:

*
@uref{fun_stream-element-type.html#stream-element-type,@strong{stream-element-type}}
returns the value from the last component stream, or
@uref{syscla_t.html#t,@strong{t}} if there are no component streams.

* @uref{fun_terpricm_fresh-line.html#fresh-line,@strong{fresh-line}}
returns the value from the last component stream, or
@uref{any_nil.html#nil,@strong{nil}} if there are no component streams.

* The functions
@uref{fun_file-length.html#file-length,@strong{file-length}},
@uref{fun_file-position.html#file-position,@strong{file-position}},
@uref{fun_file-string-length.html#file-string-length,@strong{file-string-length}},
and
@uref{fun_stream-external-format.html#stream-external-format,@strong{stream-external-format}}
return the value from the last component stream; if there are no
component streams,
@uref{fun_file-length.html#file-length,@strong{file-length}} and
@uref{fun_file-position.html#file-position,@strong{file-position}}
return 0,
@uref{fun_file-string-length.html#file-string-length,@strong{file-string-length}}
returns 1, and
@uref{fun_stream-external-format.html#stream-external-format,@strong{stream-external-format}}
returns :default.

* The functions @uref{fun_streamp.html#streamp,@strong{streamp}} and
@uref{fun_input-str_put-stream-p.html#output-stream-p,@strong{output-stream-p}}
always return @uref{glo_t.html#true,@emph{true}} for
@uref{glo_b.html#broadcast_stream,@emph{broadcast streams}}.

* The functions
@uref{fun_open-stream-p.html#open-stream-p,@strong{open-stream-p}} tests
whether the @uref{glo_b.html#broadcast_stream,@emph{broadcast stream}}
is @uref{glo_o.html#open,@emph{open}}[2], not whether its component
streams are @uref{glo_o.html#open,@emph{open}}.

* The functions
@uref{fun_input-str_put-stream-p.html#input-stream-p,@strong{input-stream-p}}
and
@uref{fun_interactive-stream-p.html#interactive-stream-p,@emph{interactive-stream-p}}
return an
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}},
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}} value.

* For the input operations
@uref{fun_clear-input.html#clear-input,@strong{clear-input}}
@uref{fun_listen.html#listen,@strong{listen}},
@uref{fun_peek-char.html#peek-char,@strong{peek-char}},
@uref{fun_read-byte.html#read-byte,@strong{read-byte}},
@uref{fun_read-char-no-hang.html#read-char-no-hang,@strong{read-char-no-hang}},
@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{fun_read-line.html#read-line,@strong{read-line}}, and
@uref{fun_unread-char.html#unread-char,@strong{unread-char}}, the
consequences are undefined if the indicated operation is performed.
However, an @uref{glo_i.html#implementation,@emph{implementation}} is
permitted to define such a behavior as an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
extension.

For any output operations not having their return values explicitly
specified above or elsewhere in this document, it is defined that the
@uref{glo_v.html#value,@emph{values}} returned by such an operation are
the @uref{glo_v.html#value,@emph{values}} resulting from performing the
operation on the last of its @emph{component streams}; the
@uref{glo_v.html#value,@emph{values}} resulting from performing the
operation on all preceding @uref{glo_s.html#stream,@emph{streams}} are
discarded. If there are no @emph{component streams}, the value is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{See Also:}

@uref{fun_broadcast_ream-streams.html#broadcast-stream-streams,@strong{broadcast-stream-streams}},
@uref{fun_make-broadcast-stream.html#make-broadcast-stream,@strong{make-broadcast-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss021.html,BROADCAST-STREAM-RETURN-VALUES:CLARIFY-MINIMALLY}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class CONCATENATED-STREAM
@subsubsection CLHS: System Class CONCATENATED-STREAM
@anchor{#clhs-system-class-concatenated-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_broadcast-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_echo-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{CONCATENATED-STREAM}

@strong{Class Precedence List:}

@ref{#concatenated-stream,@strong{concatenated-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_c.html#concatenated_stream,@emph{concatenated stream}} is an
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} which is a
@uref{glo_c.html#composite_stream,@emph{composite stream}} of zero or
more other @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}}, such that the sequence of data
which can be read from the
@uref{glo_c.html#concatenated_stream,@emph{concatenated stream}} is the
same as the concatenation of the sequences of data which could be read
from each of the constituent @uref{glo_s.html#stream,@emph{streams}}.

Input from a @uref{glo_c.html#concatenated_stream,@emph{concatenated
stream}} is taken from the first of the associated
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}} until it reaches
@uref{glo_e.html#end_of_file,@emph{end of file}}[1]; then that
@uref{glo_s.html#stream,@emph{stream}} is discarded, and subsequent
input is taken from the next @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}, and so on. An
@uref{glo_e.html#end_of_file,@emph{end of file}} on the associated
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}} is always managed invisibly by
the @uref{glo_c.html#concatenated_stream,@emph{concatenated
stream}}---the only time a client of a
@uref{glo_c.html#concatenated_stream,@emph{concatenated stream}} sees an
@uref{glo_e.html#end_of_file,@emph{end of file}} is when an attempt is
made to obtain data from the
@uref{glo_c.html#concatenated_stream,@emph{concatenated stream}} but it
has no remaining @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{streams}} from which to obtain such data.

@strong{See Also:}

@uref{fun_concatena_ream-streams.html#concatenated-stream-streams,@strong{concatenated-stream-streams}},
@uref{fun_make-conc_nated-stream.html#make-concatenated-stream,@strong{make-concatenated-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class ECHO-STREAM
@subsubsection CLHS: System Class ECHO-STREAM
@anchor{#clhs-system-class-echo-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_concatenated-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_file-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{ECHO-STREAM}

@strong{Class Precedence List:}

@ref{#echo-stream,@strong{echo-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

An @uref{glo_e.html#echo_stream,@emph{echo stream}} is a
@uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_s.html#stream,@emph{stream}} that gets its input from an
associated @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} and sends its output to an
associated @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

All input taken from the @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} is echoed to the
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}. Whether the input is echoed
immediately after it is encountered, or after it has been read from the
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{See Also:}

@uref{fun_echo-stre_utput-stream.html#echo-stream-input-stream,@strong{echo-stream-input-stream}},
@uref{fun_echo-stre_utput-stream.html#echo-stream-output-stream,@strong{echo-stream-output-stream}},
@uref{fun_make-echo-stream.html#make-echo-stream,@strong{make-echo-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class FILE-STREAM
@subsubsection CLHS: System Class FILE-STREAM
@anchor{#clhs-system-class-file-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_echo-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_string-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{FILE-STREAM}

@strong{Class Precedence List:}

@ref{#file-stream,@strong{file-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

An @uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#file-stream,@strong{file-stream}} is a
@uref{glo_s.html#stream,@emph{stream}} the direct source or sink of
which is a @uref{glo_f.html#file,@emph{file}}. Such a
@uref{glo_s.html#stream,@emph{stream}} is created explicitly by
@uref{fun_open.html#open,@strong{open}} and
@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}},
and implicitly by @uref{glo_f.html#function,@emph{functions}} such as
@uref{fun_load.html#load,@strong{load}} that process
@uref{glo_f.html#file,@emph{files}}.

@strong{See Also:}

@uref{fun_load.html#load,@strong{load}},
@uref{fun_open.html#open,@strong{open}},
@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class STRING-STREAM
@subsubsection CLHS: System Class STRING-STREAM
@anchor{#clhs-system-class-string-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_file-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_synonym-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{STRING-STREAM}

@strong{Class Precedence List:}

@ref{#string-stream,@strong{string-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_s.html#string_stream,@emph{string stream}} is a
@uref{glo_s.html#stream,@emph{stream}} which reads input from or writes
output to an associated @uref{glo_s.html#string,@emph{string}}.

The @uref{glo_s.html#stream_element_type,@emph{stream element type}} of
a @uref{glo_s.html#string_stream,@emph{string stream}} is always a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_character.html#character,@strong{character}}.

@strong{See Also:}

@uref{fun_make-stri_input-stream.html#make-string-input-stream,@strong{make-string-input-stream}},
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}},
@uref{mac_with-input-from-string.html#with-input-from-string,@strong{with-input-from-string}},
@uref{mac_with-output-to-string.html#with-output-to-string,@strong{with-output-to-string}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class SYNONYM-STREAM
@subsubsection CLHS: System Class SYNONYM-STREAM
@anchor{#clhs-system-class-synonym-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_string-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_two-way-stream.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{SYNONYM-STREAM}

@strong{Class Precedence List:}

@ref{#synonym-stream,@strong{synonym-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_s.html#stream,@emph{stream}} that is an alias for another
@uref{glo_s.html#stream,@emph{stream}}, which is the
@uref{glo_v.html#value,@emph{value}} of a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}} whose
@uref{glo_n.html#name,@emph{name}} is the
@uref{glo_s.html#synonym_stream_symbol,@emph{synonym stream symbol}} of
the @uref{glo_s.html#synonym_stream,@emph{synonym stream}}.

Any operations on a @uref{glo_s.html#synonym_stream,@emph{synonym
stream}} will be performed on the @uref{glo_s.html#stream,@emph{stream}}
that is then the @uref{glo_v.html#value,@emph{value}} of the
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}} named by the
@uref{glo_s.html#synonym_stream_symbol,@emph{synonym stream symbol}}. If
the @uref{glo_v.html#value,@emph{value}} of the
@uref{glo_v.html#variable,@emph{variable}} should change, or if the
@uref{glo_v.html#variable,@emph{variable}} should be
@uref{glo_b.html#bound,@emph{bound}}, then the
@uref{glo_s.html#stream,@emph{stream}} will operate on the new
@uref{glo_v.html#value,@emph{value}} of the
@uref{glo_v.html#variable,@emph{variable}}.

@strong{See Also:}

@uref{fun_make-synonym-stream.html#make-synonym-stream,@strong{make-synonym-stream}},
@uref{fun_synonym-stream-symbol.html#synonym-stream-symbol,@strong{synonym-stream-symbol}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class TWO-WAY-STREAM
@subsubsection CLHS: System Class TWO-WAY-STREAM
@anchor{#clhs-system-class-two-way-stream}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_synonym-stream.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_input-str_put-stream-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{TWO-WAY-STREAM}

@strong{Class Precedence List:}

@ref{#two-way-stream,@strong{two-way-stream}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_c.html#composite_stream,@emph{composite stream}} that receives
its input from an associated @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} and sends its output to an
associated @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{See Also:}

@uref{fun_make-two-way-stream.html#make-two-way-stream,@strong{make-two-way-stream}},
@uref{fun_two-way-s_utput-stream.html#two-way-stream-input-stream,@strong{two-way-stream-input-stream}},
@uref{fun_two-way-s_utput-stream.html#two-way-stream-output-stream,@strong{two-way-stream-output-stream}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *DEBUG-IO* *ERROR-OUTPUT*
@subsubsection CLHS: Variable *DEBUG-IO*, *ERROR-OUTPUT*...
@anchor{#clhs-variable-debug-io-error-output...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-output-to-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stterminal-iost.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*DEBUG-IO*, *ERROR-OUTPUT*, *QUERY-IO*,
*STANDARD-INPUT*, *STANDARD-OUTPUT*, *TRACE-OUTPUT*}

@strong{Value Type:}

For @ref{#STstandard-inputST,@strong{*standard-input*}}: an
@uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}}

For @ref{#STerror-outputST,@strong{*error-output*}},
@ref{#STstandard-outputST,@strong{*standard-output*}}, and
@ref{#STtrace-outputST,@strong{*trace-output*}}: an
@uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}}.

For @ref{#STdebug-ioST,@strong{*debug-io*}},
@ref{#STquery-ioST,@strong{*query-io*}}: a
@uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but it must be an @uref{glo_o.html#open,@emph{open}}
@uref{glo_s.html#stream,@emph{stream}} that is not a
@uref{glo_g.html#generalized_synonym_stream,@emph{generalized synonym
stream}} to an @uref{glo_i.html#iSLo_customization_variable,@emph{I/O
customization variables}} but that might be a
@uref{glo_g.html#generalized_synonym_stream,@emph{generalized synonym
stream}} to the value of some
@uref{glo_i.html#iSLo_customization_variable,@emph{I/O customization
variable}}. The initial value might also be a
@uref{glo_g.html#generalized_synonym_stream,@emph{generalized synonym
stream}} to either the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}
or to the @uref{glo_s.html#stream,@emph{stream}} that is its
@uref{glo_v.html#value,@emph{value}}.

@strong{Description:}

These @uref{glo_v.html#variable,@emph{variables}} are collectively
called the @uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_i.html#iSLo_customization_variable,@emph{I/O customization
variables}}. They can be @uref{glo_b.html#bound,@emph{bound}} or
@emph{assigned} in order to change the default destinations for input
and/or output used by various
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_o.html#operator,@emph{operators}} and facilities.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STdebug-ioST,@strong{*debug-io*}}, called
@uref{glo_d.html#debug_iSLo,@emph{debug I/O}}, is a
@uref{glo_s.html#stream,@emph{stream}} to be used for interactive
debugging purposes.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STerror-outputST,@strong{*error-output*}}, called
@uref{glo_e.html#error_output,@emph{error output}}, is a
@uref{glo_s.html#stream,@emph{stream}} to which warnings and
non-interactive error messages should be sent.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STquery-ioST,@strong{*query-io*}}, called
@uref{glo_q.html#query_iSLo,@emph{query I/O}}, is a
@uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_s.html#stream,@emph{stream}} to be used when asking questions
of the user. The question should be output to this
@uref{glo_s.html#stream,@emph{stream}}, and the answer read from it.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STstandard-inputST,@strong{*standard-input*}}, called
@uref{glo_s.html#standard_input,@emph{standard input}}, is a
@uref{glo_s.html#stream,@emph{stream}} that is used by many
@uref{glo_o.html#operator,@emph{operators}} as a default source of input
when no specific @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} is explicitly supplied.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STstandard-outputST,@strong{*standard-output*}}, called
@uref{glo_s.html#standard_output,@emph{standard output}}, is a
@uref{glo_s.html#stream,@emph{stream}} that is used by many
@uref{glo_o.html#operator,@emph{operators}} as a default destination for
output when no specific @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream,@emph{stream}} is explicitly supplied.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STtrace-outputST,@strong{*trace-output*}}, called
@uref{glo_t.html#trace_output,@emph{trace output}}, is the
@uref{glo_s.html#stream,@emph{stream}} on which traced functions (see
@uref{mac_tracecm_untrace.html#trace,@strong{trace}}) and the
@uref{mac_time.html#time,@strong{time}}
@uref{glo_m.html#macro,@emph{macro}} print their output.

@strong{Examples:}

@verbatim
 (with-output-to-string (*error-output*)
   (warn "this string is sent to *error-output*"))
 =>  "Warning: this string is sent to *error-output*
" ;The exact format of this string is implementation-dependent.

 (with-input-from-string (*standard-input* "1001")
    (+ 990 (read))) =>  1991                       

 (progn (setq out (with-output-to-string (*standard-output*)
                     (print "print and format t send things to")
                     (format t "*standard-output* now going to a string")))
        :done)
=>  :DONE
 out
=>  "
\"print and format t send things to\" *standard-output* now going to a string"

 (defun fact (n) (if (< n 2) 1 (* n (fact (- n 1)))))
=>  FACT
 (trace fact)
=>  (FACT)
;; Of course, the format of traced output is implementation-dependent.
 (with-output-to-string (*trace-output*)
   (fact 3)) 
=>  "
1 Enter FACT 3
| 2 Enter FACT 2
|   3 Enter FACT 1
|   3 Exit FACT 1
| 2 Exit FACT 2
1 Exit FACT 6"
@end verbatim

@strong{See Also:}

@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}},
@uref{syscla_synonym-stream.html#synonym-stream,@strong{synonym-stream}},
@uref{mac_time.html#time,@strong{time}},
@uref{mac_tracecm_untrace.html#trace,@strong{trace}},
@uref{chap-9.html,Section 9 (Conditions)}, @uref{chap-23.html,Section 23
(Reader)}, @uref{chap-22.html,Section 22 (Printer)}

@strong{Notes:}

The intent of the constraints on the initial
@uref{glo_v.html#value,@emph{value}} of the
@uref{glo_i.html#iSLo_customization_variable,@emph{I/O customization
variables}} is to ensure that it is always safe to
@uref{glo_b.html#bind,@emph{bind}} or
@uref{glo_a.html#assign,@emph{assign}} such a
@uref{glo_v.html#variable,@emph{variable}} to the
@uref{glo_v.html#value,@emph{value}} of another
@uref{glo_i.html#iSLo_customization_variable,@emph{I/O customization
variable}}, without unduly restricting
@uref{glo_i.html#implementation,@emph{implementation}} flexibility.

It is common for an
@uref{glo_i.html#implementation,@emph{implementation}} to make the
initial @uref{glo_v.html#value,@emph{values}} of
@ref{#STdebug-ioST,@strong{*debug-io*}} and
@ref{#STquery-ioST,@strong{*query-io*}} be the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#stream,@emph{stream}}, and to make the initial
@uref{glo_v.html#value,@emph{values}} of
@ref{#STerror-outputST,@strong{*error-output*}} and
@ref{#STstandard-outputST,@strong{*standard-output*}} be the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#stream,@emph{stream}}.

The functions
@uref{fun_y-or-n-pcm_yes-or-no-p.html#y-or-n-p,@strong{y-or-n-p}} and
@uref{fun_y-or-n-pcm_yes-or-no-p.html#yes-or-no-p,@strong{yes-or-no-p}}
use @uref{glo_q.html#query_iSLo,@emph{query I/O}} for their input and
output.

In the normal @uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp
read-eval-print loop}}, input is read from
@uref{glo_s.html#standard_input,@emph{standard input}}. Many input
functions, including
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} and
@uref{fun_read-char.html#read-char,@strong{read-char}}, take a
@uref{glo_s.html#stream,@emph{stream}} argument that defaults to
@uref{glo_s.html#standard_input,@emph{standard input}}.

In the normal @uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp
read-eval-print loop}}, output is sent to
@uref{glo_s.html#standard_output,@emph{standard output}}. Many output
functions, including
@uref{fun_writecm_p_rintcm_princ.html#print,@strong{print}} and
@uref{fun_write-char.html#write-char,@strong{write-char}}, take a
@uref{glo_s.html#stream,@emph{stream}} argument that defaults to
@uref{glo_s.html#standard_output,@emph{standard output}}.

A program that wants, for example, to divert output to a file should do
so by @uref{glo_b.html#binding,@emph{binding}}
@ref{#STstandard-outputST,@strong{*standard-output*}}; that way error
messages sent to @ref{#STerror-outputST,@strong{*error-output*}} can
still get to the user by going through
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}
(if @ref{#STerror-outputST,@strong{*error-output*}} is bound to
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}),
which is usually what is desired.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss323.html,STANDARD-INPUT-INITIAL-BINDING:DEFINED-CONTRACTS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *TERMINAL-IO*
@subsubsection CLHS: Variable *TERMINAL-IO*
@anchor{#clhs-variable-terminal-io}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stdebug-i_ace-outputst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_streams_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_stream-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*TERMINAL-IO*}

@strong{Value Type:}

a @uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_s.html#stream,@emph{stream}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but it must be an @uref{glo_o.html#open,@emph{open}}
@uref{glo_s.html#stream,@emph{stream}} that is not a
@uref{glo_g.html#generalized_synonym_stream,@emph{generalized synonym
stream}} to an @uref{glo_i.html#iSLo_customization_variable,@emph{I/O
customization variables}} but that might be a
@uref{glo_g.html#generalized_synonym_stream,@emph{generalized synonym
stream}} to the @uref{glo_v.html#value,@emph{value}} of some
@uref{glo_i.html#iSLo_customization_variable,@emph{I/O customization
variable}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STterminal-ioST,@strong{*terminal-io*}}, called
@uref{glo_t.html#terminal_iSLo,@emph{terminal I/O}}, is ordinarily a
@uref{glo_b.html#bidirectional,@emph{bidirectional}}
@uref{glo_s.html#stream,@emph{stream}} that connects to the user's
console. Typically, writing to this
@uref{glo_s.html#stream,@emph{stream}} would cause the output to appear
on a display screen, for example, and reading from the
@uref{glo_s.html#stream,@emph{stream}} would accept input from a
keyboard. It is intended that standard input functions such as
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} and
@uref{fun_read-char.html#read-char,@strong{read-char}}, when used with
this @uref{glo_s.html#stream,@emph{stream}}, cause echoing of the input
into the output side of the @uref{glo_s.html#stream,@emph{stream}}. The
means by which this is accomplished are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

The effect of changing the @uref{glo_v.html#value,@emph{value}} of
@ref{#STterminal-ioST,@strong{*terminal-io*}}, either by
@uref{glo_b.html#binding,@emph{binding}} or @emph{assignment}, is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@strong{Examples:}

@verbatim
 (progn (prin1 'foo) (prin1 'bar *terminal-io*))
>>  FOOBAR
=>  BAR
 (with-output-to-string (*standard-output*)
   (prin1 'foo) 
   (prin1 'bar *terminal-io*))
>>  BAR
=>  "FOO"
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{var_stdebug-i_ace-outputst.html#STdebug-ioST,@strong{*debug-io*}},
@uref{var_stdebug-i_ace-outputst.html#STerror-outputST,@strong{*error-output*}},
@uref{var_stdebug-i_ace-outputst.html#STquery-ioST,@strong{*query-io*}},
@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stdebug-i_ace-outputst.html#STtrace-outputST,@strong{*trace-output*}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 22
@section CLHS: Chapter 22
@anchor{#clhs-chapter-22}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_end-of-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22. Printer

@uref{sec_22-1.html,}

22.1 The Lisp Printer

@uref{sec_22-2.html,}

22.2 The Lisp Pretty Printer

@uref{sec_22-3.html,}

22.3 Formatted Output

@uref{sec_the_printer_dictionary.html,}

22.4 The Printer Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 222::
* CLHS Section 223::
* CLHS Section The Printer Dictionary::
@end menu

@node CLHS Section 222
@subsection CLHS: Section 22.2
@anchor{#clhs-section-22.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-1-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-22.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.2 The Lisp Pretty Printer

@uref{sec_22-2-1.html,}

22.2.1 Pretty Printer Concepts

@uref{sec_22-2-2.html,}

22.2.2 Examples of using the Pretty Printer

@uref{sec_22-2-3.html,}

22.2.3 Notes about the Pretty Printer's Background

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 2222::
* CLHS Section 2223::
@end menu

@node CLHS Section 2222
@subsubsection CLHS: Section 22.2.2
@anchor{#clhs-section-22.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-2-1-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.2.2 Examples of using the Pretty Printer

As an example of the interaction of logical blocks, conditional
newlines, and indentation, consider the function simple-pprint-defun
below. This function prints out lists whose
@uref{glo_c.html#car,@emph{cars}} are
@uref{mac_defun.html#defun,@strong{defun}} in the standard way assuming
that the list has exactly length 4.

@verbatim
(defun simple-pprint-defun (*standard-output* list)
  (pprint-logical-block (*standard-output* list :prefix "(" :suffix ")")
    (write (first list))
    (write-char #\Space)
    (pprint-newline :miser)
    (pprint-indent :current 0)
    (write (second list))
    (write-char #\Space)
    (pprint-newline :fill)
    (write (third list))
    (pprint-indent :block 1)
    (write-char #\Space)
    (pprint-newline :linear)
    (write (fourth list))))
@end verbatim

Suppose that one evaluates the following:

@verbatim
(simple-pprint-defun *standard-output* '(defun prod (x y) (* x y)))
@end verbatim

If the line width available is greater than or equal to 26, then all of
the output appears on one line. If the line width available is reduced
to 25, a line break is inserted at the linear-style conditional newline
before the @uref{glo_e.html#expression,@emph{expression}} (* x y),
producing the output shown. The (pprint-indent :block 1) causes (* x y)
to be printed at a relative indentation of 1 in the logical block.

@verbatim
 (DEFUN PROD (X Y) 
   (* X Y))
@end verbatim

If the line width available is 15, a line break is also inserted at the
fill style conditional newline before the argument list. The call on
(pprint-indent :current 0) causes the argument list to line up under the
function name.

@verbatim
(DEFUN PROD
       (X Y)
  (* X Y))
@end verbatim

If
@uref{var_stprint-miser-widthst.html#STprint-miser-widthST,@strong{*print-miser-width*}}
were greater than or equal to 14, the example output above would have
been as follows, because all indentation changes are ignored in miser
mode and line breaks are inserted at miser-style conditional newlines.

@verbatim
 (DEFUN
  PROD
  (X Y)
  (* X Y))
@end verbatim

As an example of a per-line prefix, consider that evaluating the
following produces the output shown with a line width of 20 and
@uref{var_stprint-miser-widthst.html#STprint-miser-widthST,@strong{*print-miser-width*}}
of @uref{any_nil.html#nil,@strong{nil}}.

@verbatim
 (pprint-logical-block (*standard-output* nil :per-line-prefix ";;; ")
   (simple-pprint-defun *standard-output* '(defun prod (x y) (* x y))))
 
 ;;; (DEFUN PROD
 ;;;        (X Y)
 ;;;   (* X Y))
@end verbatim

As a more complex (and realistic) example, consider the function
pprint-let below. This specifies how to print a
@uref{speope_letcm_letst.html#let,@strong{let}}
@uref{glo_f.html#form,@emph{form}} in the traditional style. It is more
complex than the example above, because it has to deal with nested
structure. Also, unlike the example above it contains complete code to
readably print any possible list that begins with the
@uref{glo_s.html#symbol,@emph{symbol}}
@uref{speope_letcm_letst.html#let,@strong{let}}. The outermost
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}} handles the printing of the input
list as a whole and specifies that parentheses should be printed in the
output. The second
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}} handles the list of binding pairs.
Each pair in the list is itself printed by the innermost
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.
(A @uref{mac_loop.html#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}} is used instead of merely decomposing
the pair into two @uref{glo_o.html#object,@emph{objects}} so that
readable output will be produced no matter whether the list
corresponding to the pair has one element, two elements, or (being
malformed) has more than two elements.) A space and a fill-style
conditional newline are placed after each pair except the last. The loop
at the end of the topmost
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}} prints out the forms in the body of
the @uref{speope_letcm_letst.html#let,@strong{let}}
@uref{glo_f.html#form,@emph{form}} separated by spaces and linear-style
conditional newlines.

@verbatim
 (defun pprint-let (*standard-output* list)
   (pprint-logical-block (nil list :prefix "(" :suffix ")")
     (write (pprint-pop))
     (pprint-exit-if-list-exhausted)
     (write-char #\Space)
     (pprint-logical-block (nil (pprint-pop) :prefix "(" :suffix ")")
       (pprint-exit-if-list-exhausted)
       (loop (pprint-logical-block (nil (pprint-pop) :prefix "(" :suffix ")")
               (pprint-exit-if-list-exhausted)
               (loop (write (pprint-pop))
                     (pprint-exit-if-list-exhausted)
                     (write-char #\Space)
                     (pprint-newline :linear)))
             (pprint-exit-if-list-exhausted)
             (write-char #\Space)
             (pprint-newline :fill)))
     (pprint-indent :block 1)
     (loop (pprint-exit-if-list-exhausted)
           (write-char #\Space)
           (pprint-newline :linear)
           (write (pprint-pop)))))
@end verbatim

Suppose that one evaluates the following with
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
being 4, and
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
being @uref{glo_t.html#true,@emph{true}}.

@verbatim
 (pprint-let *standard-output*
             '#1=(let (x (*print-length* (f (g 3))) 
                       (z . 2) (k (car y)))
                   (setq x (sqrt z)) #1#))
@end verbatim

If the line length is greater than or equal to 77, the output produced
appears on one line. However, if the line length is 76, line breaks are
inserted at the linear-style conditional newlines separating the forms
in the body and the output below is produced. Note that, the degenerate
binding pair x is printed readably even though it fails to be a list; a
depth abbreviation marker is printed in place of (g 3); the binding pair
(z . 2) is printed readably even though it is not a proper list; and
appropriate circularity markers are printed.

@verbatim
 #1=(LET (X (*PRINT-LENGTH* (F #)) (Z . 2) (K (CAR Y))) 
      (SETQ X (SQRT Z))
      #1#)
@end verbatim

If the line length is reduced to 35, a line break is inserted at one of
the fill-style conditional newlines separating the binding pairs.

@verbatim
 #1=(LET (X (*PRINT-PRETTY* (F #))
          (Z . 2) (K (CAR Y)))
      (SETQ X (SQRT Z))
      #1#)
@end verbatim

Suppose that the line length is further reduced to 22 and
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
is set to 3. In this situation, line breaks are inserted after both the
first and second binding pairs. In addition, the second binding pair is
itself broken across two lines. Clause (b) of the description of
fill-style conditional newlines (see the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_pprint-newline.html#pprint-newline,@strong{pprint-newline}})
prevents the binding pair (z . 2) from being printed at the end of the
third line. Note that the length abbreviation hides the circularity from
view and therefore the printing of circularity markers disappears.

@verbatim
 (LET (X
       (*PRINT-LENGTH*
        (F #))
       (Z . 2) ...)
   (SETQ X (SQRT Z))
   ...)
@end verbatim

The next function prints a vector using ``#(...)'' notation.

@verbatim
(defun pprint-vector (*standard-output* v)
  (pprint-logical-block (nil nil :prefix "#(" :suffix ")")
    (let ((end (length v)) (i 0))
      (when (plusp end)
        (loop (pprint-pop)
              (write (aref v i))
              (if (= (incf i) end) (return nil))
              (write-char #\Space)
              (pprint-newline :fill))))))
@end verbatim

Evaluating the following with a line length of 15 produces the output
shown.

@verbatim
 (pprint-vector *standard-output* '#(12 34 567 8 9012 34 567 89 0 1 23))
 
 #(12 34 567 8 
   9012 34 567 
   89 0 1 23)
@end verbatim

As examples of the convenience of specifying pretty printing with
@uref{glo_f.html#format_string,@emph{format strings}}, consider that the
functions simple-pprint-defun and pprint-let used as examples above can
be compactly defined as follows. (The function pprint-vector cannot be
defined using @uref{fun_format.html#format,@strong{format}} because the
data structure it traverses is not a list.)

@verbatim
(defun simple-pprint-defun (*standard-output* list)
  (format T "~:<~W ~@_~:I~W ~:_~W~1I ~_~W~:>" list))

(defun pprint-let (*standard-output* list)
  (format T "~:<~W~^~:<~@{~:<~@{~W~^~_~}~:>~^~:_~}~:>~1I~@{~^~_~W~}~:>" list)) 
@end verbatim

In the following example, the first @uref{glo_f.html#form,@emph{form}}
restores
@uref{var_stprint-p_t-dispatchst.html#STprint-pprint-dispatchST,@strong{*print-pprint-dispatch*}}
to the equivalent of its initial value. The next two forms then set up a
special way to pretty print ratios. Note that the more specific
@uref{glo_t.html#type_specifier,@emph{type specifier}} has to be
associated with a higher priority.

@verbatim
 (setq *print-pprint-dispatch* (copy-pprint-dispatch nil))

 (set-pprint-dispatch 'ratio
   #'(lambda (s obj)
       (format s "#.(/ ~W ~W)" 
                 (numerator obj) (denominator obj))))

 (set-pprint-dispatch '(and ratio (satisfies minusp))
   #'(lambda (s obj)
       (format s "#.(- (/ ~W ~W))" 
               (- (numerator obj)) (denominator obj)))
   5)

 (pprint '(1/3 -2/3))
 (#.(/ 1 3) #.(- (/ 2 3)))
@end verbatim

The following two @uref{glo_f.html#form,@emph{forms}} illustrate the
definition of pretty printing functions for types of
@uref{glo_c.html#code,@emph{code}}. The first
@uref{glo_f.html#form,@emph{form}} illustrates how to specify the
traditional method for printing quoted objects using
@uref{glo_s.html#single-quote,@emph{single-quote}}. Note the care taken
to ensure that data lists that happen to begin with
@uref{speope_quote.html#quote,@strong{quote}} will be printed readably.
The second form specifies that lists beginning with the symbol my-let
should print the same way that lists beginning with
@uref{speope_letcm_letst.html#let,@strong{let}} print when the initial
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}} is
in effect.

@verbatim
 (set-pprint-dispatch '(cons (member quote)) () 
   #'(lambda (s list)
       (if (and (consp (cdr list)) (null (cddr list)))
          (funcall (formatter "'~W") s (cadr list))
          (pprint-fill s list))))
 
 (set-pprint-dispatch '(cons (member my-let)) 
                      (pprint-dispatch '(let) nil))
@end verbatim

The next example specifies a default method for printing lists that do
not correspond to function calls. Note that the functions
@uref{fun_pprint-fi_rint-tabular.html#pprint-linear,@strong{pprint-linear}},
@uref{fun_pprint-fi_rint-tabular.html#pprint-fill,@strong{pprint-fill}},
and
@uref{fun_pprint-fi_rint-tabular.html#pprint-tabular,@strong{pprint-tabular}}
are all defined with optional @emph{colon-p} and @emph{at-sign-p}
arguments so that they can be used as @strong{pprint dispatch functions}
as well as ~/.../ functions.

@verbatim
 (set-pprint-dispatch '(cons (not (and symbol (satisfies fboundp))))
                      #'pprint-fill -5)
 
 ;; Assume a line length of 9
 (pprint '(0 b c d e f g h i j k))
 (0 b c d
  e f g h
  i j k)
@end verbatim

This final example shows how to define a pretty printing function for a
user defined data structure.

@verbatim
 (defstruct family mom kids)
 
 (set-pprint-dispatch 'family
   #'(lambda (s f)
       (funcall (formatter "~@<#<~;~W and ~2I~_~/pprint-fill/~;>~:>")
               s (family-mom f) (family-kids f))))
@end verbatim

The pretty printing function for the structure family specifies how to
adjust the layout of the output so that it can fit aesthetically into a
variety of line widths. In addition, it obeys the printer control
variables
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-linesst.html#STprint-linesST,@strong{*print-lines*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
and
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
and can tolerate several different kinds of malformity in the data
structure. The output below shows what is printed out with a right
margin of 25,
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
being @uref{glo_t.html#true,@emph{true}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
being @uref{glo_f.html#false,@emph{false}}, and a malformed kids list.

@verbatim
 (write (list 'principal-family
              (make-family :mom "Lucy"
                           :kids '("Mark" "Bob" . "Dan")))
        :right-margin 25 :pretty T :escape nil :miser-width nil)
 (PRINCIPAL-FAMILY
  #<Lucy and
      Mark Bob . Dan>)
@end verbatim

Note that a pretty printing function for a structure is different from
the structure's
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}}. While
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{methods}} are permanently associated with
a structure, pretty printing functions are stored in
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch tables}}
and can be rapidly changed to reflect different printing needs. If there
is no pretty printing function for a structure in the current
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}},
its
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} is used instead.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss116.html,DEFSTRUCT-PRINT-FUNCTION-AGAIN:X3J13-MAR-93}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2223
@subsubsection CLHS: Section 22.2.3
@anchor{#clhs-section-22.2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.2.3 Notes about the Pretty Printer's Background

For a background reference to the abstract concepts detailed in this
section, see
@uref{http://reading-room-www.lcs.mit.edu/rr/catalog/catalog.html?collection=tr&sort=not&search=xp,@emph{XP:
A Common Lisp Pretty Printing System}}. The details of that paper are
not binding on this document, but may be helpful in establishing a
conceptual basis for understanding this material.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 223
@subsection CLHS: Section 22.3
@anchor{#clhs-section-22.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-22.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3 Formatted Output

@uref{fun_format.html#format,@strong{format}} is useful for producing
nicely formatted text, producing good-looking messages, and so on.
@uref{fun_format.html#format,@strong{format}} can generate and return a
@uref{glo_s.html#string,@emph{string}} or output to @emph{destination}.

The @emph{control-string} argument to
@uref{fun_format.html#format,@strong{format}} is actually a
@uref{glo_f.html#format_control,@emph{format control}}. That is, it can
be either a @uref{glo_f.html#format_string,@emph{format string}} or a
@uref{glo_f.html#function,@emph{function}}, for example a
@uref{glo_f.html#function,@emph{function}} returned by the
@uref{mac_formatter.html#formatter,@strong{formatter}}
@uref{glo_m.html#macro,@emph{macro}}.

If it is a @uref{glo_f.html#function,@emph{function}}, the
@uref{glo_f.html#function,@emph{function}} is called with the
appropriate output stream as its first argument and the data arguments
to @uref{fun_format.html#format,@strong{format}} as its remaining
arguments. The function should perform whatever output is necessary and
return the unused tail of the arguments (if any).

The compilation process performed by
@uref{mac_formatter.html#formatter,@strong{formatter}} produces a
@uref{glo_f.html#function,@emph{function}} that would do with its
@uref{glo_a.html#argument,@emph{arguments}} as the
@uref{fun_format.html#format,@strong{format}} interpreter would do with
those @uref{glo_a.html#argument,@emph{arguments}}.

The remainder of this section describes what happens if the
@emph{control-string} is a @uref{glo_f.html#format_string,@emph{format
string}}.

@emph{Control-string} is composed of simple text
(@uref{glo_c.html#character,@emph{characters}}) and embedded directives.

@uref{fun_format.html#format,@strong{format}} writes the simple text as
is; each embedded directive specifies further text output that is to
appear at the corresponding point within the simple text. Most
directives use one or more elements of @emph{args} to create their
output.

A directive consists of a @uref{glo_t.html#tilde,@emph{tilde}}, optional
prefix parameters separated by commas, optional
@uref{glo_c.html#colon,@emph{colon}} and
@uref{glo_a.html#at-sign,@emph{at-sign}} modifiers, and a single
character indicating what kind of directive this is. There is no
required ordering between the @uref{glo_a.html#at-sign,@emph{at-sign}}
and @uref{glo_c.html#colon,@emph{colon}} modifier. The
@uref{glo_c.html#case,@emph{case}} of the directive character is
ignored. Prefix parameters are notated as signed (sign is optional)
decimal numbers, or as a
@uref{glo_s.html#single-quote,@emph{single-quote}} followed by a
character. For example, ~5,'0d can be used to print an
@uref{glo_i.html#integer,@emph{integer}} in decimal radix in five
columns with leading zeros, or ~5,'*d to get leading asterisks.

In place of a prefix parameter to a directive, V (or v) can be used. In
this case, @uref{fun_format.html#format,@strong{format}} takes an
argument from @emph{args} as a parameter to the directive. The argument
should be an @uref{glo_i.html#integer,@emph{integer}} or
@uref{glo_c.html#character,@emph{character}}. If the @emph{arg} used by
a V parameter is @uref{any_nil.html#nil,@strong{nil}}, the effect is as
if the parameter had been omitted. # can be used in place of a prefix
parameter; it represents the number of @emph{args} remaining to be
processed. When used within a recursive format, in the context of ~? or
~@{, the # prefix parameter represents the number of
@uref{glo_f.html#format_argument,@emph{format arguments}} remaining
within the recursive call.

Examples of @uref{glo_f.html#format_string,@emph{format strings}}:

@verbatim
"~S"        ;This is an S directive with no parameters or modifiers.  
"~3,-4:@s"  ;This is an S directive with two parameters, 3 and -4,    
            ; and both the colon and at-sign flags.                   
"~,+4S"     ;Here the first prefix parameter is omitted and takes     
            ; on its default value, while the second parameter is 4.  
@end verbatim

@strong{Figure 22-6. Examples of format control strings}

@uref{fun_format.html#format,@strong{format}} sends the output to
@emph{destination}. If @emph{destination} is
@uref{any_nil.html#nil,@strong{nil}},
@uref{fun_format.html#format,@strong{format}} creates and returns a
@uref{glo_s.html#string,@emph{string}} containing the output from
@emph{control-string}. If @emph{destination} is
@uref{glo_n.html#non-nil,@emph{non-nil}}, it must be a
@uref{glo_s.html#string,@emph{string}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, a
@uref{glo_s.html#stream,@emph{stream}}, or the symbol
@uref{any_t.html#t,@strong{t}}. If @emph{destination} is a
@uref{glo_s.html#string,@emph{string}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the output is added
to the end of the @uref{glo_s.html#string,@emph{string}}. If
@emph{destination} is a @uref{glo_s.html#stream,@emph{stream}}, the
output is sent to that @uref{glo_s.html#stream,@emph{stream}}. If
@emph{destination} is @uref{any_t.html#t,@strong{t}}, the output is sent
to @uref{glo_s.html#standard_output,@emph{standard output}}.

In the description of the directives that follows, the term @emph{arg}
in general refers to the next item of the set of @emph{args} to be
processed. The word or phrase at the beginning of each description is a
mnemonic for the directive.
@uref{fun_format.html#format,@strong{format}} directives do not bind any
of the printer control variables (@strong{*print-...*}) except as
specified in the following descriptions. Implementations may specify the
binding of new, implementation-specific printer control variables for
each @uref{fun_format.html#format,@strong{format}} directive, but they
may neither bind any standard printer control variables not specified in
description of a @uref{fun_format.html#format,@strong{format}} directive
nor fail to bind any standard printer control variables as specified in
the description.

@uref{sec_22-3-1.html,}

22.3.1 FORMAT Basic Output

@uref{sec_22-3-2.html,}

22.3.2 FORMAT Radix Control

@uref{sec_22-3-3.html,}

22.3.3 FORMAT Floating-Point Printers

@uref{sec_22-3-4.html,}

22.3.4 FORMAT Printer Operations

@uref{sec_22-3-5.html,}

22.3.5 FORMAT Pretty Printer Operations

@uref{sec_22-3-6.html,}

22.3.6 FORMAT Layout Control

@uref{sec_22-3-7.html,}

22.3.7 FORMAT Control-Flow Operations

@uref{sec_22-3-8.html,}

22.3.8 FORMAT Miscellaneous Operations

@uref{sec_22-3-9.html,}

22.3.9 FORMAT Miscellaneous Pseudo-Operations

@uref{sec_22-3-10.html,}

22.3.10 Additional Information about FORMAT Operations

@uref{sec_22-3-11.html,}

22.3.11 Examples of FORMAT

@uref{sec_22-3-12.html,}

22.3.12 Notes about FORMAT

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@item
@uref{../Issues/iss164.html,FORMAT-ATSIGN-COLON}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 22310::
* CLHS Section 22311::
* CLHS Section 22312::
* CLHS Section 2232::
* CLHS Section 2233::
* CLHS Section 2234::
* CLHS Section 2235::
* CLHS Section 2236::
* CLHS Section 2237::
* CLHS Section 2238::
* CLHS Section 2239::
@end menu

@node CLHS Section 22310
@subsubsection CLHS: Section 22.3.10
@anchor{#clhs-section-22.3.10}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-9-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-10-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.10 Additional Information about FORMAT Operations

@uref{sec_22-3-10-1.html,}

22.3.10.1 Nesting of FORMAT Operations

@uref{sec_22-3-10-2.html,}

22.3.10.2 Missing and Additional FORMAT Arguments

@uref{sec_22-3-10-3.html,}

22.3.10.3 Additional FORMAT Parameters

@uref{sec_22-3-10-4.html,}

22.3.10.4 Undefined FORMAT Modifier Combinations

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.10.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-10-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-10.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-10-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.10.2 Missing and Additional FORMAT Arguments

The consequences are undefined if no @emph{arg} remains for a directive
requiring an argument. However, it is permissible for one or more
@emph{args} to remain unprocessed by a directive; such @emph{args} are
ignored.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.10.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-10-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-10.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-10-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.10.3 Additional FORMAT Parameters

The consequences are undefined if a format directive is given more
parameters than it is described here as accepting.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.10.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-10-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-10.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-11.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.10.4 Undefined FORMAT Modifier Combinations

The consequences are undefined if @uref{glo_c.html#colon,@emph{colon}}
or @uref{glo_a.html#at-sign,@emph{at-sign}} modifiers are given to a
directive in a combination not specifically described here as being
meaningful.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 22311
@subsubsection CLHS: Section 22.3.11
@anchor{#clhs-section-22.3.11}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-10-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-12.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.11 Examples of FORMAT

@verbatim
 (format nil "foo") =>  "foo"
 (setq x 5) =>  5
 (format nil "The answer is ~D." x) =>  "The answer is 5."
 (format nil "The answer is ~3D." x) =>  "The answer is   5."
 (format nil "The answer is ~3,'0D." x) =>  "The answer is 005."
 (format nil "The answer is ~:D." (expt 47 x))
=>  "The answer is 229,345,007."
 (setq y "elephant") =>  "elephant"
 (format nil "Look at the ~A!" y) =>  "Look at the elephant!"
 (setq n 3) =>  3
 (format nil "~D item~:P found." n) =>  "3 items found."
 (format nil "~R dog~:[s are~; is~] here." n (= n 1))
=>  "three dogs are here."
 (format nil "~R dog~:*~[s are~; is~:;s are~] here." n)
=>  "three dogs are here."
 (format nil "Here ~[are~;is~:;are~] ~:*~R pupp~:@P." n)
=>  "Here are three puppies."
@end verbatim

@verbatim
 (defun foo (x)
   (format nil "~6,2F|~6,2,1,'*F|~6,2,,'?F|~6F|~,2F|~F"
           x x x x x x)) =>  FOO
 (foo 3.14159)  =>  "  3.14| 31.42|  3.14|3.1416|3.14|3.14159"
 (foo -3.14159) =>  " -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"
 (foo 100.0)    =>  "100.00|******|100.00| 100.0|100.00|100.0"
 (foo 1234.0)   =>  "1234.00|******|??????|1234.0|1234.00|1234.0"
 (foo 0.006)    =>  "  0.01|  0.06|  0.01| 0.006|0.01|0.006"
@end verbatim

@verbatim
 (defun foo (x)  
    (format nil
           "~9,2,1,,'*E|~10,3,2,2,'?,,'$E|~
            ~9,3,2,-2,'%@E|~9,2E"
           x x x x))
 (foo 3.14159)  =>  "  3.14E+0| 31.42$-01|+.003E+03|  3.14E+0"
 (foo -3.14159) =>  " -3.14E+0|-31.42$-01|-.003E+03| -3.14E+0"
 (foo 1100.0)   =>  "  1.10E+3| 11.00$+02|+.001E+06|  1.10E+3"
 (foo 1100.0L0) =>  "  1.10L+3| 11.00$+02|+.001L+06|  1.10L+3"
 (foo 1.1E13)   =>  "*********| 11.00$+12|+.001E+16| 1.10E+13"
 (foo 1.1L120)  =>  "*********|??????????|%%%%%%%%%|1.10L+120"
 (foo 1.1L1200) =>  "*********|??????????|%%%%%%%%%|1.10L+1200"
@end verbatim

As an example of the effects of varying the scale factor, the code

@verbatim
 (dotimes (k 13)
   (format t "~%Scale factor ~2D: |~13,6,2,VE|"
           (- k 5) (- k 5) 3.14159))
@end verbatim

produces the following output:

@verbatim
Scale factor -5: | 0.000003E+06|
Scale factor -4: | 0.000031E+05|
Scale factor -3: | 0.000314E+04|
Scale factor -2: | 0.003142E+03|
Scale factor -1: | 0.031416E+02|
Scale factor  0: | 0.314159E+01|
Scale factor  1: | 3.141590E+00|
Scale factor  2: | 31.41590E-01|
Scale factor  3: | 314.1590E-02|
Scale factor  4: | 3141.590E-03|
Scale factor  5: | 31415.90E-04|
Scale factor  6: | 314159.0E-05|
Scale factor  7: | 3141590.E-06|
@end verbatim

@verbatim
 (defun foo (x)
   (format nil "~9,2,1,,'*G|~9,3,2,3,'?,,'$G|~9,3,2,0,'%G|~9,2G"
          x x x x))                                     
 (foo 0.0314159) =>  "  3.14E-2|314.2$-04|0.314E-01|  3.14E-2"
 (foo 0.314159)  =>  "  0.31   |0.314    |0.314    | 0.31    "
 (foo 3.14159)   =>  "   3.1   | 3.14    | 3.14    |  3.1    "
 (foo 31.4159)   =>  "   31.   | 31.4    | 31.4    |  31.    "
 (foo 314.159)   =>  "  3.14E+2| 314.    | 314.    |  3.14E+2"
 (foo 3141.59)   =>  "  3.14E+3|314.2$+01|0.314E+04|  3.14E+3"
 (foo 3141.59L0) =>  "  3.14L+3|314.2$+01|0.314L+04|  3.14L+3"
 (foo 3.14E12)   =>  "*********|314.0$+10|0.314E+13| 3.14E+12"
 (foo 3.14L120)  =>  "*********|?????????|%%%%%%%%%|3.14L+120"
 (foo 3.14L1200) =>  "*********|?????????|%%%%%%%%%|3.14L+1200"
@end verbatim

@verbatim
 (format nil "~10<foo~;bar~>")   =>  "foo    bar"
 (format nil "~10:<foo~;bar~>")  =>  "  foo  bar"
 (format nil "~10<foobar~>")     =>  "    foobar"
 (format nil "~10:<foobar~>")    =>  "    foobar"
 (format nil "~10:@<foo~;bar~>") =>  "  foo bar "
 (format nil "~10@<foobar~>")    =>  "foobar    "
 (format nil "~10:@<foobar~>")   =>  "  foobar  "
@end verbatim

@verbatim
  (FORMAT NIL "Written to ~A." #P"foo.bin")
  =>  "Written to foo.bin."
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss260.html,PATHNAME-PRINT-READ:SHARPSIGN-P}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 22312
@subsubsection CLHS: Section 22.3.12
@anchor{#clhs-section-22.3.12}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-11.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.12 Notes about FORMAT

Formatted output is performed not only by
@uref{fun_format.html#format,@strong{format}}, but by certain other
functions that accept a @uref{glo_f.html#format_control,@emph{format
control}} the way @uref{fun_format.html#format,@strong{format}} does.
For example, error-signaling functions such as
@uref{fun_cerror.html#cerror,@strong{cerror}} accept
@uref{glo_f.html#format_control,@emph{format controls}}.

Note that the meaning of @uref{any_nil.html#nil,@strong{nil}} and
@uref{any_t.html#t,@strong{t}} as destinations to
@uref{fun_format.html#format,@strong{format}} are different than those
of @uref{any_nil.html#nil,@strong{nil}} and
@uref{any_t.html#t,@strong{t}} as
@uref{glo_s.html#stream_designator,@emph{stream designators}}.

The ~^ should appear only at the beginning of a ~< clause, because it
aborts the entire clause in which it appears (as well as all following
clauses).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2232
@subsubsection CLHS: Section 22.3.2
@anchor{#clhs-section-22.3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-1-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.2 FORMAT Radix Control

@uref{sec_22-3-2-1.html,}

22.3.2.1 Tilde R: Radix

@uref{sec_22-3-2-2.html,}

22.3.2.2 Tilde D: Decimal

@uref{sec_22-3-2-3.html,}

22.3.2.3 Tilde B: Binary

@uref{sec_22-3-2-4.html,}

22.3.2.4 Tilde O: Octal

@uref{sec_22-3-2-5.html,}

22.3.2.5 Tilde X: Hexadecimal

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.2.2 Tilde D: Decimal

An @emph{arg}, which should be an
@uref{glo_i.html#integer,@emph{integer}}, is printed in decimal radix.
~D will never put a decimal point after the number.

~@emph{mincol}D uses a column width of @emph{mincol}; spaces are
inserted on the left if the number requires fewer than @emph{mincol}
columns for its digits and sign. If the number doesn't fit in
@emph{mincol} columns, additional columns are used as needed.

~@emph{mincol},@emph{padchar}D uses @emph{padchar} as the pad character
instead of space.

If @emph{arg} is not an @uref{glo_i.html#integer,@emph{integer}}, it is
printed in ~A format and decimal base.

The @@ modifier causes the number's sign to be printed always; the
default is to print it only if the number is negative. The : modifier
causes commas to be printed between groups of digits; @emph{commachar}
may be used to change the character used as the comma.
@emph{comma-interval} must be an
@uref{glo_i.html#integer,@emph{integer}} and defaults to 3. When the :
modifier is given to any of these directives, the @emph{commachar} is
printed between groups of @emph{comma-interval} digits.

Thus the most general form of ~D is
~@emph{mincol},@emph{padchar},@emph{commachar},@emph{comma-interval}D.

~D binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}}
to 10, and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@item
@uref{../Issues/iss166.html,FORMAT-COMMA-INTERVAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-2-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.2.3 Tilde B: Binary

This is just like ~D but prints in binary radix (radix 2) instead of
decimal. The full form is therefore
~@emph{mincol},@emph{padchar},@emph{commachar},@emph{comma-interval}B.

~B binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}}
to 2, and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.2.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-2-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.2.4 Tilde O: Octal

This is just like ~D but prints in octal radix (radix 8) instead of
decimal. The full form is therefore
~@emph{mincol},@emph{padchar},@emph{commachar},@emph{comma-interval}O.

~O binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}}
to 8, and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.2.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-2-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.2.5 Tilde X: Hexadecimal

This is just like ~D but prints in hexadecimal radix (radix 16) instead
of decimal. The full form is therefore
~@emph{mincol},@emph{padchar},@emph{commachar},@emph{comma-interval}X.

~X binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}}
to @uref{glo_f.html#false,@emph{false}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}}
to 16, and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2233
@subsubsection CLHS: Section 22.3.3
@anchor{#clhs-section-22.3.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-2-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.3 FORMAT Floating-Point Printers

@uref{sec_22-3-3-1.html,}

22.3.3.1 Tilde F: Fixed-Format Floating-Point

@uref{sec_22-3-3-2.html,}

22.3.3.2 Tilde E: Exponential Floating-Point

@uref{sec_22-3-3-3.html,}

22.3.3.3 Tilde G: General Floating-Point

@uref{sec_22-3-3-4.html,}

22.3.3.4 Tilde Dollarsign: Monetary Floating-Point

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.3.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.3.2 Tilde E: Exponential Floating-Point

The next @emph{arg} is printed as a @uref{glo_f.html#float,@emph{float}}
in exponential notation.

The full form is
~@emph{w},@emph{d},@emph{e},@emph{k},@emph{overflowchar},@emph{padchar},@emph{exponentchar}E.
The parameter @emph{w} is the width of the field to be printed; @emph{d}
is the number of digits to print after the decimal point; @emph{e} is
the number of digits to use when printing the exponent; @emph{k} is a
scale factor that defaults to one (not zero).

Exactly @emph{w} characters will be output. First, leading copies of the
character @emph{padchar} (which defaults to a space) are printed, if
necessary, to pad the field on the left. If the @emph{arg} is negative,
then a minus sign is printed; if the @emph{arg} is not negative, then a
plus sign is printed if and only if the @@ modifier was supplied. Then a
sequence of digits containing a single embedded decimal point is
printed. The form of this sequence of digits depends on the scale factor
@emph{k}. If @emph{k} is zero, then @emph{d} digits are printed after
the decimal point, and a single zero digit appears before the decimal
point if the total field width will permit it. If @emph{k} is positive,
then it must be strictly less than @emph{d}+2; @emph{k} significant
digits are printed before the decimal point, and @emph{d}-@emph{k}+1
digits are printed after the decimal point. If @emph{k} is negative,
then it must be strictly greater than -@emph{d}; a single zero digit
appears before the decimal point if the total field width will permit
it, and after the decimal point are printed first -@emph{k} zeros and
then @emph{d}+@emph{k} significant digits. The printed fraction must be
properly rounded. When rounding up and rounding down would produce
printed values equidistant from the scaled value of @emph{arg}, then the
implementation is free to use either one. For example, printing the
argument 637.5 using the format ~8,2E may correctly produce either
6.37E+2 or 6.38E+2.

Following the digit sequence, the exponent is printed. First the
character parameter @emph{exponentchar} is printed; if this parameter is
omitted, then the @uref{glo_e.html#exponent_marker,@emph{exponent
marker}} that
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}} would use is
printed, as determined from the type of the
@uref{glo_f.html#float,@emph{float}} and the current value of
@uref{var_stread-de_oat-formatst.html#STread-default-float-formatST,@strong{*read-default-float-format*}}.
Next, either a plus sign or a minus sign is printed, followed by
@emph{e} digits representing the power of ten by which the printed
fraction must be multiplied to properly represent the rounded value of
@emph{arg}.

If it is impossible to print the value in the required format in a field
of width @emph{w}, possibly because @emph{k} is too large or too small
or because the exponent cannot be printed in @emph{e} character
positions, then one of two actions is taken. If the parameter
@emph{overflowchar} is supplied, then @emph{w} copies of that parameter
are printed instead of the scaled value of @emph{arg}. If the
@emph{overflowchar} parameter is omitted, then the scaled value is
printed using more than @emph{w} characters, as many more as may be
needed; if the problem is that @emph{d} is too small for the supplied
@emph{k} or that @emph{e} is too small, then a larger value is used for
@emph{d} or @emph{e} as may be needed.

If the @emph{w} parameter is omitted, then the field is of variable
width. In effect a value is chosen for @emph{w} in such a way that no
leading pad characters need to be printed.

If the parameter @emph{d} is omitted, then there is no constraint on the
number of digits to appear. A value is chosen for @emph{d} in such a way
that as many digits as possible may be printed subject to the width
constraint imposed by the parameter @emph{w}, the constraint of the
scale factor @emph{k}, and the constraint that no trailing zero digits
may appear in the fraction, except that if the fraction to be printed is
zero then a single zero digit should appear after the decimal point.

If the parameter @emph{e} is omitted, then the exponent is printed using
the smallest number of digits necessary to represent its value.

If all of @emph{w}, @emph{d}, and @emph{e} are omitted, then the effect
is to print the value using ordinary free-format exponential-notation
output; @uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}} uses
a similar format for any non-zero number whose magnitude is less than
10^-3 or greater than or equal to 10^7. The only difference is that the
~E directive always prints a plus or minus sign in front of the
exponent, while
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}} omits the
plus sign if the exponent is non-negative.

If @emph{arg} is a @uref{glo_r.html#rational,@emph{rational}} number,
then it is coerced to be a @uref{glo_s.html#single_float,@emph{single
float}} and then printed. Alternatively, an implementation is permitted
to process a @uref{glo_r.html#rational,@emph{rational}} number by any
other method that has essentially the same behavior but avoids loss of
precision or overflow because of the coercion. If @emph{w} and @emph{d}
are unsupplied and the number has no exact decimal representation, for
example 1/3, some precision cutoff must be chosen by the implementation
since only a finite number of digits may be printed.

If @emph{arg} is a @uref{glo_c.html#complex,@emph{complex}} number or
some non-numeric @uref{glo_o.html#object,@emph{object}}, then it is
printed using the format directive ~@emph{w}D, thereby printing it in
decimal radix and a minimum field width of @emph{w}.

~E binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}} and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@item
@uref{../Issues/iss167.html,FORMAT-E-EXPONENT-SIGN:FORCE-SIGN}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.3.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-3-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-3-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.3.3 Tilde G: General Floating-Point

The next @emph{arg} is printed as a @uref{glo_f.html#float,@emph{float}}
in either fixed-format or exponential notation as appropriate.

The full form is
~@emph{w},@emph{d},@emph{e},@emph{k},@emph{overflowchar},@emph{padchar},@emph{exponentchar}G.
The format in which to print @emph{arg} depends on the magnitude
(absolute value) of the @emph{arg}. Let @emph{n} be an integer such that
10^@emph{n}-1 <= |@emph{arg}| < 10^@emph{n}. Let @emph{ee} equal
@emph{e}+2, or 4 if @emph{e} is omitted. Let @emph{ww} equal
@emph{w}-@emph{ee}, or @uref{any_nil.html#nil,@strong{nil}} if @emph{w}
is omitted. If @emph{d} is omitted, first let @emph{q} be the number of
digits needed to print @emph{arg} with no loss of information and
without leading or trailing zeros; then let @emph{d} equal (max @emph{q}
(min @emph{n} 7)). Let @emph{dd} equal @emph{d}-@emph{n}.

If 0 <= @emph{dd} <= @emph{d}, then @emph{arg} is printed as if by the
format directives

~@emph{ww},@emph{dd},,@emph{overflowchar},@emph{padchar}F~@emph{ee}@@T

Note that the scale factor @emph{k} is not passed to the ~F directive.
For all other values of @emph{dd}, @emph{arg} is printed as if by the
format directive

~@emph{w},@emph{d},@emph{e},@emph{k},@emph{overflowchar},@emph{padchar},@emph{exponentchar}E

In either case, an @@ modifier is supplied to the ~F or ~E directive if
and only if one was supplied to the ~G directive.

~G binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}} and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.3.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-3-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.3.4 Tilde Dollarsign: Monetary Floating-Point

The next @emph{arg} is printed as a @uref{glo_f.html#float,@emph{float}}
in fixed-format notation.

The full form is ~@emph{d},@emph{n},@emph{w},@emph{padchar}$. The
parameter @emph{d} is the number of digits to print after the decimal
point (default value 2); @emph{n} is the minimum number of digits to
print before the decimal point (default value 1); @emph{w} is the
minimum total width of the field to be printed (default value 0).

First padding and the sign are output. If the @emph{arg} is negative,
then a minus sign is printed; if the @emph{arg} is not negative, then a
plus sign is printed if and only if the @@ modifier was supplied. If the
: modifier is used, the sign appears before any padding, and otherwise
after the padding. If @emph{w} is supplied and the number of other
characters to be output is less than @emph{w}, then copies of
@emph{padchar} (which defaults to a space) are output to make the total
field width equal @emph{w}. Then @emph{n} digits are printed for the
integer part of @emph{arg}, with leading zeros if necessary; then a
decimal point; then @emph{d} digits of fraction, properly rounded.

If the magnitude of @emph{arg} is so large that more than @emph{m}
digits would have to be printed, where @emph{m} is the larger of
@emph{w} and 100, then an implementation is free, at its discretion, to
print the number using exponential notation instead, as if by the
directive ~@emph{w},@emph{q},,,,@emph{padchar}E, where @emph{w} and
@emph{padchar} are present or omitted according to whether they were
present or omitted in the ~$ directive, and where
@emph{q}=@emph{d}+@emph{n}-1, where @emph{d} and @emph{n} are the
(possibly default) values given to the ~$ directive.

If @emph{arg} is a @uref{glo_r.html#rational,@emph{rational}} number,
then it is coerced to be a @uref{glo_s.html#single_float,@emph{single
float}} and then printed. Alternatively, an implementation is permitted
to process a @uref{glo_r.html#rational,@emph{rational}} number by any
other method that has essentially the same behavior but avoids loss of
precision or overflow because of the coercion.

If @emph{arg} is a @uref{glo_c.html#complex,@emph{complex}} number or
some non-numeric @uref{glo_o.html#object,@emph{object}}, then it is
printed using the format directive ~@emph{w}D, thereby printing it in
decimal radix and a minimum field width of @emph{w}.

~$ binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}} and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2234
@subsubsection CLHS: Section 22.3.4
@anchor{#clhs-section-22.3.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-3-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.4 FORMAT Printer Operations

@uref{sec_22-3-4-1.html,}

22.3.4.1 Tilde A: Aesthetic

@uref{sec_22-3-4-2.html,}

22.3.4.2 Tilde S: Standard

@uref{sec_22-3-4-3.html,}

22.3.4.3 Tilde W: Write

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.4.2 Tilde S: Standard

This is just like ~A, but @emph{arg} is printed with escape characters
(as by @uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}}
rather than princ). The output is therefore suitable for input to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}. ~S accepts
all the arguments and modifiers that ~A does.

~S binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{any_t.html#t,@strong{t}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.4.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.4.3 Tilde W: Write

An argument, any @uref{glo_o.html#object,@emph{object}}, is printed
obeying every printer control variable (as by
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}). In
addition, ~W interacts correctly with depth abbreviation, by not
resetting the depth counter to zero. ~W does not accept parameters. If
given the @uref{glo_c.html#colon,@emph{colon}} modifier, ~W binds
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
to @uref{glo_t.html#true,@emph{true}}. If given the
@uref{glo_a.html#at-sign,@emph{at-sign}} modifier, ~W binds
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
and
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
to @uref{any_nil.html#nil,@strong{nil}}.

~W provides automatic support for the detection of circularity and
sharing. If the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
is not @uref{any_nil.html#nil,@strong{nil}} and ~W is applied to an
argument that is a circular (or shared) reference, an appropriate
#@emph{n}# marker is inserted in the output instead of printing the
argument.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2235
@subsubsection CLHS: Section 22.3.5
@anchor{#clhs-section-22.3.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-4-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.5 FORMAT Pretty Printer Operations

The following constructs provide access to the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}}:

@uref{sec_22-3-5-1.html,}

22.3.5.1 Tilde Underscore: Conditional Newline

@uref{sec_22-3-5-2.html,}

22.3.5.2 Tilde Less-Than-Sign: Logical Block

@uref{sec_22-3-5-3.html,}

22.3.5.3 Tilde I: Indent

@uref{sec_22-3-5-4.html,}

22.3.5.4 Tilde Slash: Call Function

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.5.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-5-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-5-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.5.2 Tilde Less-Than-Sign: Logical Block

~<...~:>

If ~:> is used to terminate a ~<...~>, the directive is equivalent to a
call to
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.
The argument corresponding to the ~<...~:> directive is treated in the
same way as the @uref{glo_l.html#list,@emph{list}} argument to
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}},
thereby providing automatic support for
non-@uref{glo_l.html#list,@emph{list}} arguments and the detection of
circularity, sharing, and depth abbreviation. The portion of the
@emph{control-string} nested within the ~<...~:> specifies the :prefix
(or :per-line-prefix), :suffix, and body of the
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.

The @emph{control-string} portion enclosed by ~<...~:> can be divided
into segments ~<@emph{prefix}~;@emph{body}~;@emph{suffix}~:> by ~;
directives. If the first section is terminated by ~@@;, it specifies a
per-line prefix rather than a simple prefix. The @emph{prefix} and
@emph{suffix} cannot contain format directives. An error is signaled if
either the prefix or suffix fails to be a constant string or if the
enclosed portion is divided into more than three segments.

If the enclosed portion is divided into only two segments, the
@emph{suffix} defaults to the null string. If the enclosed portion
consists of only a single segment, both the @emph{prefix} and the
@emph{suffix} default to the null string. If the
@uref{glo_c.html#colon,@emph{colon}} modifier is used (i.e., ~:<...~:>),
the @emph{prefix} and @emph{suffix} default to "(" and ")"
(respectively) instead of the null string.

The body segment can be any arbitrary
@uref{glo_f.html#format_string,@emph{format string}}. This
@uref{glo_f.html#format_string,@emph{format string}} is applied to the
elements of the list corresponding to the ~<...~:> directive as a whole.
Elements are extracted from this list using
@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}}, thereby
providing automatic support for malformed lists, and the detection of
circularity, sharing, and length abbreviation. Within the body segment,
~^ acts like
@uref{locmac_pprint_st-exhausted.html#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}.

~<...~:> supports a feature not supported by
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.
If ~:@@> is used to terminate the directive (i.e., ~<...~:@@>), then a
fill-style conditional newline is automatically inserted after each
group of blanks immediately contained in the body (except for blanks
after a <Newline> directive). This makes it easy to achieve the
equivalent of paragraph filling.

If the @uref{glo_a.html#at-sign,@emph{at-sign}} modifier is used with
~<...~:>, the entire remaining argument list is passed to the directive
as its argument. All of the remaining arguments are always consumed by
~@@<...~:>, even if they are not all used by the
@uref{glo_f.html#format_string,@emph{format string}} nested in the
directive. Other than the difference in its argument, ~@@<...~:> is
exactly the same as ~<...~:> except that circularity detection is not
applied if ~@@<...~:> is encountered at top level in a
@uref{glo_f.html#format_string,@emph{format string}}. This ensures that
circularity detection is applied only to data lists, not to
@uref{glo_f.html#format_argument,@emph{format argument}}
@uref{glo_l.html#list,@emph{lists}}.

" . #@emph{n}#" is printed if circularity or sharing has to be indicated
for its argument as a whole.

To a considerable extent, the basic form of the directive ~<...~> is
incompatible with the dynamic control of the arrangement of output by
~W, ~_, ~<...~:>, ~I, and ~:T. As a result, an error is signaled if any
of these directives is nested within ~<...~>. Beyond this, an error is
also signaled if the ~<...~:;...~> form of ~<...~> is used in the same
@uref{glo_f.html#format_string,@emph{format string}} with ~W, ~_,
~<...~:>, ~I, or ~:T.

See also @uref{sec_22-3-6-2.html,Section 22.3.6.2 (Tilde Less-Than-Sign:
Justification)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.5.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-5-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-5-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.5.3 Tilde I: Indent

~@emph{n}I is the same as (pprint-indent :block n).

~@emph{n}:I is the same as (pprint-indent :current n). In both cases,
@emph{n} defaults to zero, if it is omitted.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.5.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-5-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.5.4 Tilde Slash: Call Function

~/@emph{name}/

User defined functions can be called from within a format string by
using the directive ~/@emph{name}/. The
@uref{glo_c.html#colon,@emph{colon}} modifier, the
@uref{glo_a.html#at-sign,@emph{at-sign}} modifier, and arbitrarily many
parameters can be specified with the ~/@emph{name}/ directive.
@emph{name} can be any arbitrary string that does not contain a "/". All
of the characters in @emph{name} are treated as if they were upper case.
If @emph{name} contains a single @uref{glo_c.html#colon,@emph{colon}}
(:) or double @uref{glo_c.html#colon,@emph{colon}} (::), then everything
up to but not including the first ":" or "::" is taken to be a
@uref{glo_s.html#string,@emph{string}} that names a
@uref{glo_p.html#package,@emph{package}}. Everything after the first ":"
or "::" (if any) is taken to be a @uref{glo_s.html#string,@emph{string}}
that names a symbol. The function corresponding to a ~/name/ directive
is obtained by looking up the @uref{glo_s.html#symbol,@emph{symbol}}
that has the indicated name in the indicated
@uref{glo_p.html#package,@emph{package}}. If @emph{name} does not
contain a ":" or "::", then the whole @emph{name} string is looked up in
the COMMON-LISP-USER package.

When a ~/name/ directive is encountered, the indicated function is
called with four or more arguments. The first four arguments are: the
output stream, the @uref{glo_f.html#format_argument,@emph{format
argument}} corresponding to the directive, a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}} that is
@uref{glo_t.html#true,@emph{true}} if the
@uref{glo_c.html#colon,@emph{colon}} modifier was used, and a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}} that is
@uref{glo_t.html#true,@emph{true}} if the
@uref{glo_a.html#at-sign,@emph{at-sign}} modifier was used. The
remaining arguments consist of any parameters specified with the
directive. The function should print the argument appropriately. Any
values returned by the function are ignored.

The three @uref{glo_f.html#function,@emph{functions}}
@uref{fun_pprint-fi_rint-tabular.html#pprint-linear,@strong{pprint-linear}},
@uref{fun_pprint-fi_rint-tabular.html#pprint-fill,@strong{pprint-fill}},
and
@uref{fun_pprint-fi_rint-tabular.html#pprint-tabular,@strong{pprint-tabular}}
are specifically designed so that they can be called by ~/.../ (i.e.,
~/pprint-linear/, ~/pprint-fill/, and ~/pprint-tabular/). In particular
they take @uref{glo_c.html#colon,@emph{colon}} and
@uref{glo_a.html#at-sign,@emph{at-sign}} arguments.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2236
@subsubsection CLHS: Section 22.3.6
@anchor{#clhs-section-22.3.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-5-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.6 FORMAT Layout Control

@uref{sec_22-3-6-1.html,}

22.3.6.1 Tilde T: Tabulate

@uref{sec_22-3-6-2.html,}

22.3.6.2 Tilde Less-Than-Sign: Justification

@uref{sec_22-3-6-3.html,}

22.3.6.3 Tilde Greater-Than-Sign: End of Justification

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.6.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-6-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-6-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.6.2 Tilde Less-Than-Sign: Justification

~@emph{mincol},@emph{colinc},@emph{minpad},@emph{padchar}<@emph{str}~>

This justifies the text produced by processing @emph{str} within a field
at least @emph{mincol} columns wide. @emph{str} may be divided up into
segments with ~;, in which case the spacing is evenly divided between
the text segments.

With no modifiers, the leftmost text segment is left justified in the
field, and the rightmost text segment is right justified. If there is
only one text element, as a special case, it is right justified. The :
modifier causes spacing to be introduced before the first text segment;
the @@ modifier causes spacing to be added after the last. The
@emph{minpad} parameter (default 0) is the minimum number of padding
characters to be output between each segment. The padding character is
supplied by @emph{padchar}, which defaults to the space character. If
the total width needed to satisfy these constraints is greater than
@emph{mincol}, then the width used is
@emph{mincol}+@emph{k}*@emph{colinc} for the smallest possible
non-negative integer value @emph{k}. @emph{colinc} defaults to 1, and
@emph{mincol} defaults to 0.

Note that @emph{str} may include
@uref{fun_format.html#format,@strong{format}} directives. All the
clauses in @emph{str} are processed in order; it is the resulting pieces
of text that are justified.

The ~^ directive may be used to terminate processing of the clauses
prematurely, in which case only the completely processed clauses are
justified.

If the first clause of a ~< is terminated with ~:; instead of ~;, then
it is used in a special way. All of the clauses are processed (subject
to ~^, of course), but the first one is not used in performing the
spacing and padding. When the padded result has been determined, then if
it will fit on the current line of output, it is output, and the text
for the first clause is discarded. If, however, the padded text will not
fit on the current line, then the text segment for the first clause is
output before the padded text. The first clause ought to contain a
newline (such as a ~% directive). The first clause is always processed,
and so any arguments it refers to will be used; the decision is whether
to use the resulting segment of text, not whether to process the first
clause. If the ~:; has a prefix parameter @emph{n}, then the padded text
must fit on the current line with @emph{n} character positions to spare
to avoid outputting the first clause's text. For example, the control
string

@verbatim
 "~%;; ~{ ~<~%;; ~1:; ~S~>~^ ,~} .~%"
@end verbatim

can be used to print a list of items separated by commas without
breaking items over line boundaries, beginning each line with ;; . The
prefix parameter 1 in ~1:; accounts for the width of the comma that will
follow the justified item if it is not the last element in the list, or
the period if it is. If ~:; has a second prefix parameter, then it is
used as the width of the line, thus overriding the natural line width of
the output stream. To make the preceding example use a line width of 50,
one would write

@verbatim
 "~%;; ~{ ~<~%;; ~1,50:; ~S~>~^ ,~}  .~%"
@end verbatim

If the second argument is not supplied, then
@uref{fun_format.html#format,@strong{format}} uses the line width of the
@emph{destination} output stream. If this cannot be determined (for
example, when producing a @uref{glo_s.html#string,@emph{string}}
result), then @uref{fun_format.html#format,@strong{format}} uses 72 as
the line length.

See also @uref{sec_22-3-5-2.html,Section 22.3.5.2 (Tilde Less-Than-Sign:
Logical Block)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.6.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-6-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.6.3 Tilde Greater-Than-Sign: End of Justification

~> terminates a ~<. The consequences of using it elsewhere are
undefined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2237
@subsubsection CLHS: Section 22.3.7
@anchor{#clhs-section-22.3.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-6-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7 FORMAT Control-Flow Operations

@uref{sec_22-3-7-1.html,}

22.3.7.1 Tilde Asterisk: Go-To

@uref{sec_22-3-7-2.html,}

22.3.7.2 Tilde Left-Bracket: Conditional Expression

@uref{sec_22-3-7-3.html,}

22.3.7.3 Tilde Right-Bracket: End of Conditional Expression

@uref{sec_22-3-7-4.html,}

22.3.7.4 Tilde Left-Brace: Iteration

@uref{sec_22-3-7-5.html,}

22.3.7.5 Tilde Right-Brace: End of Iteration

@uref{sec_22-3-7-6.html,}

22.3.7.6 Tilde Question-Mark: Recursive Processing

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.7.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7.2 Tilde Left-Bracket: Conditional Expression

~[@emph{str0}~;@emph{str1}~;@emph{...}~;@emph{strn}~]

This is a set of control strings, called @emph{clauses}, one of which is
chosen and used. The clauses are separated by ~; and the construct is
terminated by ~]. For example,

"~[Siamese~;Manx~;Persian~] Cat"

The @emph{arg}th clause is selected, where the first clause is number 0.
If a prefix parameter is given (as ~@emph{n}[), then the parameter is
used instead of an argument. If @emph{arg} is out of range then no
clause is selected and no error is signaled. After the selected
alternative has been processed, the control string continues after the
~].

~[@emph{str0}~;@emph{str1}~;@emph{...}~;@emph{strn}~:;@emph{default}~]
has a default case. If the @emph{last} ~; used to separate clauses is
~:; instead, then the last clause is an else clause that is performed if
no other clause is selected. For example:

"~[Siamese~;Manx~;Persian~:;Alley~] Cat"

~:[@emph{alternative}~;@emph{consequent}~] selects the
@emph{alternative} control string if @emph{arg} is
@uref{glo_f.html#false,@emph{false}}, and selects the @emph{consequent}
control string otherwise.

~@@[@emph{consequent}~] tests the argument. If it is
@uref{glo_t.html#true,@emph{true}}, then the argument is not used up by
the ~[ command but remains as the next one to be processed, and the one
clause @emph{consequent} is processed. If the @emph{arg} is
@uref{glo_f.html#false,@emph{false}}, then the argument is used up, and
the clause is not processed. The clause therefore should normally use
exactly one argument, and may expect it to be
@uref{glo_n.html#non-nil,@emph{non-nil}}. For example:

@verbatim
 (setq *print-level* nil *print-length* 5)
 (format nil
        "~@[ print level = ~D~]~@[ print length = ~D~]"
        *print-level* *print-length*)
=>   " print length = 5"
@end verbatim

Note also that

@verbatim
 (format stream "...~@[str~]..." ...)
==  (format stream "...~:[~;~:*str~]..." ...)
@end verbatim

The combination of ~[ and # is useful, for example, for dealing with
English conventions for printing lists:

@verbatim
 (setq foo "Items:~#[ none~; ~S~; ~S and ~S~
           ~:;~@{~#[~; and~] ~S~^ ,~}~].")
 (format nil foo) =>   "Items: none."
 (format nil foo 'foo) =>   "Items: FOO."
 (format nil foo 'foo 'bar) =>   "Items: FOO and BAR."
 (format nil foo 'foo 'bar 'baz) =>   "Items: FOO, BAR, and BAZ."
 (format nil foo 'foo 'bar 'baz 'quux) =>   "Items: FOO, BAR, BAZ, and QUUX."
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.7.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7.3 Tilde Right-Bracket: End of Conditional Expression

~] terminates a ~[. The consequences of using it elsewhere are
undefined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.7.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7.4 Tilde Left-Brace: Iteration

~@{@emph{str}~@}

This is an iteration construct. The argument should be a
@uref{glo_l.html#list,@emph{list}}, which is used as a set of arguments
as if for a recursive call to
@uref{fun_format.html#format,@strong{format}}. The
@uref{glo_s.html#string,@emph{string}} @emph{str} is used repeatedly as
the control string. Each iteration can absorb as many elements of the
@uref{glo_l.html#list,@emph{list}} as it likes as arguments; if
@emph{str} uses up two arguments by itself, then two elements of the
@uref{glo_l.html#list,@emph{list}} will get used up each time around the
loop. If before any iteration step the
@uref{glo_l.html#list,@emph{list}} is empty, then the iteration is
terminated. Also, if a prefix parameter @emph{n} is given, then there
will be at most @emph{n} repetitions of processing of @emph{str}.
Finally, the ~^ directive can be used to terminate the iteration
prematurely.

For example:

@verbatim
 (format nil "The winners are:~{ ~S~}." 
         '(fred harry jill)) 
=>  "The winners are: FRED HARRY JILL."                           
 (format nil "Pairs:~{ <~S,~S>~}." 
         '(a 1 b 2 c 3))
=>  "Pairs: <A,1> <B,2> <C,3>."
@end verbatim

~:@{@emph{str}~@} is similar, but the argument should be a
@uref{glo_l.html#list,@emph{list}} of sublists. At each repetition step,
one sublist is used as the set of arguments for processing @emph{str};
on the next repetition, a new sublist is used, whether or not all of the
last sublist had been processed. For example:

@verbatim
 (format nil "Pairs:~:{ <~S,~S>~} ." 
                 '((a 1) (b 2) (c 3)))
=>  "Pairs: <A,1> <B,2> <C,3>."
@end verbatim

~@@@{@emph{str}~@} is similar to ~@{@emph{str}~@}, but instead of using
one argument that is a list, all the remaining arguments are used as the
list of arguments for the iteration. Example:

@verbatim
 (format nil "Pairs:~@{ <~S,~S>~} ." 'a 1 'b 2 'c 3)
=>  "Pairs: <A,1> <B,2> <C,3>."
@end verbatim

If the iteration is terminated before all the remaining arguments are
consumed, then any arguments not processed by the iteration remain to be
processed by any directives following the iteration construct.

~:@@@{@emph{str}~@} combines the features of ~:@{@emph{str}~@} and
~@@@{@emph{str}~@}. All the remaining arguments are used, and each one
must be a @uref{glo_l.html#list,@emph{list}}. On each iteration, the
next argument is used as a @uref{glo_l.html#list,@emph{list}} of
arguments to @emph{str}. Example:

@verbatim
 (format nil "Pairs:~:@{ <~S,~S>~} ." 
              '(a 1) '(b 2) '(c 3)) 
=>  "Pairs: <A,1> <B,2> <C,3>."
@end verbatim

Terminating the repetition construct with ~:@} instead of ~@} forces
@emph{str} to be processed at least once, even if the initial list of
arguments is null. However, this will not override an explicit prefix
parameter of zero.

If @emph{str} is empty, then an argument is used as @emph{str}. It must
be a @uref{glo_f.html#format_control,@emph{format control}} and precede
any arguments processed by the iteration. As an example, the following
are equivalent:

@verbatim
    (apply #'format stream string arguments)
 ==  (format stream "~1{~:}" string arguments)
@end verbatim

This will use string as a formatting string. The ~1@{ says it will be
processed at most once, and the ~:@} says it will be processed at least
once. Therefore it is processed exactly once, using arguments as the
arguments. This case may be handled more clearly by the ~? directive,
but this general feature of ~@{ is more powerful than ~?.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.7.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-7-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7.5 Tilde Right-Brace: End of Iteration

~@} terminates a ~@{. The consequences of using it elsewhere are
undefined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.7.6
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.7.6 Tilde Question-Mark: Recursive Processing

The next @emph{arg} must be a
@uref{glo_f.html#format_control,@emph{format control}}, and the one
after it a @uref{glo_l.html#list,@emph{list}}; both are consumed by the
~? directive. The two are processed as a @emph{control-string}, with the
elements of the @uref{glo_l.html#list,@emph{list}} as the arguments.
Once the recursive processing has been finished, the processing of the
control string containing the ~? directive is resumed. Example:

@verbatim
 (format nil "~? ~D" "<~A ~D>" '("Foo" 5) 7) =>  "<Foo 5> 7"
 (format nil "~? ~D" "<~A ~D>" '("Foo" 5 14) 7) =>  "<Foo 5> 7"
@end verbatim

Note that in the second example three arguments are supplied to the
@uref{glo_f.html#format_string,@emph{format string}} "<~A ~D>", but only
two are processed and the third is therefore ignored.

With the @@ modifier, only one @emph{arg} is directly consumed. The
@emph{arg} must be a @uref{glo_s.html#string,@emph{string}}; it is
processed as part of the control string as if it had appeared in place
of the ~@@? construct, and any directives in the recursively processed
control string may consume arguments of the control string containing
the ~@@? directive. Example:

@verbatim
 (format nil "~@? ~D" "<~A ~D>" "Foo" 5 7) =>  "<Foo 5> 7"
 (format nil "~@? ~D" "<~A ~D>" "Foo" 5 14 7) =>  "<Foo 5> 14"
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2238
@subsubsection CLHS: Section 22.3.8
@anchor{#clhs-section-22.3.8}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-7-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-8-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.8 FORMAT Miscellaneous Operations

@uref{sec_22-3-8-1.html,}

22.3.8.1 Tilde Left-Paren: Case Conversion

@uref{sec_22-3-8-2.html,}

22.3.8.2 Tilde Right-Paren: End of Case Conversion

@uref{sec_22-3-8-3.html,}

22.3.8.3 Tilde P: Plural

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.8.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-8-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-8-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.8.2 Tilde Right-Paren: End of Case Conversion

~) terminates a ~(. The consequences of using it elsewhere are
undefined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.8.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-8-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-8.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.8.3 Tilde P: Plural

If @emph{arg} is not @uref{fun_eql.html#eql,@strong{eql}} to the integer
1, a lowercase s is printed; if @emph{arg} is
@uref{fun_eql.html#eql,@strong{eql}} to 1, nothing is printed. If
@emph{arg} is a floating-point 1.0, the s is printed.

~:P does the same thing, after doing a ~:* to back up one argument; that
is, it prints a lowercase s if the previous argument was not 1.

~@@P prints y if the argument is 1, or ies if it is not. ~:@@P does the
same thing, but backs up first.

@verbatim
 (format nil "~D tr~:@P/~D win~:P" 7 1) =>  "7 tries/1 win"
 (format nil "~D tr~:@P/~D win~:P" 1 0) =>  "1 try/0 wins"
 (format nil "~D tr~:@P/~D win~:P" 1 3) =>  "1 try/3 wins"
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 2239
@subsubsection CLHS: Section 22.3.9
@anchor{#clhs-section-22.3.9}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-8-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-9-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.9 FORMAT Miscellaneous Pseudo-Operations

@uref{sec_22-3-9-1.html,}

22.3.9.1 Tilde Semicolon: Clause Separator

@uref{sec_22-3-9-2.html,}

22.3.9.2 Tilde Circumflex: Escape Upward

@uref{sec_22-3-9-3.html,}

22.3.9.3 Tilde Newline: Ignored Newline

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.9.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-9-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-9.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-9-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.9.2 Tilde Circumflex: Escape Upward

~^

This is an escape construct. If there are no more arguments remaining to
be processed, then the immediately enclosing ~@{ or ~< construct is
terminated. If there is no such enclosing construct, then the entire
formatting operation is terminated. In the ~< case, the formatting is
performed, but no more segments are processed before doing the
justification. ~^ may appear anywhere in a ~@{ construct.

@verbatim
 (setq donestr "Done.~^ ~D warning~:P.~^ ~D error~:P.")
=>  "Done.~^ ~D warning~:P.~^ ~D error~:P."
 (format nil donestr) =>  "Done."
 (format nil donestr 3) =>  "Done. 3 warnings."
 (format nil donestr 1 5) =>  "Done. 1 warning. 5 errors."
@end verbatim

If a prefix parameter is given, then termination occurs if the parameter
is zero. (Hence ~^ is equivalent to ~#^.) If two parameters are given,
termination occurs if they are equal. If three parameters are given,
termination occurs if the first is less than or equal to the second and
the second is less than or equal to the third. Of course, this is
useless if all the prefix parameters are constants; at least one of them
should be a # or a V parameter.

If ~^ is used within a ~:@{ construct, then it terminates the current
iteration step because in the standard case it tests for remaining
arguments of the current step only; the next iteration step commences
immediately. ~:^ is used to terminate the iteration process. ~:^ may be
used only if the command it would terminate is ~:@{ or ~:@@@{. The
entire iteration process is terminated if and only if the sublist that
is supplying the arguments for the current iteration step is the last
sublist in the case of ~:@{, or the last
@uref{fun_format.html#format,@strong{format}} argument in the case of
~:@@@{. ~:^ is not equivalent to ~#:^; the latter terminates the entire
iteration if and only if no arguments remain for the current iteration
step. For example:

@verbatim
 (format nil "~:{ ~@?~:^ ...~} " '(("a") ("b"))) =>  "a...b"
@end verbatim

If ~^ appears within a control string being processed under the control
of a ~? directive, but not within any ~@{ or ~< construct within that
string, then the string being processed will be terminated, thereby
ending processing of the ~? directive. Processing then continues within
the string containing the ~? directive at the point following that
directive.

If ~^ appears within a ~[ or ~( construct, then all the commands up to
the ~^ are properly selected or case-converted, the ~[ or ~( processing
is terminated, and the outward search continues for a ~@{ or ~<
construct to be terminated. For example:

@verbatim
 (setq tellstr "~@(~@[~R~]~^ ~A!~)")
=>  "~@(~@[~R~]~^ ~A!~)"
 (format nil tellstr 23) =>  "Twenty-three!"
 (format nil tellstr nil "losers") =>  " Losers!"
 (format nil tellstr 23 "losers") =>  "Twenty-three losers!"
@end verbatim

Following are examples of the use of ~^ within a ~< construct.

@verbatim
 (format nil "~15<~S~;~^~S~;~^~S~>" 'foo)
=>   "            FOO"
 (format nil "~15<~S~;~^~S~;~^~S~>" 'foo 'bar)
=>   "FOO         BAR"
 (format nil "~15<~S~;~^~S~;~^~S~>" 'foo 'bar 'baz)
=>   "FOO   BAR   BAZ"
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss165.html,FORMAT-COLON-UPARROW-SCOPE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 22.3.9.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-9-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_22-3-9.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_22-3-10.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.3.9.3 Tilde Newline: Ignored Newline

@uref{glo_t.html#tilde,@emph{Tilde}} immediately followed by a
@uref{glo_n.html#newline,@emph{newline}} ignores the
@uref{glo_n.html#newline,@emph{newline}} and any following non-newline
@uref{glo_w.html#whitespace,@emph{whitespace}}[1] characters. With a :,
the @uref{glo_n.html#newline,@emph{newline}} is ignored, but any
following @uref{glo_w.html#whitespace,@emph{whitespace}}[1] is left in
place. With an @@, the @uref{glo_n.html#newline,@emph{newline}} is left
in place, but any following
@uref{glo_w.html#whitespace,@emph{whitespace}}[1] is ignored. For
example:

@verbatim
 (defun type-clash-error (fn nargs argnum right-type wrong-type)
   (format *error-output*
           "~&~S requires its ~:[~:R~;~*~]~ 
           argument to be of type ~S,~%but it was called ~
           with an argument of type ~S.~%"
           fn (eql nargs 1) argnum right-type wrong-type))
 (type-clash-error 'aref nil 2 'integer 'vector)  prints:
AREF requires its second argument to be of type INTEGER,
but it was called with an argument of type VECTOR.
NIL
 (type-clash-error 'car 1 1 'list 'short-float)  prints:
CAR requires its argument to be of type LIST,
but it was called with an argument of type SHORT-FLOAT.
NIL
@end verbatim

Note that in this example newlines appear in the output only as
specified by the ~& and ~% directives; the actual newline characters in
the control string are suppressed because each is preceded by a tilde.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Printer Dictionary
@subsection CLHS: Section The Printer Dictionary
@anchor{#clhs-section-the-printer-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_22-3-12.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-22.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_copy-pprint-dispatch.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
22.4 The Printer Dictionary

@uref{fun_copy-pprint-dispatch.html,@emph{Function}
@strong{COPY-PPRINT-DISPATCH}}

@uref{mac_formatter.html,@emph{Macro} @strong{FORMATTER}}

@uref{fun_pprint-dispatch.html,@emph{Function} @strong{PPRINT-DISPATCH}}

@uref{locmac_pprint_st-exhausted.html,@emph{Local Macro}
@strong{PPRINT-EXIT-IF-LIST-EXHAUSTED}}

@uref{fun_pprint-fi_rint-tabular.html,@emph{Function}
@strong{PPRINT-FILL, PPRINT-LINEAR, PPRINT-TABULAR}}

@uref{fun_pprint-indent.html,@emph{Function} @strong{PPRINT-INDENT}}

@uref{mac_pprint-logical-block.html,@emph{Macro}
@strong{PPRINT-LOGICAL-BLOCK}}

@uref{fun_pprint-newline.html,@emph{Function} @strong{PPRINT-NEWLINE}}

@uref{locmac_pprint-pop.html,@emph{Local Macro} @strong{PPRINT-POP}}

@uref{fun_pprint-tab.html,@emph{Function} @strong{PPRINT-TAB}}

@uref{stagenfun_print-object.html,@emph{Standard Generic Function}
@strong{PRINT-OBJECT}}

@uref{mac_print-unr_dable-object.html,@emph{Macro}
@strong{PRINT-UNREADABLE-OBJECT}}

@uref{fun_set-pprint-dispatch.html,@emph{Function}
@strong{SET-PPRINT-DISPATCH}}

@uref{fun_writecm_p_rintcm_princ.html,@emph{Function} @strong{WRITE,
PRIN1, PRINT, PPRINT, PRINC}}

@uref{fun_write-to-_nc-to-string.html,@emph{Function}
@strong{WRITE-TO-STRING, PRIN1-TO-STRING, PRINC-TO-STRING}}

@uref{var_stprint-arrayst.html,@emph{Variable} @strong{*PRINT-ARRAY*}}

@uref{var_stprint-b_rint-radixst.html,@emph{Variable}
@strong{*PRINT-BASE*, *PRINT-RADIX*}}

@uref{var_stprint-casest.html,@emph{Variable} @strong{*PRINT-CASE*}}

@uref{var_stprint-circlest.html,@emph{Variable} @strong{*PRINT-CIRCLE*}}

@uref{var_stprint-escapest.html,@emph{Variable} @strong{*PRINT-ESCAPE*}}

@uref{var_stprint-gensymst.html,@emph{Variable} @strong{*PRINT-GENSYM*}}

@uref{var_stprint-l_int-lengthst.html,@emph{Variable}
@strong{*PRINT-LEVEL*, *PRINT-LENGTH*}}

@uref{var_stprint-linesst.html,@emph{Variable} @strong{*PRINT-LINES*}}

@uref{var_stprint-miser-widthst.html,@emph{Variable}
@strong{*PRINT-MISER-WIDTH*}}

@uref{var_stprint-p_t-dispatchst.html,@emph{Variable}
@strong{*PRINT-PPRINT-DISPATCH*}}

@uref{var_stprint-prettyst.html,@emph{Variable} @strong{*PRINT-PRETTY*}}

@uref{var_stprint-readablyst.html,@emph{Variable}
@strong{*PRINT-READABLY*}}

@uref{var_stprint-right-marginst.html,@emph{Variable}
@strong{*PRINT-RIGHT-MARGIN*}}

@uref{contyp_print-not-readable.html,@emph{Condition Type}
@strong{PRINT-NOT-READABLE}}

@uref{fun_print-not_dable-object.html,@emph{Function}
@strong{PRINT-NOT-READABLE-OBJECT}}

@uref{fun_format.html,@emph{Function} @strong{FORMAT}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Condition Type PRINT-NOT-READABLE::
* CLHS Function FORMAT::
* CLHS Function PPRINT-DISPATCH::
* CLHS Function PPRINT-FILL PPRINT-LINEAR::
* CLHS Function PPRINT-INDENT::
* CLHS Function PPRINT-NEWLINE::
* CLHS Function PPRINT-TAB::
* CLHS Function PRINT-NOT-READABLE-OBJECT::
* CLHS Function SET-PPRINT-DISPATCH::
* CLHS Function WRITE-TO-STRING PRIN1-TO-STRING::
* CLHS Function WRITE PRIN1 PRINT PPRINT::
* CLHS Local Macro PPRINT-POP::
* CLHS Local Macro PPRINT-EXIT-IF-LIST-EXHAUSTED::
* CLHS Macro FORMATTER::
* CLHS Macro PPRINT-LOGICAL-BLOCK::
* CLHS Macro PRINT-UNREADABLE-OBJECT::
* CLHS Standard Generic Function PRINT-OBJECT::
* CLHS Variable *PRINT-ARRAY*::
* CLHS Variable *PRINT-BASE* *PRINT-RADIX*::
* CLHS Variable *PRINT-CASE*::
* CLHS Variable *PRINT-CIRCLE*::
* CLHS Variable *PRINT-ESCAPE*::
* CLHS Variable *PRINT-GENSYM*::
* CLHS Variable *PRINT-LEVEL* *PRINT-LENGTH*::
* CLHS Variable *PRINT-LINES*::
* CLHS Variable *PRINT-MISER-WIDTH*::
* CLHS Variable *PRINT-PPRINT-DISPATCH*::
* CLHS Variable *PRINT-PRETTY*::
* CLHS Variable *PRINT-READABLY*::
* CLHS Variable *PRINT-RIGHT-MARGIN*::
@end menu

@node CLHS Condition Type PRINT-NOT-READABLE
@subsubsection CLHS: Condition Type PRINT-NOT-READABLE
@anchor{#clhs-condition-type-print-not-readable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-right-marginst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_print-not_dable-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{PRINT-NOT-READABLE}

@strong{Class Precedence List:}

@ref{#print-not-readable,@strong{print-not-readable}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#print-not-readable,@strong{print-not-readable}} consists of error
conditions that occur during output while
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
is @uref{glo_t.html#true,@emph{true}}, as a result of attempting to
write a printed representation with the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}} that would not be
correctly read back with the @uref{glo_l.html#lisp_reader,@emph{Lisp
reader}}. The object which could not be printed is initialized by the
:objectinitialization argument to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_print-not_dable-object.html#print-not-readable-object,@strong{print-not-readable-object}}.

@strong{See Also:}

@uref{fun_print-not_dable-object.html#print-not-readable-object,@strong{print-not-readable-object}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FORMAT
@subsubsection CLHS: Function FORMAT
@anchor{#clhs-function-format}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_print-not_dable-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-23.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FORMAT}

@strong{Syntax:}

@strong{format} @emph{destination control-string &rest args} =>
@emph{result}

@strong{Arguments and Values:}

@emph{destination}---@uref{any_nil.html#nil,@strong{nil}},
@uref{any_t.html#t,@strong{t}}, a
@uref{glo_s.html#stream,@emph{stream}}, or a
@uref{glo_s.html#string,@emph{string}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}.

@emph{control-string}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{args}---@uref{glo_f.html#format_argument,@emph{format arguments}}
for @emph{control-string}.

@emph{result}---if @emph{destination} is
@uref{glo_n.html#non-nil,@emph{non-nil}}, then
@uref{any_nil.html#nil,@strong{nil}}; otherwise, a
@uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

@ref{#format,@strong{format}} produces formatted output by outputting
the characters of @emph{control-string} and observing that a
@uref{glo_t.html#tilde,@emph{tilde}} introduces a directive. The
character after the tilde, possibly preceded by prefix parameters and
modifiers, specifies what kind of formatting is desired. Most directives
use one or more elements of @emph{args} to create their output.

If @emph{destination} is a @uref{glo_s.html#string,@emph{string}}, a
@uref{glo_s.html#stream,@emph{stream}}, or
@uref{any_t.html#t,@strong{t}}, then the @emph{result} is
@uref{any_nil.html#nil,@strong{nil}}. Otherwise, the @emph{result} is a
@uref{glo_s.html#string,@emph{string}} containing the `output.'

@ref{#format,@strong{format}} is useful for producing nicely formatted
text, producing good-looking messages, and so on.
@ref{#format,@strong{format}} can generate and return a
@uref{glo_s.html#string,@emph{string}} or output to @emph{destination}.

For details on how the @emph{control-string} is interpreted, see
@uref{sec_22-3.html,Section 22.3 (Formatted Output)}.

@strong{Examples:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}},
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-casest.html#STprint-caseST,@strong{*print-case*}},
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}},
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}}.

@strong{Exceptional Situations:}

If @emph{destination} is a @uref{glo_s.html#string,@emph{string}} with a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the consequences are
undefined if destructive modifications are performed directly on the
@uref{glo_s.html#string,@emph{string}} during the
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} of the call.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{sec_13-1-10.html,Section 13.1.10 (Documentation of
Implementation-Defined Scripts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss330.html,STRING-OUTPUT-STREAM-BASHING:UNDEFINED}
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PPRINT-DISPATCH
@subsubsection CLHS: Function PPRINT-DISPATCH
@anchor{#clhs-function-pprint-dispatch}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_formatter.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locmac_pprint_st-exhausted.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PPRINT-DISPATCH}

@strong{Syntax:}

@strong{pprint-dispatch} @emph{object &optional table} =>
@emph{function, found-p}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{table}---a @uref{glo_p.html#pprint_dispatch_table,@emph{pprint
dispatch table}}, or @uref{any_nil.html#nil,@strong{nil}}. The default
is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-p_t-dispatchst.html#STprint-pprint-dispatchST,@strong{*print-pprint-dispatch*}}.

@emph{function}---a @uref{glo_f.html#function_designator,@emph{function
designator}}.

@emph{found-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Retrieves the highest priority function in @emph{table} that is
associated with a @uref{glo_t.html#type_specifier,@emph{type specifier}}
that matches @emph{object}. The function is chosen by finding all of the
@uref{glo_t.html#type_specifier,@emph{type specifiers}} in @emph{table}
that match the @emph{object} and selecting the highest priority function
associated with any of these @uref{glo_t.html#type_specifier,@emph{type
specifiers}}. If there is more than one highest priority function, an
arbitrary choice is made. If no
@uref{glo_t.html#type_specifier,@emph{type specifiers}} match the
@emph{object}, a function is returned that prints @emph{object} using
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}.

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{found-p}, is @uref{glo_t.html#true,@emph{true}} if a matching
@uref{glo_t.html#type_specifier,@emph{type specifier}} was found in
@emph{table}, or @uref{glo_f.html#false,@emph{false}} otherwise.

If @emph{table} is @uref{any_nil.html#nil,@strong{nil}}, retrieval is
done in the @uref{glo_i.html#initial_pprint_dispatch_table,@emph{initial
pprint dispatch table}}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:}

The state of the @emph{table}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{table} is neither a @emph{pprint-dispatch-table} nor
@uref{any_nil.html#nil,@strong{nil}}.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
(let ((*print-pretty* t))
  (write object :stream s))
==  (funcall (pprint-dispatch object) s object)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PPRINT-FILL PPRINT-LINEAR
@subsubsection CLHS: Function PPRINT-FILL, PPRINT-LINEAR...
@anchor{#clhs-function-pprint-fill-pprint-linear...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locmac_pprint_st-exhausted.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pprint-indent.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PPRINT-FILL, PPRINT-LINEAR, PPRINT-TABULAR}

@strong{Syntax:}

@strong{pprint-fill} @emph{stream object &optional colon-p at-sign-p} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{pprint-linear} @emph{stream object &optional colon-p at-sign-p}
=> @emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{pprint-tabular} @emph{stream object &optional colon-p at-sign-p
tabsize} => @emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{colon-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{at-sign-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{tabsize}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}. The default is 16.

@strong{Description:}

The functions @ref{#pprint-fill,@strong{pprint-fill}},
@ref{#pprint-linear,@strong{pprint-linear}}, and
@ref{#pprint-tabular,@strong{pprint-tabular}} specify particular ways of
@emph{pretty printing} a @uref{glo_l.html#list,@emph{list}} to
@emph{stream}. Each function prints parentheses around the output if and
only if @emph{colon-p} is @uref{glo_t.html#true,@emph{true}}. Each
function ignores its @emph{at-sign-p} argument. (Both arguments are
included even though only one is needed so that these functions can be
used via ~/.../ and as
@uref{fun_set-pprint-dispatch.html#set-pprint-dispatch,@strong{set-pprint-dispatch}}
functions, as well as directly.) Each function handles abbreviation and
the detection of circularity and sharing correctly, and uses
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}} to print
@emph{object} when it is a @uref{glo_n.html#non-list,@emph{non-list}}.

If @emph{object} is a @uref{glo_l.html#list,@emph{list}} and if the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{glo_f.html#false,@emph{false}}, each of these functions prints
@emph{object} using a minimum of
@uref{glo_w.html#whitespace,@emph{whitespace}}, as described in
@uref{sec_22-1-3-5.html,Section 22.1.3.5 (Printing Lists and Conses)}.
Otherwise (if @emph{object} is a @uref{glo_l.html#list,@emph{list}} and
if the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{glo_t.html#true,@emph{true}}):

@itemize
@item
The @uref{glo_f.html#function,@emph{function}}
@ref{#pprint-linear,@strong{pprint-linear}} prints a
@uref{glo_l.html#list,@emph{list}} either all on one line, or with each
@uref{glo_e.html#element,@emph{element}} on a separate line.
@item
The @uref{glo_f.html#function,@emph{function}}
@ref{#pprint-fill,@strong{pprint-fill}} prints a
@uref{glo_l.html#list,@emph{list}} with as many
@uref{glo_e.html#element,@emph{elements}} as possible on each line.
@item
The @uref{glo_f.html#function,@emph{function}}
@ref{#pprint-tabular,@strong{pprint-tabular}} is the same as
@ref{#pprint-fill,@strong{pprint-fill}} except that it prints the
@uref{glo_e.html#element,@emph{elements}} so that they line up in
columns. The @emph{tabsize} specifies the column spacing in
@uref{glo_e.html#em,@emph{ems}}, which is the total spacing from the
leading edge of one column to the leading edge of the next.
@end itemize

@strong{Examples:}

Evaluating the following with a line length of 25 produces the output
shown.

@verbatim
(progn (princ "Roads ") 
       (pprint-tabular *standard-output* '(elm main maple center) nil nil 8))
Roads ELM     MAIN
      MAPLE   CENTER
@end verbatim

@strong{Side Effects:}

Performs output to the indicated @uref{glo_s.html#stream,@emph{stream}}.

@strong{Affected By:}

The cursor position on the indicated
@uref{glo_s.html#stream,@emph{stream}}, if it can be determined.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#pprint-tabular,@strong{pprint-tabular}} could be defined as
follows:

@verbatim
(defun pprint-tabular (s list &optional (colon-p t) at-sign-p (tabsize nil))
  (declare (ignore at-sign-p))
  (when (null tabsize) (setq tabsize 16))
  (pprint-logical-block (s list :prefix (if colon-p "(" "")
                                :suffix (if colon-p ")" ""))
    (pprint-exit-if-list-exhausted)
    (loop (write (pprint-pop) :stream s)
          (pprint-exit-if-list-exhausted)
          (write-char #\Space s)
          (pprint-tab :section-relative 0 tabsize s)
          (pprint-newline :fill s))))
@end verbatim

Note that it would have been inconvenient to specify this function using
@uref{fun_format.html#format,@strong{format}}, because of the need to
pass its @emph{tabsize} argument through to a ~:T format directive
nested within an iteration over a list.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PPRINT-INDENT
@subsubsection CLHS: Function PPRINT-INDENT
@anchor{#clhs-function-pprint-indent}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pprint-fi_rint-tabular.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_pprint-logical-block.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PPRINT-INDENT}

@strong{Syntax:}

@strong{pprint-indent} @emph{relative-to n &optional stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{relative-to}---either :block or :current.

@emph{n}---a @uref{syscla_real.html#real,@emph{real}}.

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

@ref{#pprint-indent,@strong{pprint-indent}} specifies the indentation to
use in a logical block on @uref{glo_s.html#stream,@emph{stream}}. If
@emph{stream} is a @uref{glo_p.html#pretty_printing_stream,@emph{pretty
printing stream}} and the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{glo_t.html#true,@emph{true}},
@ref{#pprint-indent,@strong{pprint-indent}} sets the indentation in the
innermost dynamically enclosing logical block; otherwise,
@ref{#pprint-indent,@strong{pprint-indent}} has no effect.

@emph{N} specifies the indentation in @uref{glo_e.html#em,@emph{ems}}.
If @emph{relative-to} is :block, the indentation is set to the
horizontal position of the first character in the @emph{dynamically
current logical block} plus @emph{n} @uref{glo_e.html#em,@emph{ems}}. If
@emph{relative-to} is :current, the indentation is set to the current
output position plus @emph{n} @uref{glo_e.html#em,@emph{ems}}. (For
robustness in the face of variable-width fonts, it is advisable to use
:current with an @emph{n} of zero whenever possible.)

@emph{N} can be negative; however, the total indentation cannot be moved
left of the beginning of the line or left of the end of the rightmost
per-line prefix---an attempt to move beyond one of these limits is
treated the same as an attempt to move to that limit. Changes in
indentation caused by @emph{pprint-indent} do not take effect until
after the next line break. In addition, in miser mode all calls to
@ref{#pprint-indent,@strong{pprint-indent}} are ignored, forcing the
lines corresponding to the logical block to line up under the first
character in the block.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error is signaled if @emph{relative-to} is any
@uref{glo_o.html#object,@emph{object}} other than :block or :current.

@strong{See Also:}

@uref{sec_22-3-5-3.html,Section 22.3.5.3 (Tilde I: Indent)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PPRINT-NEWLINE
@subsubsection CLHS: Function PPRINT-NEWLINE
@anchor{#clhs-function-pprint-newline}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_pprint-logical-block.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locmac_pprint-pop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PPRINT-NEWLINE}

@strong{Syntax:}

@strong{pprint-newline} @emph{kind &optional stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{kind}---one of :linear, :fill, :miser, or :mandatory.

@emph{stream}---a @uref{glo_s.html#stream_designator,@emph{stream
designator}}. The default is
@uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

If @emph{stream} is a
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
and the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{glo_t.html#true,@emph{true}}, a line break is inserted in the
output when the appropriate condition below is satisfied; otherwise,
@ref{#pprint-newline,@strong{pprint-newline}} has no effect.

@emph{Kind} specifies the style of conditional newline. This
@uref{glo_p.html#parameter,@emph{parameter}} is treated as follows:

:linear

This specifies a ``linear-style''
@uref{glo_c.html#conditional_newline,@emph{conditional newline}}. A line
break is inserted if and only if the immediately containing
@uref{glo_s.html#section,@emph{section}} cannot be printed on one line.
The effect of this is that line breaks are either inserted at every
linear-style conditional newline in a logical block or at none of them.

:miser

This specifies a ``miser-style''
@uref{glo_c.html#conditional_newline,@emph{conditional newline}}. A line
break is inserted if and only if the immediately containing
@uref{glo_s.html#section,@emph{section}} cannot be printed on one line
and miser style is in effect in the immediately containing logical
block. The effect of this is that miser-style conditional newlines act
like linear-style conditional newlines, but only when miser style is in
effect. Miser style is in effect for a logical block if and only if the
starting position of the logical block is less than or equal to
@uref{var_stprint-miser-widthst.html#STprint-miser-widthST,@strong{*print-miser-width*}}
@uref{glo_e.html#em,@emph{ems}} from the right margin.

:fill

This specifies a ``fill-style''
@uref{glo_c.html#conditional_newline,@emph{conditional newline}}. A line
break is inserted if and only if either (a) the following
@uref{glo_s.html#section,@emph{section}} cannot be printed on the end of
the current line, (b) the preceding
@uref{glo_s.html#section,@emph{section}} was not printed on a single
line, or (c) the immediately containing
@uref{glo_s.html#section,@emph{section}} cannot be printed on one line
and miser style is in effect in the immediately containing logical
block. If a logical block is broken up into a number of subsections by
fill-style conditional newlines, the basic effect is that the logical
block is printed with as many subsections as possible on each line.
However, if miser style is in effect, fill-style conditional newlines
act like linear-style conditional newlines.

:mandatory

This specifies a ``mandatory-style''
@uref{glo_c.html#conditional_newline,@emph{conditional newline}}. A line
break is always inserted. This implies that none of the containing
@uref{glo_s.html#section,@emph{sections}} can be printed on a single
line and will therefore trigger the insertion of line breaks at
linear-style conditional newlines in these
@uref{glo_s.html#section,@emph{sections}}.

When a line break is inserted by any type of conditional newline, any
blanks that immediately precede the conditional newline are omitted from
the output and indentation is introduced at the beginning of the next
line. By default, the indentation causes the following line to begin in
the same horizontal position as the first character in the immediately
containing logical block. (The indentation can be changed via
@uref{fun_pprint-indent.html#pprint-indent,@strong{pprint-indent}}.)

There are a variety of ways unconditional newlines can be introduced
into the output (i.e., via
@uref{fun_terpricm_fresh-line.html#terpri,@strong{terpri}} or by
printing a string containing a newline character). As with mandatory
conditional newlines, this prevents any of the containing
@uref{glo_s.html#section,@emph{sections}} from being printed on one
line. In general, when an unconditional newline is encountered, it is
printed out without suppression of the preceding blanks and without any
indentation following it. However, if a per-line prefix has been
specified (see
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}),
this prefix will always be printed no matter how a newline originates.

@strong{Examples:}

See @uref{sec_22-2-2.html,Section 22.2.2 (Examples of using the Pretty
Printer)}.

@strong{Side Effects:}

Output to @emph{stream}.

@strong{Affected By:}

@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@strong{*print-miser*}. The presence of containing logical blocks. The
placement of newlines and conditional newlines.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is signaled
if @emph{kind} is not one of :linear, :fill, :miser, or :mandatory.

@strong{See Also:}

@uref{sec_22-3-5-1.html,Section 22.3.5.1 (Tilde Underscore: Conditional
Newline)}, @uref{sec_22-2-2.html,Section 22.2.2 (Examples of using the
Pretty Printer)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PPRINT-TAB
@subsubsection CLHS: Function PPRINT-TAB
@anchor{#clhs-function-pprint-tab}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locmac_pprint-pop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_print-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PPRINT-TAB}

@strong{Syntax:}

@strong{pprint-tab} @emph{kind colnum colinc &optional stream} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{kind}---one of :line, :section, :line-relative, or
:section-relative.

@emph{colnum}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{colinc}---a non-negative @uref{glo_i.html#integer,@emph{integer}}.

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}.

@strong{Description:}

Specifies tabbing to @emph{stream} as performed by the standard ~T
format directive. If @emph{stream} is a
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
and the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{glo_t.html#true,@emph{true}}, tabbing is performed; otherwise,
@ref{#pprint-tab,@strong{pprint-tab}} has no effect.

The arguments @emph{colnum} and @emph{colinc} correspond to the two
@emph{parameters} to ~T and are in terms of
@uref{glo_e.html#em,@emph{ems}}. The @emph{kind} argument specifies the
style of tabbing. It must be one of :line (tab as by ~T), :section (tab
as by ~:T, but measuring horizontal positions relative to the start of
the dynamically enclosing section), :line-relative (tab as by ~@@T), or
:section-relative (tab as by ~:@@T, but measuring horizontal positions
relative to the start of the dynamically enclosing section).

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error is signaled if @emph{kind} is not one of :line, :section,
:line-relative, or :section-relative.

@strong{See Also:}

@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PRINT-NOT-READABLE-OBJECT
@subsubsection CLHS: Function PRINT-NOT-READABLE-OBJECT
@anchor{#clhs-function-print-not-readable-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_print-not-readable.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_format.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PRINT-NOT-READABLE-OBJECT}

@strong{Syntax:}

@strong{print-not-readable-object} @emph{condition} => @emph{object}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns the @uref{glo_o.html#object,@emph{object}} that could not be
printed readably in the situation represented by @emph{condition}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}},
@uref{chap-9.html,Section 9 (Conditions)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-PPRINT-DISPATCH
@subsubsection CLHS: Function SET-PPRINT-DISPATCH
@anchor{#clhs-function-set-pprint-dispatch}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_print-unr_dable-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_writecm_p_rintcm_princ.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-PPRINT-DISPATCH}

@strong{Syntax:}

@strong{set-pprint-dispatch} @emph{type-specifier function &optional
priority table} => @emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{type-specifier}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{function}---a @uref{glo_f.html#function,@emph{function}}, a
@uref{glo_f.html#function_name,@emph{function name}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{priority}---a @uref{syscla_real.html#real,@emph{real}}. The
default is 0.

@emph{table}---a @uref{glo_p.html#pprint_dispatch_table,@emph{pprint
dispatch table}}. The default is the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-p_t-dispatchst.html#STprint-pprint-dispatchST,@strong{*print-pprint-dispatch*}}.

@strong{Description:}

Installs an entry into the
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}
which is @emph{table}.

@emph{Type-specifier} is the @uref{glo_k.html#key,@emph{key}} of the
entry. The first action of
@ref{#set-pprint-dispatch,@strong{set-pprint-dispatch}} is to remove any
pre-existing entry associated with @emph{type-specifier}. This
guarantees that there will never be two entries associated with the same
@uref{glo_t.html#type_specifier,@emph{type specifier}} in a given
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}.
Equality of @uref{glo_t.html#type_specifier,@emph{type specifiers}} is
tested by @uref{fun_equal.html#equal,@strong{equal}}.

Two values are associated with each
@uref{glo_t.html#type_specifier,@emph{type specifier}} in a
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}: a
@emph{function} and a @emph{priority}. The @emph{function} must accept
two arguments: the @uref{glo_s.html#stream,@emph{stream}} to which
output is sent and the @uref{glo_o.html#object,@emph{object}} to be
printed. The @emph{function} should
@uref{glo_p.html#pretty_print,@emph{pretty print}} the
@uref{glo_o.html#object,@emph{object}} to the @emph{stream}. The
@emph{function} can assume that object satisfies the
@uref{glo_t.html#type,@emph{type}} given by @emph{type-specifier}. The
@emph{function} must obey
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}.
Any values returned by the @emph{function} are ignored.

@emph{Priority} is a priority to resolve conflicts when an object
matches more than one entry.

It is permissible for @emph{function} to be
@uref{any_nil.html#nil,@strong{nil}}. In this situation, there will be
no @emph{type-specifier} entry in @emph{table} after
@ref{#set-pprint-dispatch,@strong{set-pprint-dispatch}} returns.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error is signaled if @emph{priority} is not a
@uref{syscla_real.html#real,@emph{real}}.

@strong{See Also:} None.

@strong{Notes:}

Since @uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch
tables}} are often used to control the pretty printing of Lisp code, it
is common for the @emph{type-specifier} to be an
@uref{glo_e.html#expression,@emph{expression}} of the form

@verbatim
 (cons car-type cdr-type)
@end verbatim

This signifies that the corresponding object must be a cons cell whose
@uref{glo_c.html#car,@emph{car}} matches the
@uref{glo_t.html#type_specifier,@emph{type specifier}} @emph{car-type}
and whose @uref{glo_c.html#cdr,@emph{cdr}} matches the
@uref{glo_t.html#type_specifier,@emph{type specifier}} @emph{cdr-type}.
The @emph{cdr-type} can be omitted in which case it defaults to
@uref{any_t.html#t,@strong{t}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE-TO-STRING PRIN1-TO-STRING
@subsubsection CLHS: Function WRITE-TO-STRING, PRIN1-TO-STRING...
@anchor{#clhs-function-write-to-string-prin1-to-string...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_writecm_p_rintcm_princ.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-arrayst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE-TO-STRING, PRIN1-TO-STRING,
PRINC-TO-STRING}

@strong{Syntax:}

@strong{write-to-string} @emph{object &key array base case circle escape
gensym length level lines miser-width pprint-dispatch pretty radix
readably right-margin}

=> @emph{string}

@strong{prin1-to-string} @emph{object} => @emph{string}

@strong{princ-to-string} @emph{object} => @emph{string}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{array}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{base}---a @uref{glo_r.html#radix,@emph{radix}}.

@emph{case}---a @uref{glo_s.html#symbol,@emph{symbol}} of
@uref{glo_t.html#type,@emph{type}} (member :upcase :downcase
:capitalize).

@emph{circle}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{escape}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{gensym}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{length}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{level}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{lines}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{miser-width}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{pprint-dispatch}---a
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}.

@emph{pretty}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{radix}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{readably}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{right-margin}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

@ref{#write-to-string,@strong{write-to-string}},
@ref{#prin1-to-string,@strong{prin1-to-string}}, and
@ref{#princ-to-string,@strong{princ-to-string}} are used to create a
@uref{glo_s.html#string,@emph{string}} consisting of the printed
representation of @emph{object}. @emph{Object} is effectively printed as
if by @uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}}, or
@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}},
respectively, and the @uref{glo_c.html#character,@emph{characters}} that
would be output are made into a @uref{glo_s.html#string,@emph{string}}.

@ref{#write-to-string,@strong{write-to-string}} is the general output
function. It has the ability to specify all the parameters applicable to
the printing of @emph{object}.

@ref{#prin1-to-string,@strong{prin1-to-string}} acts like
@ref{#write-to-string,@strong{write-to-string}} with :escape t, that is,
escape characters are written where appropriate.

@ref{#princ-to-string,@strong{princ-to-string}} acts like
@ref{#write-to-string,@strong{write-to-string}} with :escape nil
:readably nil. Thus no @uref{glo_e.html#escape,@emph{escape}}
@uref{glo_c.html#character,@emph{characters}} are written.

All other keywords that would be specified to
@ref{#write-to-string,@strong{write-to-string}} are default values when
@ref{#prin1-to-string,@strong{prin1-to-string}} or
@ref{#princ-to-string,@strong{princ-to-string}} is invoked.

The meanings and defaults for the keyword arguments to
@ref{#write-to-string,@strong{write-to-string}} are the same as those
for @uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}.

@strong{Examples:}

@verbatim
 (prin1-to-string "abc") =>  "\"abc\""
 (princ-to-string "abc") =>  "abc"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}},
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-casest.html#STprint-caseST,@strong{*print-case*}},
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}},
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}},
@uref{var_stread-de_oat-formatst.html#STread-default-float-formatST,@strong{*read-default-float-format*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}

@strong{Notes:}

@verbatim
 (write-to-string object {key argument}*)
==  (with-output-to-string (#1=#:string-stream) 
     (write object :stream #1# {key argument}*))

 (princ-to-string object)
==  (with-output-to-string (string-stream)
     (princ object string-stream))

 (prin1-to-string object)
==  (with-output-to-string (string-stream)
     (prin1 object string-stream))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WRITE PRIN1 PRINT PPRINT
@subsubsection CLHS: Function WRITE, PRIN1, PRINT, PPRINT...
@anchor{#clhs-function-write-prin1-print-pprint...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-pprint-dispatch.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_write-to-_nc-to-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WRITE, PRIN1, PRINT, PPRINT, PRINC}

@strong{Syntax:}

@strong{write} @emph{@emph{object} &key array base case circle escape
gensym length level lines miser-width pprint-dispatch pretty radix
readably right-margin stream}

=> @emph{object}

@strong{prin1} @emph{object &optional output-stream} => @emph{object}

@strong{princ} @emph{object &optional output-stream} => @emph{object}

@strong{print} @emph{object &optional output-stream} => @emph{object}

@strong{pprint} @emph{object &optional output-stream} => @emph{@emph{<no
values>}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{output-stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@emph{array}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{base}---a @uref{glo_r.html#radix,@emph{radix}}.

@emph{case}---a @uref{glo_s.html#symbol,@emph{symbol}} of
@uref{glo_t.html#type,@emph{type}} (member :upcase :downcase
:capitalize).

@emph{circle}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{escape}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{gensym}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{length}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{level}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{lines}---a non-negative @uref{glo_i.html#integer,@emph{integer}},
or @uref{any_nil.html#nil,@strong{nil}}.

@emph{miser-width}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{pprint-dispatch}---a
@uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}.

@emph{pretty}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{radix}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}.

@emph{readably}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{right-margin}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

@ref{#write,@strong{write}}, @ref{#prin1,@strong{prin1}},
@ref{#princ,@strong{princ}}, @ref{#print,@strong{print}}, and
@ref{#pprint,@strong{pprint}} write the printed representation of
@emph{object} to @emph{output-stream}.

@ref{#write,@strong{write}} is the general entry point to the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}}. For each explicitly
supplied @uref{glo_k.html#keyword_parameter,@emph{keyword parameter}}
named in the next figure, the corresponding
@uref{glo_p.html#printer_control_variable,@emph{printer control
variable}} is dynamically bound to its
@uref{glo_v.html#value,@emph{value}} while printing goes on; for each
@uref{glo_k.html#keyword_parameter,@emph{keyword parameter}} in the next
figure that is not explicitly supplied, the value of the corresponding
@uref{glo_p.html#printer_control_variable,@emph{printer control
variable}} is the same as it was at the time @ref{#write,@strong{write}}
was invoked. Once the appropriate
@uref{glo_b.html#binding,@emph{bindings}} are @emph{established}, the
@uref{glo_o.html#object,@emph{object}} is output by the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}}.

@verbatim
Parameter        Corresponding Dynamic Variable  
array            *print-array*                   
base             *print-base*                    
case             *print-case*                    
circle           *print-circle*                  
escape           *print-escape*                  
gensym           *print-gensym*                  
length           *print-length*                  
level            *print-level*                   
lines            *print-lines*                   
miser-width      *print-miser-width*             
pprint-dispatch  *print-pprint-dispatch*         
pretty           *print-pretty*                  
radix            *print-radix*                   
readably         *print-readably*                
right-margin     *print-right-margin*            
@end verbatim

@strong{Figure 22-7. Argument correspondences for the WRITE function.}

@ref{#prin1,@strong{prin1}}, @ref{#princ,@strong{princ}},
@ref{#print,@strong{print}}, and @ref{#pprint,@strong{pprint}}
implicitly @uref{glo_b.html#bind,@emph{bind}} certain print parameters
to particular values. The remaining parameter values are taken from
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}},
@uref{var_stprint-casest.html#STprint-caseST,@strong{*print-case*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-linesst.html#STprint-linesST,@strong{*print-lines*}},
@uref{var_stprint-miser-widthst.html#STprint-miser-widthST,@strong{*print-miser-width*}},
@uref{var_stprint-p_t-dispatchst.html#STprint-pprint-dispatchST,@strong{*print-pprint-dispatch*}},
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}},
and
@uref{var_stprint-right-marginst.html#STprint-right-marginST,@strong{*print-right-margin*}}.

@ref{#prin1,@strong{prin1}} produces output suitable for input to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}. It binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_t.html#true,@emph{true}}.

@ref{#princ,@strong{princ}} is just like @ref{#prin1,@strong{prin1}}
except that the output has no @uref{glo_e.html#escape,@emph{escape}}
@uref{glo_c.html#character,@emph{characters}}. It binds
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
to @uref{glo_f.html#false,@emph{false}} and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
to @uref{glo_f.html#false,@emph{false}}. The general rule is that output
from @ref{#princ,@strong{princ}} is intended to look good to people,
while output from @ref{#prin1,@strong{prin1}} is intended to be
acceptable to @uref{fun_readcm_re_g-whitespace.html#read,@strong{read}}.

@ref{#print,@strong{print}} is just like @ref{#prin1,@strong{prin1}}
except that the printed representation of @emph{object} is preceded by a
newline and followed by a space.

@ref{#pprint,@strong{pprint}} is just like @ref{#print,@strong{print}}
except that the trailing space is omitted and @emph{object} is printed
with the
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
flag @uref{glo_n.html#non-nil,@emph{non-nil}} to produce pretty output.

@emph{Output-stream} specifies the
@uref{glo_s.html#stream,@emph{stream}} to which output is to be sent.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}},
@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}},
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-casest.html#STprint-caseST,@strong{*print-case*}},
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}},
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}},
@uref{var_stread-de_oat-formatst.html#STread-default-float-formatST,@strong{*read-default-float-format*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_readtable-case.html#readtable-case,@strong{readtable-case}},
@uref{sec_22-3-4.html,Section 22.3.4 (FORMAT Printer Operations)}

@strong{Notes:}

The @uref{glo_f.html#function,@emph{functions}}
@ref{#prin1,@strong{prin1}} and @ref{#print,@strong{print}} do not bind
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}.

@verbatim
 (prin1 object output-stream)
==  (write object :stream output-stream :escape t)
@end verbatim

@verbatim
 (princ object output-stream)
==  (write object stream output-stream :escape nil :readably nil)
@end verbatim

@verbatim
 (print object output-stream)
==  (progn (terpri output-stream)
           (write object :stream output-stream
                         :escape t)
           (write-char #\space output-stream))
@end verbatim

@verbatim
 (pprint object output-stream)
==  (write object :stream output-stream :escape t :pretty t)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss271.html,PRINC-READABLY:X3J13-DEC-91}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Local Macro PPRINT-POP
@subsubsection CLHS: Local Macro PPRINT-POP
@anchor{#clhs-local-macro-pprint-pop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pprint-newline.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pprint-tab.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Macro} @strong{PPRINT-POP}

@strong{Syntax:}

@strong{pprint-pop} @emph{@emph{<no arguments>}} => @emph{object}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_e.html#element,@emph{element}} of the
@uref{glo_l.html#list,@emph{list}} being printed in the @emph{lexically
current logical block}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Pops one @uref{glo_e.html#element,@emph{element}} from the
@uref{glo_l.html#list,@emph{list}} being printed in the @emph{lexically
current logical block}, obeying
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
and
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
as described below.

Each time @ref{#pprint-pop,@strong{pprint-pop}} is called, it pops the
next value off the @uref{glo_l.html#list,@emph{list}} passed to the
@emph{lexically current logical block} and returns it. However, before
doing this, it performs three tests:

@itemize
@item
If the remaining `list' is not a @uref{glo_l.html#list,@emph{list}}, ``.
'' is printed followed by the remaining `list.' (This makes it easier to
write printing functions that are robust in the face of malformed
arguments.)
@item
If
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
is @uref{glo_n.html#non-nil,@emph{non-nil}}, and
@ref{#pprint-pop,@strong{pprint-pop}} has already been called
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
times within the immediately containing logical block, ``...'' is
printed. (This makes it easy to write printing functions that properly
handle
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}.)
@item
If
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
is @uref{glo_n.html#non-nil,@emph{non-nil}}, and the remaining list is a
circular (or shared) reference, then ``. '' is printed followed by an
appropriate ``#@emph{n}#'' marker. (This catches instances of
@uref{glo_c.html#cdr,@emph{cdr}} circularity and sharing in lists.)
@end itemize

If either of the three conditions above occurs, the indicated output is
printed on the @uref{glo_p.html#pretty_printing_stream,@emph{pretty
printing stream}} created by the immediately containing
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
and the execution of the immediately containing
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
is terminated except for the printing of the suffix.

If
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
is given a `list' argument of
@uref{any_nil.html#nil,@strong{nil}}---because it is not processing a
list---@ref{#pprint-pop,@strong{pprint-pop}} can still be used to obtain
support for
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}.
In this situation, the first and third tests above are disabled and
@ref{#pprint-pop,@strong{pprint-pop}} always returns
@uref{any_nil.html#nil,@strong{nil}}. See @uref{sec_22-2-2.html,Section
22.2.2 (Examples of using the Pretty Printer)}---specifically, the
@strong{pprint-vector} example.

Whether or not @ref{#pprint-pop,@strong{pprint-pop}} is
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#pprint-pop,@strong{pprint-pop}} are the same as for
@uref{glo_s.html#symbol,@emph{symbols}} in the COMMON-LISP package which
are @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use @ref{#pprint-pop,@strong{pprint-pop}}
outside of
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
are undefined.

@strong{Examples:} None.

@strong{Side Effects:}

Might cause output to the
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
associated with the lexically current logical block.

@strong{Affected By:}

@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}.

@strong{Exceptional Situations:}

An error is signaled (either at macro expansion time or at run time) if
a usage of @ref{#pprint-pop,@strong{pprint-pop}} occurs where there is
no lexically containing
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}}.

The consequences are undefined if @ref{#pprint-pop,@strong{pprint-pop}}
is executed outside of the @uref{glo_d.html#dynamic_extent,@emph{dynamic
extent}} of this
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.

@strong{See Also:}

@uref{locmac_pprint_st-exhausted.html#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}},
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.

@strong{Notes:}

It is frequently a good idea to call
@uref{locmac_pprint_st-exhausted.html#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
before calling @ref{#pprint-pop,@strong{pprint-pop}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Local Macro PPRINT-EXIT-IF-LIST-EXHAUSTED
@subsubsection CLHS: Local Macro PPRINT-EXIT-IF-LIST-EXHAUSTED
@anchor{#clhs-local-macro-pprint-exit-if-list-exhausted}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pprint-dispatch.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pprint-fi_rint-tabular.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Macro} @strong{PPRINT-EXIT-IF-LIST-EXHAUSTED}

@strong{Syntax:}

@strong{pprint-exit-if-list-exhausted} @emph{@emph{<no arguments>}} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:} None.

@strong{Description:}

Tests whether or not the @emph{list} passed to the @emph{lexically
current logical block} has been exhausted; see
@uref{sec_22-2-1-1.html,Section 22.2.1.1 (Dynamic Control of the
Arrangement of Output)}. If this @emph{list} has been reduced to
@uref{any_nil.html#nil,@strong{nil}},
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
terminates the execution of the @emph{lexically current logical block}
except for the printing of the suffix. Otherwise
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
returns @uref{any_nil.html#nil,@strong{nil}}.

Whether or not
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
is @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
are the same as for @uref{glo_s.html#symbol,@emph{symbols}} in the
COMMON-LISP package which are @uref{glo_f.html#fbound,@emph{fbound}} in
the @uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
outside of
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
are undefined.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error is signaled (at macro expansion time or at run time) if
@ref{#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}}
is used anywhere other than lexically within a call on
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}.
Also, the consequences of executing @strong{pprint-if-list-exhausted}
outside of the dynamic extent of the
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
which lexically contains it are undefined.

@strong{See Also:}

@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}},
@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}}.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro FORMATTER
@subsubsection CLHS: Macro FORMATTER
@anchor{#clhs-macro-formatter}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-pprint-dispatch.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pprint-dispatch.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{FORMATTER}

@strong{Syntax:}

@strong{formatter} @emph{control-string} => @emph{function}

@strong{Arguments and Values:}

@emph{control-string}---a @uref{glo_f.html#format_string,@emph{format
string}}; not evaluated.

@emph{function}---a @uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

Returns a @uref{glo_f.html#function,@emph{function}} which has behavior
equivalent to:

@verbatim
  #'(lambda (*standard-output* &rest arguments)
      (apply #'format t control-string arguments)
      arguments-tail)
@end verbatim

where @emph{arguments-tail} is either the tail of @emph{arguments} which
has as its @uref{glo_c.html#car,@emph{car}} the argument that would be
processed next if there were more format directives in the
@emph{control-string}, or else @uref{any_nil.html#nil,@strong{nil}} if
no more @emph{arguments} follow the most recently processed argument.

@strong{Examples:}

@verbatim
(funcall (formatter "~&~A~A") *standard-output* 'a 'b 'c)
>>  AB
=>  (C)

(format t (formatter "~&~A~A") 'a 'b 'c)
>>  AB
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Might signal an error (at macro expansion time or at run time) if the
argument is not a valid @uref{glo_f.html#format_string,@emph{format
string}}.

@strong{See Also:}

@uref{fun_format.html#format,@strong{format}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PPRINT-LOGICAL-BLOCK
@subsubsection CLHS: Macro PPRINT-LOGICAL-BLOCK
@anchor{#clhs-macro-pprint-logical-block}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pprint-indent.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_pprint-newline.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PPRINT-LOGICAL-BLOCK}

@strong{Syntax:}

@strong{pprint-logical-block} @emph{(stream-symbol object &key prefix
per-line-prefix suffix) @emph{declaration}@strong{*}
@emph{form}@strong{*}}

=> @emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{stream-symbol}---a
@uref{glo_s.html#stream_variable_designator,@emph{stream variable
designator}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}; evaluated.

:prefix---a @uref{glo_s.html#string,@emph{string}}; evaluated.
Complicated defaulting behavior; see below.

:per-line-prefix---a @uref{glo_s.html#string,@emph{string}}; evaluated.
Complicated defaulting behavior; see below.

:suffix---a @uref{glo_s.html#string,@emph{string}}; evaluated. The
default is the @uref{glo_n.html#null,@emph{null}}
@uref{glo_s.html#string,@emph{string}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@strong{Description:}

Causes printing to be grouped into a logical block.

The logical block is printed to the
@uref{glo_s.html#stream,@emph{stream}} that is the
@uref{glo_v.html#value,@emph{value}} of the
@uref{glo_v.html#variable,@emph{variable}} denoted by
@emph{stream-symbol}. During the execution of the
@uref{glo_f.html#form,@emph{forms}}, that
@uref{glo_v.html#variable,@emph{variable}} is
@uref{glo_b.html#bound,@emph{bound}} to a
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
that supports decisions about the arrangement of output and then
forwards the output to the destination stream. All the standard printing
functions (e.g.,
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}}, and
@uref{fun_terpricm_fresh-line.html#terpri,@strong{terpri}}) can be used
to print output to the
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}.
All and only the output sent to this
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
is treated as being in the logical block.

The @emph{prefix} specifies a prefix to be printed before the beginning
of the logical block. The @emph{per-line-prefix} specifies a prefix that
is printed before the block and at the beginning of each new line in the
block. The :prefix and :pre-line-prefix
@uref{glo_a.html#argument,@emph{arguments}} are mutually exclusive. If
neither :prefix nor :per-line-prefix is specified, a @emph{prefix} of
the @uref{glo_n.html#null,@emph{null}}
@uref{glo_s.html#string,@emph{string}} is assumed.

The @emph{suffix} specifies a suffix that is printed just after the
logical block.

The @emph{object} is normally a @uref{glo_l.html#list,@emph{list}} that
the body @emph{forms} are responsible for printing. If @emph{object} is
not a @uref{glo_l.html#list,@emph{list}}, it is printed using
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}. (This makes
it easier to write printing functions that are robust in the face of
malformed arguments.) If
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
is @uref{glo_n.html#non-nil,@emph{non-nil}} and @emph{object} is a
circular (or shared) reference to a @uref{glo_c.html#cons,@emph{cons}},
then an appropriate ``#@emph{n}#'' marker is printed. (This makes it
easy to write printing functions that provide full support for
circularity and sharing abbreviation.) If
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
is not @uref{any_nil.html#nil,@strong{nil}} and the logical block is at
a dynamic nesting depth of greater than
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
in logical blocks, ``#'' is printed. (This makes easy to write printing
functions that provide full support for depth abbreviation.)

If either of the three conditions above occurs, the indicated output is
printed on @emph{stream-symbol} and the body @emph{forms} are skipped
along with the printing of the :prefix and :suffix. (If the body
@emph{forms} are not to be responsible for printing a list, then the
first two tests above can be turned off by supplying
@uref{any_nil.html#nil,@strong{nil}} for the @emph{object} argument.)

In addition to the @emph{object} argument of
@ref{#pprint-logical-block,@strong{pprint-logical-block}}, the arguments
of the standard printing functions (such as
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_writecm_p_rintcm_princ.html#print,@strong{print}},
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}}, and
@uref{fun_writecm_p_rintcm_princ.html#pprint,@strong{pprint}}, as well
as the arguments of the standard
@uref{glo_f.html#format_directive,@emph{format directives}} such as ~A,
~S, (and ~W) are all checked (when necessary) for circularity and
sharing. However, such checking is not applied to the arguments of the
functions
@uref{fun_write-str_m_write-line.html#write-line,@strong{write-line}},
@uref{fun_write-str_m_write-line.html#write-string,@strong{write-string}},
and @uref{fun_write-char.html#write-char,@strong{write-char}} or to the
literal text output by @uref{fun_format.html#format,@strong{format}}. A
consequence of this is that you must use one of the latter functions if
you want to print some literal text in the output that is not supposed
to be checked for circularity or sharing.

The body @emph{forms} of a
@ref{#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}} must not perform any side-effects on
the surrounding environment; for example, no
@uref{glo_v.html#variable,@emph{variables}} must be assigned which have
not been @uref{glo_b.html#bound,@emph{bound}} within its scope.

The @ref{#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_m.html#macro,@emph{macro}} may be used regardless of the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is signaled
if any of the :suffix, :prefix, or :per-line-prefix is supplied but does
not evaluate to a @uref{glo_s.html#string,@emph{string}}.

An error is signaled if :prefix and :pre-line-prefix are both used.

@ref{#pprint-logical-block,@strong{pprint-logical-block}} and the
@uref{glo_p.html#pretty_printing_stream,@emph{pretty printing stream}}
it creates have @uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}.
The consequences are undefined if, outside of this extent, output is
attempted to the @uref{glo_p.html#pretty_printing_stream,@emph{pretty
printing stream}} it creates.

It is also unspecified what happens if, within this extent, any output
is sent directly to the underlying destination stream.

@strong{See Also:}

@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}},
@uref{locmac_pprint_st-exhausted.html#pprint-exit-if-list-exhausted,@strong{pprint-exit-if-list-exhausted}},
@uref{sec_22-3-5-2.html,Section 22.3.5.2 (Tilde Less-Than-Sign: Logical
Block)}

@strong{Notes:}

One reason for using the
@ref{#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_m.html#macro,@emph{macro}} when the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
is @uref{any_nil.html#nil,@strong{nil}} would be to allow it to perform
checking for @uref{glo_d.html#dotted_list,@emph{dotted lists}}, as well
as (in conjunction with
@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}}) checking
for
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
or
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}
being exceeded.

Detection of circularity and sharing is supported by the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}} by in essence
performing requested output twice. On the first pass, circularities and
sharing are detected and the actual outputting of characters is
suppressed. On the second pass, the appropriate ``#@emph{n}='' and
``#@emph{n}#'' markers are inserted and characters are output. This is
why the restriction on side-effects is necessary. Obeying this
restriction is facilitated by using
@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}}, instead of
an ordinary @uref{mac_pop.html#pop,@strong{pop}} when traversing a list
being printed by the body @emph{forms} of the
@ref{#pprint-logical-block,@strong{pprint-logical-block}}
@uref{glo_f.html#form,@emph{form}}.)

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PRINT-UNREADABLE-OBJECT
@subsubsection CLHS: Macro PRINT-UNREADABLE-OBJECT
@anchor{#clhs-macro-print-unreadable-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_print-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-pprint-dispatch.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PRINT-UNREADABLE-OBJECT}

@strong{Syntax:}

@strong{print-unreadable-object} @emph{(object stream &key type
identity) @emph{form}@strong{*}} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}; evaluated.

@emph{stream}---a @uref{glo_s.html#stream_designator,@emph{stream
designator}}; evaluated.

@emph{type}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}; evaluated.

@emph{identity}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}};
evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@strong{Description:}

Outputs a printed representation of @emph{object} on @emph{stream},
beginning with ``#<'' and ending with ``>''. Everything output to
@emph{stream} by the body @emph{forms} is enclosed in the the angle
brackets. If @emph{type} is @uref{glo_t.html#true,@emph{true}}, the
output from @emph{forms} is preceded by a brief description of the
@emph{object}'s @uref{glo_t.html#type,@emph{type}} and a space
character. If @emph{identity} is @uref{glo_t.html#true,@emph{true}}, the
output from @emph{forms} is followed by a space character and a
representation of the @emph{object}'s identity, typically a storage
address.

If either @emph{type} or @emph{identity} is not supplied, its value is
@uref{glo_f.html#false,@emph{false}}. It is valid to omit the body
@emph{forms}. If @emph{type} and @emph{identity} are both true and there
are no body @emph{forms}, only one space character separates the type
and the identity.

@strong{Examples:}

;; Note that in this example, the precise form of the output ;; is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@verbatim
 (defmethod print-object ((obj airplane) stream)
   (print-unreadable-object (obj stream :type t :identity t)
     (princ (tail-number obj) stream)))

 (prin1-to-string my-airplane)
=>  "#<Airplane NW0773 36000123135>"
OR=>  "#<FAA:AIRPLANE NW0773 17>"
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
is @uref{glo_t.html#true,@emph{true}},
@ref{#print-unreadable-object,@strong{print-unreadable-object}} signals
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}}
without printing anything.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function PRINT-OBJECT
@subsubsection CLHS: Standard Generic Function PRINT-OBJECT
@anchor{#clhs-standard-generic-function-print-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_pprint-tab.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_print-unr_dable-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{PRINT-OBJECT}

@strong{Syntax:}

@strong{print-object} @emph{object stream} => @emph{object}

@strong{Method Signatures:}

@strong{print-object} @emph{(@emph{object} standard-object)
@emph{stream}}

@strong{print-object} @emph{(@emph{object} structure-object)
@emph{stream}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#print-object,@strong{print-object}} writes the printed
representation of @emph{object} to @emph{stream}. The
@uref{glo_f.html#function,@emph{function}}
@ref{#print-object,@strong{print-object}} is called by the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}}; it should not be
called by the user.

Each implementation is required to provide a
@uref{glo_m.html#method,@emph{method}} on the
@uref{glo_c.html#class,@emph{class}}
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
and on the @uref{glo_c.html#class,@emph{class}}
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}.
In addition, each @uref{glo_i.html#implementation,@emph{implementation}}
must provide @uref{glo_m.html#method,@emph{methods}} on enough other
@uref{glo_c.html#class,@emph{classes}} so as to ensure that there is
always an applicable @uref{glo_m.html#method,@emph{method}}.
Implementations are free to add @uref{glo_m.html#method,@emph{methods}}
for other @uref{glo_c.html#class,@emph{classes}}. Users may write
@uref{glo_m.html#method,@emph{methods}} for
@ref{#print-object,@strong{print-object}} for their own
@uref{glo_c.html#class,@emph{classes}} if they do not wish to inherit an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_m.html#method,@emph{method}}.

The @uref{glo_m.html#method,@emph{method}} on the
@uref{glo_c.html#class,@emph{class}}
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
prints the object in the default #S notation; see
@uref{sec_22-1-3-12.html,Section 22.1.3.12 (Printing Structures)}.

@uref{glo_m.html#method,@emph{Methods}} on
@ref{#print-object,@strong{print-object}} are responsible for
implementing their part of the semantics of the
@uref{glo_p.html#printer_control_variable,@emph{printer control
variables}}, as follows:

@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}

All methods for @ref{#print-object,@strong{print-object}} must obey
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}.
This includes both user-defined methods and
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
methods. Readable printing of
@uref{glo_s.html#structure,@emph{structures}} and
@uref{glo_s.html#standard_object,@emph{standard objects}} is controlled
by their @ref{#print-object,@strong{print-object}} method, not by their
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
@uref{glo_m.html#method,@emph{method}}.
@uref{glo_s.html#similarity,@emph{Similarity}} for these
@uref{glo_o.html#object,@emph{objects}} is application dependent and
hence is defined to be whatever these
@uref{glo_m.html#method,@emph{methods}} do; see
@uref{sec_3-2-4-2.html,Section 3.2.4.2 (Similarity of Literal Objects)}.

@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}

Each @uref{glo_m.html#method,@emph{method}} must implement
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}.

@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}

The @uref{glo_m.html#method,@emph{method}} may wish to perform
specialized line breaking or other output conditional on the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}.
For further information, see (for example) the
@uref{glo_m.html#macro,@emph{macro}}
@uref{fun_pprint-fi_rint-tabular.html#pprint-fill,@strong{pprint-fill}}.
See also @uref{sec_22-2-1-4.html,Section 22.2.1.4 (Pretty Print Dispatch
Tables)} and @uref{sec_22-2-2.html,Section 22.2.2 (Examples of using the
Pretty Printer)}.

@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}

@uref{glo_m.html#method,@emph{Methods}} that produce output of
indefinite length must obey
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}}.
For further information, see (for example) the
@uref{glo_m.html#macro,@emph{macros}}
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}}
and @uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}}. See
also @uref{sec_22-2-1-4.html,Section 22.2.1.4 (Pretty Print Dispatch
Tables)} and @uref{sec_22-2-2.html,Section 22.2.2 (Examples of using the
Pretty Printer)}.

@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}

The printer takes care of
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}}
automatically, provided that each @uref{glo_m.html#method,@emph{method}}
handles exactly one level of structure and calls
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}} (or an
equivalent @uref{glo_f.html#function,@emph{function}}) recursively if
there are more structural levels. The printer's decision of whether an
@uref{glo_o.html#object,@emph{object}} has components (and therefore
should not be printed when the printing depth is not less than
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}})
is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
In some implementations its @ref{#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} is not called; in others the
@uref{glo_m.html#method,@emph{method}} is called, and the determination
that the @uref{glo_o.html#object,@emph{object}} has components is based
on what it tries to write to the @emph{stream}.

@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}

When the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}
is @uref{glo_t.html#true,@emph{true}}, a user-defined
@ref{#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} can print
@uref{glo_o.html#object,@emph{objects}} to the supplied
@uref{glo_s.html#stream,@emph{stream}} using
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}},
@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}}, or
@uref{fun_format.html#format,@strong{format}} and expect circularities
to be detected and printed using the #@emph{n}# syntax. If a
user-defined @ref{#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} prints to a
@uref{glo_s.html#stream,@emph{stream}} other than the one that was
supplied, then circularity detection starts over for that
@uref{glo_s.html#stream,@emph{stream}}. See
@uref{var_stprint-circlest.html#STprint-circleST,@strong{*print-circle*}}.

@uref{var_stprint-b_rint-radixst.html#STprint-baseST,@strong{*print-base*}},
@uref{var_stprint-b_rint-radixst.html#STprint-radixST,@strong{*print-radix*}},
@uref{var_stprint-casest.html#STprint-caseST,@strong{*print-case*}},
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}},
and
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}}

These @uref{glo_p.html#printer_control_variable,@emph{printer control
variables}} apply to specific types of
@uref{glo_o.html#object,@emph{objects}} and are handled by the
@uref{glo_m.html#method,@emph{methods}} for those
@uref{glo_o.html#object,@emph{objects}}.

If these rules are not obeyed, the results are undefined.

In general, the printer and the
@ref{#print-object,@strong{print-object}} methods should not rebind the
print control variables as they operate recursively through the
structure, but this is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

In some implementations the @emph{stream} argument passed to a
@ref{#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} is not the original
@uref{glo_s.html#stream,@emph{stream}}, but is an intermediate
@uref{glo_s.html#stream,@emph{stream}} that implements part of the
printer. @uref{glo_m.html#method,@emph{methods}} should therefore not
depend on the identity of this @uref{glo_s.html#stream,@emph{stream}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_pprint-fi_rint-tabular.html#pprint-fill,@strong{pprint-fill}},
@uref{mac_pprint-logical-block.html#pprint-logical-block,@strong{pprint-logical-block}},
@uref{locmac_pprint-pop.html#pprint-pop,@strong{pprint-pop}},
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{sec_22-1-3.html,Section 22.1.3 (Default Print-Object Methods)},
@uref{sec_22-1-3-12.html,Section 22.1.3.12 (Printing Structures)},
@uref{sec_22-2-1-4.html,Section 22.2.1.4 (Pretty Print Dispatch
Tables)}, @uref{sec_22-2-2.html,Section 22.2.2 (Examples of using the
Pretty Printer)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss275.html,PRINT-CIRCLE-STRUCTURE:USER-FUNCTIONS-WORK}
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@item
@uref{../Issues/iss116.html,DEFSTRUCT-PRINT-FUNCTION-AGAIN:X3J13-MAR-93}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-ARRAY*
@subsubsection CLHS: Variable *PRINT-ARRAY*
@anchor{#clhs-variable-print-array}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_write-to-_nc-to-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-b_rint-radixst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-ARRAY*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

Controls the format in which @uref{glo_a.html#array,@emph{arrays}} are
printed. If it is @uref{glo_f.html#false,@emph{false}}, the contents of
@uref{glo_a.html#array,@emph{arrays}} other than
@uref{glo_s.html#string,@emph{strings}} are never printed. Instead,
@uref{glo_a.html#array,@emph{arrays}} are printed in a concise form
using #< that gives enough information for the user to be able to
identify the @uref{glo_a.html#array,@emph{array}}, but does not include
the entire @uref{glo_a.html#array,@emph{array}} contents. If it is
@uref{glo_t.html#true,@emph{true}},
non-@uref{glo_s.html#string,@emph{string}}
@uref{glo_a.html#array,@emph{arrays}} are printed using #(...), #*, or
#nA syntax.

@strong{Examples:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{See Also:}

@uref{sec_2-4-8-3.html,Section 2.4.8.3 (Sharpsign Left-Parenthesis)},
@uref{sec_2-4-8-20.html,Section 2.4.8.20 (Sharpsign Less-Than-Sign)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-BASE* *PRINT-RADIX*
@subsubsection CLHS: Variable *PRINT-BASE*, *PRINT-RADIX*
@anchor{#clhs-variable-print-base-print-radix}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-arrayst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-casest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-BASE*, *PRINT-RADIX*}

@strong{Value Type:}

@ref{#STprint-baseST,@strong{*print-base*}}---a
@uref{glo_r.html#radix,@emph{radix}}.
@ref{#STprint-radixST,@strong{*print-radix*}}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

The initial @uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-baseST,@strong{*print-base*}} is 10. The initial
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-radixST,@strong{*print-radix*}} is
@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

@ref{#STprint-baseST,@strong{*print-base*}} and
@ref{#STprint-radixST,@strong{*print-radix*}} control the printing of
@uref{glo_r.html#rational,@emph{rationals}}. The
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-baseST,@strong{*print-base*}} is called the
@uref{glo_c.html#current_output_base,@emph{current output base}}.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-baseST,@strong{*print-base*}} is the
@uref{glo_r.html#radix,@emph{radix}} in which the printer will print
@uref{glo_r.html#rational,@emph{rationals}}. For radices above 10,
letters of the alphabet are used to represent digits above 9.

If the @uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-radixST,@strong{*print-radix*}} is
@uref{glo_t.html#true,@emph{true}}, the printer will print a radix
specifier to indicate the @uref{glo_r.html#radix,@emph{radix}} in which
it is printing a @uref{glo_r.html#rational,@emph{rational}} number. The
radix specifier is always printed using lowercase letters. If
@ref{#STprint-baseST,@strong{*print-base*}} is 2, 8, or 16, then the
radix specifier used is #b, #o, or #x, respectively. For
@uref{glo_i.html#integer,@emph{integers}}, base ten is indicated by a
trailing decimal point instead of a leading radix specifier; for
@uref{glo_r.html#ratio,@emph{ratios}}, #10r is used.

@strong{Examples:}

@verbatim
 (let ((*print-base* 24.) (*print-radix* t)) 
   (print 23.))
>>  #24rN
=>  23
 (setq *print-base* 10) =>  10
 (setq *print-radix* nil) =>  NIL                                          
 (dotimes (i 35)
    (let ((*print-base* (+ i 2)))           ;print the decimal number 40 
      (write 40)                            ;in each base from 2 to 36
      (if (zerop (mod i 10)) (terpri) (format t " "))))
>>  101000
>>  1111 220 130 104 55 50 44 40 37 34
>>  31 2C 2A 28 26 24 22 20 1J 1I
>>  1H 1G 1F 1E 1D 1C 1B 1A 19 18
>>  17 16 15 14 
=>  NIL
 (dolist (pb '(2 3 8 10 16))               
    (let ((*print-radix* t)                 ;print the integer 10 and 
          (*print-base* pb))                ;the ratio 1/10 in bases 2, 
     (format t "~&~S  ~S~%" 10 1/10)))        ;3, 8, 10, 16
>>  #b1010  #b1/1010
>>  #3r101  #3r1/101
>>  #o12  #o1/12
>>  10.  #10r1/10
>>  #xA  #x1/A
=>  NIL
@end verbatim

@strong{Affected By:}

Might be @uref{glo_b.html#bound,@emph{bound}} by
@uref{fun_format.html#format,@strong{format}}, and
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_write-to-_nc-to-string.html#write-to-string,@strong{write-to-string}}.

@strong{See Also:}

@uref{fun_format.html#format,@strong{format}},
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_write-to-_nc-to-string.html#write-to-string,@strong{write-to-string}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-CASE*
@subsubsection CLHS: Variable *PRINT-CASE*
@anchor{#clhs-variable-print-case}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-b_rint-radixst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-circlest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-CASE*}

@strong{Value Type:}

One of the @uref{glo_s.html#symbol,@emph{symbols}} :upcase, :downcase,
or :capitalize.

@strong{Initial Value:}

The @uref{glo_s.html#symbol,@emph{symbol}} :upcase.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-caseST,@strong{*print-case*}} controls the case (upper,
lower, or mixed) in which to print any uppercase characters in the names
of @uref{glo_s.html#symbol,@emph{symbols}} when vertical-bar syntax is
not used.

@ref{#STprint-caseST,@strong{*print-case*}} has an effect at all times
when the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{glo_f.html#false,@emph{false}}.
@ref{#STprint-caseST,@strong{*print-case*}} also has an effect when the
@uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{glo_t.html#true,@emph{true}} unless inside an escape context
(i.e., unless between
@uref{glo_v.html#vertical-bar,@emph{vertical-bars}} or after a
@uref{glo_s.html#slash,@emph{slash}}).

@strong{Examples:}

@verbatim
 (defun test-print-case ()
   (dolist (*print-case* '(:upcase :downcase :capitalize))
     (format t "~&~S ~S~%" 'this-and-that '|And-something-elSE|)))
=>  TEST-PC
;; Although the choice of which characters to escape is specified by
;; *PRINT-CASE*, the choice of how to escape those characters 
;; (i.e., whether single escapes or multiple escapes are used)
;; is implementation-dependent.  The examples here show two of the
;; many valid ways in which escaping might appear.
 (test-print-case) ;Implementation A
>>  THIS-AND-THAT |And-something-elSE|
>>  this-and-that a\n\d-\s\o\m\e\t\h\i\n\g-\e\lse
>>  This-And-That A\n\d-\s\o\m\e\t\h\i\n\g-\e\lse
=>  NIL
 (test-print-case) ;Implementation B
>>  THIS-AND-THAT |And-something-elSE|
>>  this-and-that a|nd-something-el|se
>>  This-And-That A|nd-something-el|se
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}

@strong{Notes:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} normally
converts lowercase characters appearing in
@uref{glo_s.html#symbol,@emph{symbols}} to corresponding uppercase
characters, so that internally print names normally contain only
uppercase characters.

If
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{glo_t.html#true,@emph{true}}, lowercase characters in the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#symbol,@emph{symbol}} are always printed in lowercase,
and are preceded by a single escape character or enclosed by multiple
escape characters; uppercase characters in the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#symbol,@emph{symbol}} are printed in upper case, in
lower case, or in mixed case so as to capitalize words, according to the
value of @ref{#STprint-caseST,@strong{*print-case*}}. The convention for
what constitutes a ``word'' is the same as for
@uref{fun_string-up_g-capitalize.html#string-capitalize,@strong{string-capitalize}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss272.html,PRINT-CASE-BEHAVIOR:CLARIFY}
@item
@uref{../Issues/iss204.html,JUN90-TRIVIAL-ISSUES:3}
@item
@uref{../Issues/iss273.html,PRINT-CASE-PRINT-ESCAPE-INTERACTION:VERTICAL-BAR-RULE-NO-UPCASE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-CIRCLE*
@subsubsection CLHS: Variable *PRINT-CIRCLE*
@anchor{#clhs-variable-print-circle}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-casest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-escapest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-CIRCLE*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

Controls the attempt to detect circularity and sharing in an
@uref{glo_o.html#object,@emph{object}} being printed.

If @uref{glo_f.html#false,@emph{false}}, the printing process merely
proceeds by recursive descent without attempting to detect circularity
and sharing.

If @uref{glo_t.html#true,@emph{true}}, the printer will endeavor to
detect cycles and sharing in the structure to be printed, and to use
#@emph{n}= and #@emph{n}# syntax to indicate the circularities or shared
components.

If @uref{glo_t.html#true,@emph{true}}, a user-defined
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} can print
@uref{glo_o.html#object,@emph{objects}} to the supplied
@uref{glo_s.html#stream,@emph{stream}} using
@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}},
@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}}, or
@uref{fun_format.html#format,@strong{format}} and expect circularities
and sharing to be detected and printed using the #@emph{n}# syntax. If a
user-defined
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
@uref{glo_m.html#method,@emph{method}} prints to a
@uref{glo_s.html#stream,@emph{stream}} other than the one that was
supplied, then circularity detection starts over for that
@uref{glo_s.html#stream,@emph{stream}}.

Note that implementations should not use #@emph{n}# notation when the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} would automatically
assure sharing without it (e.g., as happens with
@uref{glo_i.html#interned,@emph{interned}}
@uref{glo_s.html#symbol,@emph{symbols}}).

@strong{Examples:}

@verbatim
 (let ((a (list 1 2 3)))
   (setf (cdddr a) a)
   (let ((*print-circle* t))
     (write a)
     :done))
>>  #1=(1 2 3 . #1#)
=>  :DONE
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}

@strong{Notes:}

An attempt to print a circular structure with
@ref{#STprint-circleST,@strong{*print-circle*}} set to
@uref{any_nil.html#nil,@strong{nil}} may lead to looping behavior and
failure to terminate.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss116.html,DEFSTRUCT-PRINT-FUNCTION-AGAIN:X3J13-MAR-93}
@item
@uref{../Issues/iss275.html,PRINT-CIRCLE-STRUCTURE:USER-FUNCTIONS-WORK}
@item
@uref{../Issues/iss274.html,PRINT-CIRCLE-SHARED:RESPECT-PRINT-CIRCLE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-ESCAPE*
@subsubsection CLHS: Variable *PRINT-ESCAPE*
@anchor{#clhs-variable-print-escape}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-circlest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-gensymst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-ESCAPE*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_t.html#true,@emph{true}}.

@strong{Description:}

If @uref{glo_f.html#false,@emph{false}}, escape characters and
@uref{glo_p.html#package_prefix,@emph{package prefixes}} are not output
when an expression is printed.

If @uref{glo_t.html#true,@emph{true}}, an attempt is made to print an
@uref{glo_e.html#expression,@emph{expression}} in such a way that it can
be read again to produce an @uref{fun_equal.html#equal,@strong{equal}}
@uref{glo_e.html#expression,@emph{expression}}. (This is only a
guideline; not a requirement. See
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}.)

For more specific details of how the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-escapeST,@strong{*print-escape*}} affects the printing of
certain @uref{glo_t.html#type,@emph{types}}, see
@uref{sec_22-1-3.html,Section 22.1.3 (Default Print-Object Methods)}.

@strong{Examples:}

@verbatim
 (let ((*print-escape* t)) (write #\a))
>>  #\a
=>  #\a
 (let ((*print-escape* nil)) (write #\a))
>>  a
=>  #\a
@end verbatim

@strong{Affected By:}

@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}},
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}},
@uref{fun_format.html#format,@strong{format}}

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{acc_readtable-case.html#readtable-case,@strong{readtable-case}}

@strong{Notes:}

@uref{fun_writecm_p_rintcm_princ.html#princ,@strong{princ}} effectively
binds @ref{#STprint-escapeST,@strong{*print-escape*}} to
@uref{glo_f.html#false,@emph{false}}.
@uref{fun_writecm_p_rintcm_princ.html#prin1,@strong{prin1}} effectively
binds @ref{#STprint-escapeST,@strong{*print-escape*}} to
@uref{glo_t.html#true,@emph{true}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-GENSYM*
@subsubsection CLHS: Variable *PRINT-GENSYM*
@anchor{#clhs-variable-print-gensym}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-escapest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-l_int-lengthst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-GENSYM*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_t.html#true,@emph{true}}.

@strong{Description:}

Controls whether the prefix ``#:'' is printed before
@uref{glo_a.html#apparently_uninterned,@emph{apparently uninterned}}
@uref{glo_s.html#symbol,@emph{symbols}}. The prefix is printed before
such @uref{glo_s.html#symbol,@emph{symbols}} if and only if the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-gensymST,@strong{*print-gensym*}} is
@uref{glo_t.html#true,@emph{true}}.

@strong{Examples:}

@verbatim
 (let ((*print-gensym* nil))
   (print (gensym)))
>>  G6040 
=>  #:G6040
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-LEVEL* *PRINT-LENGTH*
@subsubsection CLHS: Variable *PRINT-LEVEL*, *PRINT-LENGTH*
@anchor{#clhs-variable-print-level-print-length}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-gensymst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-linesst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-LEVEL*, *PRINT-LENGTH*}

@strong{Value Type:}

a non-negative @uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#STprint-levelST,@strong{*print-level*}} controls how many levels
deep a nested @uref{glo_o.html#object,@emph{object}} will print. If it
is @uref{glo_f.html#false,@emph{false}}, then no control is exercised.
Otherwise, it is an @uref{glo_i.html#integer,@emph{integer}} indicating
the maximum level to be printed. An
@uref{glo_o.html#object,@emph{object}} to be printed is at level 0; its
components (as of a @uref{glo_l.html#list,@emph{list}} or
@uref{glo_v.html#vector,@emph{vector}}) are at level 1; and so on. If an
@uref{glo_o.html#object,@emph{object}} to be recursively printed has
components and is at a level equal to or greater than the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-levelST,@strong{*print-level*}}, then the
@uref{glo_o.html#object,@emph{object}} is printed as ``#''.

@ref{#STprint-lengthST,@strong{*print-length*}} controls how many
elements at a given level are printed. If it is
@uref{glo_f.html#false,@emph{false}}, there is no limit to the number of
components printed. Otherwise, it is an
@uref{glo_i.html#integer,@emph{integer}} indicating the maximum number
of @uref{glo_e.html#element,@emph{elements}} of an
@uref{glo_o.html#object,@emph{object}} to be printed. If exceeded, the
printer will print ``...'' in place of the other
@uref{glo_e.html#element,@emph{elements}}. In the case of a
@uref{glo_d.html#dotted_list,@emph{dotted list}}, if the
@uref{glo_l.html#list,@emph{list}} contains exactly as many
@uref{glo_e.html#element,@emph{elements}} as the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-lengthST,@strong{*print-length*}}, the terminating
@uref{glo_a.html#atom,@emph{atom}} is printed rather than printing
``...''

@ref{#STprint-levelST,@strong{*print-level*}} and
@ref{#STprint-lengthST,@strong{*print-length*}} affect the printing of
an any @uref{glo_o.html#object,@emph{object}} printed with a list-like
syntax. They do not affect the printing of
@uref{glo_s.html#symbol,@emph{symbols}},
@uref{glo_s.html#string,@emph{strings}}, and
@uref{glo_b.html#bit_vector,@emph{bit vectors}}.

@strong{Examples:}

@verbatim
 (setq a '(1 (2 (3 (4 (5 (6))))))) =>  (1 (2 (3 (4 (5 (6))))))
 (dotimes (i 8) 
   (let ((*print-level* i)) 
     (format t "~&~D -- ~S~%" i a)))
>>  0 -- #
>>  1 -- (1 #)
>>  2 -- (1 (2 #))
>>  3 -- (1 (2 (3 #)))
>>  4 -- (1 (2 (3 (4 #))))
>>  5 -- (1 (2 (3 (4 (5 #)))))
>>  6 -- (1 (2 (3 (4 (5 (6))))))
>>  7 -- (1 (2 (3 (4 (5 (6))))))
=>  NIL

 (setq a '(1 2 3 4 5 6)) =>  (1 2 3 4 5 6)
 (dotimes (i 7) 
   (let ((*print-length* i)) 
     (format t "~&~D -- ~S~%" i a))) 
>>  0 -- (...)
>>  1 -- (1 ...)
>>  2 -- (1 2 ...)
>>  3 -- (1 2 3 ...)
>>  4 -- (1 2 3 4 ...)
>>  5 -- (1 2 3 4 5 6)
>>  6 -- (1 2 3 4 5 6)
=>  NIL

(dolist (level-length '((0 1) (1 1) (1 2) (1 3) (1 4) 
                        (2 1) (2 2) (2 3) (3 2) (3 3) (3 4)))
 (let ((*print-level*  (first  level-length))
       (*print-length* (second level-length)))
   (format t "~&~D ~D -- ~S~%"
           *print-level* *print-length* 
           '(if (member x y) (+ (car x) 3) '(foo . #(a b c d "Baz"))))))
>>  0 1 -- #
>>  1 1 -- (IF ...)
>>  1 2 -- (IF # ...)
>>  1 3 -- (IF # # ...)
>>  1 4 -- (IF # # #)
>>  2 1 -- (IF ...)
>>  2 2 -- (IF (MEMBER X ...) ...)
>>  2 3 -- (IF (MEMBER X Y) (+ # 3) ...)
>>  3 2 -- (IF (MEMBER X ...) ...)
>>  3 3 -- (IF (MEMBER X Y) (+ (CAR X) 3) ...)
>>  3 4 -- (IF (MEMBER X Y) (+ (CAR X) 3) '(FOO . #(A B C D ...)))
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-LINES*
@subsubsection CLHS: Variable *PRINT-LINES*
@anchor{#clhs-variable-print-lines}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-l_int-lengthst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-miser-widthst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-LINES*}

@strong{Value Type:}

a non-negative @uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

When the @uref{glo_v.html#value,@emph{value}} of
@ref{#STprint-linesST,@strong{*print-lines*}} is other than
@uref{any_nil.html#nil,@strong{nil}}, it is a limit on the number of
output lines produced when something is pretty printed. If an attempt is
made to go beyond that many lines, ``..'' is printed at the end of the
last line followed by all of the suffixes (closing delimiters) that are
pending to be printed.

@strong{Examples:}

@verbatim
 (let ((*print-right-margin* 25) (*print-lines* 3))
   (pprint '(progn (setq a 1 b 2 c 3 d 4))))
>>  (PROGN (SETQ A 1
>>               B 2
>>               C 3 ..))
=>  <no values>
@end verbatim

@strong{See Also:} None.

@strong{Notes:}

The ``..'' notation is intentionally different than the ``...'' notation
used for level abbreviation, so that the two different situations can be
visually distinguished.

This notation is used to increase the likelihood that the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} will signal an error if
an attempt is later made to read the abbreviated output. Note however
that if the truncation occurs in a
@uref{glo_s.html#string,@emph{string}}, as in "This string has been
trunc..", the problem situation cannot be detected later and no such
error will be signaled.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-MISER-WIDTH*
@subsubsection CLHS: Variable *PRINT-MISER-WIDTH*
@anchor{#clhs-variable-print-miser-width}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-linesst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-p_t-dispatchst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-MISER-WIDTH*}

@strong{Value Type:}

a non-negative @uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}

@strong{Description:}

If it is not @uref{any_nil.html#nil,@strong{nil}}, the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}} switches to a
compact style of output (called miser style) whenever the width
available for printing a substructure is less than or equal to this many
@uref{glo_e.html#em,@emph{ems}}.

@strong{Examples:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-PPRINT-DISPATCH*
@subsubsection CLHS: Variable *PRINT-PPRINT-DISPATCH*
@anchor{#clhs-variable-print-pprint-dispatch}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-miser-widthst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-prettyst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-PPRINT-DISPATCH*}

@strong{Value Type:}

a @uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but the initial entries all use a special class of priorities that have
the property that they are less than every priority that can be
specified using
@uref{fun_set-pprint-dispatch.html#set-pprint-dispatch,@strong{set-pprint-dispatch}},
so that the initial contents of any entry can be overridden.

@strong{Description:}

The @uref{glo_p.html#pprint_dispatch_table,@emph{pprint dispatch table}}
which currently controls the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}},
@uref{sec_22-2-1-4.html,Section 22.2.1.4 (Pretty Print Dispatch Tables)}

@strong{Notes:}

The intent is that the initial @uref{glo_v.html#value,@emph{value}} of
this @uref{glo_v.html#variable,@emph{variable}} should cause
`traditional' @emph{pretty printing} of
@uref{glo_c.html#code,@emph{code}}. In general, however, you can put a
value in
@ref{#STprint-pprint-dispatchST,@strong{*print-pprint-dispatch*}} that
makes pretty-printed output look exactly like non-pretty-printed output.
Setting
@uref{var_stprint-prettyst.html#STprint-prettyST,@strong{*print-pretty*}}
to @uref{glo_t.html#true,@emph{true}} just causes the functions
contained in the
@uref{glo_c.html#current_pprint_dispatch_table,@emph{current pprint
dispatch table}} to have priority over normal
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
methods; it has no magic way of enforcing that those functions actually
produce pretty output. For details, see @uref{sec_22-2-1-4.html,Section
22.2.1.4 (Pretty Print Dispatch Tables)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss180.html,GENERALIZE-PRETTY-PRINTER:UNIFY}
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-PRETTY*
@subsubsection CLHS: Variable *PRINT-PRETTY*
@anchor{#clhs-variable-print-pretty}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-p_t-dispatchst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-readablyst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-PRETTY*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

Controls whether the @uref{glo_l.html#lisp_printer,@emph{Lisp printer}}
calls the @uref{glo_p.html#pretty_printer,@emph{pretty printer}}.

If it is @uref{glo_f.html#false,@emph{false}}, the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}} is not used and a
minimum of @uref{glo_w.html#whitespace,@emph{whitespace}}[1] is output
when printing an expression.

If it is @uref{glo_t.html#true,@emph{true}}, the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}} is used, and the
@uref{glo_l.html#lisp_printer,@emph{Lisp printer}} will endeavor to
insert extra @uref{glo_w.html#whitespace,@emph{whitespace}}[1] where
appropriate to make @uref{glo_e.html#expression,@emph{expressions}} more
readable.

@ref{#STprint-prettyST,@strong{*print-pretty*}} has an effect even when
the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (setq *print-pretty* 'nil) =>  NIL
 (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil)
>>  (LET ((A 1) (B 2) (C 3)) (+ A B C))
=>  NIL
 (let ((*print-pretty* t))
   (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil))
>>  (LET ((A 1)
>>        (B 2)
>>        (C 3))
>>    (+ A B C))
=>  NIL
;; Note that the first two expressions printed by this next form
;; differ from the second two only in whether escape characters are printed.
;; In all four cases, extra whitespace is inserted by the pretty printer.
 (flet ((test (x)
          (let ((*print-pretty* t))
            (print x)
            (format t "~%~S " x)
            (terpri) (princ x) (princ " ")
            (format t "~%~A " x))))
  (test '#'(lambda () (list "a" #'c #'d))))
>>  #'(LAMBDA ()
>>      (LIST "a" #'C #'D))
>>  #'(LAMBDA ()
>>      (LIST "a" #'C #'D))
>>  #'(LAMBDA ()
>>      (LIST a b 'C #'D)) 
>>  #'(LAMBDA ()
>>      (LIST a b 'C #'D))
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss169.html,FORMAT-PRETTY-PRINT:YES}
@item
@uref{../Issues/iss277.html,PRINTER-WHITESPACE:JUST-ONE-SPACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-READABLY*
@subsubsection CLHS: Variable *PRINT-READABLY*
@anchor{#clhs-variable-print-readably}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-prettyst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stprint-right-marginst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-READABLY*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

If @ref{#STprint-readablyST,@strong{*print-readably*}} is
@uref{glo_t.html#true,@emph{true}}, some special rules for printing
@uref{glo_o.html#object,@emph{objects}} go into effect. Specifically,
printing any @uref{glo_o.html#object,@emph{object}} O1 produces a
printed representation that, when seen by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} while the
@uref{glo_s.html#standard_readtable,@emph{standard readtable}} is in
effect, will produce an @uref{glo_o.html#object,@emph{object}} O2 that
is @uref{glo_s.html#similar,@emph{similar}} to O1. The printed
representation produced might or might not be the same as the printed
representation produced when
@ref{#STprint-readablyST,@strong{*print-readably*}} is
@uref{glo_f.html#false,@emph{false}}. If printing an
@uref{glo_o.html#object,@emph{object}}
@uref{glo_r.html#readably,@emph{readably}} is not possible, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}}
is signaled rather than using a syntax (e.g., the ``#<'' syntax) that
would not be readable by the same
@uref{glo_i.html#implementation,@emph{implementation}}. If the
@uref{glo_v.html#value,@emph{value}} of some other
@uref{glo_p.html#printer_control_variable,@emph{printer control
variable}} is such that these requirements would be violated, the
@uref{glo_v.html#value,@emph{value}} of that other
@uref{glo_v.html#variable,@emph{variable}} is ignored.

Specifically, if @ref{#STprint-readablyST,@strong{*print-readably*}} is
@uref{glo_t.html#true,@emph{true}}, printing proceeds as if
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{var_stprint-arrayst.html#STprint-arrayST,@strong{*print-array*}},
and
@uref{var_stprint-gensymst.html#STprint-gensymST,@strong{*print-gensym*}}
were also @uref{glo_t.html#true,@emph{true}}, and as if
@uref{var_stprint-l_int-lengthst.html#STprint-lengthST,@strong{*print-length*}},
@uref{var_stprint-l_int-lengthst.html#STprint-levelST,@strong{*print-level*}},
and
@uref{var_stprint-linesst.html#STprint-linesST,@strong{*print-lines*}}
were @uref{glo_f.html#false,@emph{false}}.

If @ref{#STprint-readablyST,@strong{*print-readably*}} is
@uref{glo_f.html#false,@emph{false}}, the normal rules for printing and
the normal interpretations of other
@uref{glo_p.html#printer_control_variable,@emph{printer control
variables}} are in effect.

Individual @uref{glo_m.html#method,@emph{methods}} for
@uref{stagenfun_print-object.html#print-object,@strong{print-object}},
including user-defined @uref{glo_m.html#method,@emph{methods}}, are
responsible for implementing these requirements.

If @uref{var_stread-evalst.html#STread-evalST,@strong{*read-eval*}} is
@uref{glo_f.html#false,@emph{false}} and
@ref{#STprint-readablyST,@strong{*print-readably*}} is
@uref{glo_t.html#true,@emph{true}}, any such method that would output a
reference to the ``#.'' @uref{glo_r.html#reader_macro,@emph{reader
macro}} will either output something else or will signal an error (as
described above).

@strong{Examples:}

@verbatim
 (let ((x (list "a" '\a (gensym) '((a (b (c))) d e f g)))
       (*print-escape* nil)
       (*print-gensym* nil)
       (*print-level* 3)
       (*print-length* 3))
   (write x)
   (let ((*print-readably* t))
     (terpri)
     (write x)
     :done))
>>  (a a G4581 ((A #) D E ...))
>>  ("a" |a| #:G4581 ((A (B (C))) D E F G))
=>  :DONE

;; This is setup code is shared between the examples
;; of three hypothetical implementations which follow.
 (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32005763> 
 (setf (gethash table 1) 'one) =>  ONE
 (setf (gethash table 2) 'two) =>  TWO

;; Implementation A
 (let ((*print-readably* t)) (print table))
 Error: Can't print #<HASH-TABLE EQL 0/120 32005763> readably.

;; Implementation B
;; No standardized #S notation for hash tables is defined, 
;; but there might be an implementation-defined notation.
 (let ((*print-readably* t)) (print table))
>>  #S(HASH-TABLE :TEST EQL :SIZE 120 :CONTENTS (1 ONE 2 TWO))
=>  #<HASH-TABLE EQL 0/120 32005763>

;; Implementation C
;; Note that #. notation can only be used if *READ-EVAL* is true.
;; If *READ-EVAL* were false, this same implementation might have to
;; signal an error unless it had yet another printing strategy to fall
;; back on.
 (let ((*print-readably* t)) (print table))
>>  #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))
>>      (SETF (GETHASH 1 HASH-TABLE) ONE)
>>      (SETF (GETHASH 2 HASH-TABLE) TWO)
>>      HASH-TABLE)
=>  #<HASH-TABLE EQL 0/120 32005763>
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_writecm_p_rintcm_princ.html#write,@strong{write}},
@uref{mac_print-unr_dable-object.html#print-unreadable-object,@strong{print-unreadable-object}}

@strong{Notes:}

The rules for ``@uref{glo_s.html#similarity,@emph{similarity}}'' imply
that #A or #( syntax cannot be used for
@uref{glo_a.html#array,@emph{arrays}} of
@uref{glo_e.html#element_type,@emph{element type}} other than
@uref{syscla_t.html#t,@strong{t}}. An implementation will have to use
another syntax or signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss276.html,PRINT-READABLY-BEHAVIOR:CLARIFY}
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *PRINT-RIGHT-MARGIN*
@subsubsection CLHS: Variable *PRINT-RIGHT-MARGIN*
@anchor{#clhs-variable-print-right-margin}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stprint-readablyst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_printer_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_print-not-readable.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*PRINT-RIGHT-MARGIN*}

@strong{Value Type:}

a non-negative @uref{glo_i.html#integer,@emph{integer}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

If it is @uref{glo_n.html#non-nil,@emph{non-nil}}, it specifies the
right margin (as @uref{glo_i.html#integer,@emph{integer}} number of
@uref{glo_e.html#em,@emph{ems}}) to use when the
@uref{glo_p.html#pretty_printer,@emph{pretty printer}} is making layout
decisions.

If it is @uref{any_nil.html#nil,@strong{nil}}, the right margin is taken
to be the maximum line length such that output can be displayed without
wraparound or truncation. If this cannot be determined, an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
value is used.

@strong{Examples:} None.

@strong{See Also:} None.

@strong{Notes:}

This measure is in units of @uref{glo_e.html#em,@emph{ems}} in order to
be compatible with
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
variable-width fonts while still not requiring the language to provide
support for fonts.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss270.html,PRETTY-PRINT-INTERFACE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 23
@section CLHS: Chapter 23
@anchor{#clhs-chapter-23}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_format.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_23-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
23. Reader

@uref{sec_23-1.html,}

23.1 Reader Concepts

@uref{sec_the_reader_dictionary.html,}

23.2 The Reader Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Reader Dictionary::
@end menu

@node CLHS Section The Reader Dictionary
@subsection CLHS: Section The Reader Dictionary
@anchor{#clhs-section-the-reader-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_23-1-3-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-23.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_readtable.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
23.2 The Reader Dictionary

@uref{syscla_readtable.html,@emph{System Class} @strong{READTABLE}}

@uref{fun_copy-readtable.html,@emph{Function} @strong{COPY-READTABLE}}

@uref{fun_make-disp_ro-character.html,@emph{Function}
@strong{MAKE-DISPATCH-MACRO-CHARACTER}}

@uref{fun_readcm_re_g-whitespace.html,@emph{Function} @strong{READ,
READ-PRESERVING-WHITESPACE}}

@uref{fun_read-delimited-list.html,@emph{Function}
@strong{READ-DELIMITED-LIST}}

@uref{fun_read-from-string.html,@emph{Function}
@strong{READ-FROM-STRING}}

@uref{acc_readtable-case.html,@emph{Accessor} @strong{READTABLE-CASE}}

@uref{fun_readtablep.html,@emph{Function} @strong{READTABLEP}}

@uref{fun_set-dispa_ro-character.html,@emph{Function}
@strong{SET-DISPATCH-MACRO-CHARACTER, GET-DISPATCH-MACRO-CHARACTER}}

@uref{fun_set-macro_ro-character.html,@emph{Function}
@strong{SET-MACRO-CHARACTER, GET-MACRO-CHARACTER}}

@uref{fun_set-syntax-from-char.html,@emph{Function}
@strong{SET-SYNTAX-FROM-CHAR}}

@uref{mac_with-stan_rd-io-syntax.html,@emph{Macro}
@strong{WITH-STANDARD-IO-SYNTAX}}

@uref{var_stread-basest.html,@emph{Variable} @strong{*READ-BASE*}}

@uref{var_stread-de_oat-formatst.html,@emph{Variable}
@strong{*READ-DEFAULT-FLOAT-FORMAT*}}

@uref{var_stread-evalst.html,@emph{Variable} @strong{*READ-EVAL*}}

@uref{var_stread-suppressst.html,@emph{Variable}
@strong{*READ-SUPPRESS*}}

@uref{var_streadtablest.html,@emph{Variable} @strong{*READTABLE*}}

@uref{contyp_reader-error.html,@emph{Condition Type}
@strong{READER-ERROR}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor READTABLE-CASE::
* CLHS Condition Type READER-ERROR::
* CLHS Function COPY-READTABLE::
* CLHS Function MAKE-DISPATCH-MACRO-CHARACTER::
* CLHS Function READ-DELIMITED-LIST::
* CLHS Function READ-FROM-STRING::
* CLHS Function READ READ-PRESERVING-WHITESPACE::
* CLHS Function READTABLEP::
* CLHS Function SET-DISPATCH-MACRO-CHARACTER::
* CLHS Function SET-MACRO-CHARACTER GET-MACRO-CHARACTER::
* CLHS Function SET-SYNTAX-FROM-CHAR::
* CLHS Macro WITH-STANDARD-IO-SYNTAX::
* CLHS Variable *READ-BASE*::
* CLHS Variable *READ-DEFAULT-FLOAT-FORMAT*::
* CLHS Variable *READ-EVAL*::
* CLHS Variable *READ-SUPPRESS*::
* CLHS Variable *READTABLE*::
@end menu

@node CLHS Accessor READTABLE-CASE
@subsubsection CLHS: Accessor READTABLE-CASE
@anchor{#clhs-accessor-readtable-case}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-from-string.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_readtablep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{READTABLE-CASE}

@strong{Syntax:}

@strong{readtable-case} @emph{readtable} => @emph{mode}

(setf (@strong{readtable-case} @emph{readtable}) @emph{mode})

@strong{Arguments and Values:}

@emph{readtable}---a @uref{glo_r.html#readtable,@emph{readtable}}.

@emph{mode}---a @uref{glo_c.html#case_sensitivity_mode,@emph{case
sensitivity mode}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_r.html#readtable_case,@emph{readtable case}} of
@emph{readtable}, which affects the way in which the
@uref{glo_l.html#lisp_reader,@emph{Lisp Reader}} reads
@uref{glo_s.html#symbol,@emph{symbols}} and the way in which the
@uref{glo_l.html#lisp_printer,@emph{Lisp Printer}} writes
@uref{glo_s.html#symbol,@emph{symbols}}.

@strong{Examples:}

See @uref{sec_23-1-2-1.html,Section 23.1.2.1 (Examples of Effect of
Readtable Case on the Lisp Reader)} and
@uref{sec_22-1-3-3-2-1.html,Section 22.1.3.3.2.1 (Examples of Effect of
Readtable Case on the Lisp Printer)}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{readtable} is not a @uref{glo_r.html#readtable,@emph{readtable}}.
Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{mode} is not a @uref{glo_c.html#case_sensitivity_mode,@emph{case
sensitivity mode}}.

@strong{See Also:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}},
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}},
@uref{sec_2-2.html,Section 2.2 (Reader Algorithm)},
@uref{sec_23-1-2.html,Section 23.1.2 (Effect of Readtable Case on the
Lisp Reader)}, @uref{sec_22-1-3-3-2.html,Section 22.1.3.3.2 (Effect of
Readtable Case on the Lisp Printer)}

@strong{Notes:}

@uref{fun_copy-readtable.html#copy-readtable,@strong{copy-readtable}}
copies the @uref{glo_r.html#readtable_case,@emph{readtable case}} of the
@emph{readtable}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss286.html,READ-CASE-SENSITIVITY:READTABLE-KEYWORDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type READER-ERROR
@subsubsection CLHS: Condition Type READER-ERROR
@anchor{#clhs-condition-type-reader-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_streadtablest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-24.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{READER-ERROR}

@strong{Class Precedence List:}

@ref{#reader-error,@strong{reader-error}},
@uref{contyp_parse-error.html#parse-error,@strong{parse-error}},
@uref{contyp_stream-error.html#stream-error,@strong{stream-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#reader-error,@strong{reader-error}} consists of error conditions
that are related to tokenization and parsing done by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{fun_stream-error-stream.html#stream-error-stream,@strong{stream-error-stream}},
@uref{sec_23-1.html,Section 23.1 (Reader Concepts)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss255.html,PARSE-ERROR-STREAM:SPLIT-TYPES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COPY-READTABLE
@subsubsection CLHS: Function COPY-READTABLE
@anchor{#clhs-function-copy-readtable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_readtable.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-disp_ro-character.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COPY-READTABLE}

@strong{Syntax:}

@strong{copy-readtable} @emph{&optional from-readtable to-readtable} =>
@emph{readtable}

@strong{Arguments and Values:}

@emph{from-readtable}---a
@uref{glo_r.html#readtable_designator,@emph{readtable designator}}. The
default is the @uref{glo_c.html#current_readtable,@emph{current
readtable}}.

@emph{to-readtable}---a @uref{glo_r.html#readtable,@emph{readtable}} or
@uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{readtable}---the @emph{to-readtable} if it is
@uref{glo_n.html#non-nil,@emph{non-nil}}, or else a
@uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_r.html#readtable,@emph{readtable}}.

@strong{Description:}

@ref{#copy-readtable,@strong{copy-readtable}} copies
@emph{from-readtable}.

If @emph{to-readtable} is @uref{any_nil.html#nil,@strong{nil}}, a new
@uref{glo_r.html#readtable,@emph{readtable}} is created and returned.
Otherwise the @uref{glo_r.html#readtable,@emph{readtable}} specified by
@emph{to-readtable} is modified and returned.

@ref{#copy-readtable,@strong{copy-readtable}} copies the setting of
@uref{acc_readtable-case.html#readtable-case,@strong{readtable-case}}.

@strong{Examples:}

@verbatim
 (setq zvar 123) =>  123
 (set-syntax-from-char #\z #\' (setq table2 (copy-readtable))) =>  T
 zvar =>  123
 (copy-readtable table2 *readtable*) =>  #<READTABLE 614000277>
 zvar =>  VAR
 (setq *readtable* (copy-readtable)) =>  #<READTABLE 46210223>
 zvar =>  VAR
 (setq *readtable* (copy-readtable nil)) =>  #<READTABLE 46302670>
 zvar =>  123
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{syscla_readtable.html#readtable,@strong{readtable}},
@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}}

@strong{Notes:}

@verbatim
(setq *readtable* (copy-readtable nil))
@end verbatim

restores the input syntax to standard Common Lisp syntax, even if the
@uref{glo_i.html#initial_readtable,@emph{initial readtable}} has been
clobbered (assuming it is not so badly clobbered that you cannot type in
the above expression).

On the other hand,

@verbatim
(setq *readtable* (copy-readtable))
@end verbatim

replaces the current @uref{glo_r.html#readtable,@emph{readtable}} with a
copy of itself. This is useful if you want to save a copy of a readtable
for later use, protected from alteration in the meantime. It is also
useful if you want to locally bind the readtable to a copy of itself, as
in:

@verbatim
(let ((*readtable* (copy-readtable))) ...)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss286.html,READ-CASE-SENSITIVITY:READTABLE-KEYWORDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-DISPATCH-MACRO-CHARACTER
@subsubsection CLHS: Function MAKE-DISPATCH-MACRO-CHARACTER
@anchor{#clhs-function-make-dispatch-macro-character}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-readtable.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_readcm_re_g-whitespace.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-DISPATCH-MACRO-CHARACTER}

@strong{Syntax:}

@strong{make-dispatch-macro-character} @emph{char &optional
non-terminating-p readtable} => @emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{non-terminating-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{readtable}---a @uref{glo_r.html#readtable,@emph{readtable}}. The
default is the @uref{glo_c.html#current_readtable,@emph{current
readtable}}.

@strong{Description:}

@ref{#make-dispatch-macro-character,@strong{make-dispatch-macro-character}}
makes @emph{char} be a
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} in @emph{readtable}.

Initially, every @uref{glo_c.html#character,@emph{character}} in the
dispatch table associated with the @emph{char} has an associated
function that signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}}.

If @emph{non-terminating-p} is @uref{glo_t.html#true,@emph{true}}, the
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} is made a
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}; if
@emph{non-terminating-p} is @uref{glo_f.html#false,@emph{false}}, the
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} is made a @uref{glo_t.html#terminating,@emph{terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}.

@strong{Examples:}

@verbatim
 (get-macro-character #\{) =>  NIL, false
 (make-dispatch-macro-character #\{) =>  T
 (not (get-macro-character #\{)) =>  false
@end verbatim

@strong{Side Effects:} None.

The @emph{readtable} is altered.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}},
@uref{fun_set-dispa_ro-character.html#set-dispatch-macro-character,@strong{set-dispatch-macro-character}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-DELIMITED-LIST
@subsubsection CLHS: Function READ-DELIMITED-LIST
@anchor{#clhs-function-read-delimited-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_readcm_re_g-whitespace.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-from-string.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-DELIMITED-LIST}

@strong{Syntax:}

@strong{read-delimited-list} @emph{char &optional input-stream
recursive-p} => @emph{list}

@strong{Arguments and Values:}

@emph{char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_input,@emph{standard input}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{list}---a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_o.html#object,@emph{objects}} read.

@strong{Description:}

@ref{#read-delimited-list,@strong{read-delimited-list}} reads
@uref{glo_o.html#object,@emph{objects}} from @emph{input-stream} until
the next character after an @uref{glo_o.html#object,@emph{object}}'s
representation (ignoring
@uref{glo_w.html#whitespace,@emph{whitespace}}[2] characters and
comments) is @emph{char}.

@ref{#read-delimited-list,@strong{read-delimited-list}} looks ahead at
each step for the next
non-@uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}} and peeks at it as if with
@uref{fun_peek-char.html#peek-char,@strong{peek-char}}. If it is
@emph{char}, then the @uref{glo_c.html#character,@emph{character}} is
consumed and the @uref{glo_l.html#list,@emph{list}} of
@uref{glo_o.html#object,@emph{objects}} is returned. If it is a
@uref{glo_c.html#constituent,@emph{constituent}} or
@uref{glo_e.html#escape,@emph{escape}}
@uref{glo_c.html#character,@emph{character}}, then
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} is used to
read an @uref{glo_o.html#object,@emph{object}}, which is added to the
end of the @uref{glo_l.html#list,@emph{list}}. If it is a
@uref{glo_m.html#macro_character,@emph{macro character}}, its
@uref{glo_r.html#reader_macro_function,@emph{reader macro function}} is
called; if the function returns a @uref{glo_v.html#value,@emph{value}},
that @uref{glo_v.html#value,@emph{value}} is added to the
@uref{glo_l.html#list,@emph{list}}. The peek-ahead process is then
repeated.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, this call
is expected to be embedded in a higher-level call to
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} or a similar
function.

It is an error to reach end-of-file during the operation of
@ref{#read-delimited-list,@strong{read-delimited-list}}.

The consequences are undefined if @emph{char} has a
@uref{glo_s.html#syntax_type,@emph{syntax type}} of
@uref{glo_w.html#whitespace,@emph{whitespace}}[2] in the
@uref{glo_c.html#current_readtable,@emph{current readtable}}.

@strong{Examples:}

@verbatim
 (read-delimited-list #\]) 1 2 3 4 5 6 ]
=>  (1 2 3 4 5 6)
@end verbatim

Suppose you wanted #@{@emph{a} @emph{b} @emph{c} ... @emph{z}@} to read
as a list of all pairs of the elements @emph{a}, @emph{b}, @emph{c},
..., @emph{z}, for example.

@verbatim
 #{p q z a}  reads as  ((p q) (p z) (p a) (q z) (q a) (z a))
@end verbatim

This can be done by specifying a macro-character definition for #@{ that
does two things: reads in all the items up to the @}, and constructs the
pairs. @ref{#read-delimited-list,@strong{read-delimited-list}} performs
the first task.

@verbatim
 (defun |#{-reader| (stream char arg)
   (declare (ignore char arg))
   (mapcon #'(lambda (x)
              (mapcar #'(lambda (y) (list (car x) y)) (cdr x)))
          (read-delimited-list #\} stream t))) =>  |#{-reader|

 (set-dispatch-macro-character #\# #\{ #'|#{-reader|) =>  T 
 (set-macro-character #\} (get-macro-character #\) nil))
@end verbatim

Note that @uref{glo_t.html#true,@emph{true}} is supplied for the
@emph{recursive-p} argument.

It is necessary here to give a definition to the character @} as well to
prevent it from being a constituent. If the line

@verbatim
 (set-macro-character #\} (get-macro-character #\) nil))
@end verbatim

shown above were not included, then the @} in

@verbatim
 #{ p q z a}
@end verbatim

would be considered a constituent character, part of the symbol named
a@}. This could be corrected by putting a space before the @}, but it is
better to call
@uref{fun_set-macro_ro-character.html#set-macro-character,@strong{set-macro-character}}.

Giving @} the same definition as the standard definition of the
character ) has the twin benefit of making it terminate tokens for use
with @ref{#read-delimited-list,@strong{read-delimited-list}} and also
making it invalid for use in any other context. Attempting to read a
stray @} will signal an error.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{fun_peek-char.html#peek-char,@strong{peek-char}},
@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{fun_unread-char.html#unread-char,@strong{unread-char}}.

@strong{Notes:}

@ref{#read-delimited-list,@strong{read-delimited-list}} is intended for
use in implementing @uref{glo_r.html#reader_macro,@emph{reader macros}}.
Usually it is desirable for @emph{char} to be a
@uref{glo_t.html#terminating,@emph{terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}} so that it can
be used to delimit tokens; however,
@ref{#read-delimited-list,@strong{read-delimited-list}} makes no attempt
to alter the syntax specified for @emph{char} by the current readtable.
The caller must make any necessary changes to the readtable syntax
explicitly.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ-FROM-STRING
@subsubsection CLHS: Function READ-FROM-STRING
@anchor{#clhs-function-read-from-string}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_read-delimited-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_readtable-case.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ-FROM-STRING}

@strong{Syntax:}

@strong{read-from-string} @emph{string &optional eof-error-p eof-value
&key start end preserve-whitespace}

=> @emph{object, position}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string,@emph{string}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{start},
@emph{end}---@uref{glo_b.html#bounding_index_designator,@emph{bounding
index designators}} of @emph{string}. The defaults for @emph{start} and
@emph{end} are 0 and @uref{any_nil.html#nil,@strong{nil}}, respectively.

@emph{preserve-whitespace}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}} (parsed by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}) or the
@emph{eof-value}.

@emph{position}---an @uref{glo_i.html#integer,@emph{integer}} greater
than or equal to zero, and less than or equal to one more than the
@uref{glo_l.html#length,@emph{length}} of the @emph{string}.

@strong{Description:}

Parses the printed representation of an
@uref{glo_o.html#object,@emph{object}} from the subsequence of
@emph{string} @uref{glo_b.html#bounded,@emph{bounded}} by @emph{start}
and @emph{end}, as if
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} had been
called on an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream,@emph{stream}} containing those same
@uref{glo_c.html#character,@emph{characters}}.

If @emph{preserve-whitespace} is @uref{glo_t.html#true,@emph{true}}, the
operation will preserve
@uref{glo_w.html#whitespace,@emph{whitespace}}[2] as
@uref{fun_readcm_re_g-whitespace.html#read-preserving-whitespace,@strong{read-preserving-whitespace}}
would do.

If an @uref{glo_o.html#object,@emph{object}} is successfully parsed, the
@uref{glo_p.html#primary_value,@emph{primary value}}, @emph{object}, is
the @uref{glo_o.html#object,@emph{object}} that was parsed. If
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}} and if the
end of the @emph{substring} is reached, @emph{eof-value} is returned.

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{position}, is the index of the first
@uref{glo_c.html#character,@emph{character}} in the
@uref{glo_b.html#bounded,@emph{bounded}} @emph{string} that was not
read. The @emph{position} may depend upon the value of
@emph{preserve-whitespace}. If the entire @emph{string} was read, the
@emph{position} returned is either the @emph{length} of the
@emph{string} or one greater than the @emph{length} of the
@emph{string}.

@strong{Examples:}

@verbatim
 (read-from-string " 1 3 5" t nil :start 2) =>  3, 5
 (read-from-string "(a b c)") =>  (A B C), 7
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If the end of the supplied substring occurs before an
@uref{glo_o.html#object,@emph{object}} can be read, an error is signaled
if @emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}}. An error is
signaled if the end of the @emph{substring} occurs in the middle of an
incomplete @uref{glo_o.html#object,@emph{object}}.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{fun_readcm_re_g-whitespace.html#read-preserving-whitespace,@strong{read-preserving-whitespace}}

@strong{Notes:}

The reason that @emph{position} is allowed to be beyond the
@uref{glo_l.html#length,@emph{length}} of the @emph{string} is to permit
(but not require) the
@uref{glo_i.html#implementation,@emph{implementation}} to work by
simulating the effect of a trailing delimiter at the end of the
@uref{glo_b.html#bounded,@emph{bounded}} @emph{string}. When
@emph{preserve-whitespace} is @uref{glo_t.html#true,@emph{true}}, the
@emph{position} might count the simulated delimiter.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss284.html,RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL}
@item
@uref{../Issues/iss332.html,SUBSEQ-OUT-OF-BOUNDS}
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READ READ-PRESERVING-WHITESPACE
@subsubsection CLHS: Function READ, READ-PRESERVING-WHITESPACE
@anchor{#clhs-function-read-read-preserving-whitespace}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-disp_ro-character.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_read-delimited-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READ, READ-PRESERVING-WHITESPACE}

@strong{Syntax:}

@strong{read} @emph{&optional input-stream eof-error-p eof-value
recursive-p} => @emph{object}

@strong{read-preserving-whitespace} @emph{&optional input-stream
eof-error-p eof-value recursive-p}

=> @emph{object}

@strong{Arguments and Values:}

@emph{input-stream}---an @uref{glo_i.html#input,@emph{input}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}.

@emph{eof-error-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{eof-value}---an @uref{glo_o.html#object,@emph{object}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{recursive-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}} (parsed by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}) or the
@emph{eof-value}.

@strong{Description:}

@ref{#read,@strong{read}} parses the printed representation of an
@uref{glo_o.html#object,@emph{object}} from @emph{input-stream} and
builds such an @uref{glo_o.html#object,@emph{object}}.

@ref{#read-preserving-whitespace,@strong{read-preserving-whitespace}} is
like @ref{#read,@strong{read}} but preserves any
@uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}} that delimits the printed
representation of the @uref{glo_o.html#object,@emph{object}}.
@ref{#read-preserving-whitespace,@strong{read-preserving-whitespace}} is
exactly like @ref{#read,@strong{read}} when the @emph{recursive-p}
@uref{glo_a.html#argument,@emph{argument}} to
@ref{#read-preserving-whitespace,@strong{read-preserving-whitespace}} is
@uref{glo_t.html#true,@emph{true}}.

When
@uref{var_stread-suppressst.html#STread-suppressST,@strong{*read-suppress*}}
is @uref{glo_f.html#false,@emph{false}}, @ref{#read,@strong{read}}
throws away the delimiting @uref{glo_c.html#character,@emph{character}}
required by certain printed representations if it is a
@uref{glo_w.html#whitespace,@emph{whitespace}}[2]
@uref{glo_c.html#character,@emph{character}}; but
@ref{#read,@strong{read}} preserves the character (using
@uref{fun_unread-char.html#unread-char,@strong{unread-char}}) if it is
syntactically meaningful, because it could be the start of the next
expression.

If a file ends in a @uref{glo_s.html#symbol,@emph{symbol}} or a
@uref{glo_n.html#number,@emph{number}} immediately followed by an
@uref{glo_e.html#end_of_file,@emph{end of file}}[1],
@ref{#read,@strong{read}} reads the
@uref{glo_s.html#symbol,@emph{symbol}} or
@uref{glo_n.html#number,@emph{number}} successfully; when called again,
it sees the @uref{glo_e.html#end_of_file,@emph{end of file}}[1] and only
then acts according to @emph{eof-error-p}. If a file contains ignorable
text at the end, such as blank lines and comments,
@ref{#read,@strong{read}} does not consider it to end in the middle of
an @uref{glo_o.html#object,@emph{object}}.

If @emph{recursive-p} is @uref{glo_t.html#true,@emph{true}}, the call to
@ref{#read,@strong{read}} is expected to be made from within some
function that itself has been called from @ref{#read,@strong{read}} or
from a similar input function, rather than from the top level.

Both functions return the @uref{glo_o.html#object,@emph{object}} read
from @emph{input-stream}. @emph{Eof-value} is returned if
@emph{eof-error-p} is @uref{glo_f.html#false,@emph{false}} and end of
file is reached before the beginning of an
@uref{glo_o.html#object,@emph{object}}.

@strong{Examples:}

@verbatim
 (read)
>>  'a
=>  (QUOTE A)
 (with-input-from-string (is " ") (read is nil 'the-end)) =>  THE-END
 (defun skip-then-read-char (s c n)
    (if (char= c #\{) (read s t nil t) (read-preserving-whitespace s))
    (read-char-no-hang s)) =>  SKIP-THEN-READ-CHAR
 (let ((*readtable* (copy-readtable nil)))
    (set-dispatch-macro-character #\# #\{ #'skip-then-read-char)
    (set-dispatch-macro-character #\# #\} #'skip-then-read-char)
    (with-input-from-string (is "#{123 x #}123 y")
      (format t "~S ~S" (read is) (read is)))) =>  #\x, #\Space, NIL
@end verbatim

As an example, consider this @uref{glo_r.html#reader_macro,@emph{reader
macro}} definition:

@verbatim
 (defun slash-reader (stream char)
   (declare (ignore char))
   `(path . ,(loop for dir = (read-preserving-whitespace stream t nil t)
                   then (progn (read-char stream t nil t)
                               (read-preserving-whitespace stream t nil t))
                   collect dir
                   while (eql (peek-char nil stream nil nil t) #\/))))
 (set-macro-character #\/ #'slash-reader)
@end verbatim

Consider now calling @ref{#read,@strong{read}} on this expression:

@verbatim
 (zyedh /usr/games/zork /usr/games/boggle)
@end verbatim

The / macro reads objects separated by more / characters; thus
/usr/games/zork is intended to read as (path usr games zork). The entire
example expression should therefore be read as

@verbatim
 (zyedh (path usr games zork) (path usr games boggle))
@end verbatim

However, if @ref{#read,@strong{read}} had been used instead of
@ref{#read-preserving-whitespace,@strong{read-preserving-whitespace}},
then after the reading of the symbol zork, the following space would be
discarded; the next call to
@uref{fun_peek-char.html#peek-char,@strong{peek-char}} would see the
following /, and the loop would continue, producing this interpretation:

@verbatim
 (zyedh (path usr games zork usr games boggle))
@end verbatim

There are times when @uref{glo_w.html#whitespace,@emph{whitespace}}[2]
should be discarded. If a command interpreter takes single-character
commands, but occasionally reads an
@uref{glo_o.html#object,@emph{object}} then if the
@uref{glo_w.html#whitespace,@emph{whitespace}}[2] after a
@uref{glo_s.html#symbol,@emph{symbol}} is not discarded it might be
interpreted as a command some time later after the
@uref{glo_s.html#symbol,@emph{symbol}} had been read.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}},
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}},
@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}},
@uref{var_stread-de_oat-formatst.html#STread-default-float-formatST,@strong{*read-default-float-format*}},
@uref{var_stread-basest.html#STread-baseST,@strong{*read-base*}},
@uref{var_stread-suppressst.html#STread-suppressST,@strong{*read-suppress*}},
@uref{var_stpackagest.html#STpackageST,@strong{*package*}},
@uref{var_stread-evalst.html#STread-evalST,@strong{*read-eval*}}.

@strong{Exceptional Situations:}

@ref{#read,@strong{read}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}},
regardless of @emph{eof-error-p}, if the file ends in the middle of an
@uref{glo_o.html#object,@emph{object}} representation. For example, if a
file does not contain enough right parentheses to balance the left
parentheses in it, @ref{#read,@strong{read}} signals an error. This is
detected when @ref{#read,@strong{read}} or
@ref{#read-preserving-whitespace,@strong{read-preserving-whitespace}} is
called with @emph{recursive-p} and @emph{eof-error-p}
@uref{glo_n.html#non-nil,@emph{non-nil}}, and end-of-file is reached
before the beginning of an @uref{glo_o.html#object,@emph{object}}.

If @emph{eof-error-p} is @uref{glo_t.html#true,@emph{true}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_end-of-file.html#end-of-file,@strong{end-of-file}} is
signaled at the end of file.

@strong{See Also:}

@uref{fun_peek-char.html#peek-char,@strong{peek-char}},
@uref{fun_read-char.html#read-char,@strong{read-char}},
@uref{fun_unread-char.html#unread-char,@strong{unread-char}},
@uref{fun_read-from-string.html#read-from-string,@strong{read-from-string}},
@uref{fun_read-delimited-list.html#read-delimited-list,@strong{read-delimited-list}},
@uref{fun_parse-integer.html#parse-integer,@strong{parse-integer}},
@uref{chap-2.html,Section 2 (Syntax)}, @uref{sec_23-1.html,Section 23.1
(Reader Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function READTABLEP
@subsubsection CLHS: Function READTABLEP
@anchor{#clhs-function-readtablep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_readtable-case.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-dispa_ro-character.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{READTABLEP}

@strong{Syntax:}

@strong{readtablep} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_readtable.html#readtable,@strong{readtable}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (readtablep *readtable*) =>  true
 (readtablep (copy-readtable)) =>  true
 (readtablep '*readtable*) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (readtablep object) ==  (typep object 'readtable) 
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-DISPATCH-MACRO-CHARACTER
@subsubsection CLHS: Function SET-DISPATCH-MACRO-CHARACTER...
@anchor{#clhs-function-set-dispatch-macro-character...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_readtablep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-macro_ro-character.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-DISPATCH-MACRO-CHARACTER,
GET-DISPATCH-MACRO-CHARACTER}

@strong{Syntax:}

@strong{get-dispatch-macro-character} @emph{disp-char sub-char &optional
readtable} => @emph{function}

@strong{set-dispatch-macro-character} @emph{disp-char sub-char
new-function &optional readtable} =>
@emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{disp-char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{sub-char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{readtable}---a
@uref{glo_r.html#readtable_designator,@emph{readtable designator}}. The
default is the @uref{glo_c.html#current_readtable,@emph{current
readtable}}.

@emph{function}---a @uref{glo_f.html#function_designator,@emph{function
designator}} or @uref{any_nil.html#nil,@strong{nil}}.

@emph{new-function}---a
@uref{glo_f.html#function_designator,@emph{function designator}}.

@strong{Description:}

@ref{#set-dispatch-macro-character,@strong{set-dispatch-macro-character}}
causes @emph{new-function} to be called when @emph{disp-char} followed
by @emph{sub-char} is read. If @emph{sub-char} is a lowercase letter, it
is converted to its uppercase equivalent. It is an error if
@emph{sub-char} is one of the ten decimal digits.

@ref{#set-dispatch-macro-character,@strong{set-dispatch-macro-character}}
installs a @emph{new-function} to be called when a particular
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} pair is read. @emph{New-function} is installed as the
dispatch function to be called when @emph{readtable} is in use and when
@emph{disp-char} is followed by @emph{sub-char}.

For more information about how the @emph{new-function} is invoked, see
@uref{sec_2-1-4-4.html,Section 2.1.4.4 (Macro Characters)}.

@ref{#get-dispatch-macro-character,@strong{get-dispatch-macro-character}}
retrieves the dispatch function associated with @emph{disp-char} and
@emph{sub-char} in @emph{readtable}.

@ref{#get-dispatch-macro-character,@strong{get-dispatch-macro-character}}
returns the macro-character function for @emph{sub-char} under
@emph{disp-char}, or @uref{any_nil.html#nil,@strong{nil}} if there is no
function associated with @emph{sub-char}. If @emph{sub-char} is a
decimal digit,
@ref{#get-dispatch-macro-character,@strong{get-dispatch-macro-character}}
returns @uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (get-dispatch-macro-character #\# #\{) =>  NIL
 (set-dispatch-macro-character #\# #\{        ;dispatch on #{
    #'(lambda(s c n)
        (let ((list (read s nil (values) t)))  ;list is object after #n{
          (when (consp list)                   ;return nth element of list
            (unless (and n (< 0 n (length list))) (setq n 0))
            (setq list (nth n list)))
         list))) =>  T
 #{(1 2 3 4) =>  1
 #3{(0 1 2 3) =>  3
 #{123 =>  123
@end verbatim

If it is desired that #$@emph{foo} : as if it were (dollars @emph{foo}).

@verbatim
(defun |#$-reader| (stream subchar arg)
   (declare (ignore subchar arg))
   (list 'dollars (read stream t nil t))) =>  |#$-reader|
 (set-dispatch-macro-character #\# #\$ #'|#$-reader|) =>  T
@end verbatim

@strong{See Also:}

@uref{sec_2-1-4-4.html,Section 2.1.4.4 (Macro Characters)}

@strong{Side Effects:}

The @emph{readtable} is modified.

@strong{Affected By:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}}.

@strong{Exceptional Situations:}

For either function, an error is signaled if @emph{disp-char} is not a
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}} in @emph{readtable}.

@strong{See Also:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}}

@strong{Notes:}

It is necessary to use
@uref{fun_make-disp_ro-character.html#make-dispatch-macro-character,@strong{make-dispatch-macro-character}}
to set up the dispatch character before specifying its sub-characters.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss184.html,GET-MACRO-CHARACTER-READTABLE:NIL-STANDARD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-MACRO-CHARACTER GET-MACRO-CHARACTER
@subsubsection CLHS: Function SET-MACRO-CHARACTER, GET-MACRO-CHARACTER
@anchor{#clhs-function-set-macro-character-get-macro-character}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-dispa_ro-character.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_set-syntax-from-char.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-MACRO-CHARACTER, GET-MACRO-CHARACTER}

@strong{Syntax:}

@strong{get-macro-character} @emph{char &optional readtable} =>
@emph{function, non-terminating-p}

@strong{set-macro-character} @emph{char new-function &optional
non-terminating-p readtable} => @emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{non-terminating-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_f.html#false,@emph{false}}.

@emph{readtable}---a
@uref{glo_r.html#readtable_designator,@emph{readtable designator}}. The
default is the @uref{glo_c.html#current_readtable,@emph{current
readtable}}.

@emph{function}---@uref{any_nil.html#nil,@strong{nil}}, or a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}}.

@emph{new-function}---a
@uref{glo_f.html#function_designator,@emph{function designator}}.

@strong{Description:}

@ref{#get-macro-character,@strong{get-macro-character}} returns as its
@uref{glo_p.html#primary_value,@emph{primary value}}, @emph{function},
the @uref{glo_r.html#reader_macro_function,@emph{reader macro function}}
associated with @emph{char} in @emph{readtable} (if any), or else
@uref{any_nil.html#nil,@strong{nil}} if @emph{char} is not a
@uref{glo_m.html#macro_character,@emph{macro character}} in
@emph{readtable}. The @uref{glo_s.html#secondary_value,@emph{secondary
value}}, @emph{non-terminating-p}, is @uref{glo_t.html#true,@emph{true}}
if @emph{char} is a
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}; otherwise, it
is @uref{glo_f.html#false,@emph{false}}.

@ref{#set-macro-character,@strong{set-macro-character}} causes
@emph{char} to be a @uref{glo_m.html#macro_character,@emph{macro
character}} associated with the
@uref{glo_r.html#reader_macro_function,@emph{reader macro function}}
@emph{new-function} (or the
@uref{glo_d.html#designator,@emph{designator}} for @emph{new-function})
in @emph{readtable}. If @emph{non-terminating-p} is
@uref{glo_t.html#true,@emph{true}}, @emph{char} becomes a
@uref{glo_n.html#non-terminating,@emph{non-terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}; otherwise it
becomes a @uref{glo_t.html#terminating,@emph{terminating}}
@uref{glo_m.html#macro_character,@emph{macro character}}.

@strong{Examples:}

@verbatim
 (get-macro-character #\{) =>  NIL, false
 (not (get-macro-character #\;)) =>  false
@end verbatim

The following is a possible definition for the
@uref{glo_s.html#single-quote,@emph{single-quote}}
@uref{glo_r.html#reader_macro,@emph{reader macro}} in
@uref{glo_s.html#standard_syntax,@emph{standard syntax}}:

@verbatim
 (defun single-quote-reader (stream char)
   (declare (ignore char))
   (list 'quote (read stream t nil t))) =>  SINGLE-QUOTE-READER
 (set-macro-character #\' #'single-quote-reader) =>  T
@end verbatim

Here single-quote-reader reads an @uref{glo_o.html#object,@emph{object}}
following the @uref{glo_s.html#single-quote,@emph{single-quote}} and
returns a @uref{glo_l.html#list,@emph{list}} of
@uref{speope_quote.html#quote,@strong{quote}} and that
@uref{glo_o.html#object,@emph{object}}. The @emph{char} argument is
ignored.

The following is a possible definition for the
@uref{glo_s.html#semicolon,@emph{semicolon}}
@uref{glo_r.html#reader_macro,@emph{reader macro}} in
@uref{glo_s.html#standard_syntax,@emph{standard syntax}}:

@verbatim
 (defun semicolon-reader (stream char)
   (declare (ignore char))
   ;; First swallow the rest of the current input line.
   ;; End-of-file is acceptable for terminating the comment.
   (do () ((char= (read-char stream nil #\Newline t) #\Newline)))
   ;; Return zero values.
   (values)) =>  SEMICOLON-READER
 (set-macro-character #\; #'semicolon-reader) =>  T
@end verbatim

@strong{Side Effects:}

The @emph{readtable} is modified.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss184.html,GET-MACRO-CHARACTER-READTABLE:NIL-STANDARD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SET-SYNTAX-FROM-CHAR
@subsubsection CLHS: Function SET-SYNTAX-FROM-CHAR
@anchor{#clhs-function-set-syntax-from-char}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-macro_ro-character.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-stan_rd-io-syntax.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SET-SYNTAX-FROM-CHAR}

@strong{Syntax:}

@strong{set-syntax-from-char} @emph{to-char from-char &optional
to-readtable from-readtable} => @emph{@uref{any_t.html#t,@strong{t}}}

@strong{Arguments and Values:}

@emph{to-char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{from-char}---a @uref{glo_c.html#character,@emph{character}}.

@emph{to-readtable}---a @uref{glo_r.html#readtable,@emph{readtable}}.
The default is the @uref{glo_c.html#current_readtable,@emph{current
readtable}}.

@emph{from-readtable}---a
@uref{glo_r.html#readtable_designator,@emph{readtable designator}}. The
default is the @uref{glo_s.html#standard_readtable,@emph{standard
readtable}}.

@strong{Description:}

@ref{#set-syntax-from-char,@strong{set-syntax-from-char}} makes the
syntax of @emph{to-char} in @emph{to-readtable} be the same as the
syntax of @emph{from-char} in @emph{from-readtable}.

@ref{#set-syntax-from-char,@strong{set-syntax-from-char}} copies the
@uref{glo_s.html#syntax_type,@emph{syntax types}} of @emph{from-char}.
If @emph{from-char} is a @uref{glo_m.html#macro_character,@emph{macro
character}}, its @uref{glo_r.html#reader_macro_function,@emph{reader
macro function}} is copied also. If the character is a
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
character}}, its entire dispatch table of
@uref{glo_r.html#reader_macro_function,@emph{reader macro functions}} is
copied. The @uref{glo_c.html#constituent_trait,@emph{constituent
traits}} of @emph{from-char} are not copied.

A macro definition from a character such as " can be copied to another
character; the standard definition for " looks for another character
that is the same as the character that invoked it. The definition of (
can not be meaningfully copied to @{, on the other hand. The result is
that @uref{glo_l.html#list,@emph{lists}} are of the form @{a b c), not
@{a b c@}, because the definition always looks for a closing
parenthesis, not a closing brace.

@strong{Examples:}

@verbatim
 (set-syntax-from-char #\7 #\;) =>  T
 123579 =>  1235
@end verbatim

@strong{Side Effects:}

The @emph{to-readtable} is modified.

@strong{Affected By:}

The existing values in the @emph{from-readtable}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_set-macro_ro-character.html#set-macro-character,@strong{set-macro-character}},
@uref{fun_make-disp_ro-character.html#make-dispatch-macro-character,@strong{make-dispatch-macro-character}},
@uref{sec_2-1-4.html,Section 2.1.4 (Character Syntax Types)}

@strong{Notes:}

The @uref{glo_c.html#constituent_trait,@emph{constituent traits}} of a
@uref{glo_c.html#character,@emph{character}} are ``hard wired'' into the
parser for extended @uref{glo_t.html#token,@emph{tokens}}. For example,
if the definition of S is copied to *, then * will become a
@uref{glo_c.html#constituent,@emph{constituent}} that is
@uref{glo_a.html#alphabetic,@emph{alphabetic}}[2] but that cannot be
used as a @uref{glo_s.html#short_float,@emph{short float}}
@uref{glo_e.html#exponent_marker,@emph{exponent marker}}. For further
information, see @uref{sec_2-1-4-2.html,Section 2.1.4.2 (Constituent
Traits)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss013.html,ARGUMENTS-UNDERSPECIFIED:SPECIFY}
@item
@uref{../Issues/iss299.html,RETURN-VALUES-UNSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-STANDARD-IO-SYNTAX
@subsubsection CLHS: Macro WITH-STANDARD-IO-SYNTAX
@anchor{#clhs-macro-with-standard-io-syntax}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_set-syntax-from-char.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stread-basest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-STANDARD-IO-SYNTAX}

@strong{Syntax:}

@strong{with-standard-io-syntax} @emph{@emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

Within the dynamic extent of the body of @emph{forms}, all
reader/printer control variables, including any
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
ones not specified by this standard, are bound to values that produce
standard read/print behavior. The values for the variables specified by
this standard are listed in the next figure.

@verbatim
Variable                     Value                               
*package*                    The CL-USER package                 
*print-array*                t                                   
*print-base*                 10                                  
*print-case*                 :upcase                             
*print-circle*               nil                                 
*print-escape*               t                                   
*print-gensym*               t                                   
*print-length*               nil                                 
*print-level*                nil                                 
*print-lines*                nil                                 
*print-miser-width*          nil                                 
*print-pprint-dispatch*      The standard pprint dispatch table  
*print-pretty*               nil                                 
*print-radix*                nil                                 
*print-readably*             t                                   
*print-right-margin*         nil                                 
*read-base*                  10                                  
*read-default-float-format*  single-float                        
*read-eval*                  t                                   
*read-suppress*              nil                                 
*readtable*                  The standard readtable              
@end verbatim

@strong{Figure 23-1. Values of standard control variables}

@strong{Examples:}

@verbatim
 (with-open-file (file pathname :direction :output)
   (with-standard-io-syntax
     (print data file)))

;;; ... Later, in another Lisp:

 (with-open-file (file pathname :direction :input)
   (with-standard-io-syntax
     (setq data (read file))))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *READ-BASE*
@subsubsection CLHS: Variable *READ-BASE*
@anchor{#clhs-variable-read-base}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-stan_rd-io-syntax.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stread-de_oat-formatst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*READ-BASE*}

@strong{Value Type:}

a @uref{glo_r.html#radix,@emph{radix}}.

@strong{Initial Value:}

10.

@strong{Description:}

Controls the interpretation of tokens by
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} as being
@uref{glo_i.html#integer,@emph{integers}} or
@uref{glo_r.html#ratio,@emph{ratios}}.

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STread-baseST,@strong{*read-base*}}, called the
@uref{glo_c.html#current_input_base,@emph{current input base}}, is the
radix in which @uref{glo_i.html#integer,@emph{integers}} and
@uref{glo_r.html#ratio,@emph{ratios}} are to be read by the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}. The parsing of other
numeric @uref{glo_t.html#type,@emph{types}} (e.g.,
@uref{glo_f.html#float,@emph{floats}}) is not affected by this option.

The effect of @ref{#STread-baseST,@strong{*read-base*}} on the reading
of any particular @uref{glo_r.html#rational,@emph{rational}} number can
be locally overridden by explicit use of the #O, #X, #B, or #@emph{n}R
syntax or by a trailing decimal point.

@strong{Examples:}

@verbatim
 (dotimes (i 6)
   (let ((*read-base* (+ 10. i)))
     (let ((object (read-from-string "(\\DAD DAD |BEE| BEE 123. 123)")))
       (print (list *read-base* object)))))
>>  (10 (DAD DAD BEE BEE 123 123))
>>  (11 (DAD DAD BEE BEE 123 146))
>>  (12 (DAD DAD BEE BEE 123 171))
>>  (13 (DAD DAD BEE BEE 123 198))
>>  (14 (DAD 2701 BEE BEE 123 227))
>>  (15 (DAD 3088 BEE 2699 123 258))
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{See Also:} None.

@strong{Notes:}

Altering the input radix can be useful when reading data files in
special formats.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *READ-DEFAULT-FLOAT-FORMAT*
@subsubsection CLHS: Variable *READ-DEFAULT-FLOAT-FORMAT*
@anchor{#clhs-variable-read-default-float-format}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stread-basest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stread-evalst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*READ-DEFAULT-FLOAT-FORMAT*}

@strong{Value Type:}

one of the @uref{glo_a.html#atomic_type_specifier,@emph{atomic type
specifiers}}
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}},
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}},
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}},
or
@uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}},
or else some other @uref{glo_t.html#type_specifier,@emph{type
specifier}} defined by the
@uref{glo_i.html#implementation,@emph{implementation}} to be acceptable.

@strong{Initial Value:}

The @uref{glo_s.html#symbol,@emph{symbol}}
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}}.

@strong{Description:}

Controls the floating-point format that is to be used when reading a
floating-point number that has no
@uref{glo_e.html#exponent_marker,@emph{exponent marker}} or that has e
or E for an @uref{glo_e.html#exponent_marker,@emph{exponent marker}}.
Other @uref{glo_e.html#exponent_marker,@emph{exponent markers}}
explicitly prescribe the floating-point format to be used.

The printer uses
@ref{#STread-default-float-formatST,@strong{*read-default-float-format*}}
to guide the choice of @uref{glo_e.html#exponent_marker,@emph{exponent
markers}} when printing floating-point numbers.

@strong{Examples:}

@verbatim
 (let ((*read-default-float-format* 'double-float))
   (read-from-string "(1.0 1.0e0 1.0s0 1.0f0 1.0d0 1.0L0)"))
=>  (1.0   1.0   1.0   1.0 1.0   1.0)   ;Implementation has float format F.
=>  (1.0   1.0   1.0s0 1.0 1.0   1.0)   ;Implementation has float formats S and F.
=>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0d0) ;Implementation has float formats F and D.
=>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0d0) ;Implementation has float formats S, F, D.
=>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0L0) ;Implementation has float formats F, D, L.
=>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0L0) ;Implementation has formats S, F, D, L.
@end verbatim

@strong{Affected By:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *READ-EVAL*
@subsubsection CLHS: Variable *READ-EVAL*
@anchor{#clhs-variable-read-eval}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stread-de_oat-formatst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stread-suppressst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*READ-EVAL*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_t.html#true,@emph{true}}.

@strong{Description:}

If it is @uref{glo_t.html#true,@emph{true}}, the #.
@uref{glo_r.html#reader_macro,@emph{reader macro}} has its normal
effect. Otherwise, that @uref{glo_r.html#reader_macro,@emph{reader
macro}} signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_reader-error.html#reader-error,@strong{reader-error}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{See Also:}

@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}

@strong{Notes:}

If @ref{#STread-evalST,@strong{*read-eval*}} is
@uref{glo_f.html#false,@emph{false}} and
@uref{var_stprint-readablyst.html#STprint-readablyST,@strong{*print-readably*}}
is @uref{glo_t.html#true,@emph{true}}, any
@uref{glo_m.html#method,@emph{method}} for
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
that would output a reference to the #.
@uref{glo_r.html#reader_macro,@emph{reader macro}} either outputs
something different or signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_print-not-readable.html#print-not-readable,@strong{print-not-readable}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss089.html,DATA-IO:ADD-SUPPORT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *READ-SUPPRESS*
@subsubsection CLHS: Variable *READ-SUPPRESS*
@anchor{#clhs-variable-read-suppress}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stread-evalst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_streadtablest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*READ-SUPPRESS*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_f.html#false,@emph{false}}.

@strong{Description:}

This variable is intended primarily to support the operation of the
read-time conditional notations #+ and #-. It is important for the
@uref{glo_r.html#reader_macro,@emph{reader macros}} which implement
these notations to be able to skip over the printed representation of an
@uref{glo_e.html#expression,@emph{expression}} despite the possibility
that the syntax of the skipped
@uref{glo_e.html#expression,@emph{expression}} may not be entirely valid
for the current implementation, since #+ and #- exist in order to allow
the same program to be shared among several Lisp implementations
(including dialects other than Common Lisp) despite small
incompatibilities of syntax.

If it is @uref{glo_f.html#false,@emph{false}}, the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}} operates normally.

If the @uref{glo_v.html#value,@emph{value}} of
@ref{#STread-suppressST,@strong{*read-suppress*}} is
@uref{glo_t.html#true,@emph{true}},
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{fun_readcm_re_g-whitespace.html#read-preserving-whitespace,@strong{read-preserving-whitespace}},
@uref{fun_read-delimited-list.html#read-delimited-list,@strong{read-delimited-list}},
and
@uref{fun_read-from-string.html#read-from-string,@strong{read-from-string}}
all return a @uref{glo_p.html#primary_value,@emph{primary value}} of
@uref{any_nil.html#nil,@strong{nil}} when they complete successfully;
however, they continue to parse the representation of an
@uref{glo_o.html#object,@emph{object}} in the normal way, in order to
skip over the @uref{glo_o.html#object,@emph{object}}, and continue to
indicate @uref{glo_e.html#end_of_file,@emph{end of file}} in the normal
way. Except as noted below, any
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_r.html#reader_macro,@emph{reader macro}}[2] that is defined to
@uref{glo_r.html#read,@emph{read}}[2] a following
@uref{glo_o.html#object,@emph{object}} or
@uref{glo_t.html#token,@emph{token}} will do so, but not signal an error
if the @uref{glo_o.html#object,@emph{object}} read is not of an
appropriate type or syntax. The
@uref{glo_s.html#standard_syntax,@emph{standard syntax}} and its
associated @uref{glo_r.html#reader_macro,@emph{reader macros}} will not
construct any new @uref{glo_o.html#object,@emph{objects}} (e.g., when
reading the representation of a @uref{glo_s.html#symbol,@emph{symbol}},
no @uref{glo_s.html#symbol,@emph{symbol}} will be constructed or
interned).

Extended tokens

All extended tokens are completely uninterpreted. Errors such as those
that might otherwise be signaled due to detection of invalid
@uref{glo_p.html#potential_number,@emph{potential numbers}}, invalid
patterns of @uref{glo_p.html#package_marker,@emph{package markers}}, and
invalid uses of the @uref{glo_d.html#dot,@emph{dot}} character are
suppressed.

Dispatching macro characters (including
@uref{glo_s.html#sharpsign,@emph{sharpsign}})

@uref{glo_d.html#dispatching_macro_character,@emph{Dispatching macro
characters}} continue to parse an infix numerical argument, and invoke
the dispatch function. The
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_s.html#sharpsign,@emph{sharpsign}}
@uref{glo_r.html#reader_macro,@emph{reader macros}} do not enforce any
constraints on either the presence of or the value of the numerical
argument.

#=

The #= notation is totally ignored. It does not read a following
@uref{glo_o.html#object,@emph{object}}. It produces no
@uref{glo_o.html#object,@emph{object}}, but is treated as
@uref{glo_w.html#whitespace,@emph{whitespace}}[2].

##

The ## notation always produces @uref{any_nil.html#nil,@strong{nil}}.

No matter what the @uref{glo_v.html#value,@emph{value}} of
@ref{#STread-suppressST,@strong{*read-suppress*}}, parentheses still
continue to delimit and construct @uref{glo_l.html#list,@emph{lists}};
the #( notation continues to delimit
@uref{glo_v.html#vector,@emph{vectors}}; and comments,
@uref{glo_s.html#string,@emph{strings}}, and the
@uref{glo_s.html#single-quote,@emph{single-quote}} and
@uref{glo_b.html#backquote,@emph{backquote}} notations continue to be
interpreted properly. Such situations as '), #<, #), and #<Space>
continue to signal errors.

@strong{Examples:}

@verbatim
 (let ((*read-suppress* t))
   (mapcar #'read-from-string
           '("#(foo bar baz)" "#P(:type :lisp)" "#c1.2"
             "#.(PRINT 'FOO)" "#3AHELLO" "#S(INTEGER)"
             "#*ABC" "#\GARBAGE" "#RALPHA" "#3R444")))
=>  (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}},
@uref{chap-2.html,Section 2 (Syntax)}

@strong{Notes:}

@uref{glo_p.html#programmer,@emph{Programmers}} and
@uref{glo_i.html#implementation,@emph{implementations}} that define
additional @uref{glo_m.html#macro_character,@emph{macro characters}} are
strongly encouraged to make them respect
@ref{#STread-suppressST,@strong{*read-suppress*}} just as
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_m.html#macro_character,@emph{macro characters}} do. That is,
when the @uref{glo_v.html#value,@emph{value}} of
@ref{#STread-suppressST,@strong{*read-suppress*}} is
@uref{glo_t.html#true,@emph{true}}, they should ignore type errors when
reading a following @uref{glo_o.html#object,@emph{object}} and the
@uref{glo_f.html#function,@emph{functions}} that implement
@uref{glo_d.html#dispatching_macro_character,@emph{dispatching macro
characters}} should tolerate @uref{any_nil.html#nil,@strong{nil}} as
their infix @uref{glo_p.html#parameter,@emph{parameter}} value even if a
numeric value would ordinarily be required.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss288.html,READ-SUPPRESS-CONFUSING:GENERALIZE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *READTABLE*
@subsubsection CLHS: Variable *READTABLE*
@anchor{#clhs-variable-readtable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stread-suppressst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_reader_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_reader-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*READTABLE*}

@strong{Value Type:}

a @uref{glo_r.html#readtable,@emph{readtable}}.

@strong{Initial Value:}

A @uref{glo_r.html#readtable,@emph{readtable}} that conforms to the
description of Common Lisp syntax in @uref{chap-2.html,Section 2
(Syntax)}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STreadtableST,@strong{*readtable*}} is called the
@uref{glo_c.html#current_readtable,@emph{current readtable}}. It
controls the parsing behavior of the
@uref{glo_l.html#lisp_reader,@emph{Lisp reader}}, and can also influence
the @uref{glo_l.html#lisp_printer,@emph{Lisp printer}} (e.g., see the
@uref{glo_f.html#function,@emph{function}}
@uref{acc_readtable-case.html#readtable-case,@strong{readtable-case}}).

@strong{Examples:}

@verbatim
 (readtablep *readtable*) =>  true
 (setq zvar 123) =>  123
 (set-syntax-from-char #\z #\' (setq table2 (copy-readtable))) =>  T
 zvar =>  123
 (setq *readtable* table2) =>  #<READTABLE>
 zvar =>  VAR
 (setq *readtable* (copy-readtable nil)) =>  #<READTABLE>
 zvar =>  123
@end verbatim

@strong{Affected By:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{fun_load.html#load,@strong{load}}

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{fun_load.html#load,@strong{load}}, @strong{readtable},
@uref{sec_2-1-1-1.html,Section 2.1.1.1 (The Current Readtable)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 24
@section CLHS: Chapter 24
@anchor{#clhs-chapter-24}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_reader-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_24-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
24. System Construction

@uref{sec_24-1.html,}

24.1 System Construction Concepts

@uref{sec_the_syste_n_dictionary.html,}

24.2 The System Construction Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The System Construction Dictionary::
@end menu

@node CLHS Section The System Construction Dictionary
@subsection CLHS: Section The System Construction Dictionary
@anchor{#clhs-section-the-system-construction-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_24-1-2-1-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-24.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_compile-file.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
24.2 The System Construction Dictionary

@uref{fun_compile-file.html,@emph{Function} @strong{COMPILE-FILE}}

@uref{fun_compile-file-pathname.html,@emph{Function}
@strong{COMPILE-FILE-PATHNAME}}

@uref{fun_load.html,@emph{Function} @strong{LOAD}}

@uref{mac_with-compilation-unit.html,@emph{Macro}
@strong{WITH-COMPILATION-UNIT}}

@uref{var_stfeaturesst.html,@emph{Variable} @strong{*FEATURES*}}

@uref{var_stcompile_e-truenamest.html,@emph{Variable}
@strong{*COMPILE-FILE-PATHNAME*, *COMPILE-FILE-TRUENAME*}}

@uref{var_stload-pa_d-truenamest.html,@emph{Variable}
@strong{*LOAD-PATHNAME*, *LOAD-TRUENAME*}}

@uref{var_stcompile_le-verbosest.html,@emph{Variable}
@strong{*COMPILE-PRINT*, *COMPILE-VERBOSE*}}

@uref{var_stload-pr_ad-verbosest.html,@emph{Variable}
@strong{*LOAD-PRINT*, *LOAD-VERBOSE*}}

@uref{var_stmodulesst.html,@emph{Variable} @strong{*MODULES*}}

@uref{fun_providecm_require.html,@emph{Function} @strong{PROVIDE,
REQUIRE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Function COMPILE-FILE-PATHNAME::
* CLHS Function LOAD::
* CLHS Function PROVIDE REQUIRE::
* CLHS Macro WITH-COMPILATION-UNIT::
* CLHS Variable *COMPILE-FILE-PATHNAME*::
* CLHS Variable *COMPILE-PRINT* *COMPILE-VERBOSE*::
* CLHS Variable *FEATURES*::
* CLHS Variable *LOAD-PATHNAME* *LOAD-TRUENAME*::
* CLHS Variable *LOAD-PRINT* *LOAD-VERBOSE*::
* CLHS Variable *MODULES*::
@end menu

@node CLHS Function COMPILE-FILE-PATHNAME
@subsubsection CLHS: Function COMPILE-FILE-PATHNAME
@anchor{#clhs-function-compile-file-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_compile-file.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_load.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPILE-FILE-PATHNAME}

@strong{Syntax:}

@strong{compile-file-pathname} @emph{input-file &key output-file
&allow-other-keys} => @emph{pathname}

@strong{Arguments and Values:}

@emph{input-file}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}.
(Default fillers for unspecified components are taken from
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}}.)

@emph{output-file}---a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}. The
default is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@emph{pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}.

@strong{Description:}

Returns the @uref{glo_p.html#pathname,@emph{pathname}} that
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} would
write into, if given the same arguments.

The defaults for the @emph{output-file} are taken from the
@uref{glo_p.html#pathname,@emph{pathname}} that results from merging the
@emph{input-file} with the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}},
except that the type component should default to the appropriate
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
default type for @uref{glo_c.html#compiled_file,@emph{compiled files}}.

If @emph{input-file} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}} and
@emph{output-file} is unsupplied, the result is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}. If
@emph{input-file} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, it is translated into a physical pathname as if by calling
@uref{fun_translate_cal-pathname.html#translate-logical-pathname,@strong{translate-logical-pathname}}.
If @emph{input-file} is a @uref{glo_s.html#stream,@emph{stream}}, the
@uref{glo_s.html#stream,@emph{stream}} can be either open or closed.
@ref{#compile-file-pathname,@strong{compile-file-pathname}} returns the
same @uref{glo_p.html#pathname,@emph{pathname}} after a file is closed
as it did when the file was open. It is an error if @emph{input-file} is
a @uref{glo_s.html#stream,@emph{stream}} that is created with
@uref{fun_make-two-way-stream.html#make-two-way-stream,@strong{make-two-way-stream}},
@uref{fun_make-echo-stream.html#make-echo-stream,@strong{make-echo-stream}},
@uref{fun_make-broadcast-stream.html#make-broadcast-stream,@strong{make-broadcast-stream}},
@uref{fun_make-conc_nated-stream.html#make-concatenated-stream,@strong{make-concatenated-stream}},
@uref{fun_make-stri_input-stream.html#make-string-input-stream,@strong{make-string-input-stream}},
@uref{fun_make-stri_utput-stream.html#make-string-output-stream,@strong{make-string-output-stream}}.

If an implementation supports additional keyword arguments to
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@ref{#compile-file-pathname,@strong{compile-file-pathname}} must accept
the same arguments.

@strong{Examples:}

See
@uref{acc_logical-p_translations.html#logical-pathname-translations,@strong{logical-pathname-translations}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if either @emph{input-file} or @emph{output-file} is
@uref{glo_w.html#wild,@emph{wild}}.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss261.html,PATHNAME-STREAM}
@item
@uref{../Issues/iss053.html,CLOSED-STREAM-OPERATIONS:ALLOW-INQUIRY}
@item
@uref{../Issues/iss060.html,COMPILE-FILE-OUTPUT-FILE-DEFAULTS:INPUT-FILE}
@item
@uref{../Issues/iss062.html,COMPILE-FILE-PATHNAME-ARGUMENTS:MAKE-CONSISTENT}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LOAD
@subsubsection CLHS: Function LOAD
@anchor{#clhs-function-load}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_compile-file-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-compilation-unit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LOAD}

@strong{Syntax:}

@strong{load} @emph{filespec &key verbose print if-does-not-exist
external-format}

=> @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{filespec}---a @uref{glo_s.html#stream,@emph{stream}}, or a
@uref{glo_p.html#pathname_designator,@emph{pathname designator}}. The
default is taken from
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}}.

@emph{verbose}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stload-pr_ad-verbosest.html#STload-verboseST,@strong{*load-verbose*}}.

@emph{print}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}. The default is the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stload-pr_ad-verbosest.html#STload-printST,@strong{*load-print*}}.

@emph{if-does-not-exist}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}. The
default is @uref{glo_t.html#true,@emph{true}}.

@emph{external-format}---an
@uref{glo_e.html#external_file_format_designator,@emph{external file
format designator}}. The default is :default.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#load,@strong{load}} @uref{glo_l.html#load,@emph{loads}} the
@uref{glo_f.html#file,@emph{file}} named by @emph{filespec} into the
Lisp environment.

The manner in which a @uref{glo_s.html#source_file,@emph{source file}}
is distinguished from a @uref{glo_c.html#compiled_file,@emph{compiled
file}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
If the file specification is not complete and both a
@uref{glo_s.html#source_file,@emph{source file}} and a
@uref{glo_c.html#compiled_file,@emph{compiled file}} exist which might
match, then which of those files @ref{#load,@strong{load}} selects is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

If @emph{filespec} is a @uref{glo_s.html#stream,@emph{stream}},
@ref{#load,@strong{load}} determines what kind of
@uref{glo_s.html#stream,@emph{stream}} it is and loads directly from the
@uref{glo_s.html#stream,@emph{stream}}. If @emph{filespec} is a
@uref{glo_l.html#logical_pathname,@emph{logical pathname}}, it is
translated into a @uref{glo_p.html#physical_pathname,@emph{physical
pathname}} as if by calling
@uref{fun_translate_cal-pathname.html#translate-logical-pathname,@strong{translate-logical-pathname}}.

@ref{#load,@strong{load}} sequentially executes each
@uref{glo_f.html#form,@emph{form}} it encounters in the
@uref{glo_f.html#file,@emph{file}} named by @emph{filespec}. If the
@uref{glo_f.html#file,@emph{file}} is a
@uref{glo_s.html#source_file,@emph{source file}} and the
@uref{glo_i.html#implementation,@emph{implementation}} chooses to
perform @uref{glo_i.html#implicit_compilation,@emph{implicit
compilation}}, @ref{#load,@strong{load}} must recognize
@uref{glo_t.html#top_level_form,@emph{top level forms}} as described in
@uref{sec_3-2-3-1.html,Section 3.2.3.1 (Processing of Top Level Forms)}
and arrange for each @uref{glo_t.html#top_level_form,@emph{top level
form}} to be executed before beginning
@uref{glo_i.html#implicit_compilation,@emph{implicit compilation}} of
the next. (Note, however, that processing of
@uref{speope_eval-when.html#eval-when,@strong{eval-when}}
@uref{glo_f.html#form,@emph{forms}} by @ref{#load,@strong{load}} is
controlled by the :execute situation.)

If @emph{verbose} is @uref{glo_t.html#true,@emph{true}},
@ref{#load,@strong{load}} prints a message in the form of a comment
(i.e., with a leading @uref{glo_s.html#semicolon,@emph{semicolon}}) to
@uref{glo_s.html#standard_output,@emph{standard output}} indicating what
@uref{glo_f.html#file,@emph{file}} is being @emph{loaded} and other
useful information. If @emph{verbose} is
@uref{glo_f.html#false,@emph{false}}, @ref{#load,@strong{load}} does not
print this information.

If @emph{print} is @uref{glo_t.html#true,@emph{true}},
@ref{#load,@strong{load}} incrementally prints information to
@uref{glo_s.html#standard_output,@emph{standard output}} showing the
progress of the @emph{loading} process. For a
@uref{glo_s.html#source_file,@emph{source file}}, this information might
mean printing the @uref{glo_v.html#value,@emph{values}} @emph{yielded}
by each @uref{glo_f.html#form,@emph{form}} in the
@uref{glo_f.html#file,@emph{file}} as soon as those
@uref{glo_v.html#value,@emph{values}} are returned. For a
@uref{glo_c.html#compiled_file,@emph{compiled file}}, what is printed
might not reflect precisely the contents of the
@uref{glo_s.html#source_file,@emph{source file}}, but some information
is generally printed. If @emph{print} is
@uref{glo_f.html#false,@emph{false}}, @ref{#load,@strong{load}} does not
print this information.

If the file named by @emph{filespec} is successfully loaded,
@ref{#load,@strong{load}} returns @uref{glo_t.html#true,@emph{true}}.

If the file does not exist, the specific action taken depends on
@emph{if-does-not-exist}: if it is @uref{any_nil.html#nil,@strong{nil}},
@ref{#load,@strong{load}} returns @uref{any_nil.html#nil,@strong{nil}};
otherwise, @ref{#load,@strong{load}} signals an error.

The @emph{external-format} specifies the
@uref{glo_e.html#external_file_format,@emph{external file format}} to be
used when opening the @uref{glo_f.html#file,@emph{file}} (see the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_open.html#open,@strong{open}}), except that when the
@uref{glo_f.html#file,@emph{file}} named by @emph{filespec} is a
@uref{glo_c.html#compiled_file,@emph{compiled file}}, the
@emph{external-format} is ignored.
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} and
@ref{#load,@strong{load}} cooperate in an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
way to assure the preservation of the
@uref{glo_s.html#similarity,@emph{similarity}} of
@uref{glo_c.html#character,@emph{characters}} referred to in the
@uref{glo_s.html#source_file,@emph{source file}} at the time the
@uref{glo_s.html#source_file,@emph{source file}} was processed by the
@uref{glo_f.html#file_compiler,@emph{file compiler}} under a given
@uref{glo_e.html#external_file_format,@emph{external file format}},
regardless of the value of @emph{external-format} at the time the
@uref{glo_c.html#compiled_file,@emph{compiled file}} is @emph{loaded}.

@ref{#load,@strong{load}} binds
@uref{var_streadtablest.html#STreadtableST,@strong{*readtable*}} and
@uref{var_stpackagest.html#STpackageST,@strong{*package*}} to the values
they held before @emph{loading} the file.

@uref{var_stload-pa_d-truenamest.html#STload-truenameST,@strong{*load-truename*}}
is @uref{glo_b.html#bound,@emph{bound}} by @ref{#load,@strong{load}} to
hold the @uref{glo_t.html#truename,@emph{truename}} of the
@uref{glo_p.html#pathname,@emph{pathname}} of the file being
@emph{loaded}.

@uref{var_stload-pa_d-truenamest.html#STload-pathnameST,@strong{*load-pathname*}}
is @uref{glo_b.html#bound,@emph{bound}} by @ref{#load,@strong{load}} to
hold a @uref{glo_p.html#pathname,@emph{pathname}} that represents
@emph{filespec} merged against the defaults. That is, (pathname
(merge-pathnames @emph{filespec})).

@strong{Examples:}

@verbatim
;Establish a data file...
 (with-open-file (str "data.in" :direction :output :if-exists :error)
   (print 1 str) (print '(setq a 888) str) t)
=>  T
 (load "data.in") =>  true
 a =>  888
 (load (setq p (merge-pathnames "data.in")) :verbose t)
; Loading contents of file /fred/data.in
; Finished loading /fred/data.in
=>  true
 (load p :print t) 
; Loading contents of file /fred/data.in
;  1
;  888
; Finished loading /fred/data.in
=>  true
@end verbatim

@verbatim
 ;----[Begin file SETUP]----
 (in-package "MY-STUFF")
 (defmacro compile-truename () `',*compile-file-truename*)
 (defvar *my-compile-truename* (compile-truename) "Just for debugging.")
 (defvar *my-load-pathname* *load-pathname*)
 (defun load-my-system ()
   (dolist (module-name '("FOO" "BAR" "BAZ"))
     (load (merge-pathnames module-name *my-load-pathname*))))
 ;----[End of file SETUP]----

 
 (load "SETUP")
 (load-my-system)
@end verbatim

@strong{Affected By:}

The implementation, and the host computer's file system.

@strong{Exceptional Situations:}

If :if-does-not-exist is supplied and is
@uref{glo_t.html#true,@emph{true}}, or is not supplied,
@ref{#load,@strong{load}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} if the file
named by @emph{filespec} does not exist, or if the
@uref{glo_f.html#file_system,@emph{file system}} cannot perform the
requested operation.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if (wild-pathname-p @emph{filespec}) returns
@uref{glo_t.html#true,@emph{true}}.

@strong{See Also:}

@uref{fun_error.html#error,@strong{error}},
@uref{fun_merge-pathnames.html#merge-pathnames,@strong{merge-pathnames}},
@uref{var_stload-pr_ad-verbosest.html#STload-verboseST,@strong{*load-verbose*}},
@uref{var_stdefault_e-defaultsst.html#STdefault-pathname-defaultsST,@strong{*default-pathname-defaults*}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{sec_20-1.html,Section 20.1 (File System Concepts)},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss267.html,PATHNAME-WILD:NEW-FUNCTIONS}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss218.html,LOAD-TRUENAME:NEW-PATHNAME-VARIABLES}
@item
@uref{../Issues/iss196.html,IN-SYNTAX:MINIMAL}
@item
@uref{../Issues/iss146.html,EVAL-TOP-LEVEL:LOAD-LIKE-COMPILE-FILE}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss155.html,EXTERNAL-FORMAT-FOR-EVERY-FILE-CONNECTION:MINIMUM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PROVIDE REQUIRE
@subsubsection CLHS: Function PROVIDE, REQUIRE
@anchor{#clhs-function-provide-require}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stmodulesst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-25.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PROVIDE, REQUIRE}

@strong{Syntax:}

@strong{provide} @emph{module-name} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{require} @emph{module-name &optional pathname-list} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{module-name}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{pathname-list}---@uref{any_nil.html#nil,@strong{nil}}, or a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_n.html#non-empty,@emph{non-empty}}
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_p.html#pathname_designator,@emph{pathname designators}}. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#provide,@strong{provide}} adds the @emph{module-name} to the
@uref{glo_l.html#list,@emph{list}} held by
@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}}, if such a
name is not already present.

@ref{#require,@strong{require}} tests for the presence of the
@emph{module-name} in the @uref{glo_l.html#list,@emph{list}} held by
@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}}. If it is
present, @ref{#require,@strong{require}} immediately returns. Otherwise,
an attempt is made to load an appropriate set of
@uref{glo_f.html#file,@emph{files}} as follows: The @emph{pathname-list}
argument, if @uref{glo_n.html#non-nil,@emph{non-nil}}, specifies a list
of @uref{glo_p.html#pathname,@emph{pathnames}} to be loaded in order,
from left to right. If the @emph{pathname-list} is
@uref{any_nil.html#nil,@strong{nil}}, an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
mechanism will be invoked in an attempt to load the module named
@emph{module-name}; if no such module can be loaded, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

Both functions use
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}} to test
for the presence of a @emph{module-name}.

@strong{Examples:}

@verbatim
;;; This illustrates a nonportable use of REQUIRE, because it
;;; depends on the implementation-dependent file-loading mechanism.

(require "CALCULUS")

;;; This use of REQUIRE is nonportable because of the literal 
;;; physical pathname.  

(require "CALCULUS" "/usr/lib/lisp/calculus")

;;; One form of portable usage involves supplying a logical pathname,
;;; with appropriate translations defined elsewhere.

(require "CALCULUS" "lib:calculus")

;;; Another form of portable usage involves using a variable or
;;; table lookup function to determine the pathname, which again
;;; must be initialized elsewhere.

(require "CALCULUS" *calculus-module-pathname*)
@end verbatim

@strong{Side Effects:}

@ref{#provide,@strong{provide}} modifies
@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}}.

@strong{Affected By:}

The specific action taken by @ref{#require,@strong{require}} is affected
by calls to @ref{#provide,@strong{provide}} (or, in general, any changes
to the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}}).

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{module-name} is not a
@uref{glo_s.html#string_designator,@emph{string designator}}.

If @ref{#require,@strong{require}} fails to perform the requested
operation due to a problem while interacting with the
@uref{glo_f.html#file_system,@emph{file system}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if any @uref{glo_p.html#pathname,@emph{pathname}} in
@emph{pathname-list} is a @uref{glo_d.html#designator,@emph{designator}}
for a @uref{glo_w.html#wild,@emph{wild}}
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{See Also:}

@uref{var_stmodulesst.html#STmodulesST,@strong{*modules*}},
@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

The functions @ref{#provide,@strong{provide}} and
@ref{#require,@strong{require}} are deprecated.

If a module consists of a single
@uref{glo_p.html#package,@emph{package}}, it is customary for the
package and module names to be the same.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss295.html,REQUIRE-PATHNAME-DEFAULTS-YET-AGAIN:RESTORE-ARGUMENT}
@item
@uref{../Issues/iss294.html,REQUIRE-PATHNAME-DEFAULTS-AGAIN:X3J13-DEC-91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-COMPILATION-UNIT
@subsubsection CLHS: Macro WITH-COMPILATION-UNIT
@anchor{#clhs-macro-with-compilation-unit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_load.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stfeaturesst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-COMPILATION-UNIT}

@strong{Syntax:}

@strong{with-compilation-unit} @emph{([[@emph{option}]])
@emph{form}@strong{*}} => @emph{@emph{result}@strong{*}}

@verbatim
option::= :override override 
@end verbatim

@strong{Arguments and Values:}

@emph{override}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}};
evaluated. The default is @uref{any_nil.html#nil,@strong{nil}}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

Executes @emph{forms} from left to right. Within the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} of
@ref{#with-compilation-unit,@strong{with-compilation-unit}}, actions
deferred by the compiler until the end of compilation will be deferred
until the end of the outermost call to
@ref{#with-compilation-unit,@strong{with-compilation-unit}}.

The set of @emph{options} permitted may be extended by the
implementation, but the only
@uref{glo_s.html#standardized,@emph{standardized}} keyword is :override.

If nested dynamically only the outer call to
@ref{#with-compilation-unit,@strong{with-compilation-unit}} has any
effect unless the value associated with :override is
@uref{glo_t.html#true,@emph{true}}, in which case warnings are deferred
only to the end of the innermost call for which @emph{override} is
@uref{glo_t.html#true,@emph{true}}.

The function
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} provides
the effect of

@verbatim
 (with-compilation-unit (:override nil) ...)
@end verbatim

around its @uref{glo_c.html#code,@emph{code}}.

Any
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
extensions can only be provided as the result of an explicit programmer
request by use of an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
keyword. @uref{glo_i.html#implementation,@emph{Implementations}} are
forbidden from attaching additional meaning to a use of this macro which
involves either no keywords or just the keyword :override.

@strong{Examples:}

If an @uref{glo_i.html#implementation,@emph{implementation}} would
normally defer certain kinds of warnings, such as warnings about
undefined functions, to the end of a compilation unit (such as a
@uref{glo_f.html#file,@emph{file}}), the following example shows how to
cause those warnings to be deferred to the end of the compilation of
several files.

@verbatim
 (defun compile-files (&rest files)
   (with-compilation-unit ()
     (mapcar #'(lambda (file) (compile-file file)) files)))

 (compile-files "A" "B" "C")
@end verbatim

Note however that if the implementation does not normally defer any
warnings, use of
@ref{#with-compilation-unit,@emph{with-compilation-unit}} might not have
any effect.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compile.html#compile,@strong{compile}},
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss361.html,WITH-COMPILATION-UNIT:NEW-MACRO}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *COMPILE-FILE-PATHNAME*
@subsubsection CLHS: Variable *COMPILE-FILE-PATHNAME*...
@anchor{#clhs-variable-compile-file-pathname...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stfeaturesst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stload-pa_d-truenamest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*COMPILE-FILE-PATHNAME*,
*COMPILE-FILE-TRUENAME*}

@strong{Value Type:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STcompile-file-pathnameST,@strong{*compile-file-pathname*}} must
always be a @uref{glo_p.html#pathname,@emph{pathname}} or
@uref{any_nil.html#nil,@strong{nil}}. The
@uref{glo_v.html#value,@emph{value}} of
@ref{#STcompile-file-truenameST,@strong{*compile-file-truename*}} must
always be a @uref{glo_p.html#physical_pathname,@emph{physical pathname}}
or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

During a call to
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@ref{#STcompile-file-pathnameST,@strong{*compile-file-pathname*}} is
@uref{glo_b.html#bound,@emph{bound}} to the
@uref{glo_p.html#pathname,@emph{pathname}} denoted by the first argument
to @uref{fun_compile-file.html#compile-file,@strong{compile-file}},
merged against the defaults; that is, it is
@uref{glo_b.html#bound,@emph{bound}} to (pathname (merge-pathnames
@emph{input-file})). During the same time interval,
@ref{#STcompile-file-truenameST,@strong{*compile-file-truename*}} is
@uref{glo_b.html#bound,@emph{bound}} to the
@uref{glo_t.html#truename,@emph{truename}} of the
@uref{glo_f.html#file,@emph{file}} being @emph{compiled}.

At other times, the @uref{glo_v.html#value,@emph{value}} of these
@uref{glo_v.html#variable,@emph{variables}} is
@uref{any_nil.html#nil,@strong{nil}}.

If a @uref{glo_b.html#break_loop,@emph{break loop}} is entered while
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} is
ongoing, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether these @uref{glo_v.html#variable,@emph{variables}} retain the
@uref{glo_v.html#value,@emph{values}} they had just prior to entering
the @uref{glo_b.html#break_loop,@emph{break loop}} or whether they are
@uref{glo_b.html#bound,@emph{bound}} to
@uref{any_nil.html#nil,@strong{nil}}.

The consequences are unspecified if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} or
@uref{glo_b.html#bind,@emph{bind}} either of these
@uref{glo_v.html#variable,@emph{variables}}.

@strong{Examples:} None.

@strong{Affected By:}

The @uref{glo_f.html#file_system,@emph{file system}}.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss218.html,LOAD-TRUENAME:NEW-PATHNAME-VARIABLES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *COMPILE-PRINT* *COMPILE-VERBOSE*
@subsubsection CLHS: Variable *COMPILE-PRINT*, *COMPILE-VERBOSE*
@anchor{#clhs-variable-compile-print-compile-verbose}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stload-pa_d-truenamest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stload-pr_ad-verbosest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*COMPILE-PRINT*, *COMPILE-VERBOSE*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STcompile-printST,@strong{*compile-print*}} is the default value
of the :print @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}. The
@uref{glo_v.html#value,@emph{value}} of
@ref{#STcompile-verboseST,@strong{*compile-verbose*}} is the default
value of the :verbose @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss067.html,COMPILER-VERBOSITY:LIKE-LOAD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *FEATURES*
@subsubsection CLHS: Variable *FEATURES*
@anchor{#clhs-variable-features}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-compilation-unit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stcompile_e-truenamest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*FEATURES*}

@strong{Value Type:}

a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STfeaturesST,@strong{*features*}} is called the
@uref{glo_f.html#features_list,@emph{features list}}. It is a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}, called
@uref{glo_f.html#feature,@emph{features}}, that correspond to some
aspect of the @uref{glo_i.html#implementation,@emph{implementation}} or
@uref{glo_e.html#environment,@emph{environment}}.

Most @uref{glo_f.html#feature,@emph{features}} have
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
meanings; The following meanings have been assigned to feature names:

:cltl1

If present, indicates that the LISP package
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}} to the
1984 specification @emph{Common Lisp: The Language}. It is possible, but
not required, for a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} to have this feature because this specification
specifies that its @uref{glo_s.html#symbol,@emph{symbols}} are to be in
the COMMON-LISP package, not the LISP package.

:cltl2

If present, indicates that the implementation
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}} to
@uref{http://www.cs.cmu.edu:8001/Web/Groups/AI/html/cltl/cltl2.html,@emph{Common
Lisp: The Language, Second Edition}}. This feature must not be present
in any @uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}}, since conformance to that document is not compatible
with conformance to this specification. The name, however, is reserved
by this specification in order to help programs distinguish
implementations which conform to that document from implementations
which conform to this specification.

:ieee-floating-point

If present, indicates that the implementation
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}} to the
requirements of @emph{IEEE Standard for Binary Floating-Point
Arithmetic}.

:x3j13

If present, indicates that the implementation conforms to some
particular working draft of this specification, or to some subset of
features that approximates a belief about what this specification might
turn out to contain. A
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} might or might not contain such a feature. (This
feature is intended primarily as a stopgap in order to provide
implementors something to use prior to the availability of a draft
standard, in order to discourage them from introducing the
:draft-ansi-cl and :ansi-cl @uref{glo_f.html#feature,@emph{features}}
prematurely.)

:draft-ansi-cl

If present, indicates that the
@uref{glo_i.html#implementation,@emph{implementation}}
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}} to the
first full draft of this specification, which went to public review in
1992. A @uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} which has the :draft-ansi-cl-2 or :ansi-cl
@uref{glo_f.html#feature,@emph{feature}} is not permitted to retain the
:draft-ansi-cl @uref{glo_f.html#feature,@emph{feature}} since
incompatible changes were made subsequent to the first draft.

:draft-ansi-cl-2

If present, indicates that a second full draft of this specification has
gone to public review, and that the
@uref{glo_i.html#implementation,@emph{implementation}}
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}} to that
specification. (If additional public review drafts are produced, this
keyword will continue to refer to the second draft, and additional
keywords will be added to identify conformance with such later drafts.
As such, the meaning of this keyword can be relied upon not to change
over time.) A
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} which has the :ansi-cl
@uref{glo_f.html#feature,@emph{feature}} is only permitted to retain the
:draft-ansi-cl @uref{glo_f.html#feature,@emph{feature}} if the finally
approved standard is not incompatible with the draft standard.

:ansi-cl

If present, indicates that this specification has been adopted by ANSI
as an official standard, and that the
@uref{glo_i.html#implementation,@emph{implementation}}
@uref{glo_p.html#purports_to_conform,@emph{purports to conform}}.

:common-lisp

This feature must appear in @ref{#STfeaturesST,@strong{*features*}} for
any implementation that has one or more of the features :x3j13,
:draft-ansi-cl, or :ansi-cl. It is intended that it should also appear
in implementations which have the features :cltl1 or :cltl2, but this
specification cannot force such behavior. The intent is that this
feature should identify the language family named ``Common Lisp,''
rather than some specific dialect within that family.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{See Also:}

@uref{sec_1-5-2-1-1.html,Section 1.5.2.1.1 (Use of Read-Time
Conditionals)}, @uref{sec_2-4.html,Section 2.4 (Standard Macro
Characters)}

@strong{Notes:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STfeaturesST,@strong{*features*}} is used by the #+ and #- reader
syntax.

@uref{glo_s.html#symbol,@emph{Symbols}} in the
@uref{glo_f.html#features_list,@emph{features list}} may be in any
@uref{glo_p.html#package,@emph{package}}, but in practice they are
generally in the KEYWORD package. This is because KEYWORD is the
@uref{glo_p.html#package,@emph{package}} used by default when
@emph{reading}[2] @uref{glo_f.html#feature_expression,@emph{feature
expressions}} in the #+ and #-
@uref{glo_r.html#reader_macro,@emph{reader macros}}.
@uref{glo_c.html#code,@emph{Code}} that needs to name a
@uref{glo_f.html#feature,@emph{feature}}[2] in a
@uref{glo_p.html#package,@emph{package}} P (other than KEYWORD) can do
so by making explicit use of a
@uref{glo_p.html#package_prefix,@emph{package prefix}} for P, but note
that such @uref{glo_c.html#code,@emph{code}} must also assure that the
@uref{glo_p.html#package,@emph{package}} P exists in order for the
@uref{glo_f.html#feature_expression,@emph{feature expression}} to be
@uref{glo_r.html#read,@emph{read}}[2]---even in cases where the
@uref{glo_f.html#feature_expression,@emph{feature expression}} is
expected to fail.

It is generally considered wise for an
@uref{glo_i.html#implementation,@emph{implementation}} to include one or
more @uref{glo_f.html#feature,@emph{features}} identifying the specific
@uref{glo_i.html#implementation,@emph{implementation}}, so that
conditional expressions can be written which distinguish idiosyncrasies
of one @uref{glo_i.html#implementation,@emph{implementation}} from those
of another. Since features are normally
@uref{glo_s.html#symbol,@emph{symbols}} in the KEYWORD package where
name collisions might easily result, and since no uniquely defined
mechanism is designated for deciding who has the right to use which
@uref{glo_s.html#symbol,@emph{symbol}} for what reason, a conservative
strategy is to prefer names derived from one's own company or product
name, since those names are often trademarked and are hence less likely
to be used unwittingly by another
@uref{glo_i.html#implementation,@emph{implementation}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss318.html,SHARPSIGN-PLUS-MINUS-PACKAGE:KEYWORD}
@item
@uref{../Issues/iss056.html,COMMON-FEATURES:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *LOAD-PATHNAME* *LOAD-TRUENAME*
@subsubsection CLHS: Variable *LOAD-PATHNAME*, *LOAD-TRUENAME*
@anchor{#clhs-variable-load-pathname-load-truename}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stcompile_e-truenamest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stcompile_le-verbosest.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*LOAD-PATHNAME*, *LOAD-TRUENAME*}

@strong{Value Type:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STload-pathnameST,@strong{*load-pathname*}} must always be a
@uref{glo_p.html#pathname,@emph{pathname}} or
@uref{any_nil.html#nil,@strong{nil}}. The
@uref{glo_v.html#value,@emph{value}} of
@ref{#STload-truenameST,@strong{*load-truename*}} must always be a
@uref{glo_p.html#physical_pathname,@emph{physical pathname}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

During a call to @uref{fun_load.html#load,@strong{load}},
@ref{#STload-pathnameST,@strong{*load-pathname*}} is
@uref{glo_b.html#bound,@emph{bound}} to the
@uref{glo_p.html#pathname,@emph{pathname}} denoted by the the first
argument to @uref{fun_load.html#load,@strong{load}}, merged against the
defaults; that is, it is @uref{glo_b.html#bound,@emph{bound}} to
(pathname (merge-pathnames @emph{filespec})). During the same time
interval, @ref{#STload-truenameST,@strong{*load-truename*}} is
@uref{glo_b.html#bound,@emph{bound}} to the
@uref{glo_t.html#truename,@emph{truename}} of the
@uref{glo_f.html#file,@emph{file}} being loaded.

At other times, the @uref{glo_v.html#value,@emph{value}} of these
@uref{glo_v.html#variable,@emph{variables}} is
@uref{any_nil.html#nil,@strong{nil}}.

If a @uref{glo_b.html#break_loop,@emph{break loop}} is entered while
@uref{fun_load.html#load,@strong{load}} is ongoing, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether these @uref{glo_v.html#variable,@emph{variables}} retain the
@uref{glo_v.html#value,@emph{values}} they had just prior to entering
the @uref{glo_b.html#break_loop,@emph{break loop}} or whether they are
@uref{glo_b.html#bound,@emph{bound}} to
@uref{any_nil.html#nil,@strong{nil}}.

The consequences are unspecified if an attempt is made to
@uref{glo_a.html#assign,@emph{assign}} or
@uref{glo_b.html#bind,@emph{bind}} either of these
@uref{glo_v.html#variable,@emph{variables}}.

@strong{Examples:} None.

@strong{Affected By:}

The @uref{glo_f.html#file_system,@emph{file system}}.

@strong{See Also:}

@uref{fun_load.html#load,@strong{load}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss218.html,LOAD-TRUENAME:NEW-PATHNAME-VARIABLES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *LOAD-PRINT* *LOAD-VERBOSE*
@subsubsection CLHS: Variable *LOAD-PRINT*, *LOAD-VERBOSE*
@anchor{#clhs-variable-load-print-load-verbose}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stcompile_le-verbosest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stmodulesst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*LOAD-PRINT*, *LOAD-VERBOSE*}

@strong{Value Type:}

a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Initial Value:}

The initial @uref{glo_v.html#value,@emph{value}} of
@ref{#STload-printST,@strong{*load-print*}} is
@uref{glo_f.html#false,@emph{false}}. The initial
@uref{glo_v.html#value,@emph{value}} of
@ref{#STload-verboseST,@strong{*load-verbose*}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STload-printST,@strong{*load-print*}} is the default value of the
:print @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_load.html#load,@strong{load}}. The
@uref{glo_v.html#value,@emph{value}} of
@ref{#STload-verboseST,@strong{*load-verbose*}} is the default value of
the :verbose @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_load.html#load,@strong{load}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_load.html#load,@strong{load}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss067.html,COMPILER-VERBOSITY:LIKE-LOAD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *MODULES*
@subsubsection CLHS: Variable *MODULES*
@anchor{#clhs-variable-modules}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stload-pr_ad-verbosest.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_syste_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_providecm_require.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*MODULES*}

@strong{Value Type:}

a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string,@emph{strings}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#STmodulesST,@strong{*modules*}} is a list of names of the modules
that have been loaded into the current
@uref{glo_l.html#lisp_image,@emph{Lisp image}}.

@strong{Examples:} None.

@strong{Affected By:}

@uref{fun_providecm_require.html#provide,@strong{provide}}

@strong{See Also:}

@uref{fun_providecm_require.html#provide,@strong{provide}},
@uref{fun_providecm_require.html#require,@strong{require}}

@strong{Notes:}

The variable @ref{#STmodulesST,@strong{*modules*}} is deprecated.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss294.html,REQUIRE-PATHNAME-DEFAULTS-AGAIN:X3J13-DEC-91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 25
@section CLHS: Chapter 25
@anchor{#clhs-chapter-25}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_providecm_require.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_25-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
25. Environment

@uref{sec_25-1.html,}

25.1 The External Environment

@uref{sec_the_envir_t_dictionary.html,}

25.2 The Environment Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Environment Dictionary::
@end menu

@node CLHS Section The Environment Dictionary
@subsection CLHS: Section The Environment Dictionary
@anchor{#clhs-section-the-environment-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_25-1-4-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-25.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_decode-universal-time.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
25.2 The Environment Dictionary

@uref{fun_decode-universal-time.html,@emph{Function}
@strong{DECODE-UNIVERSAL-TIME}}

@uref{fun_encode-universal-time.html,@emph{function}
@strong{ENCODE-UNIVERSAL-TIME}}

@uref{fun_get-unive_decoded-time.html,@emph{Function}
@strong{GET-UNIVERSAL-TIME, GET-DECODED-TIME}}

@uref{fun_sleep.html,@emph{Function} @strong{SLEEP}}

@uref{fun_aproposcm_apropos-list.html,@emph{Function} @strong{APROPOS,
APROPOS-LIST}}

@uref{fun_describe.html,@emph{Function} @strong{DESCRIBE}}

@uref{stagenfun_describe-object.html,@emph{Standard Generic Function}
@strong{DESCRIBE-OBJECT}}

@uref{mac_tracecm_untrace.html,@emph{Macro} @strong{TRACE, UNTRACE}}

@uref{mac_step.html,@emph{Macro} @strong{STEP}}

@uref{mac_time.html,@emph{Macro} @strong{TIME}}

@uref{convar_intern_s-per-second.html,@emph{Constant Variable}
@strong{INTERNAL-TIME-UNITS-PER-SECOND}}

@uref{fun_get-internal-real-time.html,@emph{Function}
@strong{GET-INTERNAL-REAL-TIME}}

@uref{fun_get-internal-run-time.html,@emph{Function}
@strong{GET-INTERNAL-RUN-TIME}}

@uref{fun_disassemble.html,@emph{Function} @strong{DISASSEMBLE}}

@uref{stagenfun_doc_umentationcp.html,@emph{Standard Generic Function}
@strong{DOCUMENTATION, (SETF DOCUMENTATION)}}

@uref{fun_room.html,@emph{Function} @strong{ROOM}}

@uref{fun_ed.html,@emph{Function} @strong{ED}}

@uref{fun_inspect.html,@emph{Function} @strong{INSPECT}}

@uref{fun_dribble.html,@emph{Function} @strong{DRIBBLE}}

@uref{var_-.html,@emph{Variable} @strong{-}}

@uref{var_plcm_plplcm_plplpl.html,@emph{Variable} @strong{+, ++, +++}}

@uref{var_stcm_ststcm_ststst.html,@emph{Variable} @strong{*, **, ***}}

@uref{var_slcm_slslcm_slslsl.html,@emph{Variable} @strong{/, //, ///}}

@uref{fun_lisp-impl_tion-version.html,@emph{Function}
@strong{LISP-IMPLEMENTATION-TYPE, LISP-IMPLEMENTATION-VERSION}}

@uref{fun_short-sit_ng-site-name.html,@emph{Function}
@strong{SHORT-SITE-NAME, LONG-SITE-NAME}}

@uref{fun_machine-instance.html,@emph{Function}
@strong{MACHINE-INSTANCE}}

@uref{fun_machine-type.html,@emph{Function} @strong{MACHINE-TYPE}}

@uref{fun_machine-version.html,@emph{Function} @strong{MACHINE-VERSION}}

@uref{fun_software-_ware-version.html,@emph{Function}
@strong{SOFTWARE-TYPE, SOFTWARE-VERSION}}

@uref{fun_user-homedir-pathname.html,@emph{Function}
@strong{USER-HOMEDIR-PATHNAME}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss136.html,DOCUMENTATION-FUNCTION-TANGLED:REQUIRE-ARGUMENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Constant Variable INTERNAL-TIME-UNITS-PER-SECOND::
* CLHS Function APROPOS APROPOS-LIST::
* CLHS Function DESCRIBE::
* CLHS Function DISASSEMBLE::
* CLHS Function DRIBBLE::
* CLHS Function ED::
* CLHS function ENCODE-UNIVERSAL-TIME::
* CLHS Function GET-INTERNAL-REAL-TIME::
* CLHS Function GET-INTERNAL-RUN-TIME::
* CLHS Function GET-UNIVERSAL-TIME GET-DECODED-TIME::
* CLHS Function INSPECT::
* CLHS Function LISP-IMPLEMENTATION-TYPE::
* CLHS Function MACHINE-INSTANCE::
* CLHS Function MACHINE-TYPE::
* CLHS Function MACHINE-VERSION::
* CLHS Function ROOM::
* CLHS Function SHORT-SITE-NAME LONG-SITE-NAME::
* CLHS Function SLEEP::
* CLHS Function SOFTWARE-TYPE SOFTWARE-VERSION::
* CLHS Function USER-HOMEDIR-PATHNAME::
* CLHS Macro STEP::
* CLHS Macro TIME::
* CLHS Macro TRACE UNTRACE::
* CLHS Standard Generic Function DESCRIBE-OBJECT::
* CLHS Standard Generic Function DOCUMENTATION::
* CLHS Variable -::
* CLHS Variable + ++ +++::
* CLHS Variable / // ///::
* CLHS Variable * ** ***::
@end menu

@node CLHS Constant Variable INTERNAL-TIME-UNITS-PER-SECOND
@subsubsection CLHS: Constant Variable INTERNAL-TIME-UNITS-PER-SECOND
@anchor{#clhs-constant-variable-internal-time-units-per-second}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-internal-real-time.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{INTERNAL-TIME-UNITS-PER-SECOND}

@strong{Constant Value:}

A positive @uref{glo_i.html#integer,@emph{integer}}, the magnitude of
which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The number of @uref{glo_i.html#internal_time_unit,@emph{internal time
units}} in one second.

@strong{Examples:} None.

@strong{See Also:}

@uref{fun_get-internal-run-time.html#get-internal-run-time,@strong{get-internal-run-time}},
@uref{fun_get-internal-real-time.html#get-internal-real-time,@strong{get-internal-real-time}}

@strong{Notes:}

These units form the basis of the Internal Time format representation.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function APROPOS APROPOS-LIST
@subsubsection CLHS: Function APROPOS, APROPOS-LIST
@anchor{#clhs-function-apropos-apropos-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_sleep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_describe.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{APROPOS, APROPOS-LIST}

@strong{Syntax:}

@strong{apropos} @emph{string &optional package} => @emph{@emph{<no
values>}}

@strong{apropos-list} @emph{string &optional package} => @emph{symbols}

@strong{Arguments and Values:}

@emph{string}---a @uref{glo_s.html#string_designator,@emph{string
designator}}.

@emph{package}---a @uref{glo_p.html#package_designator,@emph{package
designator}} or @uref{any_nil.html#nil,@strong{nil}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{symbols}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}.

@strong{Description:}

These functions search for @uref{glo_i.html#interned,@emph{interned}}
@uref{glo_s.html#symbol,@emph{symbols}} whose
@uref{glo_n.html#name,@emph{names}} contain the substring @emph{string}.

For @ref{#apropos,@strong{apropos}}, as each such
@uref{glo_s.html#symbol,@emph{symbol}} is found, its name is printed on
@uref{glo_s.html#standard_output,@emph{standard output}}. In addition,
if such a @uref{glo_s.html#symbol,@emph{symbol}} is defined as a
@uref{glo_f.html#function,@emph{function}} or
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}, information
about those definitions might also be printed.

For @ref{#apropos-list,@strong{apropos-list}}, no output occurs as the
search proceeds; instead a list of the matching
@uref{glo_s.html#symbol,@emph{symbols}} is returned when the search is
complete.

If @emph{package} is @uref{glo_n.html#non-nil,@emph{non-nil}}, only the
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_a.html#accessible,@emph{accessible}} in that @emph{package}
are searched; otherwise all @uref{glo_s.html#symbol,@emph{symbols}}
@uref{glo_a.html#accessible,@emph{accessible}} in any
@uref{glo_p.html#package,@emph{package}} are searched.

Because a @uref{glo_s.html#symbol,@emph{symbol}} might be available by
way of more than one inheritance path, @ref{#apropos,@strong{apropos}}
might print information about the @uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#symbol,@emph{symbol}} more than once, or
@ref{#apropos-list,@strong{apropos-list}} might return a
@uref{glo_l.html#list,@emph{list}} containing duplicate
@uref{glo_s.html#symbol,@emph{symbols}}.

Whether or not the search is case-sensitive is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@strong{Examples:} None.

@strong{Affected By:}

The set of @uref{glo_s.html#symbol,@emph{symbols}} which are currently
@uref{glo_i.html#interned,@emph{interned}} in any
@uref{glo_p.html#package,@emph{packages}} being searched.

@ref{#apropos,@strong{apropos}} is also affected by
@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DESCRIBE
@subsubsection CLHS: Function DESCRIBE
@anchor{#clhs-function-describe}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_aproposcm_apropos-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_describe-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DESCRIBE}

@strong{Syntax:}

@strong{describe} @emph{object &optional stream} => @emph{@emph{<no
values>}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{stream}---an @uref{glo_o.html#output,@emph{output}}
@uref{glo_s.html#stream_designator,@emph{stream designator}}. The
default is @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Description:}

@ref{#describe,@strong{describe}} displays information about
@emph{object} to @emph{stream}.

For example, @ref{#describe,@strong{describe}} of a
@uref{glo_s.html#symbol,@emph{symbol}} might show the
@uref{glo_s.html#symbol,@emph{symbol}}'s value, its definition, and each
of its properties. @ref{#describe,@strong{describe}} of a
@uref{glo_f.html#float,@emph{float}} might show the number's internal
representation in a way that is useful for tracking down round-off
errors. In all cases, however, the nature and format of the output of
@ref{#describe,@strong{describe}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@ref{#describe,@strong{describe}} can describe something that it finds
inside the @emph{object}; in such cases, a notational device such as
increased indentation or positioning in a table is typically used in
order to visually distinguish such recursive descriptions from
descriptions of the argument @emph{object}.

The actual act of describing the object is implemented by
@uref{stagenfun_describe-object.html#describe-object,@strong{describe-object}}.
@ref{#describe,@strong{describe}} exists as an interface primarily to
manage argument defaulting (including conversion of arguments
@uref{any_t.html#t,@strong{t}} and @uref{any_nil.html#nil,@strong{nil}}
into @uref{glo_s.html#stream,@emph{stream}}
@uref{glo_o.html#object,@emph{objects}}) and to inhibit any return
values from
@uref{stagenfun_describe-object.html#describe-object,@strong{describe-object}}.

@ref{#describe,@strong{describe}} is not intended to be an interactive
function. In a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}}, @ref{#describe,@strong{describe}} must not, by
default, prompt for user input. User-defined methods for
@uref{stagenfun_describe-object.html#describe-object,@strong{describe-object}}
are likewise restricted.

@strong{Examples:} None.

@strong{Side Effects:}

Output to @uref{glo_s.html#standard_output,@emph{standard output}} or
@uref{glo_t.html#terminal_iSLo,@emph{terminal I/O}}.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}
and
@uref{var_stterminal-iost.html#STterminal-ioST,@strong{*terminal-io*}},
methods on
@uref{stagenfun_describe-object.html#describe-object,@strong{describe-object}}
and
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
for @uref{glo_o.html#object,@emph{objects}} having user-defined
@uref{glo_c.html#class,@emph{classes}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_inspect.html#inspect,@strong{inspect}},
@uref{stagenfun_describe-object.html#describe-object,@strong{describe-object}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss127.html,DESCRIBE-INTERACTIVE:NO}
@item
@uref{../Issues/iss128.html,DESCRIBE-UNDERSPECIFIED:DESCRIBE-OBJECT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DISASSEMBLE
@subsubsection CLHS: Function DISASSEMBLE
@anchor{#clhs-function-disassemble}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-internal-run-time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_doc_umentationcp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DISASSEMBLE}

@strong{Syntax:}

@strong{disassemble} @emph{fn} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{fn}---an
@uref{glo_e.html#extended_function_designator,@emph{extended function
designator}} or a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#disassemble,@strong{disassemble}} is a debugging aid that composes
symbolic instructions or expressions in some
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
language which represent the code used to produce the
@uref{glo_f.html#function,@emph{function}} which is or is named by the
argument @emph{fn}. The result is displayed to
@uref{glo_s.html#standard_output,@emph{standard output}} in an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
format.

If @emph{fn} is a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}} or @uref{glo_i.html#interpreted_function,@emph{interpreted
function}}, it is compiled first and the result is disassembled.

If the @emph{fn} @uref{glo_d.html#designator,@emph{designator}} is a
@uref{glo_f.html#function_name,@emph{function name}}, the
@uref{glo_f.html#function,@emph{function}} that it
@uref{glo_n.html#name,@emph{names}} is disassembled. (If that
@uref{glo_f.html#function,@emph{function}} is an
@uref{glo_i.html#interpreted_function,@emph{interpreted function}}, it
is first compiled but the result of this implicit compilation is not
installed.)

@strong{Examples:}

@verbatim
 (defun f (a) (1+ a)) =>  F
 (eq (symbol-function 'f)
     (progn (disassemble 'f)
            (symbol-function 'f))) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{fn} is not an
@uref{glo_e.html#extended_function_designator,@emph{extended function
designator}} or a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss131.html,DISASSEMBLE-SIDE-EFFECT:DO-NOT-INSTALL}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function DRIBBLE
@subsubsection CLHS: Function DRIBBLE
@anchor{#clhs-function-dribble}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_inspect.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_-.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{DRIBBLE}

@strong{Syntax:}

@strong{dribble} @emph{&optional pathname} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{pathname}---a @uref{glo_p.html#pathname_designator,@emph{pathname
designator}}.

@strong{Description:}

Either @uref{glo_b.html#bind,@emph{binds}}
@uref{var_stdebug-i_ace-outputst.html#STstandard-inputST,@strong{*standard-input*}}
and
@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}
or takes other appropriate action, so as to send a record of the
input/output interaction to a file named by @emph{pathname}.
@ref{#dribble,@strong{dribble}} is intended to create a readable record
of an interactive session.

If @emph{pathname} is a @uref{glo_l.html#logical_pathname,@emph{logical
pathname}}, it is translated into a physical pathname as if by calling
@uref{fun_translate_cal-pathname.html#translate-logical-pathname,@strong{translate-logical-pathname}}.

(dribble) terminates the recording of input and output and closes the
dribble file.

If @ref{#dribble,@strong{dribble}} is @emph{called} while a
@uref{glo_s.html#stream,@emph{stream}} to a ``dribble file'' is still
open from a previous @uref{glo_c.html#call,@emph{call}} to
@ref{#dribble,@strong{dribble}}, the effect is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
For example, the already-@uref{glo_o.html#open,@emph{open}}
@uref{glo_s.html#stream,@emph{stream}} might be
@uref{glo_c.html#closed,@emph{closed}}, or dribbling might occur both to
the old @uref{glo_s.html#stream,@emph{stream}} and to a new one, or the
old @uref{glo_s.html#stream,@emph{stream}} might stay open but not
receive any further output, or the new request might be ignored, or some
other action might be taken.

@strong{Examples:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:}

If a failure occurs when performing some operation on the
@uref{glo_f.html#file_system,@emph{file system}} while creating the
dribble file, an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if @emph{pathname} is a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_w.html#wild,@emph{wild}}
@uref{glo_p.html#pathname,@emph{pathname}}.

@strong{See Also:}

@uref{sec_19-1-2.html,Section 19.1.2 (Pathnames as Filenames)}

@strong{Notes:}

@ref{#dribble,@strong{dribble}} can return before subsequent
@uref{glo_f.html#form,@emph{forms}} are executed. It also can enter a
recursive interaction loop, returning only when (dribble) is done.

@ref{#dribble,@strong{dribble}} is intended primarily for interactive
debugging; its effect cannot be relied upon when used in a program.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss140.html,DRIBBLE-TECHNIQUE}
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss202.html,JUN90-TRIVIAL-ISSUES:25}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ED
@subsubsection CLHS: Function ED
@anchor{#clhs-function-ed}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_room.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_inspect.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ED}

@strong{Syntax:}

@strong{ed} @emph{&optional x} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{x}---@uref{any_nil.html#nil,@strong{nil}}, a
@uref{glo_p.html#pathname,@emph{pathname}}, a
@uref{glo_s.html#string,@emph{string}}, or a
@uref{glo_f.html#function_name,@emph{function name}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#ed,@strong{ed}} invokes the editor if the
@uref{glo_i.html#implementation,@emph{implementation}} provides a
resident editor.

If @emph{x} is @uref{any_nil.html#nil,@strong{nil}}, the editor is
entered. If the editor had been previously entered, its prior state is
resumed, if possible.

If @emph{x} is a @uref{glo_p.html#pathname,@emph{pathname}} or
@uref{glo_s.html#string,@emph{string}}, it is taken as the
@uref{glo_p.html#pathname_designator,@emph{pathname designator}} for a
@uref{glo_f.html#file,@emph{file}} to be edited.

If @emph{x} is a @uref{glo_f.html#function_name,@emph{function name}},
the text of its definition is edited. The means by which the function
text is obtained is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if the
@uref{glo_i.html#implementation,@emph{implementation}} does not provide
a resident editor.

Might signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is supplied but is not a
@uref{glo_s.html#symbol,@emph{symbol}}, a
@uref{glo_p.html#pathname,@emph{pathname}}, or
@uref{any_nil.html#nil,@strong{nil}}.

If a failure occurs when performing some operation on the
@uref{glo_f.html#file_system,@emph{file system}} while attempting to
edit a @uref{glo_f.html#file,@emph{file}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} is
signaled.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_file-error.html#file-error,@strong{file-error}} might be
signaled if @emph{x} is a @uref{glo_d.html#designator,@emph{designator}}
for a @uref{glo_w.html#wild,@emph{wild}}
@uref{glo_p.html#pathname,@emph{pathname}}.

@uref{glo_i.html#implementation-dependent,@emph{Implementation-dependent}}
additional conditions might be signaled as well.

@strong{See Also:}

@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_logical-pathname.html#logical-pathname,@strong{logical-pathname}},
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{fun_load.html#load,@strong{load}}, @uref{sec_19-1-2.html,Section
19.1.2 (Pathnames as Filenames)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss258.html,PATHNAME-HOST-PARSING:RECOGNIZE-LOGICAL-HOST-NAMES}
@item
@uref{../Issues/iss259.html,PATHNAME-LOGICAL:ADD}
@item
@uref{../Issues/iss157.html,FILE-OPEN-ERROR:SIGNAL-FILE-ERROR}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS function ENCODE-UNIVERSAL-TIME
@subsubsection CLHS: function ENCODE-UNIVERSAL-TIME
@anchor{#clhs-function-encode-universal-time}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_decode-universal-time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-unive_decoded-time.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{function} @strong{ENCODE-UNIVERSAL-TIME}

@strong{Syntax:}

@strong{encode-universal-time} @emph{second minute hour date month year
&optional time-zone}

=> @emph{universal-time}

@strong{Arguments and Values:}

@emph{second}, @emph{minute}, @emph{hour}, @emph{date}, @emph{month},
@emph{year}, @emph{time-zone}---the corresponding parts of a
@uref{glo_d.html#decoded_time,@emph{decoded time}}. (Note that some of
the nine values in a full @uref{glo_d.html#decoded_time,@emph{decoded
time}} are redundant, and so are not used as inputs to this function.)

@emph{universal-time}---a
@uref{glo_u.html#universal_time,@emph{universal time}}.

@strong{Description:}

@ref{#encode-universal-time,@strong{encode-universal-time}} converts a
time from Decoded Time format to a
@uref{glo_u.html#universal_time,@emph{universal time}}.

If @emph{time-zone} is supplied, no adjustment for daylight savings time
is performed.

@strong{Examples:}

@verbatim
 (encode-universal-time 0 0 0 1 1 1900 0) =>  0
 (encode-universal-time 0 0 1 4 7 1976 5) =>  2414296800
;; The next example assumes Eastern Daylight Time.
 (encode-universal-time 0 0 1 4 7 1976) =>  2414293200
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_decode-universal-time.html#decode-universal-time,@strong{decode-universal-time}},
@uref{fun_get-unive_decoded-time.html#get-decoded-time,@strong{get-decoded-time}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-INTERNAL-REAL-TIME
@subsubsection CLHS: Function GET-INTERNAL-REAL-TIME
@anchor{#clhs-function-get-internal-real-time}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_intern_s-per-second.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-internal-run-time.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-INTERNAL-REAL-TIME}

@strong{Syntax:}

@strong{get-internal-real-time} @emph{@emph{<no arguments>}} =>
@emph{internal-time}

@strong{Arguments and Values:}

@emph{internal-time}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

@ref{#get-internal-real-time,@strong{get-internal-real-time}} returns as
an @uref{glo_i.html#integer,@emph{integer}} the current time in
@uref{glo_i.html#internal_time_unit,@emph{internal time units}},
relative to an arbitrary time base. The difference between the values of
two calls to this function is the amount of elapsed real time (i.e.,
clock time) between the two calls.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:}

Time of day (i.e., the passage of time). The time base affects the
result magnitude.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{convar_intern_s-per-second.html#internal-time-units-per-second,@strong{internal-time-units-per-second}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-INTERNAL-RUN-TIME
@subsubsection CLHS: Function GET-INTERNAL-RUN-TIME
@anchor{#clhs-function-get-internal-run-time}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-internal-real-time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_disassemble.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-INTERNAL-RUN-TIME}

@strong{Syntax:}

@strong{get-internal-run-time} @emph{@emph{<no arguments>}} =>
@emph{internal-time}

@strong{Arguments and Values:}

@emph{internal-time}---a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@strong{Description:}

Returns as an @uref{glo_i.html#integer,@emph{integer}} the current run
time in @uref{glo_i.html#internal_time_unit,@emph{internal time units}}.
The precise meaning of this quantity is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}};
it may measure real time, run time, CPU cycles, or some other quantity.
The intent is that the difference between the values of two calls to
this function be the amount of time between the two calls during which
computational effort was expended on behalf of the executing program.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:}

The @uref{glo_i.html#implementation,@emph{implementation}}, the time of
day (i.e., the passage of time).

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{convar_intern_s-per-second.html#internal-time-units-per-second,@strong{internal-time-units-per-second}}

@strong{Notes:}

Depending on the @uref{glo_i.html#implementation,@emph{implementation}},
paging time and garbage collection time might be included in this
measurement. Also, in a multitasking environment, it might not be
possible to show the time for just the running process, so in some
@uref{glo_i.html#implementation,@emph{implementations}}, time taken by
other processes during the same time interval might be included in this
measurement as well.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-UNIVERSAL-TIME GET-DECODED-TIME
@subsubsection CLHS: Function GET-UNIVERSAL-TIME, GET-DECODED-TIME
@anchor{#clhs-function-get-universal-time-get-decoded-time}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_encode-universal-time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_sleep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-UNIVERSAL-TIME, GET-DECODED-TIME}

@strong{Syntax:}

@strong{get-universal-time} @emph{@emph{<no arguments>}} =>
@emph{universal-time}

@strong{get-decoded-time} @emph{@emph{<no arguments>}}

=> @emph{second, minute, hour, date, month, year, day, daylight-p, zone}

@strong{Arguments and Values:}

@emph{universal-time}---a
@uref{glo_u.html#universal_time,@emph{universal time}}.

@emph{second}, @emph{minute}, @emph{hour}, @emph{date}, @emph{month},
@emph{year}, @emph{day}, @emph{daylight-p}, @emph{zone}---a
@uref{glo_d.html#decoded_time,@emph{decoded time}}.

@strong{Description:}

@ref{#get-universal-time,@strong{get-universal-time}} returns the
current time, represented as a
@uref{glo_u.html#universal_time,@emph{universal time}}.

@ref{#get-decoded-time,@strong{get-decoded-time}} returns the current
time, represented as a @uref{glo_d.html#decoded_time,@emph{decoded
time}}.

@strong{Examples:}

@verbatim
;; At noon on July 4, 1976 in Eastern Daylight Time.
 (get-decoded-time) =>  0, 0, 12, 4, 7, 1976, 6, true, 5
;; At exactly the same instant.
 (get-universal-time) =>  2414332800
;; Exactly five minutes later.
 (get-universal-time) =>  2414333100
;; The difference is 300 seconds (five minutes)
 (- * **) =>  300
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The time of day (i.e., the passage of time), the system clock's ability
to keep accurate time, and the accuracy of the system clock's initial
setting.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} might be signaled if the
current time cannot be determined.

@strong{See Also:}

@uref{fun_decode-universal-time.html#decode-universal-time,@strong{decode-universal-time}},
@uref{fun_encode-universal-time.html#encode-universal-time,@strong{encode-universal-time}},
@uref{sec_25-1-4.html,Section 25.1.4 (Time)}

@strong{Notes:}

@verbatim
 (get-decoded-time) ==  (decode-universal-time (get-universal-time))
@end verbatim

No @uref{glo_i.html#implementation,@emph{implementation}} is required to
have a way to verify that the time returned is correct. However, if an
@uref{glo_i.html#implementation,@emph{implementation}} provides a
validity check (e.g., the failure to have properly initialized the
system clock can be reliably detected) and that validity check fails,
the @uref{glo_i.html#implementation,@emph{implementation}} is strongly
encouraged (but not required) to signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} (rather than, for example,
returning a known-to-be-wrong value) that is
@uref{glo_c.html#correctable,@emph{correctable}} by allowing the user to
interactively set the correct time.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INSPECT
@subsubsection CLHS: Function INSPECT
@anchor{#clhs-function-inspect}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ed.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_dribble.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INSPECT}

@strong{Syntax:}

@strong{inspect} @emph{object} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#inspect,@strong{inspect}} is an interactive version of
@uref{fun_describe.html#describe,@strong{describe}}. The nature of the
interaction is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but the purpose of @ref{#inspect,@strong{inspect}} is to make it easy to
wander through a data structure, examining and modifying parts of it.

@strong{Examples:} None.

@strong{Side Effects:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Affected By:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Exceptional Situations:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{See Also:}

@uref{fun_describe.html#describe,@strong{describe}}

@strong{Notes:}

Implementations are encouraged to respond to the typing of ? or a ``help
key'' by providing help, including a list of commands.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss299.html,RETURN-VALUES-UNSPECIFIED:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function LISP-IMPLEMENTATION-TYPE
@subsubsection CLHS: Function LISP-IMPLEMENTATION-TYPE...
@anchor{#clhs-function-lisp-implementation-type...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_slcm_slslcm_slslsl.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_short-sit_ng-site-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{LISP-IMPLEMENTATION-TYPE,
LISP-IMPLEMENTATION-VERSION}

@strong{Syntax:}

@strong{lisp-implementation-type} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{lisp-implementation-version} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#lisp-implementation-type,@strong{lisp-implementation-type}} and
@ref{#lisp-implementation-version,@strong{lisp-implementation-version}}
identify the current implementation of Common Lisp.

@ref{#lisp-implementation-type,@strong{lisp-implementation-type}}
returns a @uref{glo_s.html#string,@emph{string}} that identifies the
generic name of the particular Common Lisp implementation.

@ref{#lisp-implementation-version,@strong{lisp-implementation-version}}
returns a @uref{glo_s.html#string,@emph{string}} that identifies the
version of the particular Common Lisp implementation.

If no appropriate and relevant result can be produced,
@uref{any_nil.html#nil,@strong{nil}} is returned instead of a
@uref{glo_s.html#string,@emph{string}}.

@strong{Examples:}

@verbatim
 (lisp-implementation-type)
=>  "ACME Lisp"
OR=>  "Joe's Common Lisp"
 (lisp-implementation-version)
=>  "1.3a"
=>  "V2"
OR=>  "Release 17.3, ECO #6"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MACHINE-INSTANCE
@subsubsection CLHS: Function MACHINE-INSTANCE
@anchor{#clhs-function-machine-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_short-sit_ng-site-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_machine-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MACHINE-INSTANCE}

@strong{Syntax:}

@strong{machine-instance} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} that identifies the
particular instance of the computer hardware on which Common Lisp is
running, or @uref{any_nil.html#nil,@strong{nil}} if no such
@uref{glo_s.html#string,@emph{string}} can be computed.

@strong{Examples:}

@verbatim
 (machine-instance)
=>  "ACME.COM"
OR=>  "S/N 123231"
OR=>  "18.26.0.179"
OR=>  "AA-00-04-00-A7-A4"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The machine instance, and the
@uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_machine-type.html#machine-type,@strong{machine-type}},
@uref{fun_machine-version.html#machine-version,@strong{machine-version}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MACHINE-TYPE
@subsubsection CLHS: Function MACHINE-TYPE
@anchor{#clhs-function-machine-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_machine-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_machine-version.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MACHINE-TYPE}

@strong{Syntax:}

@strong{machine-type} @emph{@emph{<no arguments>}} => @emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} that identifies the
generic name of the computer hardware on which Common Lisp is running.

@strong{Examples:}

@verbatim
 (machine-type)
=>  "DEC PDP-10"
OR=>  "Symbolics LM-2"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The machine type. The implementation.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_machine-version.html#machine-version,@strong{machine-version}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MACHINE-VERSION
@subsubsection CLHS: Function MACHINE-VERSION
@anchor{#clhs-function-machine-version}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_machine-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_software-_ware-version.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MACHINE-VERSION}

@strong{Syntax:}

@strong{machine-version} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns a @uref{glo_s.html#string,@emph{string}} that identifies the
version of the computer hardware on which Common Lisp is running, or
@uref{any_nil.html#nil,@strong{nil}} if no such value can be computed.

@strong{Examples:}

@verbatim
 (machine-version) =>  "KL-10, microcode 9"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The machine version, and the
@uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_machine-type.html#machine-type,@strong{machine-type}},
@uref{fun_machine-instance.html#machine-instance,@strong{machine-instance}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ROOM
@subsubsection CLHS: Function ROOM
@anchor{#clhs-function-room}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_doc_umentationcp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_ed.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ROOM}

@strong{Syntax:}

@strong{room} @emph{&optional x} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{x}---one of @uref{any_t.html#t,@strong{t}},
@uref{any_nil.html#nil,@strong{nil}}, or :default.

@strong{Description:}

@ref{#room,@strong{room}} prints, to
@uref{glo_s.html#standard_output,@emph{standard output}}, information
about the state of internal storage and its management. This might
include descriptions of the amount of memory in use and the degree of
memory compaction, possibly broken down by internal data type if that is
appropriate. The nature and format of the printed information is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
The intent is to provide information that a
@uref{glo_p.html#programmer,@emph{programmer}} might use to tune a
@uref{glo_p.html#program,@emph{program}} for a particular
@uref{glo_i.html#implementation,@emph{implementation}}.

(room nil) prints out a minimal amount of information. (room t) prints
out a maximal amount of information. (room) or (room :default) prints
out an intermediate amount of information that is likely to be useful.

@strong{Examples:} None.

@strong{Side Effects:}

Output to @uref{glo_s.html#standard_output,@emph{standard output}}.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STstandard-outputST,@strong{*standard-output*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss300.html,ROOM-DEFAULT-ARGUMENT:NEW-VALUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SHORT-SITE-NAME LONG-SITE-NAME
@subsubsection CLHS: Function SHORT-SITE-NAME, LONG-SITE-NAME
@anchor{#clhs-function-short-site-name-long-site-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_lisp-impl_tion-version.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_machine-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SHORT-SITE-NAME, LONG-SITE-NAME}

@strong{Syntax:}

@strong{short-site-name} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{long-site-name} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#short-site-name,@strong{short-site-name}} and
@ref{#long-site-name,@strong{long-site-name}} return a
@uref{glo_s.html#string,@emph{string}} that identifies the physical
location of the computer hardware, or
@uref{any_nil.html#nil,@strong{nil}} if no appropriate
@emph{description} can be produced.

@strong{Examples:}

@verbatim
 (short-site-name)
=>  "MIT AI Lab"
OR=>  "CMU-CSD"
 (long-site-name)
=>  "MIT Artificial Intelligence Laboratory"
OR=>  "CMU Computer Science Department"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The implementation, the location of the computer hardware, and the
installation/configuration process.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SLEEP
@subsubsection CLHS: Function SLEEP
@anchor{#clhs-function-sleep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-unive_decoded-time.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_aproposcm_apropos-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SLEEP}

@strong{Syntax:}

@strong{sleep} @emph{seconds} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{seconds}---a non-negative
@uref{syscla_real.html#real,@emph{real}}.

@strong{Description:}

Causes execution to cease and become dormant for approximately the
seconds of real time indicated by @emph{seconds}, whereupon execution is
resumed.

@strong{Examples:}

@verbatim
 (sleep 1) =>  NIL 

;; Actually, since SLEEP is permitted to use approximate timing, 
;; this might not always yield true, but it will often enough that
;; we felt it to be a productive example of the intent.
 (let ((then (get-universal-time))
       (now  (progn (sleep 10) (get-universal-time))))
   (>= (- now then) 10))
=>  true
@end verbatim

@strong{Side Effects:}

Causes processing to pause.

@strong{Affected By:}

The granularity of the scheduler.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{seconds} is not a non-negative
@uref{syscla_real.html#real,@emph{real}}.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SOFTWARE-TYPE SOFTWARE-VERSION
@subsubsection CLHS: Function SOFTWARE-TYPE, SOFTWARE-VERSION
@anchor{#clhs-function-software-type-software-version}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_machine-version.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_user-homedir-pathname.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SOFTWARE-TYPE, SOFTWARE-VERSION}

@strong{Syntax:}

@strong{software-type} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{software-version} @emph{@emph{<no arguments>}} =>
@emph{description}

@strong{Arguments and Values:}

@emph{description}---a @uref{glo_s.html#string,@emph{string}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#software-type,@strong{software-type}} returns a
@uref{glo_s.html#string,@emph{string}} that identifies the generic name
of any relevant supporting software, or
@uref{any_nil.html#nil,@strong{nil}} if no appropriate or relevant
result can be produced.

@ref{#software-version,@strong{software-version}} returns a
@uref{glo_s.html#string,@emph{string}} that identifies the version of
any relevant supporting software, or
@uref{any_nil.html#nil,@strong{nil}} if no appropriate or relevant
result can be produced.

@strong{Examples:}

@verbatim
 (software-type) =>  "Multics"
 (software-version) =>  "1.3x"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

Operating system environment.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

This information should be of use to maintainers of the
@uref{glo_i.html#implementation,@emph{implementation}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function USER-HOMEDIR-PATHNAME
@subsubsection CLHS: Function USER-HOMEDIR-PATHNAME
@anchor{#clhs-function-user-homedir-pathname}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_software-_ware-version.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-26.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{USER-HOMEDIR-PATHNAME}

@strong{Syntax:}

@strong{user-homedir-pathname} @emph{&optional host} => @emph{pathname}

@strong{Arguments and Values:}

@emph{host}---a @uref{glo_s.html#string,@emph{string}}, a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#string,@emph{strings}}, or :unspecific.

@emph{pathname}---a @uref{glo_p.html#pathname,@emph{pathname}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#user-homedir-pathname,@strong{user-homedir-pathname}} determines
the @uref{glo_p.html#pathname,@emph{pathname}} that corresponds to the
user's home directory on @emph{host}. If @emph{host} is not supplied,
its value is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
For a description of :unspecific, see @uref{sec_19-2-1.html,Section
19.2.1 (Pathname Components)}.

The definition of home directory is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but defined in Common Lisp to mean the directory where the user keeps
personal files such as initialization files and mail.

@ref{#user-homedir-pathname,@strong{user-homedir-pathname}} returns a
@uref{glo_p.html#pathname,@emph{pathname}} without any name, type, or
version component (those components are all
@uref{any_nil.html#nil,@strong{nil}}) for the user's home directory on
@emph{host}.

If it is impossible to determine the user's home directory on
@emph{host}, then @uref{any_nil.html#nil,@strong{nil}} is returned.
@ref{#user-homedir-pathname,@strong{user-homedir-pathname}} never
returns @uref{any_nil.html#nil,@strong{nil}} if @emph{host} is not
supplied.

@strong{Examples:}

@verbatim
 (pathnamep (user-homedir-pathname)) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The host computer's file system, and the
@uref{glo_i.html#implementation,@emph{implementation}}.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss266.html,PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro STEP
@subsubsection CLHS: Macro STEP
@anchor{#clhs-macro-step}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_tracecm_untrace.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_time.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{STEP}

@strong{Syntax:}

@strong{step} @emph{form} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{form}.

@strong{Description:}

@ref{#step,@strong{step}} implements a debugging paradigm wherein the
programmer is allowed to @uref{glo_s.html#step,@emph{step}} through the
@uref{glo_e.html#evaluation,@emph{evaluation}} of a
@uref{glo_f.html#form,@emph{form}}. The specific nature of the
interaction, including which I/O streams are used and whether the
stepping has lexical or dynamic scope, is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.

@ref{#step,@strong{step}} evaluates @emph{form} in the current
@uref{glo_e.html#environment,@emph{environment}}. A call to
@ref{#step,@strong{step}} can be compiled, but it is acceptable for an
implementation to interactively step through only those parts of the
computation that are interpreted.

It is technically permissible for a
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} to take no action at all other than normal
@emph{execution} of the @emph{form}. In such a situation, (step
@emph{form}) is equivalent to, for example, (let () @emph{form}). In
implementations where this is the case, the associated documentation
should mention that fact.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_tracecm_untrace.html#trace,@strong{trace}}

@strong{Notes:}

@uref{glo_i.html#implementation,@emph{Implementations}} are encouraged
to respond to the typing of ? or the pressing of a ``help key'' by
providing help including a list of commands.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss326.html,STEP-MINIMAL:PERMIT-PROGN}
@item
@uref{../Issues/iss325.html,STEP-ENVIRONMENT:CURRENT}
@item
@uref{../Issues/iss150.html,EVALHOOK-STEP-CONFUSION:X3J13-NOV-89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro TIME
@subsubsection CLHS: Macro TIME
@anchor{#clhs-macro-time}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_step.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_intern_s-per-second.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{TIME}

@strong{Syntax:}

@strong{time} @emph{form} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{form}.

@strong{Description:}

@ref{#time,@strong{time}} evaluates @emph{form} in the current
@uref{glo_e.html#environment,@emph{environment}} (lexical and dynamic).
A call to @ref{#time,@strong{time}} can be compiled.

@ref{#time,@strong{time}} prints various timing data and other
information to @uref{glo_t.html#trace_output,@emph{trace output}}. The
nature and format of the printed information is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
Implementations are encouraged to provide such information as elapsed
real time, machine run time, and storage management statistics.

@strong{Examples:} None.

@strong{Affected By:}

The accuracy of the results depends, among other things, on the accuracy
of the corresponding functions provided by the underlying operating
system.

The magnitude of the results may depend on the hardware, the operating
system, the lisp implementation, and the state of the global
environment. Some specific issues which frequently affect the outcome
are hardware speed, nature of the scheduler (if any), number of
competing processes (if any), system paging, whether the call is
interpreted or compiled, whether functions called are compiled, the kind
of garbage collector involved and whether it runs, whether internal data
structures (e.g., hash tables) are implicitly reorganized, @emph{etc}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_get-internal-real-time.html#get-internal-real-time,@strong{get-internal-real-time}},
@uref{fun_get-internal-run-time.html#get-internal-run-time,@strong{get-internal-run-time}}

@strong{Notes:}

In general, these timings are not guaranteed to be reliable enough for
marketing comparisons. Their value is primarily heuristic, for tuning
purposes.

For useful background information on the complicated issues involved in
interpreting timing results, see
@uref{gopher://infx.infor.com:4100/1exec%3aR6169602-6170255/.text/Main%3a/.bin/views,@emph{Performance
and Evaluation of Lisp Programs}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss325.html,STEP-ENVIRONMENT:CURRENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro TRACE UNTRACE
@subsubsection CLHS: Macro TRACE, UNTRACE
@anchor{#clhs-macro-trace-untrace}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_describe-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_step.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{TRACE, UNTRACE}

@strong{Syntax:}

@strong{trace} @emph{@emph{function-name}@strong{*}} =>
@emph{trace-result}

@strong{untrace} @emph{@emph{function-name}@strong{*}} =>
@emph{untrace-result}

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@emph{trace-result}---@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
unless no @emph{function-names} are supplied, in which case
@emph{trace-result} is a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_f.html#function_name,@emph{function names}}.

@emph{untrace-result}---@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

@ref{#trace,@strong{trace}} and @ref{#untrace,@strong{untrace}} control
the invocation of the trace facility.

Invoking @ref{#trace,@strong{trace}} with one or more
@emph{function-names} causes the denoted
@uref{glo_f.html#function,@emph{functions}} to be ``traced.'' Whenever a
traced @uref{glo_f.html#function,@emph{function}} is invoked,
information about the call, about the arguments passed, and about any
eventually returned values is printed to
@uref{glo_t.html#trace_output,@emph{trace output}}. If
@ref{#trace,@strong{trace}} is used with no @emph{function-names}, no
tracing action is performed; instead, a list of the
@uref{glo_f.html#function,@emph{functions}} currently being traced is
returned.

Invoking @ref{#untrace,@strong{untrace}} with one or more function names
causes those functions to be ``untraced'' (i.e., no longer traced). If
@ref{#untrace,@strong{untrace}} is used with no @emph{function-names},
all @uref{glo_f.html#function,@emph{functions}} currently being traced
are untraced.

If a @uref{glo_f.html#function,@emph{function}} to be traced has been
open-coded (e.g., because it was declared
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}}), a call to
that @uref{glo_f.html#function,@emph{function}} might not produce trace
output.

@strong{Examples:}

@verbatim
 (defun fact (n) (if (zerop n) 1 (* n (fact (- n 1)))))
=>  FACT
 (trace fact)
=>  (FACT)
;; Of course, the format of traced output is implementation-dependent.
 (fact 3)
>>  1 Enter FACT 3
>>  | 2 Enter FACT 2
>>  |   3 Enter FACT 1
>>  |   | 4 Enter FACT 0
>>  |   | 4 Exit FACT 1
>>  |   3 Exit FACT 1
>>  | 2 Exit FACT 2
>>  1 Exit FACT 6
=>  6
@end verbatim

@strong{Side Effects:}

Might change the definitions of the
@uref{glo_f.html#function,@emph{functions}} named by
@emph{function-names}.

@strong{Affected By:}

Whether the functions named are defined or already being traced.

@strong{Exceptional Situations:}

Tracing an already traced function, or untracing a function not
currently being traced, should produce no harmful effects, but might
signal a warning.

@strong{See Also:}

@uref{var_stdebug-i_ace-outputst.html#STtrace-outputST,@strong{*trace-output*}},
@uref{mac_step.html#step,@strong{step}}

@strong{Notes:}

@ref{#trace,@strong{trace}} and @ref{#untrace,@strong{untrace}} may also
accept additional
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
argument formats. The format of the trace output is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

Although @ref{#trace,@strong{trace}} can be extended to permit
non-standard options,
@uref{glo_i.html#implementation,@emph{implementations}} are nevertheless
encouraged (but not required) to warn about the use of syntax or options
that are neither specified by this standard nor added as an extension by
the @uref{glo_i.html#implementation,@emph{implementation}}, since they
could be symptomatic of typographical errors or of reliance on features
supported in @uref{glo_i.html#implementation,@emph{implementations}}
other than the current
@uref{glo_i.html#implementation,@emph{implementation}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function DESCRIBE-OBJECT
@subsubsection CLHS: Standard Generic Function DESCRIBE-OBJECT
@anchor{#clhs-standard-generic-function-describe-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_describe.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_tracecm_untrace.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{DESCRIBE-OBJECT}

@strong{Syntax:}

@strong{describe-object} @emph{object stream} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Method Signatures:}

@strong{describe-object} @emph{(@emph{object} standard-object)
@emph{stream}}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{stream}---a @uref{glo_s.html#stream,@emph{stream}}.

@strong{Description:}

The generic function @ref{#describe-object,@strong{describe-object}}
prints a description of @emph{object} to a @emph{stream}.
@ref{#describe-object,@strong{describe-object}} is called by
@uref{fun_describe.html#describe,@strong{describe}}; it must not be
called by the user.

Each implementation is required to provide a
@uref{glo_m.html#method,@emph{method}} on the
@uref{glo_c.html#class,@emph{class}}
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
and @uref{glo_m.html#method,@emph{methods}} on enough other
@uref{glo_c.html#class,@emph{classes}} so as to ensure that there is
always an applicable @uref{glo_m.html#method,@emph{method}}.
Implementations are free to add @uref{glo_m.html#method,@emph{methods}}
for other @uref{glo_c.html#class,@emph{classes}}. Users can write
@uref{glo_m.html#method,@emph{methods}} for
@ref{#describe-object,@strong{describe-object}} for their own
@uref{glo_c.html#class,@emph{classes}} if they do not wish to inherit an
implementation-supplied @uref{glo_m.html#method,@emph{method}}.

@uref{glo_m.html#method,@emph{Methods}} on
@ref{#describe-object,@strong{describe-object}} can recursively call
@uref{fun_describe.html#describe,@strong{describe}}. Indentation, depth
limits, and circularity detection are all taken care of automatically,
provided that each @uref{glo_m.html#method,@emph{method}} handles
exactly one level of structure and calls
@uref{fun_describe.html#describe,@strong{describe}} recursively if there
are more structural levels. The consequences are undefined if this rule
is not obeyed.

In some implementations the @emph{stream} argument passed to a
@ref{#describe-object,@strong{describe-object}} method is not the
original @emph{stream}, but is an intermediate
@uref{glo_s.html#stream,@emph{stream}} that implements parts of
@uref{fun_describe.html#describe,@strong{describe}}.
@uref{glo_m.html#method,@emph{Methods}} should therefore not depend on
the identity of this @uref{glo_s.html#stream,@emph{stream}}.

@strong{Examples:}

@verbatim
 (defclass spaceship ()
   ((captain :initarg :captain :accessor spaceship-captain)
    (serial# :initarg :serial-number :accessor spaceship-serial-number)))

 (defclass federation-starship (spaceship) ())

 (defmethod describe-object ((s spaceship) stream)
   (with-slots (captain serial#) s
     (format stream "~&~S is a spaceship of type ~S,~
                     ~%with ~A at the helm ~
                       and with serial number ~D.~%"
             s (type-of s) captain serial#)))

 (make-instance 'federation-starship
                :captain "Rachel Garrett"
                :serial-number "NCC-1701-C")
=>  #<FEDERATION-STARSHIP 26312465>

 (describe *)
>>  #<FEDERATION-STARSHIP 26312465> is a spaceship of type FEDERATION-STARSHIP,
>>  with Rachel Garrett at the helm and with serial number NCC-1701-C.
=>  <no values>
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_describe.html#describe,@strong{describe}}

@strong{Notes:}

The same implementation techniques that are applicable to
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
are applicable to @ref{#describe-object,@strong{describe-object}}.

The reason for making the return values for
@ref{#describe-object,@strong{describe-object}} unspecified is to avoid
forcing users to include explicit (values) in all of their
@uref{glo_m.html#method,@emph{methods}}.
@uref{fun_describe.html#describe,@strong{describe}} takes care of that.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss128.html,DESCRIBE-UNDERSPECIFIED:DESCRIBE-OBJECT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function DOCUMENTATION
@subsubsection CLHS: Standard Generic Function DOCUMENTATION...
@anchor{#clhs-standard-generic-function-documentation...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_disassemble.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_room.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{DOCUMENTATION, (SETF
DOCUMENTATION)}

@strong{Syntax:}

@strong{documentation} @emph{x doc-type} => @emph{documentation}

@strong{(setf documentation)} @emph{new-value x doc-type} =>
@emph{new-value}

@strong{Argument Precedence Order:}

@emph{doc-type}, @emph{object}

@strong{Method Signatures:}

@strong{Functions, Macros, and Special Forms:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_function.html#function,function}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_function.html#function,function}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_list.html#list,list}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_list.html#list,list}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#compiler-macro,compiler-macro}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#compiler-macro,compiler-macro}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_setf.html#setf,setf}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_function.html#function,function}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_function.html#function,function}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_list.html#list,list}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_list.html#list,list}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#compiler-macro,compiler-macro}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_function.html#function,function}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#compiler-macro,compiler-macro}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_setf.html#setf,setf}})@strong{}@emph{})@emph{}

@strong{Method Combinations:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_method-combination.html#method-combination,method-combination}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_method-combination.html#method-combination,method-combination}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_method-combination.html#method-combination,method-combination}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_method-combination.html#method-combination,method-combination}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_method-combination.html#method-combination,method-combination}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_method-combination.html#method-combination,method-combination}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_method-combination.html#method-combination,method-combination}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_method-combination.html#method-combination,method-combination}})@strong{}@emph{})@emph{}

@strong{Methods:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_standard-method.html#standard-method,standard-method}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_standard-method.html#standard-method,standard-method}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{Packages:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_package.html#package,package}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_package.html#package,package}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{Types, Classes, and Structure Names:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_structure-class.html#structure-class,structure-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_structure-class.html#structure-class,structure-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#structure,structure}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_structure-class.html#structure-class,structure-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_t.html#t,t}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_structure-class.html#structure-class,structure-class}}@emph{})
@emph{} (@emph{doc-type} @strong{}
(@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@uref{any_type.html#type,type}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#structure,structure}})@strong{}@emph{})@emph{}

@strong{Variables:}

@strong{documentation} @emph{}(@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#variable,variable}})@strong{}@emph{})@emph{}

@strong{(setf documentation)} @emph{new-value} (@emph{x}
@strong{@uref{syscla_symbol.html#symbol,symbol}}@emph{}) @emph{}
(@emph{doc-type} @strong{} (@strong{@uref{typspe_eql.html#eql,eql}}
'@strong{@ref{#variable,variable}})@strong{}@emph{})@emph{}

@strong{Arguments and Values:}

@emph{x}---an @uref{glo_o.html#object,@emph{object}}.

@emph{doc-type}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{new-value}---a @uref{glo_s.html#string,@emph{string}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#documentation,@strong{documentation}} returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
associated with the given @uref{glo_o.html#object,@emph{object}} if it
is available; otherwise it returns @uref{any_nil.html#nil,@strong{nil}}.

The @uref{glo_g.html#generic_function,@emph{generic function}} (setf
documentation) updates the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
associated with @emph{x} to @emph{new-value}. If @emph{x} is a
@uref{glo_l.html#list,@emph{list}}, it must be of the form (setf
@emph{symbol}).

@uref{glo_d.html#documentation_string,@emph{Documentation strings}} are
made available for debugging purposes.
@uref{glo_c.html#conforming_program,@emph{Conforming programs}} are
permitted to use
@uref{glo_d.html#documentation_string,@emph{documentation strings}} when
they are present, but should not depend for their correct behavior on
the presence of those
@uref{glo_d.html#documentation_string,@emph{documentation strings}}. An
@uref{glo_i.html#implementation,@emph{implementation}} is permitted to
discard @uref{glo_d.html#documentation_string,@emph{documentation
strings}} at any time for
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
reasons.

The nature of the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
returned depends on the @emph{doc-type}, as follows:

@ref{#compiler-macro,@strong{compiler-macro}}

Returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} of the @uref{glo_c.html#compiler_macro,@emph{compiler macro}}
whose @uref{glo_n.html#name,@emph{name}} is the
@uref{glo_f.html#function_name,@emph{function name}} @emph{x}.

@ref{#function,@strong{function}}

If @emph{x} is a @uref{glo_f.html#function_name,@emph{function name}},
returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} of the @uref{glo_f.html#function,@emph{function}},
@uref{glo_m.html#macro,@emph{macro}}, or
@uref{glo_s.html#special_operator,@emph{special operator}} whose
@uref{glo_n.html#name,@emph{name}} is @emph{x}.

If @emph{x} is a @uref{glo_f.html#function,@emph{function}}, returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
associated with @emph{x}.

@ref{#method-combination,@strong{method-combination}}

If @emph{x} is a @uref{glo_s.html#symbol,@emph{symbol}}, returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
the @uref{glo_m.html#method_combination,@emph{method combination}} whose
@uref{glo_n.html#name,@emph{name}} is @emph{x}.

If @emph{x} is a @uref{glo_m.html#method_combination,@emph{method
combination}}, returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
associated with @emph{x}.

@ref{#setf,@strong{setf}}

Returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} of the @uref{glo_s.html#setf_expander,@emph{setf expander}}
whose @uref{glo_n.html#name,@emph{name}} is the
@uref{glo_s.html#symbol,@emph{symbol}} @emph{x}.

@ref{#structure,@strong{structure}}

Returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} associated with the
@uref{glo_s.html#structure_name,@emph{structure name}} @emph{x}.

@ref{#t,@strong{t}}

Returns a @uref{glo_d.html#documentation_string,@emph{documentation
string}} specialized on the @uref{glo_c.html#class,@emph{class}} of the
argument @emph{x} itself. For example, if @emph{x} is a
@uref{glo_f.html#function,@emph{function}}, the
@uref{glo_d.html#documentation_string,@emph{documentation string}}
associated with the @uref{glo_f.html#function,@emph{function}} @emph{x}
is returned.

@ref{#type,@strong{type}}

If @emph{x} is a @uref{glo_s.html#symbol,@emph{symbol}}, returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
the @uref{glo_c.html#class,@emph{class}} whose
@uref{glo_n.html#name,@emph{name}} is the
@uref{glo_s.html#symbol,@emph{symbol}} @emph{x}, if there is such a
@uref{glo_c.html#class,@emph{class}}. Otherwise, it returns the
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
the @uref{glo_t.html#type,@emph{type}} which is the
@uref{glo_t.html#type_specifier,@emph{type specifier}}
@uref{glo_s.html#symbol,@emph{symbol}} @emph{x}.

If @emph{x} is a @uref{glo_s.html#structure_class,@emph{structure
class}} or @uref{glo_s.html#standard_class,@emph{standard class}},
returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} associated with the @uref{glo_c.html#class,@emph{class}}
@emph{x}.

@ref{#variable,@strong{variable}}

Returns the @uref{glo_d.html#documentation_string,@emph{documentation
string}} of the @uref{glo_d.html#dynamic_variable,@emph{dynamic
variable}} or @uref{glo_c.html#constant_variable,@emph{constant
variable}} whose @uref{glo_n.html#name,@emph{name}} is the
@uref{glo_s.html#symbol,@emph{symbol}} @emph{x}.

A @uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} or a
@uref{glo_c.html#conforming_program,@emph{conforming program}} may
extend the set of @uref{glo_s.html#symbol,@emph{symbols}} that are
acceptable as the @emph{doc-type}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

This standard prescribes no means to retrieve the
@uref{glo_d.html#documentation_string,@emph{documentation strings}} for
individual slots specified in a
@uref{mac_defclass.html#defclass,@strong{defclass}} form, but
@uref{glo_i.html#implementation,@emph{implementations}} might still
provide debugging tools and/or programming language extensions which
manipulate this information. Implementors wishing to provide such
support are encouraged to consult the
@uref{glo_m.html#metaobject_protocol,@emph{Metaobject Protocol}} for
suggestions about how this might be done.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable -
@subsubsection CLHS: Variable -
@anchor{#clhs-variable--}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_dribble.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_plcm_plplcm_plplpl.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{-}

@strong{Value Type:}

a @uref{glo_f.html#form,@emph{form}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@uref{any_-.html#-,@strong{-}} is the @uref{glo_f.html#form,@emph{form}}
that is currently being evaluated by the
@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}.

@strong{Examples:}

@verbatim
(format t "~&Evaluating ~S~%" -)
>>  Evaluating (FORMAT T "~&Evaluating ~S~%" -)
=>  NIL
@end verbatim

@strong{Affected By:}

@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}.

@strong{See Also:}

@uref{fun_pl.html#PL,@strong{+}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_st.html#ST,@strong{*}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_sl.html#SL,@strong{/}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{sec_25-1-1.html,Section 25.1.1 (Top level loop)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable + ++ +++
@subsubsection CLHS: Variable +, ++, +++
@anchor{#clhs-variable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_-.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stcm_ststcm_ststst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{+, ++, +++}

@strong{Value Type:}

an @uref{glo_o.html#object,@emph{object}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#variable,@emph{variables}} @ref{#PL,@strong{+}},
@ref{#PLPL,@strong{++}}, and @ref{#PLPLPL,@strong{+++}} are maintained
by the @uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp
read-eval-print loop}} to save @uref{glo_f.html#form,@emph{forms}} that
were recently @emph{evaluated}.

The @uref{glo_v.html#value,@emph{value}} of
@uref{any_pl.html#PL,@strong{+}} is the last
@uref{glo_f.html#form,@emph{form}} that was @emph{evaluated}, the
@uref{glo_v.html#value,@emph{value}} of @ref{#PLPL,@strong{++}} is the
previous value of @uref{any_pl.html#PL,@strong{+}}, and the
@uref{glo_v.html#value,@emph{value}} of @ref{#PLPLPL,@strong{+++}} is
the previous value of @ref{#PLPL,@strong{++}}.

@strong{Examples:}

@verbatim
(+ 0 1) =>  1
(- 4 2) =>  2
(/ 9 3) =>  3
(list + ++ +++) =>  ((/ 9 3) (- 4 2) (+ 0 1))
(setq a 1 b 2 c 3 d (list a b c)) =>  (1 2 3)
(setq a 4 b 5 c 6 d (list a b c)) =>  (4 5 6)
(list a b c) =>  (4 5 6)
(eval +++) =>  (1 2 3)
#.`(,@++ d) =>  (1 2 3 (1 2 3))
@end verbatim

@strong{Affected By:}

@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}.

@strong{See Also:}

@uref{fun_-.html#-,@strong{-}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_st.html#ST,@strong{*}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_sl.html#SL,@strong{/}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{sec_25-1-1.html,Section 25.1.1 (Top level loop)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable / // ///
@subsubsection CLHS: Variable /, //, ///
@anchor{#clhs-variable-1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stcm_ststcm_ststst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_lisp-impl_tion-version.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{/, //, ///}

@strong{Value Type:}

a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#variable,@emph{variables}} @ref{#SL,@strong{/}},
@ref{#SLSL,@strong{//}}, and @ref{#SLSLSL,@strong{///}} are maintained
by the @uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp
read-eval-print loop}} to save the values of results that were printed
at the end of the loop.

The @uref{glo_v.html#value,@emph{value}} of
@uref{any_sl.html#SL,@strong{/}} is a @uref{glo_l.html#list,@emph{list}}
of the most recent @uref{glo_v.html#value,@emph{values}} that were
printed, the @uref{glo_v.html#value,@emph{value}} of
@ref{#SLSL,@strong{//}} is the previous value of
@uref{any_sl.html#SL,@strong{/}}, and the
@uref{glo_v.html#value,@emph{value}} of @ref{#SLSLSL,@strong{///}} is
the previous value of @ref{#SLSL,@strong{//}}.

The @uref{glo_v.html#value,@emph{values}} of
@uref{any_sl.html#SL,@strong{/}}, @ref{#SLSL,@strong{//}}, and
@ref{#SLSLSL,@strong{///}} are updated immediately prior to printing the
@uref{glo_r.html#return_value,@emph{return value}} of a top-level
@uref{glo_f.html#form,@emph{form}} by the
@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}. If the @uref{glo_e.html#evaluation,@emph{evaluation}} of such a
@uref{glo_f.html#form,@emph{form}} is aborted prior to its normal
return, the values of @uref{any_sl.html#SL,@strong{/}},
@ref{#SLSL,@strong{//}}, and @ref{#SLSLSL,@strong{///}} are not updated.

@strong{Examples:}

@verbatim
 (floor 22 7) =>  3, 1
 (+ (* (car /) 7) (cadr /)) =>  22
@end verbatim

@strong{Affected By:}

@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}.

@strong{See Also:}

@uref{fun_-.html#-,@strong{-}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_pl.html#PL,@strong{+}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_st.html#ST,@strong{*}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{sec_25-1-1.html,Section 25.1.1 (Top level loop)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable * ** ***
@subsubsection CLHS: Variable *, **, ***
@anchor{#clhs-variable-2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_plcm_plplcm_plplpl.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_envir_t_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_slcm_slslcm_slslsl.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*, **, ***}

@strong{Value Type:}

an @uref{glo_o.html#object,@emph{object}}.

@strong{Initial Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The @uref{glo_v.html#variable,@emph{variables}} @ref{#ST,@strong{*}},
@ref{#STST,@strong{**}}, and @ref{#STSTST,@strong{***}} are maintained
by the @uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp
read-eval-print loop}} to save the values of results that are printed
each time through the loop.

The @uref{glo_v.html#value,@emph{value}} of
@uref{any_st.html#ST,@strong{*}} is the most recent
@uref{glo_p.html#primary_value,@emph{primary value}} that was printed,
the @uref{glo_v.html#value,@emph{value}} of @ref{#STST,@strong{**}} is
the previous value of @uref{any_st.html#ST,@strong{*}}, and the
@uref{glo_v.html#value,@emph{value}} of @ref{#STSTST,@strong{***}} is
the previous value of @ref{#STST,@strong{**}}.

If several values are produced, @uref{any_st.html#ST,@strong{*}}
contains the first value only; @uref{any_st.html#ST,@strong{*}} contains
@uref{any_nil.html#nil,@strong{nil}} if zero values are produced.

The @uref{glo_v.html#value,@emph{values}} of
@uref{any_st.html#ST,@strong{*}}, @ref{#STST,@strong{**}}, and
@ref{#STSTST,@strong{***}} are updated immediately prior to printing the
@uref{glo_r.html#return_value,@emph{return value}} of a top-level
@uref{glo_f.html#form,@emph{form}} by the
@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}. If the @uref{glo_e.html#evaluation,@emph{evaluation}} of such a
@uref{glo_f.html#form,@emph{form}} is aborted prior to its normal
return, the values of @uref{any_st.html#ST,@strong{*}},
@ref{#STST,@strong{**}}, and @ref{#STSTST,@strong{***}} are not updated.

@strong{Examples:}

@verbatim
(values 'a1 'a2) =>  A1, A2
'b =>  B
(values 'c1 'c2 'c3) =>  C1, C2, C3
(list * ** ***) =>  (C1 B A1)

(defun cube-root (x) (expt x 1/3)) =>  CUBE-ROOT
(compile *) =>  CUBE-ROOT
(setq a (cube-root 27.0)) =>  3.0
(* * 9.0) =>  27.0
@end verbatim

@strong{Affected By:}

@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}.

@strong{See Also:}

@uref{fun_-.html#-,@strong{-}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_pl.html#PL,@strong{+}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{fun_sl.html#SL,@strong{/}}
(@uref{glo_v.html#variable,@emph{variable}}),
@uref{sec_25-1-1.html,Section 25.1.1 (Top level loop)}

@strong{Notes:}

@verbatim
 *   ==  (car /)
 **  ==  (car //)
 *** ==  (car ///)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 26
@section CLHS: Chapter 26
@anchor{#clhs-chapter-26}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_user-homedir-pathname.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_26-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
26. Glossary

@uref{sec_26-1.html,}

26.1 Glossary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 3
@section CLHS: Chapter 3
@anchor{#clhs-chapter-3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_2-4-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3. Evaluation and Compilation

@uref{sec_3-1.html,}

3.1 Evaluation

@uref{sec_3-2.html,}

3.2 Compilation

@uref{sec_3-3.html,}

3.3 Declarations

@uref{sec_3-4.html,}

3.4 Lambda Lists

@uref{sec_3-5.html,}

3.5 Error Checking in Function Calls

@uref{sec_3-6.html,}

3.6 Traversal Rules and Side Effects

@uref{sec_3-7.html,}

3.7 Destructive Operations

@uref{sec_the_evalu_n_dictionary.html,}

3.8 The Evaluation and Compilation Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 32::
* CLHS Section 33::
* CLHS Section 34::
* CLHS Section 35::
* CLHS Section 36::
* CLHS Section 37::
* CLHS Section The Evaluation and Compilation Dictionary::
@end menu

@node CLHS Section 32
@subsection CLHS: Section 3.2
@anchor{#clhs-section-3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-1-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2 Compilation

@uref{sec_3-2-1.html,}

3.2.1 Compiler Terminology

@uref{sec_3-2-2.html,}

3.2.2 Compilation Semantics

@uref{sec_3-2-3.html,}

3.2.3 File Compilation

@uref{sec_3-2-4.html,}

3.2.4 Literal Objects in Compiled Files

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 322::
* CLHS Section 323::
* CLHS Section 324::
@end menu

@node CLHS Section 322
@subsubsection CLHS: Section 3.2.2
@anchor{#clhs-section-3.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.2 Compilation Semantics

Conceptually, compilation is a process that traverses code, performs
certain kinds of syntactic and semantic analyses using information (such
as proclamations and @uref{glo_m.html#macro,@emph{macro}} definitions)
present in the
@uref{glo_c.html#compilation_environment,@emph{compilation
environment}}, and produces equivalent, possibly more efficient code.

@uref{sec_3-2-2-1.html,}

3.2.2.1 Compiler Macros

@uref{sec_3-2-2-2.html,}

3.2.2.2 Minimal Compilation

@uref{sec_3-2-2-3.html,}

3.2.2.3 Semantic Constraints

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss101.html,DEFINE-COMPILER-MACRO:X3J13-NOV89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-2-1-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.2.2 Minimal Compilation

@uref{glo_m.html#minimal_compilation,@emph{Minimal compilation}} is
defined as follows:

@itemize
@item
All @uref{glo_c.html#compiler_macro,@emph{compiler macro}} calls
appearing in the @uref{glo_s.html#source_code,@emph{source code}} being
compiled are expanded, if at all, at compile time; they will not be
expanded at run time.
@item
All @uref{glo_m.html#macro,@emph{macro}} and
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} calls appearing in
the source code being compiled are expanded at compile time in such a
way that they will not be expanded again at run time.
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}} and
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}
are effectively replaced by @uref{glo_f.html#form,@emph{forms}}
corresponding to their bodies in which calls to
@uref{glo_m.html#macro,@emph{macros}} are replaced by their expansions.
@item
The first @uref{glo_a.html#argument,@emph{argument}} in a
@uref{speope_load-time-value.html#load-time-value,@strong{load-time-value}}
@uref{glo_f.html#form,@emph{form}} in
@uref{glo_s.html#source_code,@emph{source code}} processed by
@uref{fun_compile.html#compile,@strong{compile}} is @emph{evaluated} at
@uref{glo_c.html#compile_time,@emph{compile time}}; in
@uref{glo_s.html#source_code,@emph{source code}} processed by
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}, the
compiler arranges for it to be @emph{evaluated} at
@uref{glo_l.html#load_time,@emph{load time}}. In either case, the result
of the @uref{glo_e.html#evaluation,@emph{evaluation}} is remembered and
used later as the value of the
@uref{speope_load-time-value.html#load-time-value,@strong{load-time-value}}
@uref{glo_f.html#form,@emph{form}} at
@uref{glo_e.html#execution_time,@emph{execution time}}.
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.2.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.2.3 Semantic Constraints

All @uref{glo_c.html#conforming_program,@emph{conforming programs}} must
obey the following constraints, which are designed to minimize the
observable differences between compiled and interpreted programs:

@itemize
@item
Definitions of any referenced @uref{glo_m.html#macro,@emph{macros}} must
be present in the
@uref{glo_c.html#compilation_environment,@emph{compilation
environment}}. Any @uref{glo_f.html#form,@emph{form}} that is a
@uref{glo_l.html#list,@emph{list}} beginning with a
@uref{glo_s.html#symbol,@emph{symbol}} that does not name a
@uref{glo_s.html#special_operator,@emph{special operator}} or a
@uref{glo_m.html#macro,@emph{macro}} defined in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
is treated by the compiler as a function call.
@item
@uref{dec_special.html#special,@strong{Special}} proclamations for
@uref{glo_d.html#dynamic_variable,@emph{dynamic variables}} must be made
in the @uref{glo_c.html#compilation_environment,@emph{compilation
environment}}. Any @uref{glo_b.html#binding,@emph{binding}} for which
there is no @uref{dec_special.html#special,@strong{special}} declaration
or proclamation in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
is treated by the compiler as a
@uref{glo_l.html#lexical_binding,@emph{lexical binding}}.
@item
The definition of a function that is defined and declared
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}} in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
must be the same at run time.
@item
Within a @uref{glo_f.html#function,@emph{function}} named F, the
compiler may (but is not required to) assume that an apparent recursive
call to a @uref{glo_f.html#function,@emph{function}} named F refers to
the same definition of F, unless that function has been declared
@uref{dec_inlinecm_notinline.html#notinline,@strong{notinline}}. The
consequences of redefining such a recursively defined
@uref{glo_f.html#function,@emph{function}} F while it is executing are
undefined.
@item
A call within a file to a named function that is defined in the same
file refers to that function, unless that function has been declared
@uref{dec_inlinecm_notinline.html#notinline,@strong{notinline}}. The
consequences are unspecified if functions are redefined individually at
run time or multiply defined in the same file.
@item
The argument syntax and number of return values for all functions whose
@uref{dec_ftype.html#ftype,@strong{ftype}} is declared at compile time
must remain the same at run time.
@item
@uref{glo_c.html#constant_variable,@emph{Constant variables}} defined in
the @uref{glo_c.html#compilation_environment,@emph{compilation
environment}} must have a @uref{glo_s.html#similar,@emph{similar}} value
at run time. A reference to a
@uref{glo_c.html#constant_variable,@emph{constant variable}} in
@uref{glo_s.html#source_code,@emph{source code}} is equivalent to a
reference to a @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{object}} that is the
@uref{glo_v.html#value,@emph{value}} of the
@uref{glo_c.html#constant_variable,@emph{constant variable}}.
@item
Type definitions made with
@uref{mac_deftype.html#deftype,@strong{deftype}} or
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
must retain the same definition at run time. Classes defined by
@uref{mac_defclass.html#defclass,@strong{defclass}} in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
must be defined at run time to have the same
@uref{glo_s.html#superclass,@emph{superclasses}} and same
@uref{glo_m.html#metaclass,@emph{metaclass}}.

This implies that
@uref{glo_s.html#subtype,@emph{subtype}}/@uref{glo_s.html#supertype,@emph{supertype}}
relationships of @uref{glo_t.html#type_specifier,@emph{type specifiers}}
must not change between @uref{glo_c.html#compile_time,@emph{compile
time}} and @uref{glo_r.html#run_time,@emph{run time}}.

@item
Type declarations present in the compilation
@uref{glo_e.html#environment,@emph{environment}} must accurately
describe the corresponding values at run time; otherwise, the
consequences are undefined. It is permissible for an unknown
@uref{glo_t.html#type,@emph{type}} to appear in a declaration at compile
time, though a warning might be signaled in such a case.
@item
Except in the situations explicitly listed above, a
@uref{glo_f.html#function,@emph{function}} defined in the
@uref{glo_e.html#evaluation_environment,@emph{evaluation environment}}
is permitted to have a different definition or a different
@uref{glo_s.html#signature,@emph{signature}} at run time, and the
run-time definition prevails.
@end itemize

@uref{glo_c.html#conforming_program,@emph{Conforming programs}} should
not be written using any additional assumptions about consistency
between the run-time @uref{glo_e.html#environment,@emph{environment}}
and the startup, evaluation, and compilation
@uref{glo_e.html#environment,@emph{environments}}.

Except where noted, when a compile-time and a run-time definition are
different, one of the following occurs at run time:

@itemize
@item
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled
@item
the compile-time definition prevails
@item
the run-time definition prevails
@end itemize

If the @uref{glo_c.html#compiler,@emph{compiler}} processes a
@uref{glo_f.html#function_form,@emph{function form}} whose
@uref{glo_o.html#operator,@emph{operator}} is not defined at compile
time, no error is signaled at compile time.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 323
@subsubsection CLHS: Section 3.2.3
@anchor{#clhs-section-3.2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.3 File Compilation

The @uref{glo_f.html#function,@emph{function}}
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} performs
compilation of @uref{glo_f.html#form,@emph{forms}} in a file following
the rules specified in @uref{sec_3-2-2.html,Section 3.2.2 (Compilation
Semantics)}, and produces an output file that can be loaded by using
@uref{fun_load.html#load,@strong{load}}.

Normally, the @uref{glo_t.html#top_level_form,@emph{top level forms}}
appearing in a file compiled with
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} are
evaluated only when the resulting compiled file is loaded, and not when
the file is compiled. However, it is typically the case that some forms
in the file need to be evaluated at compile time so the remainder of the
file can be read and compiled correctly.

The @uref{speope_eval-when.html#eval-when,@strong{eval-when}}
@uref{glo_s.html#special_form,@emph{special form}} can be used to
control whether a @uref{glo_t.html#top_level_form,@emph{top level form}}
is evaluated at compile time, load time, or both. It is possible to
specify any of three situations with
@uref{speope_eval-when.html#eval-when,@strong{eval-when}}, denoted by
the symbols :compile-toplevel, :load-toplevel, and :execute. For top
level @uref{speope_eval-when.html#eval-when,@strong{eval-when}} forms,
:compile-toplevel specifies that the compiler must evaluate the body at
compile time, and :load-toplevel specifies that the compiler must
arrange to evaluate the body at load time. For non-top level
@uref{speope_eval-when.html#eval-when,@strong{eval-when}} forms,
:execute specifies that the body must be executed in the run-time
@uref{glo_e.html#environment,@emph{environment}}.

The behavior of this @uref{glo_f.html#form,@emph{form}} can be more
precisely understood in terms of a model of how
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}
processes forms in a file to be compiled. There are two processing
modes, called ``not-compile-time'' and ``compile-time-too''.

Successive forms are read from the file by
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} and
processed in not-compile-time mode; in this mode,
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} arranges
for forms to be evaluated only at load time and not at compile time.
When @uref{fun_compile-file.html#compile-file,@strong{compile-file}} is
in compile-time-too mode, forms are evaluated both at compile time and
load time.

@uref{sec_3-2-3-1.html,}

3.2.3.1 Processing of Top Level Forms

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 324
@subsubsection CLHS: Section 3.2.4
@anchor{#clhs-section-3.2.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-3-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.4 Literal Objects in Compiled Files

The functions @uref{fun_eval.html#eval,@strong{eval}} and
@uref{fun_compile.html#compile,@strong{compile}} are required to ensure
that @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} referenced within the resulting
interpreted or compiled code objects are the
@uref{glo_s.html#same,@emph{same}} as the corresponding
@uref{glo_o.html#object,@emph{objects}} in the
@uref{glo_s.html#source_code,@emph{source code}}.
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}, on the
other hand, must produce a @uref{glo_c.html#compiled_file,@emph{compiled
file}} that, when loaded with @uref{fun_load.html#load,@strong{load}},
constructs the @uref{glo_o.html#object,@emph{objects}} defined by the
@uref{glo_s.html#source_code,@emph{source code}} and produces references
to them.

In the case of
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{glo_o.html#object,@emph{objects}} constructed by
@uref{fun_load.html#load,@strong{load}} of the
@uref{glo_c.html#compiled_file,@emph{compiled file}} cannot be spoken of
as being the @uref{glo_s.html#same,@emph{same}} as the
@uref{glo_o.html#object,@emph{objects}} constructed at compile time,
because the @uref{glo_c.html#compiled_file,@emph{compiled file}} may be
loaded into a different @uref{glo_l.html#lisp_image,@emph{Lisp image}}
than the one in which it was compiled. This section defines the concept
of @uref{glo_s.html#similarity,@emph{similarity}} which relates
@uref{glo_o.html#object,@emph{objects}} in the
@uref{glo_e.html#evaluation_environment,@emph{evaluation environment}}
to the corresponding @uref{glo_o.html#object,@emph{objects}} in the
@uref{glo_r.html#run-time_environment,@emph{run-time environment}}.

The constraints on @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} described in this section apply
only to @uref{fun_compile-file.html#compile-file,@strong{compile-file}};
@uref{fun_eval.html#eval,@strong{eval}} and
@uref{fun_compile.html#compile,@strong{compile}} do not copy or coalesce
constants.

@uref{sec_3-2-4-1.html,}

3.2.4.1 Externalizable Objects

@uref{sec_3-2-4-2.html,}

3.2.4.2 Similarity of Literal Objects

@uref{sec_3-2-5.html,}

3.2.5 Exceptional Situations in the Compiler

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-4-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.4.2 Similarity of Literal Objects

@uref{sec_3-2-4-2-1.html,}

3.2.4.2.1 Similarity of Aggregate Objects

@uref{sec_3-2-4-2-2.html,}

3.2.4.2.2 Definition of Similarity

@uref{sec_3-2-4-3.html,}

3.2.4.3 Extensions to Similarity Rules

@uref{sec_3-2-4-4.html,}

3.2.4.4 Additional Constraints on Externalizable Objects

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.4.2.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-4-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.4.2.2 Definition of Similarity

Two @uref{glo_o.html#object,@emph{objects}} S (in
@uref{glo_s.html#source_code,@emph{source code}}) and C (in
@uref{glo_c.html#compiled_code,@emph{compiled code}}) are defined to be
@uref{glo_s.html#similar,@emph{similar}} if and only if they are both of
one of the @uref{glo_t.html#type,@emph{types}} listed here (or defined
by the @uref{glo_i.html#implementation,@emph{implementation}}) and they
both satisfy all additional requirements of
@uref{glo_s.html#similarity,@emph{similarity}} indicated for that
@uref{glo_t.html#type,@emph{type}}.

@uref{syscla_number.html#number,@strong{number}}

Two @uref{glo_n.html#number,@emph{numbers}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if they are of the same
@uref{glo_t.html#type,@emph{type}} and represent the same mathematical
value.

@uref{syscla_character.html#character,@strong{character}}

Two @uref{glo_s.html#simple,@emph{simple}}
@uref{glo_c.html#character,@emph{characters}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if they have
@uref{glo_s.html#similar,@emph{similar}}
@uref{glo_c.html#code,@emph{code}}
@uref{glo_a.html#attribute,@emph{attributes}}.

@uref{glo_i.html#implementation,@emph{Implementations}} providing
additional,
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_a.html#attribute,@emph{attributes}} must define whether and
how @uref{glo_n.html#non-simple,@emph{non-simple}}
@uref{glo_c.html#character,@emph{characters}} can be regarded as
@uref{glo_s.html#similar,@emph{similar}}.

@uref{syscla_symbol.html#symbol,@strong{symbol}}

Two @uref{glo_a.html#apparently_uninterned,@emph{apparently uninterned}}
@uref{glo_s.html#symbol,@emph{symbols}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if their
@uref{glo_n.html#name,@emph{names}} are
@uref{glo_s.html#similar,@emph{similar}}.

Two @uref{glo_i.html#interned,@emph{interned}} symbols S and C are
@uref{glo_s.html#similar,@emph{similar}} if their
@uref{glo_n.html#name,@emph{names}} are
@uref{glo_s.html#similar,@emph{similar}}, and if either S is accessible
in the @uref{glo_c.html#current_package,@emph{current package}} at
compile time and C is accessible in the
@uref{glo_c.html#current_package,@emph{current package}} at load time,
or C is accessible in the @uref{glo_p.html#package,@emph{package}} that
is @uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_h.html#home_package,@emph{home package}} of S.

(Note that @uref{glo_s.html#similarity,@emph{similarity}} of
@uref{glo_s.html#symbol,@emph{symbols}} is dependent on neither the
@uref{glo_c.html#current_readtable,@emph{current readtable}} nor how the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_readcm_re_g-whitespace.html#read,@strong{read}} would parse
the @uref{glo_c.html#character,@emph{characters}} in the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_s.html#symbol,@emph{symbol}}.)

@uref{syscla_package.html#package,@strong{package}}

Two @uref{glo_p.html#package,@emph{packages}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if their
@uref{glo_n.html#name,@emph{names}} are
@uref{glo_s.html#similar,@emph{similar}}.

Note that although a @uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} is an
@uref{glo_e.html#externalizable_object,@emph{externalizable object}},
the programmer is responsible for ensuring that the corresponding
@uref{glo_p.html#package,@emph{package}} is already in existence when
code referencing it as a @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{object}} is @emph{loaded}. The
@uref{glo_l.html#loader,@emph{loader}} finds the corresponding
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} as if by calling
@uref{fun_find-package.html#find-package,@strong{find-package}} with
that @uref{glo_n.html#name,@emph{name}} as an
@uref{glo_a.html#argument,@emph{argument}}. An error is signaled by the
@uref{glo_l.html#loader,@emph{loader}} if no
@uref{glo_p.html#package,@emph{package}} exists at load time.

@uref{syscla_random-state.html#random-state,@strong{random-state}}

Two @uref{glo_r.html#random_state,@emph{random states}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if S would always produce the
same sequence of pseudo-random numbers as a
@uref{glo_c.html#copy,@emph{copy}}[5] of C when given as the
@emph{random-state} @uref{glo_a.html#argument,@emph{argument}} to the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_random.html#random,@strong{random}}, assuming equivalent
@emph{limit} @uref{glo_a.html#argument,@emph{arguments}} in each case.

(Note that since C has been processed by the
@uref{glo_f.html#file_compiler,@emph{file compiler}}, it cannot be used
directly as an @uref{glo_a.html#argument,@emph{argument}} to
@uref{fun_random.html#random,@strong{random}} because
@uref{fun_random.html#random,@strong{random}} would perform a side
effect.)

@uref{syscla_cons.html#cons,@strong{cons}}

Two @uref{glo_c.html#cons,@emph{conses}}, S and C, are
@uref{glo_s.html#similar,@emph{similar}} if the
@uref{glo_c.html#car,@emph{car}}[2] of S is
@uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_c.html#car,@emph{car}}[2] of C, and the
@uref{glo_c.html#cdr,@emph{cdr}}[2] of S is
@uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_c.html#cdr,@emph{cdr}}[2] of C.

@uref{syscla_array.html#array,@strong{array}}

Two one-dimensional @uref{glo_a.html#array,@emph{arrays}}, S and C, are
@uref{glo_s.html#similar,@emph{similar}} if the
@uref{glo_l.html#length,@emph{length}} of S is
@uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_l.html#length,@emph{length}} of C, the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of S is @uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of C, and each @uref{glo_a.html#active,@emph{active}}
@uref{glo_e.html#element,@emph{element}} of S is
@uref{glo_s.html#similar,@emph{similar}} to the corresponding
@uref{glo_e.html#element,@emph{element}} of C.

Two @uref{glo_a.html#array,@emph{arrays}} of
@uref{glo_r.html#rank,@emph{rank}} other than one, S and C, are
@uref{glo_s.html#similar,@emph{similar}} if the
@uref{glo_r.html#rank,@emph{rank}} of S is
@uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_r.html#rank,@emph{rank}} of C, each
@uref{glo_d.html#dimension,@emph{dimension}}[1] of S is
@uref{glo_s.html#similar,@emph{similar}} to the corresponding
@uref{glo_d.html#dimension,@emph{dimension}}[1] of C, the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of S is @uref{glo_s.html#similar,@emph{similar}} to the
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} of C, and each @uref{glo_e.html#element,@emph{element}} of S is
@uref{glo_s.html#similar,@emph{similar}} to the corresponding
@uref{glo_e.html#element,@emph{element}} of C.

In addition, if S is a @uref{glo_s.html#simple_array,@emph{simple
array}}, then C must also be a
@uref{glo_s.html#simple_array,@emph{simple array}}. If S is a
@uref{glo_d.html#displaced_array,@emph{displaced array}}, has a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, or is
@uref{glo_a.html#actually_adjustable,@emph{actually adjustable}}, C is
permitted to lack any or all of these qualities.

@uref{syscla_hash-table.html#hash-table,@strong{hash-table}}

Two @uref{glo_h.html#hash_table,@emph{hash tables}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if they meet the following
three requirements:

@enumerate 
@item
They both have the same test (e.g., they are both
@uref{fun_eql.html#eql,@strong{eql}}
@uref{glo_h.html#hash_table,@emph{hash tables}}).
@item
There is a unique one-to-one correspondence between the keys of the two
@uref{glo_h.html#hash_table,@emph{hash tables}}, such that the
corresponding keys are @uref{glo_s.html#similar,@emph{similar}}.
@item
For all keys, the values associated with two corresponding keys are
@uref{glo_s.html#similar,@emph{similar}}.
@end enumerate

If there is more than one possible one-to-one correspondence between the
keys of S and C, the consequences are unspecified. A
@uref{glo_c.html#conforming_program,@emph{conforming program}} cannot
use a table such as S as an @emph{externalizable constant}.

@uref{syscla_pathname.html#pathname,@strong{pathname}}

Two @uref{glo_p.html#pathname,@emph{pathnames}} S and C are
@uref{glo_s.html#similar,@emph{similar}} if all corresponding
@uref{glo_p.html#pathname,@emph{pathname}} @emph{components} are
@uref{glo_s.html#similar,@emph{similar}}.

@uref{syscla_function.html#function,@strong{function}}

@uref{glo_f.html#function,@emph{Functions}} are not
@uref{glo_e.html#externalizable_object,@emph{externalizable objects}}.

@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
and
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}

A general-purpose concept of
@uref{glo_s.html#similarity,@emph{similarity}} does not exist for
@uref{glo_s.html#structure,@emph{structures}} and
@uref{glo_s.html#standard_object,@emph{standard objects}}. However, a
@uref{glo_c.html#conforming_program,@emph{conforming program}} is
permitted to define a
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
@uref{glo_m.html#method,@emph{method}} for any
@uref{glo_c.html#class,@emph{class}} K defined by that
@uref{glo_p.html#program,@emph{program}} that is a
@uref{glo_s.html#subclass,@emph{subclass}} of either
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
or
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}.
The effect of such a @uref{glo_m.html#method,@emph{method}} is to define
that an @uref{glo_o.html#object,@emph{object}} S of
@uref{glo_t.html#type,@emph{type}} K in
@uref{glo_s.html#source_code,@emph{source code}} is
@uref{glo_s.html#similar,@emph{similar}} to an
@uref{glo_o.html#object,@emph{object}} C of
@uref{glo_t.html#type,@emph{type}} K in
@uref{glo_c.html#compiled_code,@emph{compiled code}} if C was
constructed from @uref{glo_c.html#code,@emph{code}} produced by calling
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
on S.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss215.html,LOAD-OBJECTS:MAKE-LOAD-FORM}
@item
@uref{../Issues/iss082.html,CONSTANT-FUNCTION-COMPILATION:NO}
@item
@uref{../Issues/iss063.html,COMPILE-FILE-SYMBOL-HANDLING:NEW-REQUIRE-CONSISTENCY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.4.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-4-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-4-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.4.3 Extensions to Similarity Rules

Some @uref{glo_o.html#object,@emph{objects}}, such as
@uref{glo_s.html#stream,@emph{streams}}, @strong{readtables}, and
@strong{methods} are not
@uref{glo_e.html#externalizable_object,@emph{externalizable objects}}
under the definition of similarity given above. That is, such
@uref{glo_o.html#object,@emph{objects}} may not portably appear as
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} in
@uref{glo_c.html#code,@emph{code}} to be processed by the
@uref{glo_f.html#file_compiler,@emph{file compiler}}.

An @uref{glo_i.html#implementation,@emph{implementation}} is permitted
to extend the rules of similarity, so that other kinds of
@uref{glo_o.html#object,@emph{objects}} are
@uref{glo_e.html#externalizable_object,@emph{externalizable objects}}
for that @uref{glo_i.html#implementation,@emph{implementation}}.

If for some kind of @uref{glo_o.html#object,@emph{object}},
@uref{glo_s.html#similarity,@emph{similarity}} is neither defined by
this specification nor by the
@uref{glo_i.html#implementation,@emph{implementation}}, then the
@uref{glo_f.html#file_compiler,@emph{file compiler}} must signal an
error upon encountering such an @uref{glo_o.html#object,@emph{object}}
as a @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_c.html#constant,@emph{constant}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.4.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-4-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-2-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.4.4 Additional Constraints on Externalizable Objects

If two @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} appearing in the source code for
a single file processed with the
@uref{glo_f.html#file_compiler,@emph{file compiler}} are the
@uref{glo_i.html#identical,@emph{identical}}, the corresponding
@uref{glo_o.html#object,@emph{objects}} in the
@uref{glo_c.html#compiled_code,@emph{compiled code}} must also be the
@uref{glo_i.html#identical,@emph{identical}}. With the exception of
@uref{glo_s.html#symbol,@emph{symbols}} and
@uref{glo_p.html#package,@emph{packages}}, any two
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} in
@uref{glo_c.html#code,@emph{code}} being processed by the
@uref{glo_f.html#file_compiler,@emph{file compiler}} may be
@emph{coalesced} if and only if they are
@uref{glo_s.html#similar,@emph{similar}}; if they are either both
@uref{glo_s.html#symbol,@emph{symbols}} or both
@uref{glo_p.html#package,@emph{packages}}, they may only be
@emph{coalesced} if and only if they are
@uref{glo_i.html#identical,@emph{identical}}.

@uref{glo_o.html#object,@emph{Objects}} containing circular references
can be @uref{glo_e.html#externalizable_object,@emph{externalizable
objects}}. The @uref{glo_f.html#file_compiler,@emph{file compiler}} is
required to preserve @uref{fun_eql.html#eql,@strong{eql}}ness of
substructures within a @uref{glo_f.html#file,@emph{file}}. Preserving
@uref{fun_eql.html#eql,@strong{eql}}ness means that subobjects that are
the @uref{glo_s.html#same,@emph{same}} in the
@uref{glo_s.html#source_code,@emph{source code}} must be the
@uref{glo_s.html#same,@emph{same}} in the corresponding
@uref{glo_c.html#compiled_code,@emph{compiled code}}.

In addition, the following are constraints on the handling of
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} by the
@uref{glo_f.html#file_compiler,@emph{file compiler}}:

@strong{array:} If an @uref{glo_a.html#array,@emph{array}} in the source
code is a @uref{glo_s.html#simple_array,@emph{simple array}}, then the
corresponding @uref{glo_a.html#array,@emph{array}} in the compiled code
will also be a @uref{glo_s.html#simple_array,@emph{simple array}}. If an
@uref{glo_a.html#array,@emph{array}} in the source code is displaced,
has a @uref{glo_f.html#fill_pointer,@emph{fill pointer}}, or is
@uref{glo_a.html#actually_adjustable,@emph{actually adjustable}}, the
corresponding @uref{glo_a.html#array,@emph{array}} in the compiled code
might lack any or all of these qualities. If an
@uref{glo_a.html#array,@emph{array}} in the source code has a fill
pointer, then the corresponding @uref{glo_a.html#array,@emph{array}} in
the compiled code might be only the size implied by the fill pointer.

@strong{packages:} The loader is required to find the corresponding
@uref{glo_p.html#package,@emph{package}}
@uref{glo_o.html#object,@emph{object}} as if by calling
@uref{fun_find-package.html#find-package,@strong{find-package}} with the
package name as an argument. An error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_package-error.html#package-error,@strong{package-error}} is
signaled if no @uref{glo_p.html#package,@emph{package}} of that name
exists at load time.

@strong{random-state:} A constant
@uref{glo_r.html#random_state,@emph{random state}} object cannot be used
as the state argument to the @uref{glo_f.html#function,@emph{function}}
@uref{fun_random.html#random,@strong{random}} because
@uref{fun_random.html#random,@strong{random}} modifies this data
structure.

@strong{structure, standard-object:}
@uref{glo_o.html#object,@emph{Objects}} of
@uref{glo_t.html#type,@emph{type}}
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
and
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
may appear in compiled constants if there is an appropriate
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
method defined for that @uref{glo_t.html#type,@emph{type}}.

The @uref{glo_f.html#file_compiler,@emph{file compiler}} calls
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
on any @uref{glo_o.html#object,@emph{object}} that is referenced as a
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{object}} if the
@uref{glo_o.html#object,@emph{object}} is a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{cla_structure-object.html#structure-object,@strong{structure-object}},
@uref{contyp_condition.html#condition,@strong{condition}}, or any of a
(possibly empty)
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
set of other @uref{glo_c.html#class,@emph{classes}}. The
@uref{glo_f.html#file_compiler,@emph{file compiler}} only calls
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
once for any given @uref{glo_o.html#object,@emph{object}} within a
single @uref{glo_f.html#file,@emph{file}}.

@strong{symbol:} In order to guarantee that
@uref{glo_c.html#compiled_file,@emph{compiled files}} can be
@emph{loaded} correctly, users must ensure that the
@uref{glo_p.html#package,@emph{packages}} referenced in those
@uref{glo_f.html#file,@emph{files}} are defined consistently at compile
time and load time. @uref{glo_c.html#conforming_program,@emph{Conforming
programs}} must satisfy the following requirements:

@enumerate 
@item
The @uref{glo_c.html#current_package,@emph{current package}} when a
@uref{glo_t.html#top_level_form,@emph{top level form}} in the
@uref{glo_f.html#file,@emph{file}} is processed by
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} must be
the same as the @uref{glo_c.html#current_package,@emph{current package}}
when the @uref{glo_c.html#code,@emph{code}} corresponding to that
@uref{glo_t.html#top_level_form,@emph{top level form}} in the
@uref{glo_c.html#compiled_file,@emph{compiled file}} is executed by
@uref{fun_load.html#load,@strong{load}}. In particular:
a. Any @uref{glo_t.html#top_level_form,@emph{top level form}} in a
@uref{glo_f.html#file,@emph{file}} that alters the
@uref{glo_c.html#current_package,@emph{current package}} must change it
to a @uref{glo_p.html#package,@emph{package}} of the same
@uref{glo_n.html#name,@emph{name}} both at compile time and at load
time.
b. If the first @uref{glo_n.html#non-atomic,@emph{non-atomic}}
@uref{glo_t.html#top_level_form,@emph{top level form}} in the
@uref{glo_f.html#file,@emph{file}} is not an
@uref{mac_in-package.html#in-package,@strong{in-package}}
@uref{glo_f.html#form,@emph{form}}, then the
@uref{glo_c.html#current_package,@emph{current package}} at the time
@uref{fun_load.html#load,@strong{load}} is called must be a
@uref{glo_p.html#package,@emph{package}} with the same
@uref{glo_n.html#name,@emph{name}} as the package that was the
@uref{glo_c.html#current_package,@emph{current package}} at the time
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} was
called.
@item
For all @uref{glo_s.html#symbol,@emph{symbols}} appearing lexically
within a @uref{glo_t.html#top_level_form,@emph{top level form}} that
were @uref{glo_a.html#accessible,@emph{accessible}} in the
@uref{glo_p.html#package,@emph{package}} that was the
@uref{glo_c.html#current_package,@emph{current package}} during
processing of that @uref{glo_t.html#top_level_form,@emph{top level
form}} at compile time, but whose
@uref{glo_h.html#home_package,@emph{home package}} was another
@uref{glo_p.html#package,@emph{package}}, at load time there must be a
@uref{glo_s.html#symbol,@emph{symbol}} with the same
@uref{glo_n.html#name,@emph{name}} that is
@uref{glo_a.html#accessible,@emph{accessible}} in both the load-time
@uref{glo_c.html#current_package,@emph{current package}} and in the
@uref{glo_p.html#package,@emph{package}} with the same
@uref{glo_n.html#name,@emph{name}} as the compile-time
@uref{glo_h.html#home_package,@emph{home package}}.
@item
For all @uref{glo_s.html#symbol,@emph{symbols}} represented in the
@uref{glo_c.html#compiled_file,@emph{compiled file}} that were
@uref{glo_e.html#external_symbol,@emph{external symbols}} in their
@uref{glo_h.html#home_package,@emph{home package}} at compile time,
there must be a @uref{glo_s.html#symbol,@emph{symbol}} with the same
@uref{glo_n.html#name,@emph{name}} that is an
@uref{glo_e.html#external_symbol,@emph{external symbol}} in the
@uref{glo_p.html#package,@emph{package}} with the same
@uref{glo_n.html#name,@emph{name}} at load time.
@end enumerate

If any of these conditions do not hold, the
@uref{glo_p.html#package,@emph{package}} in which the
@uref{glo_l.html#loader,@emph{loader}} looks for the affected
@uref{glo_s.html#symbol,@emph{symbols}} is unspecified.
@uref{glo_i.html#implementation,@emph{Implementations}} are permitted to
signal an error or to define this behavior.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss063.html,COMPILE-FILE-SYMBOL-HANDLING:NEW-REQUIRE-CONSISTENCY}
@item
@uref{../Issues/iss236.html,MAKE-LOAD-FORM-CONFUSION:REWRITE}
@item
@uref{../Issues/iss215.html,LOAD-OBJECTS:MAKE-LOAD-FORM}
@item
@uref{../Issues/iss079.html,CONSTANT-CIRCULAR-COMPILATION:YES}
@item
@uref{../Issues/iss080.html,CONSTANT-COLLAPSING:GENERALIZE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 3.2.5
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-4-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-2-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.2.5 Exceptional Situations in the Compiler

@uref{fun_compile.html#compile,@strong{compile}} and
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} are
permitted to signal errors and warnings, including errors due to
compile-time processing of (eval-when (:compile-toplevel) ...) forms,
macro expansion, and conditions signaled by the compiler itself.

@uref{glo_c.html#condition,@emph{Conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} might be signaled by the
compiler in situations where the compilation cannot proceed without
intervention.

In addition to situations for which the standard specifies that
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_warning.html#warning,@strong{warning}} must or might be
signaled, warnings might be signaled in situations where the compiler
can determine that the consequences are undefined or that a run-time
error will be signaled. Examples of this situation are as follows:
violating type declarations, altering or assigning the value of a
constant defined with
@uref{mac_defconstant.html#defconstant,@strong{defconstant}}, calling
built-in Lisp functions with a wrong number of arguments or malformed
keyword argument lists, and using unrecognized declaration specifiers.

The compiler is permitted to issue warnings about matters of programming
style as conditions of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_style-warning.html#style-warning,@strong{style-warning}}.
Examples of this situation are as follows: redefining a function using a
different argument list, calling a function with a wrong number of
arguments, not declaring
@uref{dec_ignorecm_ignorable.html#ignore,@strong{ignore}} of a local
variable that is not referenced, and referencing a variable declared
@uref{dec_ignorecm_ignorable.html#ignore,@strong{ignore}}.

Both @uref{fun_compile.html#compile,@strong{compile}} and
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} are
permitted (but not required) to
@uref{glo_e.html#establish,@emph{establish}} a
@uref{glo_h.html#handler,@emph{handler}} for
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. For example, they might
signal a warning, and restart compilation from some
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
point in order to let the compilation proceed without manual
intervention.

Both @uref{fun_compile.html#compile,@strong{compile}} and
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} return
three values, the second two indicating whether the source code being
compiled contained errors and whether style warnings were issued.

Some warnings might be deferred until the end of compilation. See
@uref{mac_with-compilation-unit.html#with-compilation-unit,@strong{with-compilation-unit}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss068.html,COMPILER-WARNING-STREAM}
@item
@uref{../Issues/iss065.html,COMPILER-DIAGNOSTICS:USE-HANDLER}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 33
@subsection CLHS: Section 3.3
@anchor{#clhs-section-3.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-2-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.3 Declarations

@uref{glo_d.html#declaration,@emph{Declarations}} provide a way of
specifying information for use by program processors, such as the
evaluator or the compiler.

@uref{glo_l.html#local_declaration,@emph{Local declarations}} can be
embedded in executable code using
@uref{sym_declare.html#declare,@strong{declare}}.
@uref{glo_g.html#global_declaration,@emph{Global declarations}}, or
@uref{glo_p.html#proclamation,@emph{proclamations}}, are established by
@uref{fun_proclaim.html#proclaim,@strong{proclaim}} or
@uref{mac_declaim.html#declaim,@strong{declaim}}.

The @uref{speope_the.html#the,@strong{the}}
@uref{glo_s.html#special_form,@emph{special form}} provides a shorthand
notation for making a @uref{glo_l.html#local_declaration,@emph{local
declaration}} about the @uref{glo_t.html#type,@emph{type}} of the
@uref{glo_v.html#value,@emph{value}} of a given
@uref{glo_f.html#form,@emph{form}}.

The consequences are undefined if a program violates a
@uref{glo_d.html#declaration,@emph{declaration}} or a
@uref{glo_p.html#proclamation,@emph{proclamation}}.

@uref{sec_3-3-1.html,}

3.3.1 Minimal Declaration Processing Requirements

@uref{sec_3-3-2.html,}

3.3.2 Declaration Specifiers

@uref{sec_3-3-3.html,}

3.3.3 Declaration Identifiers

@uref{sec_3-3-4.html,}

3.3.4 Declaration Scope

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 332::
* CLHS Section 333::
* CLHS Section 334::
@end menu

@node CLHS Section 332
@subsubsection CLHS: Section 3.3.2
@anchor{#clhs-section-3.3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.3.2 Declaration Specifiers

A @uref{glo_d.html#declaration_specifier,@emph{declaration specifier}}
is an @uref{glo_e.html#expression,@emph{expression}} that can appear at
top level of a @uref{sym_declare.html#declare,@strong{declare}}
expression or a @uref{mac_declaim.html#declaim,@strong{declaim}} form,
or as the argument to
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}. It is a
@uref{glo_l.html#list,@emph{list}} whose
@uref{glo_c.html#car,@emph{car}} is a
@uref{glo_d.html#declaration_identifier,@emph{declaration identifier}},
and whose @uref{glo_c.html#cdr,@emph{cdr}} is data interpreted according
to rules specific to the
@uref{glo_d.html#declaration_identifier,@emph{declaration identifier}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 333
@subsubsection CLHS: Section 3.3.3
@anchor{#clhs-section-3.3.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-3-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-3-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.3.3 Declaration Identifiers

The next figure shows a list of all
@uref{glo_d.html#declaration_identifier,@emph{declaration identifiers}}
defined by this standard.

@verbatim
declaration     ignore     special  
dynamic-extent  inline     type     
ftype           notinline           
ignorable       optimize            
@end verbatim

@strong{Figure 3-9. Common Lisp Declaration Identifiers}

An implementation is free to support other
(@uref{glo_i.html#implementation-defined,@emph{implementation-defined}})
@uref{glo_d.html#declaration_identifier,@emph{declaration identifiers}}
as well. A warning might be issued if a
@uref{glo_d.html#declaration_identifier,@emph{declaration identifier}}
is not among those defined above, is not defined by the
@uref{glo_i.html#implementation,@emph{implementation}}, is not a
@uref{glo_t.html#type,@emph{type}} @uref{glo_n.html#name,@emph{name}},
and has not been declared in a
@uref{dec_declaration.html#declaration,@strong{declaration}}
@uref{glo_p.html#proclamation,@emph{proclamation}}.

@uref{sec_3-3-3-1.html,}

3.3.3.1 Shorthand notation for Type Declarations

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss094.html,DECLARE-FUNCTION-AMBIGUITY:DELETE-FTYPE-ABBREVIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 334
@subsubsection CLHS: Section 3.3.4
@anchor{#clhs-section-3.3.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-3-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-3-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.3.4 Declaration Scope

@uref{glo_d.html#declaration,@emph{Declarations}} can be divided into
two kinds: those that apply to the
@uref{glo_b.html#binding,@emph{bindings}} of
@uref{glo_v.html#variable,@emph{variables}} or
@uref{glo_f.html#function,@emph{functions}}; and those that do not apply
to @uref{glo_b.html#binding,@emph{bindings}}.

A @uref{glo_d.html#declaration,@emph{declaration}} that appears at the
head of a binding @uref{glo_f.html#form,@emph{form}} and applies to a
@uref{glo_v.html#variable,@emph{variable}} or
@uref{glo_f.html#function,@emph{function}}
@uref{glo_b.html#binding,@emph{binding}} made by that
@uref{glo_f.html#form,@emph{form}} is called a
@uref{glo_b.html#bound_declaration,@emph{bound declaration}}; such a
@uref{glo_d.html#declaration,@emph{declaration}} affects both the
@uref{glo_b.html#binding,@emph{binding}} and any references within the
@uref{glo_s.html#scope,@emph{scope}} of the
@uref{glo_d.html#declaration,@emph{declaration}}.

@uref{glo_d.html#declaration,@emph{Declarations}} that are not
@uref{glo_b.html#bound_declaration,@emph{bound declarations}} are called
@uref{glo_f.html#free_declaration,@emph{free declarations}}.

A @uref{glo_f.html#free_declaration,@emph{free declaration}} in a
@uref{glo_f.html#form,@emph{form}} F1 that applies to a
@uref{glo_b.html#binding,@emph{binding}} for a
@uref{glo_n.html#name,@emph{name}} N @emph{established} by some
@uref{glo_f.html#form,@emph{form}} F2 of which F1 is a
@uref{glo_s.html#subform,@emph{subform}} affects only references to N
within F1; it does not to apply to other references to N outside of F1,
nor does it affect the manner in which the
@uref{glo_b.html#binding,@emph{binding}} of N by F2 is
@emph{established}.

@uref{glo_d.html#declaration,@emph{Declarations}} that do not apply to
@uref{glo_b.html#binding,@emph{bindings}} can only appear as
@uref{glo_f.html#free_declaration,@emph{free declarations}}.

The @uref{glo_s.html#scope,@emph{scope}} of a
@uref{glo_b.html#bound_declaration,@emph{bound declaration}} is the same
as the @uref{glo_l.html#lexical_scope,@emph{lexical scope}} of the
@uref{glo_b.html#binding,@emph{binding}} to which it applies; for
@uref{glo_s.html#special_variable,@emph{special variables}}, this means
the @uref{glo_s.html#scope,@emph{scope}} that the
@uref{glo_b.html#binding,@emph{binding}} would have had had it been a
@uref{glo_l.html#lexical_binding,@emph{lexical binding}}.

Unless explicitly stated otherwise, the
@uref{glo_s.html#scope,@emph{scope}} of a
@uref{glo_f.html#free_declaration,@emph{free declaration}} includes only
the body @uref{glo_s.html#subform,@emph{subforms}} of the
@uref{glo_f.html#form,@emph{form}} at whose head it appears, and no
other @uref{glo_s.html#subform,@emph{subforms}}. The
@uref{glo_s.html#scope,@emph{scope}} of
@uref{glo_f.html#free_declaration,@emph{free declarations}} specifically
does not include
@uref{glo_i.html#initialization_form,@emph{initialization forms}} for
@uref{glo_b.html#binding,@emph{bindings}} established by the
@uref{glo_f.html#form,@emph{form}} containing the
@uref{glo_d.html#declaration,@emph{declarations}}.

Some @uref{glo_i.html#iteration_form,@emph{iteration forms}} include
step, end-test, or result @uref{glo_s.html#subform,@emph{subforms}} that
are also included in the @uref{glo_s.html#scope,@emph{scope}} of
@uref{glo_d.html#declaration,@emph{declarations}} that appear in the
@uref{glo_i.html#iteration_form,@emph{iteration form}}. Specifically,
the @uref{glo_i.html#iteration_form,@emph{iteration forms}} and
@uref{glo_s.html#subform,@emph{subforms}} involved are:

@itemize
@item
@uref{mac_docm_dost.html#do,@strong{do}},
@uref{mac_docm_dost.html#doST,@strong{do*}}: @emph{step-forms},
@emph{end-test-form}, and @emph{result-forms}.
@item
@uref{mac_dolist.html#dolist,@strong{dolist}},
@uref{mac_dotimes.html#dotimes,@strong{dotimes}}: @emph{result-form}
@item
@uref{mac_do-symbol_-all-symbols.html#do-all-symbols,@strong{do-all-symbols}},
@uref{mac_do-symbol_-all-symbols.html#do-external-symbols,@strong{do-external-symbols}},
@uref{mac_do-symbol_-all-symbols.html#do-symbols,@strong{do-symbols}}:
@emph{result-form}
@end itemize

@uref{sec_3-3-4-1.html,}

3.3.4.1 Examples of Declaration Scope

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss092.html,DECLARATION-SCOPE:NO-HOISTING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 34
@subsection CLHS: Section 3.4
@anchor{#clhs-section-3.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-3-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4 Lambda Lists

A @uref{glo_l.html#lambda_list,@emph{lambda list}} is a
@uref{glo_l.html#list,@emph{list}} that specifies a set of
@uref{glo_p.html#parameter,@emph{parameters}} (sometimes called
@uref{glo_l.html#lambda_variable,@emph{lambda variables}}) and a
protocol for receiving @uref{glo_v.html#value,@emph{values}} for those
@uref{glo_p.html#parameter,@emph{parameters}}.

There are several kinds of @uref{glo_l.html#lambda_list,@emph{lambda
lists}}.

@verbatim
Context                                      Kind of Lambda List                              
defun form                                   ordinary lambda list                             
defmacro form                                macro lambda list                                
lambda expression                            ordinary lambda list                             
flet local function definition               ordinary lambda list                             
labels local function definition             ordinary lambda list                             
handler-case clause specification            ordinary lambda list                             
restart-case clause specification            ordinary lambda list                             
macrolet local macro definition              macro lambda list                                
define-method-combination                    ordinary lambda list                             
define-method-combination :arguments option  define-method-combination arguments lambda list  
defstruct :constructor option                boa lambda list                                  
defgeneric form                              generic function lambda list                     
defgeneric method clause                     specialized lambda list                          
defmethod form                               specialized lambda list                          
defsetf form                                 defsetf lambda list                              
define-setf-expander form                    macro lambda list                                
deftype form                                 deftype lambda list                              
destructuring-bind form                      destructuring lambda list                        
define-compiler-macro form                   macro lambda list                                
define-modify-macro form                     define-modify-macro lambda list                  
@end verbatim

@strong{Figure 3-10. What Kind of Lambda Lists to Use}

The next figure lists some @uref{glo_d.html#defined_name,@emph{defined
names}} that are applicable to @uref{glo_l.html#lambda_list,@emph{lambda
lists}}.

@verbatim
lambda-list-keywords  lambda-parameters-limit    
@end verbatim

@strong{Figure 3-11. Defined names applicable to lambda lists}

@uref{sec_3-4-1.html,}

3.4.1 Ordinary Lambda Lists

@uref{sec_3-4-2.html,}

3.4.2 Generic Function Lambda Lists

@uref{sec_3-4-3.html,}

3.4.3 Specialized Lambda Lists

@uref{sec_3-4-4.html,}

3.4.4 Macro Lambda Lists

@uref{sec_3-4-5.html,}

3.4.5 Destructuring Lambda Lists

@uref{sec_3-4-6.html,}

3.4.6 Boa Lambda Lists

@uref{sec_3-4-7.html,}

3.4.7 Defsetf Lambda Lists

@uref{sec_3-4-8.html,}

3.4.8 Deftype Lambda Lists

@uref{sec_3-4-9.html,}

3.4.9 Define-modify-macro Lambda Lists

@uref{sec_3-4-10.html,}

3.4.10 Define-method-combination Arguments Lambda Lists

@uref{sec_3-4-11.html,}

3.4.11 Syntactic Interaction of Documentation Strings and Declarations

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 3410::
* CLHS Section 3411::
* CLHS Section 342::
* CLHS Section 343::
* CLHS Section 344::
* CLHS Section 345::
* CLHS Section 346::
* CLHS Section 347::
* CLHS Section 348::
* CLHS Section 349::
@end menu

@node CLHS Section 3410
@subsubsection CLHS: Section 3.4.10
@anchor{#clhs-section-3.4.10}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-11.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.10 Define-method-combination Arguments Lambda Lists

A
@uref{glo_d.html#define-method-combination_arguments_lambda_list,@emph{define-method-combination
arguments lambda list}} is used by the :arguments option to
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}.

A
@uref{glo_d.html#define-method-combination_arguments_lambda_list,@emph{define-method-combination
arguments lambda list}} can contain the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} shown
in the next figure.

@verbatim
&allow-other-keys  &key       &rest   
&aux               &optional  &whole  
@end verbatim

@strong{Figure 3-21. Lambda List Keywords used by
Define-method-combination arguments Lambda Lists}

@uref{glo_d.html#define-method-combination_arguments_lambda_list,@emph{Define-method-combination
arguments lambda lists}} are similar to
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda lists}}, but
also permit the use of &whole.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 3411
@subsubsection CLHS: Section 3.4.11
@anchor{#clhs-section-3.4.11}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-10.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.11 Syntactic Interaction of Documentation Strings and Declarations

In a number of situations, a
@uref{glo_d.html#documentation_string,@emph{documentation string}} can
appear amidst a series of
@uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expressions}} prior to a series of
@uref{glo_f.html#form,@emph{forms}}.

In that case, if a @uref{glo_s.html#string,@emph{string}} S appears
where a @uref{glo_d.html#documentation_string,@emph{documentation
string}} is permissible and is not followed by either a
@uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}} or a
@uref{glo_f.html#form,@emph{form}} then S is taken to be a
@uref{glo_f.html#form,@emph{form}}; otherwise, S is taken as a
@uref{glo_d.html#documentation_string,@emph{documentation string}}. The
consequences are unspecified if more than one such
@uref{glo_d.html#documentation_string,@emph{documentation string}} is
present.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 342
@subsubsection CLHS: Section 3.4.2
@anchor{#clhs-section-3.4.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-1-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.2 Generic Function Lambda Lists

A @uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}} is used to describe the overall shape of the argument list
to be accepted by a @uref{glo_g.html#generic_function,@emph{generic
function}}. Individual @uref{glo_m.html#method,@emph{method}}
@uref{glo_s.html#signature,@emph{signatures}} might contribute
additional @uref{glo_k.html#keyword_parameter,@emph{keyword parameters}}
to the @uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_e.html#effective_method,@emph{effective method}}.

A @uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}} is used by
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}.

A @uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}} has the following syntax:

@verbatim
lambda-list::= (var* 
                [&optional {var | (var)}*] 
                [&rest var] 
                [&key {var | ({var | (keyword-name var)})}* [&allow-other-keys]]) 
@end verbatim

A @uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}} can contain the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} shown
in the next figure.

@verbatim
&allow-other-keys  &optional    
&key               &rest        
@end verbatim

@strong{Figure 3-14. Lambda List Keywords used by Generic Function
Lambda Lists}

A @uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}} differs from an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}} in
the following ways:

@strong{Required arguments}

Zero or more @uref{glo_r.html#required_parameter,@emph{required
parameters}} must be specified.

@strong{Optional and keyword arguments}

@uref{glo_o.html#optional_parameter,@emph{Optional parameters}} and
@uref{glo_k.html#keyword_parameter,@emph{keyword parameters}} may not
have default initial value forms nor use supplied-p parameters.

@strong{Use of &}aux@strong{}

The use of &aux is not allowed.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 343
@subsubsection CLHS: Section 3.4.3
@anchor{#clhs-section-3.4.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.3 Specialized Lambda Lists

A @uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda
list}} is used to @uref{glo_s.html#specialize,@emph{specialize}} a
@uref{glo_m.html#method,@emph{method}} for a particular
@uref{glo_s.html#signature,@emph{signature}} and to describe how
@uref{glo_a.html#argument,@emph{arguments}} matching that
@uref{glo_s.html#signature,@emph{signature}} are received by the
@uref{glo_m.html#method,@emph{method}}. The
@uref{glo_d.html#defined_name,@emph{defined names}} in the next figure
use @uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda
lists}} in some way; see the dictionary entry for each for information
about how.

@verbatim
defmethod  defgeneric    
@end verbatim

@strong{Figure 3-15. Standardized Operators that use Specialized Lambda
Lists}

A @uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda
list}} can contain the @uref{glo_l.html#lambda_list_keyword,@emph{lambda
list keywords}} shown in the next figure.

@verbatim
&allow-other-keys  &key       &rest  
&aux               &optional         
@end verbatim

@strong{Figure 3-16. Lambda List Keywords used by Specialized Lambda
Lists}

A @uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda
list}} is syntactically the same as an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}
except that each @uref{glo_r.html#required_parameter,@emph{required
parameter}} may optionally be associated with a
@uref{glo_c.html#class,@emph{class}} or
@uref{glo_o.html#object,@emph{object}} for which that
@uref{glo_p.html#parameter,@emph{parameter}} is
@uref{glo_s.html#specialized,@emph{specialized}}.

@verbatim
lambda-list::= ({var | (var [specializer])}* 
                [&optional {var | (var [init-form [supplied-p-parameter]])}*] 
                [&rest var] 
                [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* [&allow-other-keys]] 
                [&aux {var | (var [init-form])}*]) 
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 344
@subsubsection CLHS: Section 3.4.4
@anchor{#clhs-section-3.4.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.4 Macro Lambda Lists

A @uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}} is used
in describing @uref{glo_m.html#macro,@emph{macros}} defined by the
@uref{glo_o.html#operator,@emph{operators}} in the next figure.

@verbatim
define-compiler-macro  defmacro  macrolet  
define-setf-expander                       
@end verbatim

@strong{Figure 3-17. Operators that use Macro Lambda Lists}

With the additional restriction that an
@uref{glo_e.html#environment_parameter,@emph{environment parameter}} may
appear only once (at any of the positions indicated), a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}} has the
following syntax:

@verbatim
reqvars::= var* 
@end verbatim

@verbatim
optvars::= [&optional {var | (var [init-form [supplied-p-parameter]])}*] 
@end verbatim

@verbatim
restvar::= [{&rest | &body} var] 
@end verbatim

@verbatim
keyvars::= [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* 
            [&allow-other-keys]] 
@end verbatim

@verbatim
auxvars::= [&aux {var | (var [init-form])}*] 
@end verbatim

@verbatim
envvar::= [&environment var] 
@end verbatim

@verbatim
wholevar::= [&whole var] 
@end verbatim

@verbatim
lambda-list::= (wholevar envvar  reqvars envvar  optvars envvar 
                restvar envvar  keyvars envvar  auxvars envvar) | 
               (wholevar envvar  reqvars envvar  optvars envvar .  var) 
@end verbatim

@verbatim
pattern::= (wholevar reqvars optvars restvar keyvars auxvars) | 
           (wholevar reqvars optvars . var) 
@end verbatim

A @uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}} can
contain the @uref{glo_l.html#lambda_list_keyword,@emph{lambda list
keywords}} shown in the next figure.

@verbatim
&allow-other-keys  &environment  &rest   
&aux               &key          &whole  
&body              &optional             
@end verbatim

@strong{Figure 3-18. Lambda List Keywords used by Macro Lambda Lists}

@uref{glo_o.html#optional_parameter,@emph{Optional parameters}}
(introduced by &optional) and
@uref{glo_k.html#keyword_parameter,@emph{keyword parameters}}
(introduced by &key) can be supplied in a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}, just as in
an @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}.
Both may contain default initialization forms and
@uref{glo_s.html#supplied-p_parameter,@emph{supplied-p parameters}}.

&body is identical in function to &rest, but it can be used to inform
certain output-formatting and editing functions that the remainder of
the @uref{glo_f.html#form,@emph{form}} is treated as a body, and should
be indented accordingly. Only one of &body or &rest can be used at any
particular level; see @uref{sec_3-4-4-1.html,Section 3.4.4.1
(Destructuring by Lambda Lists)}. &body can appear at any level of a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}; for
details, see @uref{sec_3-4-4-1.html,Section 3.4.4.1 (Destructuring by
Lambda Lists)}.

&whole is followed by a single variable that is bound to the entire
macro-call form; this is the value that the
@uref{glo_m.html#macro_function,@emph{macro function}} receives as its
first argument. If &whole and a following variable appear, they must
appear first in @emph{lambda-list}, before any other parameter or
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keyword}}. &whole
can appear at any level of a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}. At inner
levels, the &whole variable is bound to the corresponding part of the
argument, as with &rest, but unlike &rest, other arguments are also
allowed. The use of &whole does not affect the pattern of arguments
specified.

&environment is followed by a single variable that is bound to an
@uref{glo_e.html#environment,@emph{environment}} representing the
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which the macro call is to be interpreted. This
@uref{glo_e.html#environment,@emph{environment}} should be used with
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}},
@uref{acc_compiler-_cro-function.html#compiler-macro-function,@strong{compiler-macro-function}},
and
@uref{fun_macroexpa_acroexpand-1.html#macroexpand,@strong{macroexpand}}
(for example) in computing the expansion of the macro, to ensure that
any @uref{glo_l.html#lexical_binding,@emph{lexical bindings}} or
definitions established in the
@uref{glo_c.html#compilation_environment,@emph{compilation environment}}
are taken into account. &environment can only appear at the top level of
a @uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}, and can
only appear once, but can appear anywhere in that list; the &environment
@uref{glo_p.html#parameter,@emph{parameter}} is
@uref{glo_b.html#bound,@emph{bound}} along with &whole before any other
@uref{glo_v.html#variable,@emph{variables}} in the
@uref{glo_l.html#lambda_list,@emph{lambda list}}, regardless of where
&environment appears in the @uref{glo_l.html#lambda_list,@emph{lambda
list}}. The @uref{glo_o.html#object,@emph{object}} that is bound to the
@uref{glo_e.html#environment_parameter,@emph{environment parameter}} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}.

Destructuring allows a @uref{glo_m.html#macro_lambda_list,@emph{macro
lambda list}} to express the structure of a macro call syntax. If no
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}}
appear, then the @uref{glo_m.html#macro_lambda_list,@emph{macro lambda
list}} is a @uref{glo_t.html#tree,@emph{tree}} containing parameter
names at the leaves. The pattern and the
@uref{glo_m.html#macro_form,@emph{macro form}} must have compatible
@uref{glo_t.html#tree_structure,@emph{tree structure}}; that is, their
@uref{glo_t.html#tree_structure,@emph{tree structure}} must be
equivalent, or it must differ only in that some
@uref{glo_l.html#leaf,@emph{leaves}} of the pattern match
@uref{glo_n.html#non-atomic,@emph{non-atomic}}
@uref{glo_o.html#object,@emph{objects}} of the
@uref{glo_m.html#macro_form,@emph{macro form}}. For information about
error detection in this @uref{glo_s.html#situation,@emph{situation}},
see @uref{sec_3-5-1-7.html,Section 3.5.1.7 (Destructuring Mismatch)}.

A destructuring @uref{glo_l.html#lambda_list,@emph{lambda list}}
(whether at top level or embedded) can be dotted, ending in a parameter
name. This situation is treated exactly as if the parameter name that
ends the @uref{glo_l.html#list,@emph{list}} had appeared preceded by
&rest.

It is permissible for a @uref{glo_m.html#macro,@emph{macro}}
@uref{glo_f.html#form,@emph{form}} (or a
@uref{glo_s.html#subexpression,@emph{subexpression}} of a
@uref{glo_m.html#macro,@emph{macro}} @uref{glo_f.html#form,@emph{form}})
to be a @uref{glo_d.html#dotted_list,@emph{dotted list}} only when (...
&rest var) or (... . var) is used to match it. It is the responsibility
of the @uref{glo_m.html#macro,@emph{macro}} to recognize and deal with
such situations.

@uref{sec_3-4-4-1.html,}

3.4.4.1 Destructuring by Lambda Lists

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss139.html,DOTTED-MACRO-FORMS:ALLOW}
@item
@uref{../Issues/iss010.html,ARGUMENT-MISMATCH-ERROR-AGAIN:CONSISTENT}
@item
@uref{../Issues/iss229.html,MACRO-ENVIRONMENT-EXTENT:DYNAMIC}
@item
@uref{../Issues/iss001.html,&ENVIRONMENT-BINDING-ORDER:FIRST}
@item
@uref{../Issues/iss101.html,DEFINE-COMPILER-MACRO:X3J13-NOV89}
@item
@uref{../Issues/iss343.html,SYNTACTIC-ENVIRONMENT-ACCESS:RETRACTED-MAR91}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss185.html,GET-SETF-METHOD-ENVIRONMENT:ADD-ARG}
@item
@uref{../Issues/iss231.html,MACRO-FUNCTION-ENVIRONMENT:YES}
@item
@uref{../Issues/iss106.html,DEFMACRO-LAMBDA-LIST:TIGHTEN-DESCRIPTION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 345
@subsubsection CLHS: Section 3.4.5
@anchor{#clhs-section-3.4.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-4-1-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.5 Destructuring Lambda Lists

A @uref{glo_d.html#destructuring_lambda_list,@emph{destructuring lambda
list}} is used by
@uref{mac_destructuring-bind.html#destructuring-bind,@strong{destructuring-bind}}.

@uref{glo_d.html#destructuring_lambda_list,@emph{Destructuring lambda
lists}} are closely related to
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda lists}}; see
@uref{sec_3-4-4.html,Section 3.4.4 (Macro Lambda Lists)}. A
@uref{glo_d.html#destructuring_lambda_list,@emph{destructuring lambda
list}} can contain all of the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} listed
for @uref{glo_m.html#macro_lambda_list,@emph{macro lambda lists}} except
for &environment, and supports destructuring in the same way. Inner
@uref{glo_l.html#lambda_list,@emph{lambda lists}} nested within a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}} have the
syntax of @uref{glo_d.html#destructuring_lambda_list,@emph{destructuring
lambda lists}}.

A @uref{glo_d.html#destructuring_lambda_list,@emph{destructuring lambda
list}} has the following syntax:

@verbatim
reqvars::= var* 
@end verbatim

@verbatim
optvars::= [&optional {var | (var [init-form [supplied-p-parameter]])}*] 
@end verbatim

@verbatim
restvar::= [{&rest | &body} var] 
@end verbatim

@verbatim
keyvars::= [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* 
            [&allow-other-keys]] 
@end verbatim

@verbatim
auxvars::= [&aux {var | (var [init-form])}*] 
@end verbatim

@verbatim
envvar::= [&environment var] 
@end verbatim

@verbatim
wholevar::= [&whole var] 
@end verbatim

@verbatim
lambda-list::= (wholevar reqvars optvars restvar keyvars auxvars) | 
               (wholevar reqvars optvars . var) 
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 346
@subsubsection CLHS: Section 3.4.6
@anchor{#clhs-section-3.4.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-5.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.6 Boa Lambda Lists

A @uref{glo_b.html#boa_lambda_list,@emph{boa lambda list}} is a
@uref{glo_l.html#lambda_list,@emph{lambda list}} that is syntactically
like an @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda
list}}, but that is processed in ``@strong{b}y @strong{o}rder of
@strong{a}rgument'' style.

A @uref{glo_b.html#boa_lambda_list,@emph{boa lambda list}} is used only
in a @uref{mac_defstruct.html#defstruct,@strong{defstruct}}
@uref{glo_f.html#form,@emph{form}}, when explicitly specifying the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of a constructor
@uref{glo_f.html#function,@emph{function}} (sometimes called a ``boa
constructor'').

The &optional, &rest, &aux, &key, and &allow-other-keys
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} are
recognized in a @uref{glo_b.html#boa_lambda_list,@emph{boa lambda
list}}. The way these @uref{glo_l.html#lambda_list_keyword,@emph{lambda
list keywords}} differ from their use in an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}
follows.

Consider this example, which describes how @strong{destruct} processes
its :constructor option.

@verbatim
 (:constructor create-foo
         (a &optional b (c 'sea) &rest d &aux e (f 'eff)))
@end verbatim

This defines create-foo to be a constructor of one or more arguments.
The first argument is used to initialize the a slot. The second argument
is used to initialize the b slot. If there isn't any second argument,
then the default value given in the body of the
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} (if given) is
used instead. The third argument is used to initialize the c slot. If
there isn't any third argument, then the symbol sea is used instead. Any
arguments following the third argument are collected into a
@uref{glo_l.html#list,@emph{list}} and used to initialize the d slot. If
there are three or fewer arguments, then
@uref{any_nil.html#nil,@strong{nil}} is placed in the d slot. The e slot
is not initialized; its initial value is
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}.
Finally, the f slot is initialized to contain the symbol eff. &key and
&allow-other-keys arguments default in a manner similar to that of
&optional arguments: if no default is supplied in the
@uref{glo_l.html#lambda_list,@emph{lambda list}} then the default value
given in the body of the
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} (if given) is
used instead. For example:

@verbatim
 (defstruct (foo (:constructor CREATE-FOO (a &optional b (c 'sea)
                                             &key (d 2)
                                             &aux e (f 'eff))))
   (a 1) (b 2) (c 3) (d 4) (e 5) (f 6))
 
 (create-foo 10) =>  #S(FOO A 10 B 2 C SEA D 2 E implemention-dependent F EFF)
 (create-foo 10 'bee 'see :d 'dee) 
=>  #S(FOO A 10 B BEE C SEE D DEE E implemention-dependent F EFF)
@end verbatim

If keyword arguments of the form ((@emph{key} @emph{var})
[@emph{default} [@emph{svar}]]) are specified, the
@uref{glo_s.html#slot,@emph{slot}} @uref{glo_n.html#name,@emph{name}} is
matched with @emph{var} (not @emph{key}).

The actions taken in the b and e cases were carefully chosen to allow
the user to specify all possible behaviors. The &aux variables can be
used to completely override the default initializations given in the
body.

If no default value is supplied for an
@uref{glo_a.html#aux_variable,@emph{aux variable}} variable, the
consequences are undefined if an attempt is later made to read the
corresponding @uref{glo_s.html#slot,@emph{slot}}'s value before a value
is explicitly assigned. If such a @uref{glo_s.html#slot,@emph{slot}} has
a :type option specified, this suppressed initialization does not imply
a type mismatch situation; the declared type is only required to apply
when the @uref{glo_s.html#slot,@emph{slot}} is finally assigned.

With this definition, the following can be written:

@verbatim
 (create-foo 1 2)
@end verbatim

instead of

@verbatim
 (make-foo :a 1 :b 2)
@end verbatim

and create-foo provides defaulting different from that of make-foo.

Additional arguments that do not correspond to slot names but are merely
present to supply values used in subsequent initialization computations
are allowed. For example, in the definition

@verbatim
 (defstruct (frob (:constructor create-frob
                  (a &key (b 3 have-b) (c-token 'c) 
                          (c (list c-token (if have-b 7 2))))))
         a b c)
@end verbatim

the c-token argument is used merely to supply a value used in the
initialization of the c slot. The
@uref{glo_s.html#supplied-p_parameter,@emph{supplied-p parameters}}
associated with @uref{glo_o.html#optional_parameter,@emph{optional
parameters}} and @uref{glo_k.html#keyword_parameter,@emph{keyword
parameters}} might also be used this way.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss019.html,BOA-AUX-INITIALIZATION:ERROR-ON-READ}
@item
@uref{../Issues/iss109.html,DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE:ALLOW-KEY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 347
@subsubsection CLHS: Section 3.4.7
@anchor{#clhs-section-3.4.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.7 Defsetf Lambda Lists

A @uref{glo_d.html#defsetf_lambda_list,@emph{defsetf lambda list}} is
used by @uref{mac_defsetf.html#defsetf,@strong{defsetf}}.

A @uref{glo_d.html#defsetf_lambda_list,@emph{defsetf lambda list}} has
the following syntax:

@verbatim
lambda-list::= (var* 
                [&optional {var | (var [init-form [supplied-p-parameter]])}*] 
                [&rest var] 
                [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* [&allow-other-keys]] 
                [&environment var] 
@end verbatim

A @uref{glo_d.html#defsetf_lambda_list,@emph{defsetf lambda list}} can
contain the @uref{glo_l.html#lambda_list_keyword,@emph{lambda list
keywords}} shown in the next figure.

@verbatim
&allow-other-keys  &key       &rest  
&environment       &optional         
@end verbatim

@strong{Figure 3-19. Lambda List Keywords used by Defsetf Lambda Lists}

A @uref{glo_d.html#defsetf_lambda_list,@emph{defsetf lambda list}}
differs from an @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary
lambda list}} only in that it does not permit the use of &aux, and that
it permits use of &environment, which introduces an
@uref{glo_e.html#environment_parameter,@emph{environment parameter}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 348
@subsubsection CLHS: Section 3.4.8
@anchor{#clhs-section-3.4.8}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-9.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.8 Deftype Lambda Lists

A @uref{glo_d.html#deftype_lambda_list,@emph{deftype lambda list}} is
used by @uref{mac_deftype.html#deftype,@strong{deftype}}.

A @uref{glo_d.html#deftype_lambda_list,@emph{deftype lambda list}} has
the same syntax as a @uref{glo_m.html#macro_lambda_list,@emph{macro
lambda list}}, and can therefore contain the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} as a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}.

A @uref{glo_d.html#deftype_lambda_list,@emph{deftype lambda list}}
differs from a @uref{glo_m.html#macro_lambda_list,@emph{macro lambda
list}} only in that if no @emph{init-form} is supplied for an
@uref{glo_o.html#optional_parameter,@emph{optional parameter}} or
@uref{glo_k.html#keyword_parameter,@emph{keyword parameter}} in the
@emph{lambda-list}, the default @uref{glo_v.html#value,@emph{value}} for
that @uref{glo_p.html#parameter,@emph{parameter}} is the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}
(rather than @uref{any_nil.html#nil,@strong{nil}}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss122.html,DEFTYPE-KEY:ALLOW}
@item
@uref{../Issues/iss121.html,DEFTYPE-DESTRUCTURING:YES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 349
@subsubsection CLHS: Section 3.4.9
@anchor{#clhs-section-3.4.9}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-8.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-4-10.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.4.9 Define-modify-macro Lambda Lists

A
@uref{glo_d.html#define-modify-macro_lambda_list,@emph{define-modify-macro
lambda list}} is used by
@uref{mac_define-modify-macro.html#define-modify-macro,@strong{define-modify-macro}}.

A
@uref{glo_d.html#define-modify-macro_lambda_list,@emph{define-modify-macro
lambda list}} can contain the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} shown
in the next figure.

@verbatim
&optional  &rest  
@end verbatim

@strong{Figure 3-20. Lambda List Keywords used by Define-modify-macro
Lambda Lists}

@uref{glo_d.html#define-modify-macro_lambda_list,@emph{Define-modify-macro
lambda lists}} are similar to
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda lists}}, but
do not support keyword arguments.
@uref{mac_define-modify-macro.html#define-modify-macro,@strong{define-modify-macro}}
has no need match keyword arguments, and a
@uref{glo_r.html#rest_parameter,@emph{rest parameter}} is sufficient.
@uref{glo_a.html#aux_variable,@emph{Aux variables}} are also not
supported, since
@uref{mac_define-modify-macro.html#define-modify-macro,@strong{define-modify-macro}}
has no body @uref{glo_f.html#form,@emph{forms}} which could refer to
such @uref{glo_b.html#binding,@emph{bindings}}. See the
@uref{glo_m.html#macro,@emph{macro}}
@uref{mac_define-modify-macro.html#define-modify-macro,@strong{define-modify-macro}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 35
@subsection CLHS: Section 3.5
@anchor{#clhs-section-3.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-4-11.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.5 Error Checking in Function Calls

@uref{sec_3-5-1.html,}

3.5.1 Argument Mismatch Detection

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss012.html,ARGUMENT-MISMATCH-ERROR:MORE-CLARIFICATIONS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 36
@subsection CLHS: Section 3.6
@anchor{#clhs-section-3.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-5-1-8.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.6 Traversal Rules and Side Effects

The consequences are undefined when @uref{glo_c.html#code,@emph{code}}
executed during an
@uref{glo_o.html#object-traversing,@emph{object-traversing}} operation
destructively modifies the @uref{glo_o.html#object,@emph{object}} in a
way that might affect the ongoing traversal operation. In particular,
the following rules apply.

@strong{List traversal}

For @uref{glo_l.html#list,@emph{list}} traversal operations, the
@uref{glo_c.html#cdr,@emph{cdr}} chain of the
@uref{glo_l.html#list,@emph{list}} is not allowed to be destructively
modified.

@strong{Array traversal}

For @uref{glo_a.html#array,@emph{array}} traversal operations, the
@uref{glo_a.html#array,@emph{array}} is not allowed to be adjusted and
its @uref{glo_f.html#fill_pointer,@emph{fill pointer}}, if any, is not
allowed to be changed.

@strong{Hash-table traversal}

For @uref{glo_h.html#hash_table,@emph{hash table}} traversal operations,
new elements may not be added or deleted except that the element
corresponding to the current hash key may be changed or removed.

@strong{Package traversal}

For @uref{glo_p.html#package,@emph{package}} traversal operations (e.g.,
@uref{mac_do-symbol_-all-symbols.html#do-symbols,@strong{do-symbols}}),
new @uref{glo_s.html#symbol,@emph{symbols}} may not be
@uref{glo_i.html#interned,@emph{interned}} in or
@uref{glo_u.html#uninterned,@emph{uninterned}} from the
@uref{glo_p.html#package,@emph{package}} being traversed or any
@uref{glo_p.html#package,@emph{package}} that it uses except that the
current @uref{glo_s.html#symbol,@emph{symbol}} may be
@uref{glo_u.html#uninterned,@emph{uninterned}} from the
@uref{glo_p.html#package,@emph{package}} being traversed.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 37
@subsection CLHS: Section 3.7
@anchor{#clhs-section-3.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-7-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.7 Destructive Operations

@uref{sec_3-7-1.html,}

3.7.1 Modification of Literal Objects

@uref{sec_3-7-2.html,}

3.7.2 Transfer of Control during a Destructive Operation

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss129.html,DESTRUCTIVE-OPERATIONS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 372::
@end menu

@node CLHS Section 372
@subsubsection CLHS: Section 3.7.2
@anchor{#clhs-section-3.7.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-7-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_3-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_3-7-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.7.2 Transfer of Control during a Destructive Operation

Should a transfer of control out of a
@uref{glo_d.html#destructive,@emph{destructive}} operation occur (e.g.,
due to an error) the state of the @emph{object} being modified is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@uref{sec_3-7-2-1.html,}

3.7.2.1 Examples of Transfer of Control during a Destructive Operation

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Evaluation and Compilation Dictionary
@subsection CLHS: Section The Evaluation and Compilation Dictionary
@anchor{#clhs-section-the-evaluation-and-compilation-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_3-7-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sym_lambda.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
3.8 The Evaluation and Compilation Dictionary

@uref{sym_lambda.html,@emph{Symbol} @strong{LAMBDA}}

@uref{mac_lambda.html,@emph{Macro} @strong{LAMBDA}}

@uref{fun_compile.html,@emph{Function} @strong{COMPILE}}

@uref{fun_eval.html,@emph{Function} @strong{EVAL}}

@uref{speope_eval-when.html,@emph{Special Operator} @strong{EVAL-WHEN}}

@uref{speope_load-time-value.html,@emph{Special Operator}
@strong{LOAD-TIME-VALUE}}

@uref{speope_quote.html,@emph{Special Operator} @strong{QUOTE}}

@uref{acc_compiler-_cro-function.html,@emph{Accessor}
@strong{COMPILER-MACRO-FUNCTION}}

@uref{mac_define-compiler-macro.html,@emph{Macro}
@strong{DEFINE-COMPILER-MACRO}}

@uref{mac_defmacro.html,@emph{Macro} @strong{DEFMACRO}}

@uref{acc_macro-function.html,@emph{Accessor} @strong{MACRO-FUNCTION}}

@uref{fun_macroexpa_acroexpand-1.html,@emph{Function}
@strong{MACROEXPAND, MACROEXPAND-1}}

@uref{mac_define-symbol-macro.html,@emph{Macro}
@strong{DEFINE-SYMBOL-MACRO}}

@uref{speope_symbol-macrolet.html,@emph{Special Operator}
@strong{SYMBOL-MACROLET}}

@uref{var_stmacroexpand-hookst.html,@emph{Variable}
@strong{*MACROEXPAND-HOOK*}}

@uref{fun_proclaim.html,@emph{Function} @strong{PROCLAIM}}

@uref{mac_declaim.html,@emph{Macro} @strong{DECLAIM}}

@uref{sym_declare.html,@emph{Symbol} @strong{DECLARE}}

@uref{dec_ignorecm_ignorable.html,@emph{Declaration} @strong{IGNORE,
IGNORABLE}}

@uref{dec_dynamic-extent.html,@emph{Declaration}
@strong{DYNAMIC-EXTENT}}

@uref{dec_type.html,@emph{Declaration} @strong{TYPE}}

@uref{dec_inlinecm_notinline.html,@emph{Declaration} @strong{INLINE,
NOTINLINE}}

@uref{dec_ftype.html,@emph{Declaration} @strong{FTYPE}}

@uref{dec_declaration.html,@emph{Declaration} @strong{DECLARATION}}

@uref{dec_optimize.html,@emph{Declaration} @strong{OPTIMIZE}}

@uref{dec_special.html,@emph{Declaration} @strong{SPECIAL}}

@uref{speope_locally.html,@emph{Special Operator} @strong{LOCALLY}}

@uref{speope_the.html,@emph{Special Operator} @strong{THE}}

@uref{fun_special-operator-p.html,@emph{Function}
@strong{SPECIAL-OPERATOR-P}}

@uref{fun_constantp.html,@emph{Function} @strong{CONSTANTP}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss343.html,SYNTACTIC-ENVIRONMENT-ACCESS:RETRACTED-MAR91}
@item
@uref{../Issues/iss198.html,ISO-COMPATIBILITY:ADD-SUBSTRATE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor COMPILER-MACRO-FUNCTION::
* CLHS Accessor MACRO-FUNCTION::
* CLHS Declaration DECLARATION::
* CLHS Declaration DYNAMIC-EXTENT::
* CLHS Declaration FTYPE::
* CLHS Declaration IGNORE IGNORABLE::
* CLHS Declaration INLINE NOTINLINE::
* CLHS Declaration OPTIMIZE::
* CLHS Declaration SPECIAL::
* CLHS Declaration TYPE::
* CLHS Function COMPILE::
* CLHS Function CONSTANTP::
* CLHS Function EVAL::
* CLHS Function MACROEXPAND MACROEXPAND-1::
* CLHS Function PROCLAIM::
* CLHS Function SPECIAL-OPERATOR-P::
* CLHS Macro DECLAIM::
* CLHS Macro DEFINE-COMPILER-MACRO::
* CLHS Macro DEFINE-SYMBOL-MACRO::
* CLHS Macro DEFMACRO::
* CLHS Macro LAMBDA::
* CLHS Special Operator EVAL-WHEN::
* CLHS Special Operator LOAD-TIME-VALUE::
* CLHS Special Operator LOCALLY::
* CLHS Special Operator QUOTE::
* CLHS Special Operator SYMBOL-MACROLET::
* CLHS Special Operator THE::
* CLHS Symbol DECLARE::
* CLHS Variable *MACROEXPAND-HOOK*::
@end menu

@node CLHS Accessor COMPILER-MACRO-FUNCTION
@subsubsection CLHS: Accessor COMPILER-MACRO-FUNCTION
@anchor{#clhs-accessor-compiler-macro-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_quote.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-compiler-macro.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{COMPILER-MACRO-FUNCTION}

@strong{Syntax:}

@strong{compiler-macro-function} @emph{name &optional environment} =>
@emph{function}

(setf (@strong{compiler-macro-function} @emph{name &optional
environment}) @emph{new-function})

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}.

@emph{function}, @emph{new-function}---a
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro
function}}, or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@uref{glo_a.html#access,@emph{Accesses}} the
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro function}}
named @emph{name}, if any, in the @emph{environment}.

A value of @uref{any_nil.html#nil,@strong{nil}} denotes the absence of a
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro function}}
named @emph{name}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if @emph{environment} is
@uref{glo_n.html#non-nil,@emph{non-nil}} in a use of
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#compiler-macro-function,@strong{compiler-macro-function}}.

@strong{See Also:}

@uref{mac_define-compiler-macro.html#define-compiler-macro,@strong{define-compiler-macro}},
@uref{sec_3-2-2-1.html,Section 3.2.2.1 (Compiler Macros)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss101.html,DEFINE-COMPILER-MACRO:X3J13-NOV89}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor MACRO-FUNCTION
@subsubsection CLHS: Accessor MACRO-FUNCTION
@anchor{#clhs-accessor-macro-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defmacro.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_macroexpa_acroexpand-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{MACRO-FUNCTION}

@strong{Syntax:}

@strong{macro-function} @emph{symbol &optional environment} =>
@emph{function}

(setf (@strong{macro-function} @emph{symbol &optional environment})
@emph{new-function})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}.

@emph{function}---a @uref{glo_m.html#macro_function,@emph{macro
function}} or @uref{any_nil.html#nil,@strong{nil}}.

@emph{new-function}---a @uref{glo_m.html#macro_function,@emph{macro
function}}.

@strong{Description:}

Determines whether @emph{symbol} has a function definition as a macro in
the specified @emph{environment}.

If so, the macro expansion function, a function of two arguments, is
returned. If @emph{symbol} has no function definition in the lexical
environment @emph{environment}, or its definition is not a
@uref{glo_m.html#macro,@emph{macro}},
@ref{#macro-function,@strong{macro-function}} returns
@uref{any_nil.html#nil,@strong{nil}}.

It is possible for both @ref{#macro-function,@strong{macro-function}}
and
@uref{fun_special-operator-p.html#special-operator-p,@strong{special-operator-p}}
to return @uref{glo_t.html#true,@emph{true}} of @emph{symbol}. The
@uref{glo_m.html#macro,@emph{macro}} definition must be available for
use by programs that understand only the standard Common Lisp
@uref{glo_s.html#special_form,@emph{special forms}}.

@strong{Examples:}

@verbatim
 (defmacro macfun (x) '(macro-function 'macfun)) =>  MACFUN 
 (not (macro-function 'macfun)) =>  false 
@end verbatim

@verbatim
 (macrolet ((foo (&environment env)
               (if (macro-function 'bar env)
                  ''yes
                  ''no)))
    (list (foo)
          (macrolet ((bar () :beep))
             (foo))))
 
=>  (NO YES)
@end verbatim

@strong{Affected By:}

(setf macro-function),
@uref{mac_defmacro.html#defmacro,@strong{defmacro}}, and
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}}.

@strong{Exceptional Situations:}

The consequences are undefined if @emph{environment} is
@uref{glo_n.html#non-nil,@emph{non-nil}} in a use of
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#macro-function,@strong{macro-function}}.

@strong{See Also:}

@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} can be used with
@ref{#macro-function,@strong{macro-function}} to install a
@uref{glo_m.html#macro,@emph{macro}} as a symbol's global function
definition:

@verbatim
 (setf (macro-function symbol) fn)
@end verbatim

The value installed must be a @uref{glo_f.html#function,@emph{function}}
that accepts two arguments, the entire macro call and an
@uref{glo_e.html#environment,@emph{environment}}, and computes the
expansion for that call. Performing this operation causes @emph{symbol}
to have only that macro definition as its global function definition;
any previous definition, whether as a
@uref{glo_m.html#macro,@emph{macro}} or as a
@uref{glo_f.html#function,@emph{function}}, is lost.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss321.html,SPECIAL-FORM-P-MISNOMER:RENAME}
@item
@uref{../Issues/iss230.html,MACRO-FUNCTION-ENVIRONMENT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration DECLARATION
@subsubsection CLHS: Declaration DECLARATION
@anchor{#clhs-declaration-declaration}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_ftype.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_optimize.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{DECLARATION}

@strong{Syntax:}

(declaration @emph{name}@strong{*})

@strong{Arguments:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Binding Types Affected:} None.

@strong{Valid Context:}

@uref{glo_p.html#proclamation,@emph{proclamation}} only

@strong{Description:}

Advises the compiler that each @emph{name} is a valid but potentially
non-standard declaration name. The purpose of this is to tell one
compiler not to issue warnings for declarations meant for another
compiler or other program processor.

@strong{Examples:}

@verbatim
 (declaim (declaration author target-language target-machine))
 (declaim (target-language ada))
 (declaim (target-machine IBM-650))
 (defun strangep (x)
   (declare (author "Harry Tweeker"))
   (member x '(strange weird odd peculiar)))
@end verbatim

@strong{See Also:}

@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration DYNAMIC-EXTENT
@subsubsection CLHS: Declaration DYNAMIC-EXTENT
@anchor{#clhs-declaration-dynamic-extent}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_ignorecm_ignorable.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{DYNAMIC-EXTENT}

@strong{Syntax:}

(dynamic-extent [[@emph{var}@strong{*} |
(@uref{any_function.html#function,@strong{function}} @emph{fn})*]])

@strong{Arguments:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{fn}---a @uref{glo_f.html#function,@emph{function}}
@uref{glo_n.html#name,@emph{name}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}}

@strong{Binding Types Affected:}

@uref{glo_v.html#variable,@emph{variable}},
@uref{glo_f.html#function,@emph{function}}

@strong{Description:}

In some containing @uref{glo_f.html#form,@emph{form}}, @emph{F}, this
declaration asserts for each @emph{vari} (which need not be bound by
@emph{F}), and for each @uref{glo_v.html#value,@emph{value}} @emph{vij}
that @emph{vari} takes on, and for each
@uref{glo_o.html#object,@emph{object}} @emph{xijk} that is an
@uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible part}} of @emph{vij} at any time when @emph{vij} becomes
the value of @emph{vari}, that just after the execution of @emph{F}
terminates, @emph{xijk} is either
@uref{glo_i.html#inaccessible,@emph{inaccessible}} (if @emph{F}
established a @uref{glo_b.html#binding,@emph{binding}} for @emph{vari})
or still an @uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible part}} of the current value of @emph{vari} (if @emph{F} did
not establish a @uref{glo_b.html#binding,@emph{binding}} for
@emph{vari}). The same relation holds for each @emph{fni}, except that
the @uref{glo_b.html#binding,@emph{bindings}} are in the
@uref{glo_f.html#function,@emph{function}}
@uref{glo_n.html#namespace,@emph{namespace}}.

The compiler is permitted to use this information in any way that is
appropriate to the
@uref{glo_i.html#implementation,@emph{implementation}} and that does not
conflict with the semantics of Common Lisp.

@ref{#dynamic-extent,@strong{dynamic-extent}} declarations can be
@uref{glo_f.html#free_declaration,@emph{free declarations}} or
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}.

The @emph{vars} and @emph{fns} named in a
@ref{#dynamic-extent,@strong{dynamic-extent}} declaration must not refer
to @uref{glo_s.html#symbol_macro,@emph{symbol macro}} or
@uref{glo_m.html#macro,@emph{macro}} bindings.

@strong{Examples:}

Since stack allocation of the initial value entails knowing at the
@uref{glo_o.html#object,@emph{object}}'s creation time that the
@uref{glo_o.html#object,@emph{object}} can be
@uref{glo_s.html#stack-allocated,@emph{stack-allocated}}, it is not
generally useful to make a @ref{#dynamic-extent,@strong{dynamic-extent}}
@uref{glo_d.html#declaration,@emph{declaration}} for
@uref{glo_v.html#variable,@emph{variables}} which have no lexically
apparent initial value. For example, it is probably useful to write:

@verbatim
 (defun f ()
   (let ((x (list 1 2 3)))
     (declare (dynamic-extent x))
         ...))
@end verbatim

This would permit those compilers that wish to do so to
@uref{glo_s.html#stack_allocate,@emph{stack allocate}} the list held by
the local variable x. It is permissible, but in practice probably not as
useful, to write:

@verbatim
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
@end verbatim

Most compilers would probably not
@uref{glo_s.html#stack_allocate,@emph{stack allocate}} the
@uref{glo_a.html#argument,@emph{argument}} to g in f because it would be
a modularity violation for the compiler to assume facts about g from
within f. Only an implementation that was willing to be responsible for
recompiling f if the definition of g changed incompatibly could
legitimately @uref{glo_s.html#stack_allocate,@emph{stack allocate}} the
@uref{glo_l.html#list,@emph{list}} argument to g in f.

Here is another example:

@verbatim
 (declaim (inline g))
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
 
 (defun f ()
   (flet ((g (x) (declare (dynamic-extent x)) ...))
     (g (list 1 2 3))))
 
@end verbatim

In the previous example, some compilers might determine that
optimization was possible and others might not.

A variant of this is the so-called ``stack allocated rest list'' that
can be achieved (in implementations supporting the optimization) by:

@verbatim
 (defun f (&rest x)
   (declare (dynamic-extent x))
   ...)
@end verbatim

Note that although the initial value of x is not explicit, the f
function is responsible for assembling the list x from the passed
arguments, so the f function can be optimized by the compiler to
construct a @uref{glo_s.html#stack-allocated,@emph{stack-allocated}}
list instead of a heap-allocated list in implementations that support
such.

In the following example,

@verbatim
 (let ((x (list 'a1 'b1 'c1))
       (y (cons 'a2 (cons 'b2 (cons 'c2 nil)))))
   (declare (dynamic-extent x y))
   ...)
@end verbatim

The @uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible parts}} of x are three
@uref{glo_c.html#cons,@emph{conses}}, and the
@uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible parts}} of y are three other
@uref{glo_c.html#cons,@emph{conses}}. None of the symbols a1, b1, c1,
a2, b2, c2, or @uref{any_nil.html#nil,@strong{nil}} is an
@uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible part}} of x or y because each is
@uref{glo_i.html#interned,@emph{interned}} and hence
@uref{glo_a.html#accessible,@emph{accessible}} by the
@uref{glo_p.html#package,@emph{package}} (or
@uref{glo_p.html#package,@emph{packages}}) in which it is
@uref{glo_i.html#interned,@emph{interned}}. However, if a freshly
allocated @uref{glo_u.html#uninterned,@emph{uninterned}}
@uref{glo_s.html#symbol,@emph{symbol}} had been used, it would have been
an @uref{glo_o.html#otherwise_inaccessible_part,@emph{otherwise
inaccessible part}} of the @uref{glo_l.html#list,@emph{list}} which
contained it.

@verbatim
;; In this example, the implementation is permitted to stack allocate
;; the list that is bound to X.
 (let ((x (list 1 2 3)))
   (declare (dynamic-extent x))
   (print x)
   :done)
>>  (1 2 3)
=>  :DONE
 
;; In this example, the list to be bound to L can be stack-allocated.
 (defun zap (x y z)
   (do ((l (list x y z) (cdr l)))
       ((null l))
     (declare (dynamic-extent l))
     (prin1 (car l)))) =>  ZAP
 (zap 1 2 3)
>>  123
=>  NIL

;; Some implementations might open-code LIST-ALL-PACKAGES in a way
;; that permits using stack allocation of the list to be bound to L.
 (do ((l (list-all-packages) (cdr l)))
     ((null l))
   (declare (dynamic-extent l))
   (let ((name (package-name (car l))))
     (when (string-search "COMMON-LISP" name) (print name))))
>>  "COMMON-LISP"
>>  "COMMON-LISP-USER"
=>  NIL

;; Some implementations might have the ability to stack allocate 
;; rest lists.  A declaration such as the following should be a cue
;; to such implementations that stack-allocation of the rest list
;; would be desirable.
 (defun add (&rest x)
   (declare (dynamic-extent x))
   (apply #'+ x)) =>  ADD
 (add 1 2 3) =>  6

 (defun zap (n m)
   ;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
   ;; It may be slow, but with a good compiler at least it
   ;; doesn't waste much heap storage.  :-}
   (let ((a (make-array n)))
     (declare (dynamic-extent a))
     (dotimes (i n) 
       (declare (dynamic-extent i))
       (setf (aref a i) (random (+ i 1))))
     (aref a m))) =>  ZAP
 (< (zap 5 3) 3) =>  true
@end verbatim

The following are in error, since the value of x is used outside of its
@uref{glo_e.html#extent,@emph{extent}}:

@verbatim
 (length (list (let ((x (list 1 2 3)))  ; Invalid
                (declare (dynamic-extent x))
                x)))

 (progn (let ((x (list 1 2 3)))  ; Invalid
          (declare (dynamic-extent x))
          x)
        nil)
@end verbatim

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}}

@strong{Notes:}

The most common optimization is to
@uref{glo_s.html#stack_allocate,@emph{stack allocate}} the initial value
of the @uref{glo_o.html#object,@emph{objects}} named by the @emph{vars}.

It is permissible for an implementation to simply ignore this
declaration.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss228.html,MACRO-DECLARATIONS:MAKE-EXPLICIT}
@item
@uref{../Issues/iss141.html,DYNAMIC-EXTENT-FUNCTION:EXTEND}
@item
@uref{../Issues/iss142.html,DYNAMIC-EXTENT:NEW-DECLARATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration FTYPE
@subsubsection CLHS: Declaration FTYPE
@anchor{#clhs-declaration-ftype}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_inlinecm_notinline.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_declaration.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{FTYPE}

@strong{Syntax:}

(ftype @emph{type} @emph{function-name}@strong{*})

@strong{Arguments:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@emph{type}---a @uref{glo_t.html#type_specifier,@emph{type specifier}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}} or
@uref{glo_p.html#proclamation,@emph{proclamation}}

@strong{Binding Types Affected:}

@uref{glo_f.html#function,@emph{function}}

@strong{Description:}

Specifies that the @uref{glo_f.html#function,@emph{functions}} named by
@emph{function-names} are of the functional type @emph{type}. For
example:

@verbatim
 (declare (ftype (function (integer list) t) ith)
          (ftype (function (number) float) sine cosine))
@end verbatim

If one of the @uref{glo_f.html#function,@emph{functions}} mentioned has
a lexically apparent local definition (as made by
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}), then the
declaration applies to that local definition and not to the global
function definition. @ref{#ftype,@strong{ftype}} declarations never
apply to variable @uref{glo_b.html#binding,@emph{bindings}} (see type).

The lexically apparent bindings of @emph{function-names} must not be
@uref{glo_m.html#macro,@emph{macro}} definitions. (This is because
@ref{#ftype,@strong{ftype}} declares the functional definition of each
@uref{glo_f.html#function_name,@emph{function name}} to be of a
particular subtype of
@uref{syscla_function.html#function,@strong{function}}, and
@uref{glo_m.html#macro,@emph{macros}} do not denote
@uref{glo_f.html#function,@emph{functions}}.)

@ref{#ftype,@strong{ftype}} declarations can be
@uref{glo_f.html#free_declaration,@emph{free declarations}} or
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}.
@ref{#ftype,@strong{ftype}} declarations of functions that appear before
the body of a @uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}}
or @uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}
@uref{glo_f.html#form,@emph{form}} that defines that function are
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}. Such
declarations in other contexts are
@uref{glo_f.html#free_declaration,@emph{free declarations}}.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss094.html,DECLARE-FUNCTION-AMBIGUITY:DELETE-FTYPE-ABBREVIATION}
@item
@uref{../Issues/iss228.html,MACRO-DECLARATIONS:MAKE-EXPLICIT}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration IGNORE IGNORABLE
@subsubsection CLHS: Declaration IGNORE, IGNORABLE
@anchor{#clhs-declaration-ignore-ignorable}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sym_declare.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_dynamic-extent.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{IGNORE, IGNORABLE}

@strong{Syntax:}

(ignore @{@emph{var} |
(@uref{any_function.html#function,@strong{function}} @emph{fn})@}*)

(ignorable @{@emph{var} |
(@uref{any_function.html#function,@strong{function}} @emph{fn})@}*)

@strong{Arguments:}

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{fn}---a @uref{glo_f.html#function,@emph{function}}
@uref{glo_n.html#name,@emph{name}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}}

@strong{Binding Types Affected:}

@uref{glo_v.html#variable,@emph{variable}},
@uref{glo_f.html#function,@emph{function}}

@strong{Description:}

The @ref{#ignore,@strong{ignore}} and
@ref{#ignorable,@strong{ignorable}} declarations refer to
@uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{references}} to
@uref{glo_v.html#variable,@emph{variable}}
@uref{glo_b.html#binding,@emph{bindings}} for the @emph{vars} and to
@uref{glo_f.html#function,@emph{function}}
@uref{glo_b.html#binding,@emph{bindings}} for the @emph{fns}.

An @ref{#ignore,@strong{ignore}}
@uref{glo_d.html#declaration,@emph{declaration}} specifies that
@uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{references}} to the indicated
@uref{glo_b.html#binding,@emph{bindings}} will not occur within the
scope of the @uref{glo_d.html#declaration,@emph{declaration}}. Within
the @uref{glo_s.html#scope,@emph{scope}} of such a
@uref{glo_d.html#declaration,@emph{declaration}}, it is desirable for a
compiler to issue a warning about the presence of either a
@uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{reference}} to any @emph{var} or
@emph{fn}, or a @uref{dec_special.html#special,@strong{special}}
@uref{glo_d.html#declaration,@emph{declaration}} for any @emph{var}.

An @ref{#ignorable,@strong{ignorable}}
@uref{glo_d.html#declaration,@emph{declaration}} specifies that
@uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{references}} to the indicated
@uref{glo_b.html#binding,@emph{bindings}} might or might not occur
within the scope of the
@uref{glo_d.html#declaration,@emph{declaration}}. Within the
@uref{glo_s.html#scope,@emph{scope}} of such a
@uref{glo_d.html#declaration,@emph{declaration}}, it is not desirable
for a compiler to issue a warning about the presence or absence of
either a @uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{reference}} to any @emph{var} or
@emph{fn}, or a @uref{dec_special.html#special,@strong{special}}
@uref{glo_d.html#declaration,@emph{declaration}} for any @emph{var}.

When not within the @uref{glo_s.html#scope,@emph{scope}} of a
@ref{#ignore,@strong{ignore}} or @ref{#ignorable,@strong{ignorable}}
@uref{glo_d.html#declaration,@emph{declaration}}, it is desirable for a
compiler to issue a warning about any @emph{var} for which there is
neither a @uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{reference}} nor a
@uref{dec_special.html#special,@strong{special}}
@uref{glo_d.html#declaration,@emph{declaration}}, or about any @emph{fn}
for which there is no @uref{glo_f.html#for-value,@emph{for-value}}
@uref{glo_r.html#reference,@emph{reference}}.

Any warning about a ``used'' or ``unused''
@uref{glo_b.html#binding,@emph{binding}} must be of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_style-warning.html#style-warning,@strong{style-warning}},
and may not affect program semantics.

The @uref{glo_s.html#stream_variable,@emph{stream variables}}
established by
@uref{mac_with-open-file.html#with-open-file,@strong{with-open-file}},
@uref{mac_with-open-stream.html#with-open-stream,@strong{with-open-stream}},
@uref{mac_with-input-from-string.html#with-input-from-string,@strong{with-input-from-string}},
and
@uref{mac_with-output-to-string.html#with-output-to-string,@strong{with-output-to-string}},
and all @uref{glo_i.html#iteration_variable,@emph{iteration variables}}
are, by definition, always ``used''. Using (declare (ignore @emph{v})),
for such a @uref{glo_v.html#variable,@emph{variable}} @emph{v} has
unspecified consequences.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss193.html,IGNORE-USE-TERMINOLOGY:VALUE-ONLY}
@item
@uref{../Issues/iss137.html,DOTIMES-IGNORE:X3J13-MAR91}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration INLINE NOTINLINE
@subsubsection CLHS: Declaration INLINE, NOTINLINE
@anchor{#clhs-declaration-inline-notinline}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_ftype.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{INLINE, NOTINLINE}

@strong{Syntax:}

(inline @emph{function-name}@strong{*})

(notinline @emph{function-name}@strong{*})

@strong{Arguments:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}} or
@uref{glo_p.html#proclamation,@emph{proclamation}}

@strong{Binding Types Affected:}

@uref{glo_f.html#function,@emph{function}}

@strong{Description:}

@ref{#inline,@strong{inline}} specifies that it is desirable for the
compiler to produce inline calls to the
@uref{glo_f.html#function,@emph{functions}} named by
@emph{function-names}; that is, the code for a specified
@emph{function-name} should be integrated into the calling routine,
appearing ``in line'' in place of a procedure call. A compiler is free
to ignore this declaration. @ref{#inline,@strong{inline}} declarations
never apply to variable @uref{glo_b.html#binding,@emph{bindings}}.

If one of the @uref{glo_f.html#function,@emph{functions}} mentioned has
a lexically apparent local definition (as made by
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}), then the
declaration applies to that local definition and not to the global
function definition.

While no @uref{glo_c.html#conforming_implementation,@emph{conforming
implementation}} is required to perform inline expansion of user-defined
functions, those @uref{glo_i.html#implementation,@emph{implementations}}
that do attempt to recognize the following paradigm:

To define a @uref{glo_f.html#function,@emph{function}} f that is not
@ref{#inline,@strong{inline}} by default but for which (declare (inline
f)) will make @emph{f} be locally inlined, the proper definition
sequence is:

@verbatim
 (declaim (inline f))
 (defun f ...)
 (declaim (notinline f))
@end verbatim

The @ref{#inline,@strong{inline}} proclamation preceding the
@uref{mac_defun.html#defun,@strong{defun}}
@uref{glo_f.html#form,@emph{form}} ensures that the
@uref{glo_c.html#compiler,@emph{compiler}} has the opportunity save the
information necessary for inline expansion, and the
@ref{#notinline,@strong{notinline}} proclamation following the
@uref{mac_defun.html#defun,@strong{defun}}
@uref{glo_f.html#form,@emph{form}} prevents f from being expanded inline
everywhere.

@ref{#notinline,@strong{notinline}} specifies that it is undesirable to
compile the @uref{glo_f.html#function,@emph{functions}} named by
@emph{function-names} in-line. A compiler is not free to ignore this
declaration; calls to the specified functions must be implemented as
out-of-line subroutine calls.

If one of the @uref{glo_f.html#function,@emph{functions}} mentioned has
a lexically apparent local definition (as made by
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}), then the
declaration applies to that local definition and not to the global
function definition.

In the presence of a @uref{glo_c.html#compiler_macro,@emph{compiler
macro}} definition for @emph{function-name}, a
@ref{#notinline,@strong{notinline}} declaration prevents that
@uref{glo_c.html#compiler_macro,@emph{compiler macro}} from being used.
An @ref{#inline,@strong{inline}} declaration may be used to encourage
use of @uref{glo_c.html#compiler_macro,@emph{compiler macro}}
definitions. @ref{#inline,@strong{inline}} and
@ref{#notinline,@strong{notinline}} declarations otherwise have no
effect when the lexically visible definition of @emph{function-name} is
a @uref{glo_m.html#macro,@emph{macro}} definition.

@ref{#inline,@strong{inline}} and @ref{#notinline,@strong{notinline}}
declarations can be @uref{glo_f.html#free_declaration,@emph{free
declarations}} or @uref{glo_b.html#bound_declaration,@emph{bound
declarations}}. @ref{#inline,@strong{inline}} and
@ref{#notinline,@strong{notinline}} declarations of functions that
appear before the body of a
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}
@uref{glo_f.html#form,@emph{form}} that defines that function are
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}. Such
declarations in other contexts are
@uref{glo_f.html#free_declaration,@emph{free declarations}}.

@strong{Examples:}

@verbatim
 ;; The globally defined function DISPATCH should be open-coded,
 ;; if the implementation supports inlining, unless a NOTINLINE 
 ;; declaration overrides this effect.
 (declaim (inline dispatch))
 (defun dispatch (x) (funcall (get (car x) 'dispatch) x))
 ;; Here is an example where inlining would be encouraged.
 (defun top-level-1 () (dispatch (read-command)))
 ;; Here is an example where inlining would be prohibited.
 (defun top-level-2 ()
   (declare (notinline dispatch))
   (dispatch (read-command)))
 ;; Here is an example where inlining would be prohibited.
 (declaim (notinline dispatch))
 (defun top-level-3 () (dispatch (read-command)))
 ;; Here is an example where inlining would be encouraged.
 (defun top-level-4 () 
   (declare (inline dispatch))
   (dispatch (read-command)))
@end verbatim

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss228.html,MACRO-DECLARATIONS:MAKE-EXPLICIT}
@item
@uref{../Issues/iss007.html,ALLOW-LOCAL-INLINE:INLINE-NOTINLINE}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration OPTIMIZE
@subsubsection CLHS: Declaration OPTIMIZE
@anchor{#clhs-declaration-optimize}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_declaration.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_special.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{OPTIMIZE}

@strong{Syntax:}

(optimize @{@emph{quality} | (@emph{quality} @emph{value})@}*)

@strong{Arguments:}

@emph{quality}---an @uref{glo_o.html#optimize_quality,@emph{optimize
quality}}.

@emph{value}---one of the @uref{glo_i.html#integer,@emph{integers}} 0,
1, 2, or 3.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}} or
@uref{glo_p.html#proclamation,@emph{proclamation}}

@strong{Binding Types Affected:} None.

@strong{Description:}

Advises the compiler that each @emph{quality} should be given attention
according to the specified corresponding @emph{value}. Each
@emph{quality} must be a @uref{glo_s.html#symbol,@emph{symbol}} naming
an @uref{glo_o.html#optimize_quality,@emph{optimize quality}}; the names
and meanings of the standard @emph{optimize qualities} are shown in the
next figure.

@verbatim
Name               Meaning                            
compilation-speed  speed of the compilation process   
debug              ease of debugging                  
safety             run-time error checking            
space              both code size and run-time space  
speed              speed of the object code           
@end verbatim

@strong{Figure 3-25. Optimize qualities}

There may be other,
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
@uref{glo_o.html#optimize_quality,@emph{optimize qualities}}.

A @emph{value} 0 means that the corresponding @emph{quality} is totally
unimportant, and 3 that the @emph{quality} is extremely important; 1 and
2 are intermediate values, with 1 the neutral value. (@emph{quality} 3)
can be abbreviated to @emph{quality}.

Note that @uref{glo_c.html#code,@emph{code}} which has the optimization
(safety 3), or just @strong{safety}, is called
@uref{glo_s.html#safe,@emph{safe}} @uref{glo_c.html#code,@emph{code}}.

The consequences are unspecified if a @emph{quality} appears more than
once with @uref{glo_d.html#different,@emph{different}} @emph{values}.

@strong{Examples:}

@verbatim
 (defun often-used-subroutine (x y)
   (declare (optimize (safety 2)))
   (error-check x y)
   (hairy-setup x)
   (do ((i 0 (+ i 1))
        (z x (cdr z)))
       ((null z))
     ;; This inner loop really needs to burn.
     (declare (optimize speed))
     (declare (fixnum i))
     ))
@end verbatim

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}},
@uref{sec_3-3-4.html,Section 3.3.4 (Declaration Scope)}

@strong{Notes:}

An @ref{#optimize,@strong{optimize}} declaration never applies to either
a @uref{glo_v.html#variable,@emph{variable}} or a
@uref{glo_f.html#function,@emph{function}}
@uref{glo_b.html#binding,@emph{binding}}. An
@ref{#optimize,@strong{optimize}} declaration can only be a
@uref{glo_f.html#free_declaration,@emph{free declaration}}. For more
information, see @uref{sec_3-3-4.html,Section 3.3.4 (Declaration
Scope)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss251.html,OPTIMIZE-DEBUG-INFO:NEW-QUALITY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration SPECIAL
@subsubsection CLHS: Declaration SPECIAL
@anchor{#clhs-declaration-special}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_optimize.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_locally.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{SPECIAL}

@strong{Syntax:}

(special @emph{var}@strong{*})

@strong{Arguments:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}} or
@uref{glo_p.html#proclamation,@emph{proclamation}}

@strong{Binding Types Affected:}

@uref{glo_v.html#variable,@emph{variable}}

@strong{Description:}

Specifies that all of the @emph{vars} named are dynamic. This specifier
affects variable @uref{glo_b.html#binding,@emph{bindings}} and affects
references. All variable @uref{glo_b.html#binding,@emph{bindings}}
affected are made to be dynamic
@uref{glo_b.html#binding,@emph{bindings}}, and affected variable
references refer to the current dynamic
@uref{glo_b.html#binding,@emph{binding}}. For example:

@verbatim
 (defun hack (thing *mod*)    ;The binding of the parameter
   (declare (special *mod*))  ; *mod* is visible to hack1,
   (hack1 (car thing)))       ; but not that of thing.
 (defun hack1 (arg)
   (declare (special *mod*))  ;Declare references to *mod*
                              ;within hack1 to be special.
   (if (atom arg) *mod*
       (cons (hack1 (car arg)) (hack1 (cdr arg)))))
@end verbatim

A @ref{#special,@strong{special}} declaration does not affect inner
@uref{glo_b.html#binding,@emph{bindings}} of a @emph{var}; the inner
@uref{glo_b.html#binding,@emph{bindings}} implicitly shadow a
@ref{#special,@strong{special}} declaration and must be explicitly
re-declared to be @ref{#special,@strong{special}}.
@ref{#special,@strong{special}} declarations never apply to function
@uref{glo_b.html#binding,@emph{bindings}}.

@ref{#special,@strong{special}} declarations can be either
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}, affecting
both a binding and references, or
@uref{glo_f.html#free_declaration,@emph{free declarations}}, affecting
only references, depending on whether the declaration is attached to a
variable binding.

When used in a @uref{glo_p.html#proclamation,@emph{proclamation}}, a
@ref{#special,@strong{special}}
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}}
applies to all @uref{glo_b.html#binding,@emph{bindings}} as well as to
all references of the mentioned variables. For example, after

@verbatim
 (declaim (special x))
@end verbatim

then in a function definition such as

@verbatim
 (defun example (x) ...)
@end verbatim

the parameter x is bound as a dynamic variable rather than as a lexical
variable.

@strong{Examples:}

@verbatim
(defun declare-eg (y)                 ;this y is special
 (declare (special y))
 (let ((y t))                         ;this y is lexical
      (list y
            (locally (declare (special y)) y)))) ;this y refers to the
                                                 ;special binding of y
=>  DECLARE-EG 
 (declare-eg nil) =>  (T NIL) 
@end verbatim

@verbatim
(setf (symbol-value 'x) 6)
(defun foo (x)                         ;a lexical binding of x
  (print x)
  (let ((x (1+ x)))                    ;a special binding of x
    (declare (special x))              ;and a lexical reference
    (bar))
  (1+ x))
(defun bar () 
  (print (locally (declare (special x))
           x)))
(foo 10) 
>>  10
>>  11
=>  11
@end verbatim

@verbatim
(setf (symbol-value 'x) 6)
(defun bar (x y)            ;[1] 1st occurrence of x
  (let ((old-x x)           ;[2] 2nd occurrence of x -- same as 1st occurrence
        (x y))              ;[3] 3rd occurrence of x
    (declare (special x))
    (list old-x x)))
(bar 'first 'second) =>  (FIRST SECOND)
@end verbatim

@verbatim
 (defun few (x &optional (y *foo*))
   (declare (special *foo*))
   ...)
@end verbatim

The reference to *foo* in the first line of this example is not
@ref{#special,@strong{special}} even though there is a
@ref{#special,@strong{special}} declaration in the second line.

@verbatim
 (declaim (special prosp)) =>  implementation-dependent
 (setq prosp 1 reg 1) =>  1
 (let ((prosp 2) (reg 2))         ;the binding of prosp is special
    (set 'prosp 3) (set 'reg 3)   ;due to the preceding proclamation,
    (list prosp reg))             ;whereas the variable reg is lexical
=>  (3 2)
 (list prosp reg) =>  (1 3)

 (declaim (special x))          ;x is always special.
 (defun example (x y)                                 
   (declare (special y))
   (let ((y 3) (x (* x 2)))
     (print (+ y (locally (declare (special y)) y)))
     (let ((y 4)) (declare (special y)) (foo x)))) =>  EXAMPLE
@end verbatim

In the contorted code above, the outermost and innermost
@uref{glo_b.html#binding,@emph{bindings}} of y are dynamic, but the
middle binding is lexical. The two arguments to + are different, one
being the value, which is 3, of the lexical variable y, and the other
being the value of the dynamic variable named y (a
@uref{glo_b.html#binding,@emph{binding}} of which happens,
coincidentally, to lexically surround it at an outer level). All the
@uref{glo_b.html#binding,@emph{bindings}} of x and references to x are
dynamic, however, because of the proclamation that x is always
@ref{#special,@strong{special}}.

@strong{See Also:}

@uref{mac_defparametercm_defvar.html#defparameter,@strong{defparameter}},
@uref{mac_defparametercm_defvar.html#defvar,@strong{defvar}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Declaration TYPE
@subsubsection CLHS: Declaration TYPE
@anchor{#clhs-declaration-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_dynamic-extent.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_inlinecm_notinline.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Declaration} @strong{TYPE}

@strong{Syntax:}

(type @emph{typespec} @emph{var}@strong{*})

(@emph{typespec} @emph{var}@strong{*})

@strong{Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@strong{Valid Context:}

@uref{glo_d.html#declaration,@emph{declaration}} or
@uref{glo_p.html#proclamation,@emph{proclamation}}

@strong{Binding Types Affected:}

@uref{glo_v.html#variable,@emph{variable}}

@strong{Description:}

Affects only variable @uref{glo_b.html#binding,@emph{bindings}} and
specifies that the @emph{vars} take on values only of the specified
@emph{typespec}. In particular, values assigned to the variables by
@uref{spefor_setq.html#setq,@strong{setq}}, as well as the initial
values of the @emph{vars} must be of the specified @emph{typespec}.
@ref{#type,@strong{type}} declarations never apply to function
@uref{glo_b.html#binding,@emph{bindings}} (see
@uref{dec_ftype.html#ftype,@strong{ftype}}).

A type declaration of a @uref{glo_s.html#symbol,@emph{symbol}} defined
by
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}
is equivalent to wrapping a @uref{speope_the.html#the,@strong{the}}
expression around the expansion of that
@uref{glo_s.html#symbol,@emph{symbol}}, although the
@uref{glo_s.html#symbol,@emph{symbol}}'s
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} is not actually
affected.

The meaning of a type declaration is equivalent to changing each
reference to a variable (@emph{var}) within the scope of the declaration
to (the @emph{typespec} @emph{var}), changing each expression assigned
to the variable (@emph{new-value}) within the scope of the declaration
to (the @emph{typespec} @emph{new-value}), and executing (the
@emph{typespec} @emph{var}) at the moment the scope of the declaration
is entered.

A @uref{glo_t.html#type,@emph{type}} declaration is valid in all
declarations. The interpretation of a type declaration is as follows:

1. During the execution of any reference to the declared variable within
the scope of the declaration, the consequences are undefined if the
value of the declared variable is not of the declared
@uref{glo_t.html#type,@emph{type}}.

2. During the execution of any
@uref{spefor_setq.html#setq,@strong{setq}} of the declared variable
within the scope of the declaration, the consequences are undefined if
the newly assigned value of the declared variable is not of the declared
@uref{glo_t.html#type,@emph{type}}.

3. At the moment the scope of the declaration is entered, the
consequences are undefined if the value of the declared variable is not
of the declared @uref{glo_t.html#type,@emph{type}}.

A @uref{glo_t.html#type,@emph{type}} declaration affects only variable
references within its scope.

If nested @uref{glo_t.html#type,@emph{type}} declarations refer to the
same variable, then the value of the variable must be a member of the
intersection of the declared @uref{glo_t.html#type,@emph{types}}.

If there is a local type declaration for a dynamic variable, and there
is also a global type proclamation for that same variable, then the
value of the variable within the scope of the local declaration must be
a member of the intersection of the two declared
@uref{glo_t.html#type,@emph{types}}.

@ref{#type,@strong{type}} declarations can be
@uref{glo_f.html#free_declaration,@emph{free declarations}} or
@uref{glo_b.html#bound_declaration,@emph{bound declarations}}.

A @uref{glo_s.html#symbol,@emph{symbol}} cannot be both the name of a
@uref{glo_t.html#type,@emph{type}} and the name of a declaration.
Defining a @uref{glo_s.html#symbol,@emph{symbol}} as the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_c.html#class,@emph{class}},
@uref{glo_s.html#structure,@emph{structure}},
@uref{glo_c.html#condition,@emph{condition}}, or
@uref{glo_t.html#type,@emph{type}}, when the
@uref{glo_s.html#symbol,@emph{symbol}} has been @emph{declared} as a
declaration name, or vice versa, signals an error.

Within the @uref{glo_l.html#lexical_scope,@emph{lexical scope}} of an
@uref{syscla_array.html#array,@strong{array}} type declaration, all
references to @uref{glo_a.html#array,@emph{array}}
@uref{glo_e.html#element,@emph{elements}} are assumed to satisfy the
@uref{glo_e.html#expressed_array_element_type,@emph{expressed array
element type}} (as opposed to the
@uref{glo_u.html#upgraded_array_element_type,@emph{upgraded array
element type}}). A compiler can treat the code within the scope of the
@uref{syscla_array.html#array,@strong{array}} type declaration as if
each @uref{glo_a.html#access,@emph{access}} of an
@uref{glo_a.html#array,@emph{array}}
@uref{glo_e.html#element,@emph{element}} were surrounded by an
appropriate @uref{speope_the.html#the,@strong{the}} form.

@strong{Examples:}

@verbatim
 (defun f (x y)
   (declare (type fixnum x y))
   (let ((z (+ x y)))
     (declare (type fixnum z))
     z)) =>  F
 (f 1 2) =>  3
 ;; The previous definition of F is equivalent to
 (defun f (x y)
   ;; This declaration is a shorthand form of the TYPE declaration
   (declare (fixnum x y))
   ;; To declare the type of a return value, it's not necessary to
   ;; create a named variable.  A THE special form can be used instead.
   (the fixnum (+ x y))) =>  F
 (f 1 2) =>  3
@end verbatim

@verbatim
 (defvar *one-array* (make-array 10 :element-type '(signed-byte 5)))
 (defvar *another-array* (make-array 10 :element-type '(signed-byte 8)))
  
 (defun frob (an-array)
   (declare (type (array (signed-byte 5) 1) an-array))
   (setf (aref an-array 1) 31)
   (setf (aref an-array 2) 127)
   (setf (aref an-array 3) (* 2 (aref an-array 3)))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (aref an-array 0))))
  
 (frob *one-array*)
 (frob *another-array*)
@end verbatim

The above definition of frob is equivalent to:

@verbatim
 (defun frob (an-array)
   (setf (the (signed-byte 5) (aref an-array 1)) 31)
   (setf (the (signed-byte 5) (aref an-array 2)) 127)
   (setf (the (signed-byte 5) (aref an-array 3))
         (* 2 (the (signed-byte 5) (aref an-array 3))))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (the (signed-byte 5) (aref an-array 0)))))
@end verbatim

Given an implementation in which @emph{fixnums} are 29 bits but
@uref{typ_fixnum.html#fixnum,@strong{fixnum}}
@uref{glo_a.html#array,@emph{arrays}} are upgraded to signed 32-bit
@uref{glo_a.html#array,@emph{arrays}}, the following could be compiled
with all @uref{glo_f.html#fixnum,@emph{fixnum}} arithmetic:

@verbatim
 (defun bump-counters (counters)
   (declare (type (array fixnum *) bump-counters))
   (dotimes (i (length counters))
     (incf (aref counters i))))
@end verbatim

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}

@strong{Notes:}

(@emph{typespec} @emph{var}@strong{*}) is an abbreviation for (type
@emph{typespec} @emph{var}@strong{*}).

A @ref{#type,@strong{type}} declaration for the arguments to a function
does not necessarily imply anything about the type of the result. The
following function is not permitted to be compiled using
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_f.html#fixnum,@emph{fixnum}}-only arithmetic:

@verbatim
 (defun f (x y) (declare (fixnum x y)) (+ x y))
@end verbatim

To see why, consider (f most-positive-fixnum 1). Common Lisp defines
that F must return a @uref{typ_bignum.html#bignum,@emph{bignum}} here,
rather than signal an error or produce a mathematically incorrect
result. If you have special knowledge such
``@uref{glo_f.html#fixnum,@emph{fixnum}} overflow'' cases will not come
up, you can declare the result value to be in the
@uref{glo_f.html#fixnum,@emph{fixnum}} range, enabling some compilers to
use more efficient arithmetic:

@verbatim
 (defun f (x y)
   (declare (fixnum x y))
   (the fixnum (+ x y)))
@end verbatim

Note, however, that in the three-argument case, because of the
possibility of an implicit intermediate value growing too large, the
following will not cause
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_f.html#fixnum,@emph{fixnum}}-only arithmetic to be used:

@verbatim
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ x y z)))
@end verbatim

To see why, consider (f most-positive-fixnum 1 -1). Although the
arguments and the result are all @emph{fixnums}, an intermediate value
is not a @uref{glo_f.html#fixnum,@emph{fixnum}}. If it is important that
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
@uref{glo_f.html#fixnum,@emph{fixnum}}-only arithmetic be selected in
@uref{glo_i.html#implementation,@emph{implementations}} that provide it,
consider writing something like this instead:

@verbatim
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ (the fixnum (+ x y)) z)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss093.html,DECLARE-ARRAY-TYPE-ELEMENT-REFERENCES:RESTRICTIVE}
@item
@uref{../Issues/iss350.html,TYPE-DECLARATION-ABBREVIATION:ALLOW-ALL}
@item
@uref{../Issues/iss322.html,SPECIAL-TYPE-SHADOWING:CLARIFY}
@item
@uref{../Issues/iss096.html,DECLARE-TYPE-FREE:LEXICAL}
@item
@uref{../Issues/iss340.html,SYMBOL-MACROLET-TYPE-DECLARATION:NO}
@item
@uref{../Issues/iss338.html,SYMBOL-MACROLET-DECLARE:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPILE
@subsubsection CLHS: Function COMPILE
@anchor{#clhs-function-compile}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_lambda.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_eval.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPILE}

@strong{Syntax:}

@strong{compile} @emph{name &optional definition} => @emph{function,
warnings-p, failure-p}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{definition}---a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}} or a @uref{glo_f.html#function,@emph{function}}. The
default is the function definition of @emph{name} if it names a
@uref{glo_f.html#function,@emph{function}}, or the
@uref{glo_m.html#macro_function,@emph{macro function}} of @emph{name} if
it names a @uref{glo_m.html#macro,@emph{macro}}. The consequences are
undefined if no @emph{definition} is supplied when the @emph{name} is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{function}---the @emph{function-name}, or a
@uref{glo_c.html#compiled_function,@emph{compiled function}}.

@emph{warnings-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{failure-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Compiles an @uref{glo_i.html#interpreted_function,@emph{interpreted
function}}.

@ref{#compile,@strong{compile}} produces a
@uref{glo_c.html#compiled_function,@emph{compiled function}} from
@emph{definition}. If the @emph{definition} is a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}, it is
coerced to a @uref{glo_f.html#function,@emph{function}}. If the
@emph{definition} is already a
@uref{glo_c.html#compiled_function,@emph{compiled function}},
@ref{#compile,@strong{compile}} either produces that function itself
(i.e., is an identity operation) or an equivalent function.

If the @emph{name} is @uref{any_nil.html#nil,@strong{nil}}, the
resulting @uref{glo_c.html#compiled_function,@emph{compiled function}}
is returned directly as the @uref{glo_p.html#primary_value,@emph{primary
value}}. If a @uref{glo_n.html#non-nil,@emph{non-nil}} @emph{name} is
given, then the resulting
@uref{glo_c.html#compiled_function,@emph{compiled function}} replaces
the existing @uref{glo_f.html#function,@emph{function}} definition of
@emph{name} and the @emph{name} is returned as the
@uref{glo_p.html#primary_value,@emph{primary value}}; if @emph{name} is
a @uref{glo_s.html#symbol,@emph{symbol}} that names a
@uref{glo_m.html#macro,@emph{macro}}, its
@uref{glo_m.html#macro_function,@emph{macro function}} is updated and
the @emph{name} is returned as the
@uref{glo_p.html#primary_value,@emph{primary value}}.

@uref{glo_l.html#literal,@emph{Literal}}
@uref{glo_o.html#object,@emph{objects}} appearing in code processed by
the @ref{#compile,@strong{compile}} function are neither copied nor
@emph{coalesced}. The code resulting from the execution of
@ref{#compile,@strong{compile}} references
@uref{glo_o.html#object,@emph{objects}} that are
@uref{fun_eql.html#eql,@strong{eql}} to the corresponding
@uref{glo_o.html#object,@emph{objects}} in the source code.

@ref{#compile,@strong{compile}} is permitted, but not required, to
@uref{glo_e.html#establish,@emph{establish}} a
@uref{glo_h.html#handler,@emph{handler}} for
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. For example, the
@uref{glo_h.html#handler,@emph{handler}} might issue a warning and
restart compilation from some
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
point in order to let the compilation proceed without manual
intervention.

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{warnings-p}, is @uref{glo_f.html#false,@emph{false}} if no
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} or
@uref{contyp_warning.html#warning,@strong{warning}} were detected by the
compiler, and @uref{glo_t.html#true,@emph{true}} otherwise.

The @uref{glo_t.html#tertiary_value,@emph{tertiary value}},
@emph{failure-p}, is @uref{glo_f.html#false,@emph{false}} if no
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} or
@uref{contyp_warning.html#warning,@strong{warning}} (other than
@uref{contyp_style-warning.html#style-warning,@strong{style-warning}})
were detected by the compiler, and @uref{glo_t.html#true,@emph{true}}
otherwise.

@strong{Examples:}

@verbatim
 (defun foo () "bar") =>  FOO
 (compiled-function-p #'foo) =>  implementation-dependent
 (compile 'foo) =>  FOO 
 (compiled-function-p #'foo) =>  true
 (setf (symbol-function 'foo)
       (compile nil '(lambda () "replaced"))) =>  #<Compiled-Function>
 (foo) =>  "replaced"
@end verbatim

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STerror-outputST,@strong{*error-output*}},
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}}.

The presence of macro definitions and proclamations.

@strong{Exceptional Situations:}

The consequences are undefined if the
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}
surrounding the @uref{glo_f.html#function,@emph{function}} to be
compiled contains any @uref{glo_b.html#binding,@emph{bindings}} other
than those for @uref{glo_m.html#macro,@emph{macros}},
@uref{glo_s.html#symbol_macro,@emph{symbol macros}}, or
@uref{glo_d.html#declaration,@emph{declarations}}.

For information about errors detected during the compilation process,
see @uref{sec_3-2-5.html,Section 3.2.5 (Exceptional Situations in the
Compiler)}.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss068.html,COMPILER-WARNING-STREAM}
@item
@uref{../Issues/iss065.html,COMPILER-DIAGNOSTICS:USE-HANDLER}
@item
@uref{../Issues/iss282.html,QUOTE-SEMANTICS:NO-COPYING}
@item
@uref{../Issues/iss058.html,COMPILE-ARGUMENT-PROBLEMS-AGAIN:FIX}
@item
@uref{../Issues/iss064.html,COMPILED-FUNCTION-REQUIREMENTS:TIGHTEN}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONSTANTP
@subsubsection CLHS: Function CONSTANTP
@anchor{#clhs-function-constantp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_special-operator-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONSTANTP}

@strong{Syntax:}

@strong{constantp} @emph{form &optional environment} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{form} can be
determined by the @uref{glo_i.html#implementation,@emph{implementation}}
to be a @uref{glo_c.html#constant_form,@emph{constant form}} in the
indicated @emph{environment}; otherwise, it returns
@uref{glo_f.html#false,@emph{false}} indicating either that the
@uref{glo_f.html#form,@emph{form}} is not a
@uref{glo_c.html#constant_form,@emph{constant form}} or that it cannot
be determined whether or not @uref{glo_f.html#form,@emph{form}} is a
@uref{glo_c.html#constant_form,@emph{constant form}}.

The following kinds of @uref{glo_f.html#form,@emph{forms}} are
considered @uref{glo_c.html#constant_form,@emph{constant forms}}:

* @uref{glo_s.html#self-evaluating_object,@emph{Self-evaluating
objects}} (such as @uref{glo_n.html#number,@emph{numbers}},
@uref{glo_c.html#character,@emph{characters}}, and the various kinds of
@uref{glo_a.html#array,@emph{arrays}}) are always considered
@uref{glo_c.html#constant_form,@emph{constant forms}} and must be
recognized as such by @ref{#constantp,@strong{constantp}}.

* @uref{glo_c.html#constant_variable,@emph{Constant variables}}, such as
@uref{glo_k.html#keyword,@emph{keywords}}, symbols defined by Common
Lisp as constant (such as @uref{any_nil.html#nil,@strong{nil}},
@uref{any_t.html#t,@strong{t}}, and
@uref{convar_pi.html#pi,@strong{pi}}), and symbols declared as constant
by the user in the indicated @emph{environment} using
@uref{mac_defconstant.html#defconstant,@strong{defconstant}} are always
considered @uref{glo_c.html#constant_form,@emph{constant forms}} and
must be recognized as such by @ref{#constantp,@strong{constantp}}.

* @uref{speope_quote.html#quote,@strong{quote}}
@uref{glo_f.html#form,@emph{forms}} are always considered
@uref{glo_c.html#constant_form,@emph{constant forms}} and must be
recognized as such by @ref{#constantp,@strong{constantp}}.

* An @uref{glo_i.html#implementation,@emph{implementation}} is
permitted, but not required, to detect additional
@uref{glo_c.html#constant_form,@emph{constant forms}}. If it does, it is
also permitted, but not required, to make use of information in the
@emph{environment}. Examples of
@uref{glo_c.html#constant_form,@emph{constant forms}} for which
@ref{#constantp,@strong{constantp}} might or might not return
@uref{glo_t.html#true,@emph{true}} are: (sqrt pi), (+ 3 2), (length '(a
b c)), and (let ((x 7)) (zerop x)).

If an @uref{glo_i.html#implementation,@emph{implementation}} chooses to
make use of the @emph{environment} information, such actions as
expanding @uref{glo_m.html#macro,@emph{macros}} or performing function
inlining are permitted to be used, but not required; however, expanding
@uref{glo_c.html#compiler_macro,@emph{compiler macros}} is not
permitted.

@strong{Examples:}

@verbatim
 (constantp 1) =>  true
 (constantp 'temp) =>  false
 (constantp ''temp)) =>  true
 (defconstant this-is-a-constant 'never-changing) =>  THIS-IS-A-CONSTANT 
 (constantp 'this-is-a-constant) =>  true
 (constantp "temp") =>  true
 (setq a 6) =>  6 
 (constantp a) =>  true
 (constantp '(sin pi)) =>  implementation-dependent
 (constantp '(car '(x))) =>  implementation-dependent
 (constantp '(eql x x)) =>  implementation-dependent
 (constantp '(typep x 'nil)) =>  implementation-dependent
 (constantp '(typep x 't)) =>  implementation-dependent
 (constantp '(values this-is-a-constant)) =>  implementation-dependent
 (constantp '(values 'x 'y)) =>  implementation-dependent
 (constantp '(let ((a '(a b c))) (+ (length a) 6))) =>  implementation-dependent
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The state of the global environment (e.g., which
@uref{glo_s.html#symbol,@emph{symbols}} have been declared to be the
@uref{glo_n.html#name,@emph{names}} of
@uref{glo_c.html#constant_variable,@emph{constant variables}}).

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defconstant.html#defconstant,@strong{defconstant}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss085.html,CONSTANTP-ENVIRONMENT:ADD-ARG}
@item
@uref{../Issues/iss084.html,CONSTANTP-DEFINITION:INTENTIONAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EVAL
@subsubsection CLHS: Function EVAL
@anchor{#clhs-function-eval}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_compile.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_eval-when.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EVAL}

@strong{Syntax:}

@strong{eval} @emph{form} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}}
@emph{yielded} by the @uref{glo_e.html#evaluation,@emph{evaluation}} of
@emph{form}.

@strong{Description:}

Evaluates @emph{form} in the current
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} and the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}}.

@ref{#eval,@strong{eval}} is a user interface to the evaluator.

The evaluator expands macro calls as if through the use of
@uref{fun_macroexpa_acroexpand-1.html#macroexpand-1,@strong{macroexpand-1}}.

Constants appearing in code processed by @ref{#eval,@strong{eval}} are
not copied nor coalesced. The code resulting from the execution of
@ref{#eval,@strong{eval}} references
@uref{glo_o.html#object,@emph{objects}} that are
@uref{fun_eql.html#eql,@strong{eql}} to the corresponding
@uref{glo_o.html#object,@emph{objects}} in the source code.

@strong{Examples:}

@verbatim
 (setq form '(1+ a) a 999) =>  999
 (eval form) =>  1000
 (eval 'form) =>  (1+ A)
 (let ((a '(this would break if eval used local value))) (eval form))
=>  1000
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_macroexpa_acroexpand-1.html#macroexpand-1,@strong{macroexpand-1}},
@uref{sec_3-1-2.html,Section 3.1.2 (The Evaluation Model)}

@strong{Notes:}

To obtain the current dynamic value of a
@uref{glo_s.html#symbol,@emph{symbol}}, use of
@uref{acc_symbol-value.html#symbol-value,@strong{symbol-value}} is
equivalent (and usually preferable) to use of @ref{#eval,@strong{eval}}.

Note that an @ref{#eval,@strong{eval}}
@uref{glo_f.html#form,@emph{form}} involves two levels of
@uref{glo_e.html#evaluation,@emph{evaluation}} for its
@uref{glo_a.html#argument,@emph{argument}}. First, @emph{form} is
@emph{evaluated} by the normal argument evaluation mechanism as would
occur with any @uref{glo_c.html#call,@emph{call}}. The
@uref{glo_o.html#object,@emph{object}} that results from this normal
@uref{glo_a.html#argument,@emph{argument}}
@uref{glo_e.html#evaluation,@emph{evaluation}} becomes the
@uref{glo_v.html#value,@emph{value}} of the @emph{form}
@uref{glo_p.html#parameter,@emph{parameter}}, and is then
@emph{evaluated} as part of the @ref{#eval,@strong{eval}}
@uref{glo_f.html#form,@emph{form}}. For example:

@verbatim
 (eval (list 'cdr (car '((quote (a . b)) c)))) =>  b
@end verbatim

The @uref{glo_a.html#argument,@emph{argument}}
@uref{glo_f.html#form,@emph{form}} (list 'cdr (car '((quote (a . b))
c))) is evaluated in the usual way to produce the
@uref{glo_a.html#argument,@emph{argument}} (cdr (quote (a . b)));
@ref{#eval,@strong{eval}} then evaluates its
@uref{glo_a.html#argument,@emph{argument}}, (cdr (quote (a . b))), to
produce b. Since a single @uref{glo_e.html#evaluation,@emph{evaluation}}
already occurs for any @uref{glo_a.html#argument,@emph{argument}}
@uref{glo_f.html#form,@emph{form}} in any
@uref{glo_f.html#function_form,@emph{function form}},
@ref{#eval,@strong{eval}} is sometimes said to perform ``an extra level
of evaluation.''

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss149.html,EVALHOOK-STEP-CONFUSION:FIX}
@item
@uref{../Issues/iss150.html,EVALHOOK-STEP-CONFUSION:X3J13-NOV-89}
@item
@uref{../Issues/iss282.html,QUOTE-SEMANTICS:NO-COPYING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MACROEXPAND MACROEXPAND-1
@subsubsection CLHS: Function MACROEXPAND, MACROEXPAND-1
@anchor{#clhs-function-macroexpand-macroexpand-1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_macro-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-symbol-macro.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MACROEXPAND, MACROEXPAND-1}

@strong{Syntax:}

@strong{macroexpand} @emph{form &optional env} => @emph{expansion,
expanded-p}

@strong{macroexpand-1} @emph{form &optional env} => @emph{expansion,
expanded-p}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{env}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{expansion}---a @uref{glo_f.html#form,@emph{form}}.

@emph{expanded-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#macroexpand,@strong{macroexpand}} and
@ref{#macroexpand-1,@strong{macroexpand-1}} expand
@uref{glo_m.html#macro,@emph{macros}}.

If @emph{form} is a @uref{glo_m.html#macro_form,@emph{macro form}}, then
@ref{#macroexpand-1,@strong{macroexpand-1}} expands the
@uref{glo_m.html#macro_form,@emph{macro form}} call once.

@ref{#macroexpand,@strong{macroexpand}} repeatedly expands @emph{form}
until it is no longer a @uref{glo_m.html#macro_form,@emph{macro form}}.
In effect, @ref{#macroexpand,@strong{macroexpand}} calls
@ref{#macroexpand-1,@strong{macroexpand-1}} repeatedly until the
@uref{glo_s.html#secondary_value,@emph{secondary value}} it returns is
@uref{any_nil.html#nil,@strong{nil}}.

If @emph{form} is a @uref{glo_m.html#macro_form,@emph{macro form}}, then
the @emph{expansion} is a @uref{glo_m.html#macro_expansion,@emph{macro
expansion}} and @emph{expanded-p} is @uref{glo_t.html#true,@emph{true}}.
Otherwise, the @emph{expansion} is the given @emph{form} and
@emph{expanded-p} is @uref{glo_f.html#false,@emph{false}}.

Macro expansion is carried out as follows. Once
@ref{#macroexpand-1,@strong{macroexpand-1}} has determined that the
@emph{form} is a @uref{glo_m.html#macro_form,@emph{macro form}}, it
obtains an appropriate expansion
@uref{glo_f.html#function,@emph{function}} for the
@uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#symbol_macro,@emph{symbol macro}}. The value of
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}}
is coerced to a @uref{glo_f.html#function,@emph{function}} and then
called as a @uref{glo_f.html#function,@emph{function}} of three
arguments: the expansion @uref{glo_f.html#function,@emph{function}}, the
@emph{form}, and the @emph{env}. The
@uref{glo_v.html#value,@emph{value}} returned from this call is taken to
be the expansion of the @emph{form}.

In addition to @uref{glo_m.html#macro,@emph{macro}} definitions in the
global environment, any local macro definitions established within
@emph{env} by
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}} or
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}
are considered. If only @emph{form} is supplied as an argument, then the
environment is effectively null, and only global macro definitions as
established by @uref{mac_defmacro.html#defmacro,@strong{defmacro}} are
considered. @uref{glo_m.html#macro,@emph{Macro}} definitions are
shadowed by local @uref{glo_f.html#function,@emph{function}}
definitions.

@strong{Examples:}

@verbatim
 (defmacro alpha (x y) `(beta ,x ,y)) =>  ALPHA
 (defmacro beta (x y) `(gamma ,x ,y)) =>  BETA
 (defmacro delta (x y) `(gamma ,x ,y)) =>  EPSILON
 (defmacro expand (form &environment env)
   (multiple-value-bind (expansion expanded-p)
       (macroexpand form env)
     `(values ',expansion ',expanded-p))) =>  EXPAND
 (defmacro expand-1 (form &environment env)
   (multiple-value-bind (expansion expanded-p)
       (macroexpand-1 form env)
     `(values ',expansion ',expanded-p))) =>  EXPAND-1

;; Simple examples involving just the global environment
 (macroexpand-1 '(alpha a b)) =>  (BETA A B), true
 (expand-1 (alpha a b)) =>  (BETA A B), true
 (macroexpand '(alpha a b)) =>  (GAMMA A B), true
 (expand (alpha a b)) =>  (GAMMA A B), true
 (macroexpand-1 'not-a-macro) =>  NOT-A-MACRO, false
 (expand-1 not-a-macro) =>  NOT-A-MACRO, false
 (macroexpand '(not-a-macro a b)) =>  (NOT-A-MACRO A B), false
 (expand (not-a-macro a b)) =>  (NOT-A-MACRO A B), false

;; Examples involving lexical environments
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (macroexpand-1 '(alpha a b))) =>  (BETA A B), true
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (expand-1 (alpha a b))) =>  (DELTA A B), true
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (macroexpand '(alpha a b))) =>  (GAMMA A B), true
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (expand (alpha a b))) =>  (GAMMA A B), true
 (macrolet ((beta (x y) `(epsilon ,x ,y)))
   (expand (alpha a b))) =>  (EPSILON A B), true
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (expand a))) =>  (FIRST X), true
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (macroexpand 'a))) =>  A, false
 (symbol-macrolet ((b (alpha x y)))
   (expand-1 b)) =>  (ALPHA X Y), true
 (symbol-macrolet ((b (alpha x y)))
   (expand b)) =>  (GAMMA X Y), true
 (symbol-macrolet ((b (alpha x y))
                   (a b))
   (expand-1 a)) =>  B, true
 (symbol-macrolet ((b (alpha x y))
                   (a b))
   (expand a)) =>  (GAMMA X Y), true

;; Examples of shadowing behavior
 (flet ((beta (x y) (+ x y)))
   (expand (alpha a b))) =>  (BETA A B), true
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (flet ((alpha (x y) (+ x y)))
     (expand (alpha a b)))) =>  (ALPHA A B), false
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (let ((a x))
       (expand a)))) =>  A, false
@end verbatim

@strong{Affected By:}

@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}},
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}},
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

Neither @ref{#macroexpand,@strong{macroexpand}} nor
@ref{#macroexpand-1,@strong{macroexpand-1}} makes any explicit attempt
to expand @uref{glo_m.html#macro_form,@emph{macro forms}} that are
either @uref{glo_s.html#subform,@emph{subforms}} of the @emph{form} or
@uref{glo_s.html#subform,@emph{subforms}} of the @emph{expansion}. Such
expansion might occur implicitly, however, due to the semantics or
implementation of the @uref{glo_m.html#macro_function,@emph{macro
function}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss235.html,MACROEXPAND-RETURN-VALUE:TRUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function PROCLAIM
@subsubsection CLHS: Function PROCLAIM
@anchor{#clhs-function-proclaim}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stmacroexpand-hookst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_declaim.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{PROCLAIM}

@strong{Syntax:}

@strong{proclaim} @emph{declaration-specifier} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{declaration-specifier}---a
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}}.

@strong{Description:}

@uref{glo_e.html#establish,@emph{Establishes}} the
@uref{glo_d.html#declaration,@emph{declaration}} specified by
@emph{declaration-specifier} in the
@uref{glo_g.html#global_environment,@emph{global environment}}.

Such a @uref{glo_d.html#declaration,@emph{declaration}}, sometimes
called a @uref{glo_g.html#global_declaration,@emph{global declaration}}
or a @uref{glo_p.html#proclamation,@emph{proclamation}}, is always in
force unless locally @emph{shadowed}.

@uref{glo_n.html#name,@emph{Names}} of
@uref{glo_v.html#variable,@emph{variables}} and
@uref{glo_f.html#function,@emph{functions}} within
@emph{declaration-specifier} refer to
@uref{glo_d.html#dynamic_variable,@emph{dynamic variables}} and global
@uref{glo_f.html#function,@emph{function}} definitions, respectively.

The next figure shows a list of @emph{declaration identifiers} that can
be used with @ref{#proclaim,@strong{proclaim}}.

@verbatim
declaration  inline     optimize  type  
ftype        notinline  special         
@end verbatim

@strong{Figure 3-22. Global Declaration Specifiers}

An implementation is free to support other
(@uref{glo_i.html#implementation-defined,@emph{implementation-defined}})
@uref{glo_d.html#declaration_identifier,@emph{declaration identifiers}}
as well.

@strong{Examples:}

@verbatim
 (defun declare-variable-types-globally (type vars)
   (proclaim `(type ,type ,@vars))
   type)

 ;; Once this form is executed, the dynamic variable *TOLERANCE*
 ;; must always contain a float.
 (declare-variable-types-globally 'float '(*tolerance*))
=>  FLOAT
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{sym_declare.html#declare,@strong{declare}},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

Although the @emph{execution} of a @ref{#proclaim,@strong{proclaim}}
@uref{glo_f.html#form,@emph{form}} has effects that might affect
compilation, the compiler does not make any attempt to recognize and
specially process @ref{#proclaim,@strong{proclaim}}
@uref{glo_f.html#form,@emph{forms}}. A
@uref{glo_p.html#proclamation,@emph{proclamation}} such as the
following, even if a @uref{glo_t.html#top_level_form,@emph{top level
form}}, does not have any effect until it is executed:

@verbatim
(proclaim '(special *x*))
@end verbatim

If compile time side effects are desired,
@uref{speope_eval-when.html#eval-when,@strong{eval-when}} may be useful.
For example:

@verbatim
 (eval-when (:execute :compile-toplevel :load-toplevel)
   (proclaim '(special *x*)))
@end verbatim

In most such cases, however, it is preferrable to use
@uref{mac_declaim.html#declaim,@strong{declaim}} for this purpose.

Since @ref{#proclaim,@strong{proclaim}}
@uref{glo_f.html#form,@emph{forms}} are ordinary
@uref{glo_f.html#function_form,@emph{function forms}},
@uref{glo_m.html#macro_form,@emph{macro forms}} can expand into them.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss095.html,DECLARE-MACROS:FLUSH}
@item
@uref{../Issues/iss094.html,DECLARE-FUNCTION-AMBIGUITY:DELETE-FTYPE-ABBREVIATION}
@item
@uref{../Issues/iss142.html,DYNAMIC-EXTENT:NEW-DECLARATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SPECIAL-OPERATOR-P
@subsubsection CLHS: Function SPECIAL-OPERATOR-P
@anchor{#clhs-function-special-operator-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_the.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_constantp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SPECIAL-OPERATOR-P}

@strong{Syntax:}

@strong{special-operator-p} @emph{symbol} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{symbol} is a
@uref{glo_s.html#special_operator,@emph{special operator}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (special-operator-p 'if) =>  true
 (special-operator-p 'car) =>  false
 (special-operator-p 'one) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{See Also:} None.

@strong{Notes:}

Historically, this function was called special-form-p. The name was
finally declared a misnomer and changed, since it returned true for
@uref{glo_s.html#special_operator,@emph{special operators}}, not
@uref{glo_s.html#special_form,@emph{special forms}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss321.html,SPECIAL-FORM-P-MISNOMER:RENAME}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DECLAIM
@subsubsection CLHS: Macro DECLAIM
@anchor{#clhs-macro-declaim}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_proclaim.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sym_declare.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DECLAIM}

@strong{Syntax:}

@strong{declaim} @emph{@emph{declaration-specifier}@strong{*}} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{declaration-specifier}---a
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}};
not evaluated.

@strong{Description:}

Establishes the @uref{glo_d.html#declaration,@emph{declarations}}
specified by the @emph{declaration-specifiers}.

If a use of this macro appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}} in a
@uref{glo_f.html#file,@emph{file}} being processed by the
@uref{glo_f.html#file_compiler,@emph{file compiler}}, the proclamations
are also made at compile-time. As with other defining macros, it is
unspecified whether or not the compile-time side-effects of a
@ref{#declaim,@strong{declaim}} persist after the
@uref{glo_f.html#file,@emph{file}} has been @emph{compiled}.

@strong{Examples:}

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss278.html,PROCLAIM-ETC-IN-COMPILE-FILE:NEW-MACRO}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-COMPILER-MACRO
@subsubsection CLHS: Macro DEFINE-COMPILER-MACRO
@anchor{#clhs-macro-define-compiler-macro}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_compiler-_cro-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defmacro.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-COMPILER-MACRO}

@strong{Syntax:}

@strong{define-compiler-macro} @emph{name lambda-list
[[@emph{declaration}@strong{*} | @emph{documentation}]]
@emph{form}@strong{*}}

=> @emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}}.

@emph{lambda-list}---a @uref{glo_m.html#macro_lambda_list,@emph{macro
lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

This is the normal mechanism for defining a
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro
function}}. Its manner of definition is the same as for
@uref{mac_defmacro.html#defmacro,@strong{defmacro}}; the only
differences are:

* The @emph{name} can be a @uref{glo_f.html#function_name,@emph{function
name}} naming any @uref{glo_f.html#function,@emph{function}} or
@uref{glo_m.html#macro,@emph{macro}}.

* The expander function is installed as a
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro function}}
for the @emph{name}, rather than as a
@uref{glo_m.html#macro_function,@emph{macro function}}.

* The &whole argument is bound to the form argument that is passed to
the @uref{glo_c.html#compiler_macro_function,@emph{compiler macro
function}}. The remaining lambda-list parameters are specified as if
this form contained the function name in the
@uref{glo_c.html#car,@emph{car}} and the actual arguments in the
@uref{glo_c.html#cdr,@emph{cdr}}, but if the
@uref{glo_c.html#car,@emph{car}} of the actual form is the symbol
@uref{fun_funcall.html#funcall,@strong{funcall}}, then the destructuring
of the arguments is actually performed using its
@uref{glo_c.html#cddr,@emph{cddr}} instead.

* @emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
@emph{name} (as kind @strong{compiler-macro}) and to the
@uref{glo_c.html#compiler_macro_function,@emph{compiler macro
function}}.

* Unlike an ordinary @uref{glo_m.html#macro,@emph{macro}}, a
@uref{glo_c.html#compiler_macro,@emph{compiler macro}} can decline to
provide an expansion merely by returning a form that is the
@uref{glo_s.html#same,@emph{same}} as the original (which can be
obtained by using &whole).

@strong{Examples:}

@verbatim
 (defun square (x) (expt x 2)) =>  SQUARE
 (define-compiler-macro square (&whole form arg)
   (if (atom arg)
       `(expt ,arg 2)
       (case (car arg)
         (square (if (= (length arg) 2)
                     `(expt ,(nth 1 arg) 4)
                     form))
         (expt   (if (= (length arg) 3)
                     (if (numberp (nth 2 arg))
                         `(expt ,(nth 1 arg) ,(* 2 (nth 2 arg)))
                         `(expt ,(nth 1 arg) (* 2 ,(nth 2 arg))))
                     form))
         (otherwise `(expt ,arg 2))))) =>  SQUARE
 (square (square 3)) =>  81
 (macroexpand '(square x)) =>  (SQUARE X), false
 (funcall (compiler-macro-function 'square) '(square x) nil)
=>  (EXPT X 2)
 (funcall (compiler-macro-function 'square) '(square (square x)) nil)
=>  (EXPT X 4)
 (funcall (compiler-macro-function 'square) '(funcall #'square x) nil)
=>  (EXPT X 2)

 (defun distance-positional (x1 y1 x2 y2)
   (sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))
=>  DISTANCE-POSITIONAL
 (defun distance (&key (x1 0) (y1 0) (x2 x1) (y2 y1))
   (distance-positional x1 y1 x2 y2))
=>  DISTANCE
 (define-compiler-macro distance (&whole form
                                  &rest key-value-pairs
                                  &key (x1 0  x1-p)
                                       (y1 0  y1-p)
                                       (x2 x1 x2-p)
                                       (y2 y1 y2-p)
                                  &allow-other-keys
                                  &environment env)
   (flet ((key (n) (nth (* n 2) key-value-pairs))
          (arg (n) (nth (1+ (* n 2)) key-value-pairs))
          (simplep (x)
            (let ((expanded-x (macroexpand x env)))
              (or (constantp expanded-x env)
                  (symbolp expanded-x)))))
     (let ((n (/ (length key-value-pairs) 2)))
       (multiple-value-bind (x1s y1s x2s y2s others)
           (loop for (key) on key-value-pairs by #'cddr
                 count (eq key ':x1) into x1s
                 count (eq key ':y1) into y1s
                 count (eq key ':x2) into x2s
                 count (eq key ':y1) into y2s
                 count (not (member key '(:x1 :x2 :y1 :y2)))
                   into others
                 finally (return (values x1s y1s x2s y2s others)))
         (cond ((and (= n 4)
                     (eq (key 0) :x1)
                     (eq (key 1) :y1)
                     (eq (key 2) :x2)
                     (eq (key 3) :y2))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (if x1-p (and (= x1s 1) (simplep x1)) t)
                     (if y1-p (and (= y1s 1) (simplep y1)) t)
                     (if x2-p (and (= x2s 1) (simplep x2)) t)
                     (if y2-p (and (= y2s 1) (simplep y2)) t)
                     (zerop others))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (< x1s 2) (< y1s 2) (< x2s 2) (< y2s 2)
                     (zerop others))
                (let ((temps (loop repeat n collect (gensym))))
                  `(let ,(loop for i below n
                               collect (list (nth i temps) (arg i)))
                     (distance
                       ,@(loop for i below n
                               append (list (key i) (nth i temps)))))))
               (t form))))))
=>  DISTANCE
 (dolist (form
           '((distance :x1 (setq x 7) :x2 (decf x) :y1 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (decf x) :x2 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (incf x))
             (distance :x1 (setq x 7) :y1 (incf x) :x1 (incf x))
             (distance :x1 a1 :y1 b1 :x2 a2 :y2 b2)
             (distance :x1 a1 :x2 a2 :y1 b1 :y2 b2)
             (distance :x1 a1 :y1 b1 :z1 c1 :x2 a2 :y2 b2 :z2 c2)))
   (print (funcall (compiler-macro-function 'distance) form nil)))
>>  (LET ((#:G6558 (SETQ X 7))
>>        (#:G6559 (DECF X))
>>        (#:G6560 (DECF X))
>>        (#:G6561 (DECF X)))
>>    (DISTANCE :X1 #:G6558 :X2 #:G6559 :Y1 #:G6560 :Y2 #:G6561)) 
>>  (DISTANCE-POSITIONAL (SETQ X 7) (DECF X) (DECF X) (DECF X)) 
>>  (LET ((#:G6567 (SETQ X 7))
>>        (#:G6568 (INCF X)))
>>    (DISTANCE :X1 #:G6567 :Y1 #:G6568)) 
>>  (DISTANCE :X1 (SETQ X 7) :Y1 (INCF X) :X1 (INCF X)) 
>>  (DISTANCE-POSITIONAL A1 B1 A2 B2) 
>>  (DISTANCE-POSITIONAL A1 B1 A2 B2) 
>>  (DISTANCE :X1 A1 :Y1 B1 :Z1 C1 :X2 A2 :Y2 B2 :Z2 C2) 
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_compiler-_cro-function.html#compiler-macro-function,@strong{compiler-macro-function}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

The consequences of writing a
@uref{glo_c.html#compiler_macro,@emph{compiler macro}} definition for a
function in the COMMON-LISP package are undefined; it is quite possible
that in some @uref{glo_i.html#implementation,@emph{implementations}}
such an attempt would override an equivalent or equally important
definition. In general, it is recommended that a programmer only write
@uref{glo_c.html#compiler_macro,@emph{compiler macro}} definitions for
@uref{glo_f.html#function,@emph{functions}} he or she personally
maintains--writing a @uref{glo_c.html#compiler_macro,@emph{compiler
macro}} definition for a function maintained elsewhere is normally
considered a violation of traditional rules of modularity and data
abstraction.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-SYMBOL-MACRO
@subsubsection CLHS: Macro DEFINE-SYMBOL-MACRO
@anchor{#clhs-macro-define-symbol-macro}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_macroexpa_acroexpand-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_symbol-macrolet.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-SYMBOL-MACRO}

@strong{Syntax:}

@strong{define-symbol-macro} @emph{symbol expansion}

=> @emph{symbol}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{expansion}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

Provides a mechanism for globally affecting the
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} of the
indicated @emph{symbol}.

Globally establishes an expansion function for the
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} named by
@emph{symbol}. The only guaranteed property of an expansion
@uref{glo_f.html#function,@emph{function}} for a
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} is that when it is
applied to the @uref{glo_f.html#form,@emph{form}} and the
@uref{glo_e.html#environment,@emph{environment}} it returns the correct
expansion. (In particular, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether the expansion is conceptually stored in the expansion function,
the @uref{glo_e.html#environment,@emph{environment}}, or both.)

Each global reference to @emph{symbol} (i.e., not @emph{shadowed}[2] by
a @uref{glo_b.html#binding,@emph{binding}} for a
@uref{glo_v.html#variable,@emph{variable}} or
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} named by the same
@uref{glo_s.html#symbol,@emph{symbol}}) is expanded by the normal macro
expansion process; see @uref{sec_3-1-2-1-1.html,Section 3.1.2.1.1
(Symbols as Forms)}. The expansion of a
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} is subject to further
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} in the same
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} as the
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} reference, exactly
analogous to normal @uref{glo_m.html#macro,@emph{macros}}.

The consequences are unspecified if a
@uref{dec_special.html#special,@strong{special}} declaration is made for
@emph{symbol} while in the scope of this definition (i.e., when it is
not @emph{shadowed}[2] by a @uref{glo_b.html#binding,@emph{binding}} for
a @uref{glo_v.html#variable,@emph{variable}} or
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} named by the same
@uref{glo_s.html#symbol,@emph{symbol}}).

Any use of @uref{spefor_setq.html#setq,@strong{setq}} to set the value
of the @emph{symbol} while in the scope of this definition is treated as
if it were a @uref{mac_setfcm_psetf.html#setf,@strong{setf}}.
@uref{mac_psetq.html#psetq,@strong{psetq}} of @emph{symbol} is treated
as if it were a @uref{mac_setfcm_psetf.html#psetf,@strong{psetf}}, and
@uref{mac_multiple-value-setq.html#multiple-value-setq,@strong{multiple-value-setq}}
is treated as if it were a
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_values.html#values,@strong{values}}.

A @uref{glo_b.html#binding,@emph{binding}} for a
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} can be
@emph{shadowed}[2] by @uref{speope_letcm_letst.html#let,@strong{let}} or
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}.

@strong{Examples:}

@verbatim
(defvar *things* (list 'alpha 'beta 'gamma)) =>  *THINGS*

(define-symbol-macro thing1 (first *things*)) =>  THING1
(define-symbol-macro thing2 (second *things*)) =>  THING2
(define-symbol-macro thing3 (third *things*)) =>  THING3

thing1 =>  ALPHA
(setq thing1 'ONE) =>  ONE
*things* =>  (ONE BETA GAMMA)
(multiple-value-setq (thing2 thing3) (values 'two 'three)) =>  TWO
thing3 =>  THREE
*things* =>  (ONE TWO THREE)

(list thing2 (let ((thing2 2)) thing2)) =>  (TWO 2)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{symbol} is already defined as a
@uref{glo_g.html#global_variable,@emph{global variable}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

@strong{See Also:}

@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}},
@uref{fun_macroexpa_acroexpand-1.html#macroexpand,@strong{macroexpand}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFMACRO
@subsubsection CLHS: Macro DEFMACRO
@anchor{#clhs-macro-defmacro}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-compiler-macro.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_macro-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFMACRO}

@strong{Syntax:}

@strong{defmacro} @emph{name lambda-list [[@emph{declaration}@strong{*}
| @emph{documentation}]] @emph{form}@strong{*}}

=> @emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.
@emph{lambda-list}---a @uref{glo_m.html#macro_lambda_list,@emph{macro
lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

Defines @emph{name} as a @uref{glo_m.html#macro,@emph{macro}} by
associating a @uref{glo_m.html#macro_function,@emph{macro function}}
with that @emph{name} in the global environment. The
@uref{glo_m.html#macro_function,@emph{macro function}} is defined in the
same @uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which the @ref{#defmacro,@strong{defmacro}}
@uref{glo_f.html#form,@emph{form}} appears.

The parameter variables in @emph{lambda-list} are bound to destructured
portions of the macro call.

The expansion function accepts two arguments, a
@uref{glo_f.html#form,@emph{form}} and an
@uref{glo_e.html#environment,@emph{environment}}. The expansion function
returns a @uref{glo_f.html#form,@emph{form}}. The body of the expansion
function is specified by @emph{forms}. @emph{Forms} are executed in
order. The value of the last @emph{form} executed is returned as the
expansion of the @uref{glo_m.html#macro,@emph{macro}}. The body
@emph{forms} of the expansion function (but not the @emph{lambda-list})
are implicitly enclosed in a @uref{glo_b.html#block,@emph{block}} whose
name is @emph{name}.

The @emph{lambda-list} conforms to the requirements described in
@uref{sec_3-4-4.html,Section 3.4.4 (Macro Lambda Lists)}.

@emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
@emph{name} (as kind
@uref{speope_function.html#function,@strong{function}}) and to the
@uref{glo_m.html#macro_function,@emph{macro function}}.

@ref{#defmacro,@strong{defmacro}} can be used to redefine a
@uref{glo_m.html#macro,@emph{macro}} or to replace a
@uref{glo_f.html#function,@emph{function}} definition with a
@uref{glo_m.html#macro,@emph{macro}} definition.

Recursive expansion of the @uref{glo_f.html#form,@emph{form}} returned
must terminate, including the expansion of other
@uref{glo_m.html#macro,@emph{macros}} which are
@uref{glo_s.html#subform,@emph{subforms}} of other
@uref{glo_f.html#form,@emph{forms}} returned.

The consequences are undefined if the result of fully macroexpanding a
@uref{glo_f.html#form,@emph{form}} contains any
@uref{glo_c.html#circular,@emph{circular}}
@uref{glo_l.html#list_structure,@emph{list structure}} except in
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}}.

If a @ref{#defmacro,@strong{defmacro}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must store the
@uref{glo_m.html#macro,@emph{macro}} definition at compile time, so that
occurrences of the macro later on in the file can be expanded correctly.
Users must ensure that the body of the
@uref{glo_m.html#macro,@emph{macro}} can be evaluated at compile time if
it is referenced within the @uref{glo_f.html#file,@emph{file}} being
@emph{compiled}.

@strong{Examples:}

@verbatim
 (defmacro mac1 (a b) "Mac1 multiplies and adds" 
            `(+ ,a (* ,b 3))) =>  MAC1 
 (mac1 4 5) =>  19 
 (documentation 'mac1 'function) =>  "Mac1 multiplies and adds" 
 (defmacro mac2 (&optional (a 2 b) (c 3 d) &rest x) `'(,a ,b ,c ,d ,x)) =>  MAC2 
 (mac2 6) =>  (6 T 3 NIL NIL) 
 (mac2 6 3 8) =>  (6 T 3 T (8)) 
 (defmacro mac3 (&whole r a &optional (b 3) &rest x &key c (d a))
    `'(,r ,a ,b ,c ,d ,x)) =>  MAC3 
 (mac3 1 6 :d 8 :c 9 :d 10) =>  ((MAC3 1 6 :D 8 :C 9 :D 10) 1 6 9 8 (:D 8 :C 9 :D 10)) 
@end verbatim

The stipulation that an embedded
@uref{glo_d.html#destructuring_lambda_list,@emph{destructuring lambda
list}} is permitted only where
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}
syntax would permit a parameter name but not a
@uref{glo_l.html#list,@emph{list}} is made to prevent ambiguity. For
example, the following is not valid:

@verbatim
 (defmacro loser (x &optional (a b &rest c) &rest z)
   ...)
@end verbatim

because @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda
list}} syntax does permit a @uref{glo_l.html#list,@emph{list}} following
&optional; the list (a b &rest c) would be interpreted as describing an
optional parameter named a whose default value is that of the form b,
with a supplied-p parameter named &rest (not valid), and an extraneous
symbol c in the list (also not valid). An almost correct way to express
this is

@verbatim
 (defmacro loser (x &optional ((a b &rest c)) &rest z)
   ...)
@end verbatim

The extra set of parentheses removes the ambiguity. However, the
definition is now incorrect because a macro call such as (loser (car
pool)) would not provide any argument form for the lambda list (a b
&rest c), and so the default value against which to match the
@uref{glo_l.html#lambda_list,@emph{lambda list}} would be
@uref{any_nil.html#nil,@strong{nil}} because no explicit default value
was specified. The consequences of this are unspecified since the empty
list, @uref{any_nil.html#nil,@strong{nil}}, does not have
@uref{glo_f.html#form,@emph{forms}} to satisfy the parameters a and b.
The fully correct definition would be either

@verbatim
 (defmacro loser (x &optional ((a b &rest c) '(nil nil)) &rest z)
   ...)
@end verbatim

or

@verbatim
 (defmacro loser (x &optional ((&optional a b &rest c)) &rest z)
   ...)
@end verbatim

These differ slightly: the first requires that if the macro call
specifies a explicitly then it must also specify b explicitly, whereas
the second does not have this requirement. For example,

@verbatim
 (loser (car pool) ((+ x 1)))
@end verbatim

would be a valid call for the second definition but not for the first.

@verbatim
 (defmacro dm1a (&whole x) `',x)
 (macroexpand '(dm1a))  =>  (QUOTE (DM1A))
 (macroexpand '(dm1a a)) is an error.
 
 (defmacro dm1b (&whole x a &optional b) `'(,x ,a ,b))
 (macroexpand '(dm1b))  is an error.
 (macroexpand '(dm1b q))  =>  (QUOTE ((DM1B Q) Q NIL))
 (macroexpand '(dm1b q r)) =>  (QUOTE ((DM1B Q R) Q R))
 (macroexpand '(dm1b q r s)) is an error.
@end verbatim

@verbatim
 (defmacro dm2a (&whole form a b) `'(form ,form a ,a b ,b))
 (macroexpand '(dm2a x y)) =>  (QUOTE (FORM (DM2A X Y) A X B Y))
 (dm2a x y) =>  (FORM (DM2A X Y) A X B Y)

 (defmacro dm2b (&whole form a (&whole b (c . d) &optional (e 5)) 
                 &body f &environment env)
   ``(,',form ,,a ,',b ,',(macroexpand c env) ,',d ,',e ,',f))
 ;Note that because backquote is involved, implementations may differ
 ;slightly in the nature (though not the functionality) of the expansion.
 (macroexpand '(dm2b x1 (((incf x2) x3 x4)) x5 x6))
 =>  (LIST* '(DM2B X1 (((INCF X2) X3 X4))
                   X5 X6)
            X1
            '((((INCF X2) X3 X4)) (SETQ X2 (+ X2 1)) (X3 X4) 5 (X5 X6))),
     T
 (let ((x1 5))
   (macrolet ((segundo (x) `(cadr ,x)))
     (dm2b x1 (((segundo x2) x3 x4)) x5 x6)))
 =>  ((DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6)
      5 (((SEGUNDO X2) X3 X4)) (CADR X2) (X3 X4) 5 (X5 X6))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-compiler-macro.html#define-compiler-macro,@strong{define-compiler-macro}},
@uref{mac_destructuring-bind.html#destructuring-bind,@strong{destructuring-bind}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{fun_macroexpa_acroexpand-1.html#macroexpand,@strong{macroexpand}},
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}},
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}},
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}, @uref{sec_3-2.html,Section
3.2 (Compilation)}, @uref{sec_3-4-11.html,Section 3.4.11 (Syntactic
Interaction of Documentation Strings and Declarations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss101.html,DEFINE-COMPILER-MACRO:X3J13-NOV89}
@item
@uref{../Issues/iss106.html,DEFMACRO-LAMBDA-LIST:TIGHTEN-DESCRIPTION}
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss291.html,RECURSIVE-DEFTYPE:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss105.html,DEFMACRO-BLOCK-SCOPE:EXCLUDES-BINDINGS}
@item
@uref{../Issues/iss161.html,FLET-IMPLICIT-BLOCK:YES}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro LAMBDA
@subsubsection CLHS: Macro LAMBDA
@anchor{#clhs-macro-lambda}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sym_lambda.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_compile.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{LAMBDA}

@strong{Syntax:}

@strong{lambda} @emph{lambda-list [[@emph{declaration}@strong{*} |
@emph{documentation}]] @emph{form}@strong{*}} => @emph{@emph{function}}

@strong{Arguments and Values:}

@emph{lambda-list}---an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{function}---a @uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

Provides a shorthand notation for a
@uref{speope_function.html#function,@strong{function}}
@uref{glo_s.html#special_form,@emph{special form}} involving a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}} such that:

@verbatim
    (lambda lambda-list [[declaration* | documentation]] form*)
 ==  (function (lambda lambda-list [[declaration* | documentation]] form*))
 ==  #'(lambda lambda-list [[declaration* | documentation]] form*)
@end verbatim

@strong{Examples:}

@verbatim
 (funcall (lambda (x) (+ x 3)) 4) =>  7
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{any_lambda.html#lambda,@strong{lambda}} (symbol)

@strong{Notes:}

This macro could be implemented by:

@verbatim
(defmacro lambda (&whole form &rest bvl-decls-and-body)
  (declare (ignore bvl-decls-and-body))
  `#',form)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator EVAL-WHEN
@subsubsection CLHS: Special Operator EVAL-WHEN
@anchor{#clhs-special-operator-eval-when}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_eval.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_load-time-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{EVAL-WHEN}

@strong{Syntax:}

@strong{eval-when} @emph{(@emph{situation}@strong{*})
@emph{form}@strong{*}} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{situation}---One of the @uref{glo_s.html#symbol,@emph{symbols}}
:compile-toplevel, :load-toplevel, :execute,
@uref{fun_compile.html#compile,@strong{compile}},
@uref{fun_load.html#load,@strong{load}}, or
@uref{fun_eval.html#eval,@strong{eval}}.

The use of @uref{fun_eval.html#eval,@strong{eval}},
@uref{fun_compile.html#compile,@strong{compile}}, and
@uref{fun_load.html#load,@strong{load}} is deprecated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@uref{glo_f.html#form,@emph{forms}} if they are executed, or
@uref{any_nil.html#nil,@strong{nil}} if they are not.

@strong{Description:}

The body of an @ref{#eval-when,@strong{eval-when}} form is processed as
an @uref{glo_i.html#implicit_progn,@emph{implicit progn}}, but only in
the @emph{situations} listed.

The use of the @emph{situations} :compile-toplevel (or compile) and
:load-toplevel (or load) controls whether and when
@uref{glo_e.html#evaluation,@emph{evaluation}} occurs when
@ref{#eval-when,@strong{eval-when}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}} in code processed
by @uref{fun_compile-file.html#compile-file,@strong{compile-file}}. See
@uref{sec_3-2-3.html,Section 3.2.3 (File Compilation)}.

The use of the @emph{situation} :execute (or eval) controls whether
evaluation occurs for other @ref{#eval-when,@strong{eval-when}}
@uref{glo_f.html#form,@emph{forms}}; that is, those that are not
@uref{glo_t.html#top_level_form,@emph{top level forms}}, or those in
code processed by @uref{fun_eval.html#eval,@strong{eval}} or
@strong{compile}. If the :execute situation is specified in such a
@uref{glo_f.html#form,@emph{form}}, then the body @emph{forms} are
processed as an @uref{glo_i.html#implicit_progn,@emph{implicit progn}};
otherwise, the @ref{#eval-when,@strong{eval-when}}
@uref{glo_f.html#form,@emph{form}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@ref{#eval-when,@strong{eval-when}} normally appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, but it is
meaningful for it to appear as a
@uref{glo_n.html#non-top-level_form,@emph{non-top-level form}}. However,
the compile-time side effects described in @uref{sec_3-2.html,Section
3.2 (Compilation)} only take place when
@ref{#eval-when,@strong{eval-when}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}.

@strong{Examples:}

One example of the use of @ref{#eval-when,@strong{eval-when}} is that
for the compiler to be able to read a file properly when it uses
user-defined @uref{glo_r.html#reader_macro,@emph{reader macros}}, it is
necessary to write

@verbatim
 (eval-when (:compile-toplevel :load-toplevel :execute)
   (set-macro-character #\$ #'(lambda (stream char)
                                (declare (ignore char))
                                (list 'dollar (read stream))))) =>  T
@end verbatim

This causes the call to
@uref{fun_set-macro_ro-character.html#set-macro-character,@strong{set-macro-character}}
to be executed in the compiler's execution environment, thereby
modifying its reader syntax table.

@verbatim
;;;     The EVAL-WHEN in this case is not at toplevel, so only the :EXECUTE
;;;     keyword is considered. At compile time, this has no effect.
;;;     At load time (if the LET is at toplevel), or at execution time
;;;     (if the LET is embedded in some other form which does not execute
;;;     until later) this sets (SYMBOL-FUNCTION 'FOO1) to a function which
;;;     returns 1.
 (let ((x 1))
   (eval-when (:execute :load-toplevel :compile-toplevel)
     (setf (symbol-function 'foo1) #'(lambda () x))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting
;;;     (SYMBOL-FUNCTION 'FOO2) to a function which returns 2.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (let ((x 2))
     (eval-when (:execute :load-toplevel :compile-toplevel)
       (setf (symbol-function 'foo2) #'(lambda () x)))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting the
;;;     function cell of FOO3 to a function which returns 3.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (setf (symbol-function 'foo3) #'(lambda () 3)))
 
;;; #4: This always does nothing. It simply returns NIL.
 (eval-when (:compile-toplevel)
   (eval-when (:compile-toplevel) 
     (print 'foo4)))

;;;     If this form occurs at toplevel of a file to be compiled, FOO5 is
;;;     printed at compile time. If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:compile-toplevel) 
   (eval-when (:execute)
     (print 'foo5)))
 
;;;     If this form occurs at toplevel of a file to be compiled, FOO6 is
;;;     printed at compile time.  If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:execute :load-toplevel)
   (eval-when (:compile-toplevel)
     (print 'foo6)))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

The following effects are logical consequences of the definition of
@ref{#eval-when,@strong{eval-when}}:

* Execution of a single @ref{#eval-when,@strong{eval-when}} expression
executes the body code at most once.

* @uref{glo_m.html#macro,@emph{Macros}} intended for use in
@uref{glo_t.html#top_level_form,@emph{top level forms}} should be
written so that side-effects are done by the
@uref{glo_f.html#form,@emph{forms}} in the macro expansion. The
macro-expander itself should not do the side-effects.

For example:

Wrong:

@verbatim
 (defmacro foo ()
   (really-foo)
   `(really-foo))
@end verbatim

Right:

@verbatim
 (defmacro foo ()
   `(eval-when (:compile-toplevel :execute :load-toplevel) (really-foo)))
@end verbatim

Adherence to this convention means that such
@uref{glo_m.html#macro,@emph{macros}} behave intuitively when appearing
as @uref{glo_n.html#non-top-level_form,@emph{non-top-level forms}}.

* Placing a variable binding around an
@ref{#eval-when,@strong{eval-when}} reliably captures the binding
because the compile-time-too mode cannot occur (i.e., introducing a
variable binding means that the @ref{#eval-when,@strong{eval-when}} is
not a @uref{glo_t.html#top_level_form,@emph{top level form}}). For
example,

@verbatim
 (let ((x 3))
   (eval-when (:execute :load-toplevel :compile-toplevel) (print x)))
@end verbatim

prints 3 at execution (i.e., load) time, and does not print anything at
compile time. This is important so that expansions of
@uref{mac_defun.html#defun,@strong{defun}} and
@uref{mac_defmacro.html#defmacro,@strong{defmacro}} can be done in terms
of @ref{#eval-when,@strong{eval-when}} and can correctly capture the
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}.

@verbatim
 (defun bar (x) (defun foo () (+ x 3)))
@end verbatim

might expand into

@verbatim
 (defun bar (x) 
   (progn (eval-when (:compile-toplevel) 
            (compiler::notice-function-definition 'foo '(x)))
          (eval-when (:execute :load-toplevel)
            (setf (symbol-function 'foo) #'(lambda () (+ x 3))))))
@end verbatim

which would be treated by the above rules the same as

@verbatim
 (defun bar (x) 
   (setf (symbol-function 'foo) #'(lambda () (+ x 3))))
@end verbatim

when the definition of bar is not a
@uref{glo_t.html#top_level_form,@emph{top level form}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss148.html,EVAL-WHEN-OBSOLETE-KEYWORDS:X3J13-MAR-1993}
@item
@uref{../Issues/iss147.html,EVAL-WHEN-NON-TOP-LEVEL:GENERALIZE-EVAL-NEW-KEYWORDS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator LOAD-TIME-VALUE
@subsubsection CLHS: Special Operator LOAD-TIME-VALUE
@anchor{#clhs-special-operator-load-time-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_eval-when.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_quote.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{LOAD-TIME-VALUE}

@strong{Syntax:}

@strong{load-time-value} @emph{form &optional read-only-p} =>
@emph{object}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{read-only-p}---a @uref{glo_b.html#boolean,@emph{boolean}}; not
evaluated.

@emph{object}---the @uref{glo_p.html#primary_value,@emph{primary value}}
resulting from evaluating @emph{form}.

@strong{Description:}

@ref{#load-time-value,@strong{load-time-value}} provides a mechanism for
delaying evaluation of @emph{form} until the expression is in the
run-time environment; see @uref{sec_3-2.html,Section 3.2 (Compilation)}.

@emph{Read-only-p} designates whether the result can be considered a
@uref{glo_c.html#constant_object,@emph{constant object}}. If
@uref{any_t.html#t,@strong{t}}, the result is a read-only quantity that
can, if appropriate to the
@uref{glo_i.html#implementation,@emph{implementation}}, be copied into
read-only space and/or @emph{coalesced} with
@uref{glo_s.html#similar,@emph{similar}}
@uref{glo_c.html#constant_object,@emph{constant objects}} from other
@uref{glo_p.html#program,@emph{programs}}. If
@uref{any_nil.html#nil,@strong{nil}} (the default), the result must be
neither copied nor coalesced; it must be considered to be potentially
modifiable data.

If a @ref{#load-time-value,@strong{load-time-value}} expression is
processed by
@uref{fun_compile-file.html#compile-file,@strong{compile-file}}, the
compiler performs its normal semantic processing (such as macro
expansion and translation into machine code) on @emph{form}, but
arranges for the execution of @emph{form} to occur at load time in a
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}}, with the result of this
@uref{glo_e.html#evaluation,@emph{evaluation}} then being treated as a
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{object}} at run time. It is guaranteed
that the evaluation of @emph{form} will take place only once when the
@uref{glo_f.html#file,@emph{file}} is @emph{loaded}, but the order of
evaluation with respect to the evaluation of
@uref{glo_t.html#top_level_form,@emph{top level forms}} in the file is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

If a @ref{#load-time-value,@strong{load-time-value}} expression appears
within a function compiled with
@uref{fun_compile.html#compile,@strong{compile}}, the @emph{form} is
evaluated at compile time in a
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}}. The result of this compile-time evaluation is treated as
a @uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{object}} in the compiled code.

If a @ref{#load-time-value,@strong{load-time-value}} expression is
processed by @uref{fun_eval.html#eval,@strong{eval}}, @emph{form} is
evaluated in a @uref{glo_n.html#null_lexical_environment,@emph{null
lexical environment}}, and one value is returned. Implementations that
implicitly compile (or partially compile) expressions processed by
@uref{fun_eval.html#eval,@strong{eval}} might evaluate @emph{form} only
once, at the time this compilation is performed.

If the @uref{glo_s.html#same,@emph{same}}
@uref{glo_l.html#list,@emph{list}} (load-time-value @emph{form}) is
evaluated or compiled more than once, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @emph{form} is evaluated only once or is evaluated more than
once. This can happen both when an expression being evaluated or
compiled shares substructure, and when the
@uref{glo_s.html#same,@emph{same}} @uref{glo_f.html#form,@emph{form}} is
processed by @uref{fun_eval.html#eval,@strong{eval}} or
@uref{fun_compile.html#compile,@strong{compile}} multiple times. Since a
@ref{#load-time-value,@strong{load-time-value}} expression can be
referenced in more than one place and can be evaluated multiple times by
@uref{fun_eval.html#eval,@strong{eval}}, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether each execution returns a fresh
@uref{glo_o.html#object,@emph{object}} or returns the same
@uref{glo_o.html#object,@emph{object}} as some other execution. Users
must use caution when destructively modifying the resulting
@uref{glo_o.html#object,@emph{object}}.

If two lists (load-time-value @emph{form}) that are the
@uref{glo_s.html#same,@emph{same}} under
@uref{fun_equal.html#equal,@strong{equal}} but are not
@uref{glo_i.html#identical,@emph{identical}} are evaluated or compiled,
their values always come from distinct evaluations of @emph{form}. Their
@uref{glo_v.html#value,@emph{values}} may not be coalesced unless
@emph{read-only-p} is @uref{any_t.html#t,@strong{t}}.

@strong{Examples:}

@verbatim
;;; The function INCR1 always returns the same value, even in different images.
;;; The function INCR2 always returns the same value in a given image, 
;;; but the value it returns might vary from image to image.
(defun incr1 (x) (+ x #.(random 17)))
(defun incr2 (x) (+ x (load-time-value (random 17))))

;;; The function FOO1-REF references the nth element of the first of 
;;; the *FOO-ARRAYS* that is available at load time.  It is permissible for
;;; that array to be modified (e.g., by SET-FOO1-REF); FOO1-REF will see the
;;; updated values.
(defvar *foo-arrays* (list (make-array 7) (make-array 8)))
(defun foo1-ref (n) (aref (load-time-value (first *my-arrays*) nil) n))
(defun set-foo1-ref (n val) 
  (setf (aref (load-time-value (first *my-arrays*) nil) n) val))

;;; The function BAR1-REF references the nth element of the first of 
;;; the *BAR-ARRAYS* that is available at load time.  The programmer has
;;; promised that the array will be treated as read-only, so the system 
;;; can copy or coalesce the array.
(defvar *bar-arrays* (list (make-array 7) (make-array 8)))
(defun bar1-ref (n) (aref (load-time-value (first *my-arrays*) t) n))

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified, because the object was already read-only
;;; when it was written as a literal vector rather than created by a constructor.
;;; User programs must treat the vector v as read-only.
(defun baz-ref (n)
  (let ((v (load-time-value #(A B C) nil)))
    (values (svref v n) v)))

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified in the outer situation because T was specified
;;; in the inner situation.  User programs must treat the vector v as read-only.
(defun baz-ref (n)
  (let ((v (load-time-value (load-time-value (vector 1 2 3) t) nil)))
    (values (svref v n) v)))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{fun_compile.html#compile,@strong{compile}},
@uref{fun_eval.html#eval,@strong{eval}}, @uref{sec_3-2-2-2.html,Section
3.2.2.2 (Minimal Compilation)}, @uref{sec_3-2.html,Section 3.2
(Compilation)}

@strong{Notes:}

@ref{#load-time-value,@strong{load-time-value}} must appear outside of
quoted structure in a ``for
@uref{glo_e.html#evaluation,@emph{evaluation}}'' position. In situations
which would appear to call for use of
@ref{#load-time-value,@strong{load-time-value}} within a quoted
structure, the @uref{glo_b.html#backquote,@emph{backquote}}
@uref{glo_r.html#reader_macro,@emph{reader macro}} is probably called
for; see @uref{sec_2-4-6.html,Section 2.4.6 (Backquote)}.

Specifying @uref{any_nil.html#nil,@strong{nil}} for @emph{read-only-p}
is not a way to force an object to become modifiable if it has already
been made read-only. It is only a way to say that, for an object that is
modifiable, this operation is not intended to make that object
read-only.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss217.html,LOAD-TIME-EVAL:R**3-NEW-SPECIAL-FORM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator LOCALLY
@subsubsection CLHS: Special Operator LOCALLY
@anchor{#clhs-special-operator-locally}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{dec_special.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_the.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{LOCALLY}

@strong{Syntax:}

@strong{locally} @emph{@emph{declaration}@strong{*}
@emph{form}@strong{*}} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{Declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@emph{forms}.

@strong{Description:}

Sequentially evaluates a body of @emph{forms} in a
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} where
the given @emph{declarations} have effect.

@strong{Examples:}

@verbatim
 (defun sample-function (y)  ;this y is regarded as special
   (declare (special y))                                
   (let ((y t))              ;this y is regarded as lexical
     (list y
           (locally (declare (special y))
             ;; this next y is regarded as special
             y))))
=>  SAMPLE-FUNCTION
 (sample-function nil) =>  (T NIL) 
 (setq x '(1 2 3) y '(4 . 5)) =>  (4 . 5)

;;; The following declarations are not notably useful in specific.
;;; They just offer a sample of valid declaration syntax using LOCALLY.
 (locally (declare (inline floor) (notinline car cdr))
          (declare (optimize space))
    (floor (car x) (cdr y))) =>  0, 1
@end verbatim

@verbatim
;;; This example shows a definition of a function that has a particular set
;;; of OPTIMIZE settings made locally to that definition.
 (locally (declare (optimize (safety 3) (space 3) (speed 0)))
   (defun frob (w x y &optional (z (foo x y)))
     (mumble x y z w)))
=>  FROB

;;; This is like the previous example, except that the optimize settings
;;; remain in effect for subsequent definitions in the same compilation unit.
 (declaim (optimize (safety 3) (space 3) (speed 0)))
 (defun frob (w x y &optional (z (foo x y)))
   (mumble x y z w))
=>  FROB
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}}

@strong{Notes:}

The @uref{dec_special.html#special,@strong{special}} declaration may be
used with @ref{#locally,@strong{locally}} to affect references to,
rather than @uref{glo_b.html#binding,@emph{bindings}} of,
@uref{glo_v.html#variable,@emph{variables}}.

If a @ref{#locally,@strong{locally}} @uref{glo_f.html#form,@emph{form}}
is a @uref{glo_t.html#top_level_form,@emph{top level form}}, the body
@emph{forms} are also processed as
@uref{glo_t.html#top_level_form,@emph{top level forms}}. See
@uref{sec_3-2-3.html,Section 3.2.3 (File Compilation)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss299.html,RETURN-VALUES-UNSPECIFIED:SPECIFY}
@item
@uref{../Issues/iss219.html,LOCALLY-TOP-LEVEL:SPECIAL-FORM}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator QUOTE
@subsubsection CLHS: Special Operator QUOTE
@anchor{#clhs-special-operator-quote}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_load-time-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_compiler-_cro-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{QUOTE}

@strong{Syntax:}

@strong{quote} @emph{object} => @emph{object}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}; not
evaluated.

@strong{Description:}

The @ref{#quote,@strong{quote}}
@uref{glo_s.html#special_operator,@emph{special operator}} just returns
@emph{object}.

The consequences are undefined if
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} (including
@uref{glo_q.html#quoted_object,@emph{quoted objects}}) are destructively
modified.

@strong{Examples:}

@verbatim
 (setq a 1) =>  1
 (quote (setq a 3)) =>  (SETQ A 3)
 a =>  1
 'a =>  A
 ''a =>  (QUOTE A) 
 '''a =>  (QUOTE (QUOTE A))
 (setq a 43) =>  43
 (list a (cons a 3)) =>  (43 (43 . 3))
 (list (quote a) (quote (cons a 3))) =>  (A (CONS A 3)) 
 1 =>  1
 '1 =>  1
 "foo" =>  "foo"
 '"foo" =>  "foo"
 (car '(a b)) =>  A
 '(car '(a b)) =>  (CAR (QUOTE (A B)))
 #(car '(a b)) =>  #(CAR (QUOTE (A B)))
 '#(car '(a b)) =>  #(CAR (QUOTE (A B)))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_3-1.html,Section 3.1 (Evaluation)},
@uref{sec_2-4-3.html,Section 2.4.3 (Single-Quote)},
@uref{sec_3-2-1.html,Section 3.2.1 (Compiler Terminology)}

@strong{Notes:}

The textual notation '@emph{object} is equivalent to (quote
@emph{object}); see @uref{sec_3-2-1.html,Section 3.2.1 (Compiler
Terminology)}.

Some @uref{glo_o.html#object,@emph{objects}}, called
@uref{glo_s.html#self-evaluating_object,@emph{self-evaluating objects}},
do not require quotation by @ref{#quote,@strong{quote}}. However,
@uref{glo_s.html#symbol,@emph{symbols}} and
@uref{glo_l.html#list,@emph{lists}} are used to represent parts of
programs, and so would not be useable as constant data in a program
without @ref{#quote,@strong{quote}}. Since @ref{#quote,@strong{quote}}
suppresses the @uref{glo_e.html#evaluation,@emph{evaluation}} of these
@uref{glo_o.html#object,@emph{objects}}, they become data rather than
program.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss083.html,CONSTANT-MODIFICATION:DISALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator SYMBOL-MACROLET
@subsubsection CLHS: Special Operator SYMBOL-MACROLET
@anchor{#clhs-special-operator-symbol-macrolet}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-symbol-macro.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stmacroexpand-hookst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{SYMBOL-MACROLET}

@strong{Syntax:}

@strong{symbol-macrolet} @emph{((symbol expansion)@strong{*})
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{expansion}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

@ref{#symbol-macrolet,@strong{symbol-macrolet}} provides a mechanism for
affecting the @uref{glo_m.html#macro_expansion,@emph{macro expansion}}
environment for @uref{glo_s.html#symbol,@emph{symbols}}.

@ref{#symbol-macrolet,@strong{symbol-macrolet}} lexically establishes
expansion functions for each of the
@uref{glo_s.html#symbol_macro,@emph{symbol macros}} named by
@emph{symbols}. The only guaranteed property of an expansion
@uref{glo_f.html#function,@emph{function}} for a
@uref{glo_s.html#symbol_macro,@emph{symbol macro}} is that when it is
applied to the @uref{glo_f.html#form,@emph{form}} and the
@uref{glo_e.html#environment,@emph{environment}} it returns the correct
expansion. (In particular, it is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether the expansion is conceptually stored in the expansion function,
the @uref{glo_e.html#environment,@emph{environment}}, or both.)

Each reference to @emph{symbol} as a variable within the lexical
@uref{glo_s.html#scope,@emph{scope}} of
@ref{#symbol-macrolet,@strong{symbol-macrolet}} is expanded by the
normal macro expansion process; see @uref{sec_3-1-2-1-1.html,Section
3.1.2.1.1 (Symbols as Forms)}. The expansion of a symbol macro is
subject to further macro expansion in the same lexical environment as
the symbol macro invocation, exactly analogous to normal
@uref{glo_m.html#macro,@emph{macros}}.

Exactly the same @emph{declarations} are allowed as for
@uref{speope_letcm_letst.html#let,@strong{let}} with one exception:
@ref{#symbol-macrolet,@strong{symbol-macrolet}} signals an error if a
@uref{dec_special.html#special,@strong{special}} declaration names one
of the @uref{glo_s.html#symbol,@emph{symbols}} being defined by
@ref{#symbol-macrolet,@strong{symbol-macrolet}}.

When the @emph{forms} of the
@ref{#symbol-macrolet,@strong{symbol-macrolet}} form are expanded, any
use of @uref{spefor_setq.html#setq,@strong{setq}} to set the value of
one of the specified variables is treated as if it were a
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}.
@uref{mac_psetq.html#psetq,@strong{psetq}} of a
@uref{glo_s.html#symbol,@emph{symbol}} defined as a symbol macro is
treated as if it were a
@uref{mac_setfcm_psetf.html#psetf,@strong{psetf}}, and
@uref{mac_multiple-value-setq.html#multiple-value-setq,@strong{multiple-value-setq}}
is treated as if it were a
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{acc_values.html#values,@strong{values}}.

The use of @ref{#symbol-macrolet,@strong{symbol-macrolet}} can be
shadowed by @uref{speope_letcm_letst.html#let,@strong{let}}. In other
words, @ref{#symbol-macrolet,@strong{symbol-macrolet}} only substitutes
for occurrences of @emph{symbol} that would be in the
@uref{glo_s.html#scope,@emph{scope}} of a lexical binding of
@emph{symbol} surrounding the @emph{forms}.

@strong{Examples:}

@verbatim
;;; The following is equivalent to
;;;   (list 'foo (let ((x 'bar)) x)),
;;; not
;;;   (list 'foo (let (('foo 'bar)) 'foo))
 (symbol-macrolet ((x 'foo))
   (list x (let ((x 'bar)) x))) 
=>  (foo bar)
NOT=>  (foo foo) 
 
 (symbol-macrolet ((x '(foo x)))
   (list x))
=>  ((FOO X))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If an attempt is made to bind a @uref{glo_s.html#symbol,@emph{symbol}}
that is defined as a @uref{glo_g.html#global_variable,@emph{global
variable}}, an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

If @emph{declaration} contains a
@uref{dec_special.html#special,@strong{special}} declaration that names
one of the @uref{glo_s.html#symbol,@emph{symbols}} being bound by
@ref{#symbol-macrolet,@strong{symbol-macrolet}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

@strong{See Also:}

@uref{mac_with-slots.html#with-slots,@strong{with-slots}},
@uref{fun_macroexpa_acroexpand-1.html#macroexpand,@strong{macroexpand}}

@strong{Notes:}

The special form @ref{#symbol-macrolet,@strong{symbol-macrolet}} is the
basic mechanism that is used to implement
@uref{mac_with-slots.html#with-slots,@strong{with-slots}}.

If a @ref{#symbol-macrolet,@strong{symbol-macrolet}}
@uref{glo_f.html#form,@emph{form}} is a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the @emph{forms}
are also processed as @uref{glo_t.html#top_level_form,@emph{top level
forms}}. See @uref{sec_3-2-3.html,Section 3.2.3 (File Compilation)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss214.html,LISP-SYMBOL-REDEFINITION:MAR89-X3J13}
@item
@uref{../Issues/iss341.html,SYMBOL-MACROS-AND-PROCLAIMED-SPECIALS:SIGNALS-AN-ERROR}
@item
@uref{../Issues/iss338.html,SYMBOL-MACROLET-DECLARE:ALLOW}
@item
@uref{../Issues/iss339.html,SYMBOL-MACROLET-SEMANTICS:SPECIAL-FORM}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator THE
@subsubsection CLHS: Special Operator THE
@anchor{#clhs-special-operator-the}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_locally.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_special-operator-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{THE}

@strong{Syntax:}

@strong{the} @emph{value-type form} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{value-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}; not evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} resulting
from the @uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{form}.
These @uref{glo_v.html#value,@emph{values}} must conform to the
@uref{glo_t.html#type,@emph{type}} supplied by @emph{value-type}; see
below.

@strong{Description:}

@ref{#the,@strong{the}} specifies that the
@uref{glo_v.html#value,@emph{values}}[1a] returned by @emph{form} are of
the @uref{glo_t.html#type,@emph{types}} specified by @emph{value-type}.
The consequences are undefined if any @emph{result} is not of the
declared type.

It is permissible for @emph{form} to
@uref{glo_y.html#yield,@emph{yield}} a different number of
@uref{glo_v.html#value,@emph{values}} than are specified by
@emph{value-type}, provided that the values for which @emph{types} are
declared are indeed of those @uref{glo_t.html#type,@emph{types}}.
Missing values are treated as @uref{any_nil.html#nil,@strong{nil}} for
the purposes of checking their @uref{glo_t.html#type,@emph{types}}.

Regardless of number of @uref{glo_v.html#value,@emph{values}} declared
by @emph{value-type}, the number of
@uref{glo_v.html#value,@emph{values}} returned by the
@ref{#the,@strong{the}} @uref{glo_s.html#special_form,@emph{special
form}} is the same as the number of
@uref{glo_v.html#value,@emph{values}} returned by @emph{form}.

@strong{Examples:}

@verbatim
 (the symbol (car (list (gensym)))) =>  #:G9876
 (the fixnum (+ 5 7)) =>  12
 (the (values) (truncate 3.2 2)) =>  1, 1.2
 (the integer (truncate 3.2 2)) =>  1, 1.2
 (the (values integer) (truncate 3.2 2)) =>  1, 1.2
 (the (values integer float) (truncate 3.2 2))   =>  1, 1.2
 (the (values integer float symbol) (truncate 3.2 2)) =>  1, 1.2
 (the (values integer float symbol t null list) 
      (truncate 3.2 2)) =>  1, 1.2
 (let ((i 100))
    (declare (fixnum i))
    (the fixnum (1+ i))) =>  101
 (let* ((x (list 'a 'b 'c))
        (y 5))
    (setf (the fixnum (car x)) y)
    x) =>  (5 B C)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences are undefined if the
@uref{glo_v.html#value,@emph{values}} @emph{yielded} by the @emph{form}
are not of the @uref{glo_t.html#type,@emph{type}} specified by
@emph{value-type}.

@strong{See Also:}

@strong{values}

@strong{Notes:}

The @strong{values} @uref{glo_t.html#type_specifier,@emph{type
specifier}} can be used to indicate the types of
@uref{glo_m.html#multiple_values,@emph{multiple values}}:

@verbatim
 (the (values integer integer) (floor x y))
 (the (values string t)
      (gethash the-key the-string-table))
@end verbatim

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} can be used with
@ref{#the,@strong{the}} type declarations. In this case the declaration
is transferred to the form that specifies the new value. The resulting
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}
@uref{glo_f.html#form,@emph{form}} is then analyzed.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss203.html,JUN90-TRIVIAL-ISSUES:27}
@item
@uref{../Issues/iss347.html,THE-AMBIGUITY:FOR-DECLARATION}
@item
@uref{../Issues/iss348.html,THE-VALUES:RETURN-NUMBER-RECEIVED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Symbol DECLARE
@subsubsection CLHS: Symbol DECLARE
@anchor{#clhs-symbol-declare}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_declaim.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{dec_ignorecm_ignorable.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Symbol} @strong{DECLARE}

@strong{Syntax:}

@strong{declare} @emph{@emph{declaration-specifier}@strong{*}}

@strong{Arguments:}

@emph{declaration-specifier}---a
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}};
not evaluated.

@strong{Description:}

A @ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}, sometimes called a
@uref{glo_d.html#declaration,@emph{declaration}}, can occur only at the
beginning of the bodies of certain @uref{glo_f.html#form,@emph{forms}};
that is, it may be preceded only by other
@ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expressions}}, or by a
@uref{glo_d.html#documentation_string,@emph{documentation string}} if
the context permits.

A @ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}} can occur in a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}} or in any
of the @uref{glo_f.html#form,@emph{forms}} listed in the next figure.

@verbatim
defgeneric                 do-external-symbols   prog                      
define-compiler-macro      do-symbols            prog*                     
define-method-combination  dolist                restart-case              
define-setf-expander       dotimes               symbol-macrolet           
defmacro                   flet                  with-accessors            
defmethod                  handler-case          with-hash-table-iterator  
defsetf                    labels                with-input-from-string    
deftype                    let                   with-open-file            
defun                      let*                  with-open-stream          
destructuring-bind         locally               with-output-to-string     
do                         macrolet              with-package-iterator     
do*                        multiple-value-bind   with-slots                
do-all-symbols             pprint-logical-block                            
@end verbatim

@strong{Figure 3-23. Standardized Forms In Which Declarations Can Occur}

A @ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}} can only occur where
specified by the syntax of these @uref{glo_f.html#form,@emph{forms}}.
The consequences of attempting to evaluate a
@ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}} are undefined. In
situations where such @uref{glo_e.html#expression,@emph{expressions}}
can appear, explicit checks are made for their presence and they are
never actually evaluated; it is for this reason that they are called
``@ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expressions}}'' rather than
``@ref{#declare,@strong{declare}} @uref{glo_f.html#form,@emph{forms}}.''

@uref{glo_m.html#macro_form,@emph{Macro forms}} cannot expand into
declarations; @ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expressions}} must appear as actual
@uref{glo_s.html#subexpression,@emph{subexpressions}} of the
@uref{glo_f.html#form,@emph{form}} to which they refer.

The next figure shows a list of
@uref{glo_d.html#declaration_identifier,@emph{declaration identifiers}}
that can be used with @ref{#declare,@strong{declare}}.

@verbatim
dynamic-extent  ignore     optimize  
ftype           inline     special   
ignorable       notinline  type      
@end verbatim

@strong{Figure 3-24. Local Declaration Specifiers}

An implementation is free to support other
(@uref{glo_i.html#implementation-defined,@emph{implementation-defined}})
@uref{glo_d.html#declaration_identifier,@emph{declaration identifiers}}
as well.

@strong{Examples:}

@verbatim
 (defun nonsense (k x z)
   (foo z x)                     ;First call to foo
   (let ((j (foo k x))           ;Second call to foo
         (x (* k k)))
     (declare (inline foo) (special x z))
     (foo x j z)))               ;Third call to foo
@end verbatim

In this example, the
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}} declaration
applies only to the third call to foo, but not to the first or second
ones. The @uref{dec_special.html#special,@strong{special}} declaration
of x causes @uref{speope_letcm_letst.html#let,@strong{let}} to make a
dynamic @uref{glo_b.html#binding,@emph{binding}} for x, and causes the
reference to x in the body of
@uref{speope_letcm_letst.html#let,@strong{let}} to be a dynamic
reference. The reference to x in the second call to foo is a local
reference to the second parameter of nonsense. The reference to x in the
first call to foo is a local reference, not a
@uref{dec_special.html#special,@strong{special}} one. The
@uref{dec_special.html#special,@strong{special}} declaration of z causes
the reference to z in the third call to foo to be a dynamic reference;
it does not refer to the parameter to nonsense named z, because that
parameter @uref{glo_b.html#binding,@emph{binding}} has not been declared
to be @uref{dec_special.html#special,@strong{special}}. (The
@uref{dec_special.html#special,@strong{special}} declaration of z does
not appear in the body of @uref{mac_defun.html#defun,@strong{defun}},
but in an inner @uref{glo_f.html#form,@emph{form}}, and therefore does
not affect the @uref{glo_b.html#binding,@emph{binding}} of the
@uref{glo_p.html#parameter,@emph{parameter}}.)

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The consequences of trying to use a @ref{#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}} as a
@uref{glo_f.html#form,@emph{form}} to be @emph{evaluated} are undefined.

@strong{See Also:}

@uref{fun_proclaim.html#proclaim,@strong{proclaim}},
@uref{sec_4-2-3.html,Section 4.2.3 (Type Specifiers)},
@uref{dec_declaration.html#declaration,@strong{declaration}},
@uref{dec_dynamic-extent.html#dynamic-extent,@strong{dynamic-extent}},
@uref{dec_ftype.html#ftype,@strong{ftype}},
@uref{dec_ignorecm_ignorable.html#ignorable,@strong{ignorable}},
@uref{dec_ignorecm_ignorable.html#ignore,@strong{ignore}},
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}},
@uref{dec_inlinecm_notinline.html#notinline,@strong{notinline}},
@uref{dec_optimize.html#optimize,@strong{optimize}},
@uref{dec_type.html#type,@strong{type}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss094.html,DECLARE-FUNCTION-AMBIGUITY:DELETE-FTYPE-ABBREVIATION}
@item
@uref{../Issues/iss142.html,DYNAMIC-EXTENT:NEW-DECLARATION}
@item
@uref{../Issues/iss095.html,DECLARE-MACROS:FLUSH}
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss338.html,SYMBOL-MACROLET-DECLARE:ALLOW}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *MACROEXPAND-HOOK*
@subsubsection CLHS: Variable *MACROEXPAND-HOOK*
@anchor{#clhs-variable-macroexpand-hook}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_symbol-macrolet.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_evalu_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_proclaim.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*MACROEXPAND-HOOK*}

@strong{Value Type:}

a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of three
@uref{glo_a.html#argument,@emph{arguments}}: a
@uref{glo_m.html#macro_function,@emph{macro function}}, a
@uref{glo_m.html#macro_form,@emph{macro form}}, and an
@uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Initial Value:}

a @uref{glo_d.html#designator,@emph{designator}} for a function that is
equivalent to the @uref{glo_f.html#function,@emph{function}}
@uref{fun_funcall.html#funcall,@strong{funcall}}, but that might have
additional
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
side-effects.

@strong{Description:}

Used as the expansion interface hook by
@uref{fun_macroexpa_acroexpand-1.html#macroexpand-1,@strong{macroexpand-1}}
to control the @uref{glo_m.html#macro_expansion,@emph{macro expansion}}
process. When a @uref{glo_m.html#macro_form,@emph{macro form}} is to be
expanded, this @uref{glo_f.html#function,@emph{function}} is called with
three arguments: the @uref{glo_m.html#macro_function,@emph{macro
function}}, the @uref{glo_m.html#macro_form,@emph{macro form}}, and the
@uref{glo_e.html#environment,@emph{environment}} in which the
@uref{glo_m.html#macro_form,@emph{macro form}} is to be expanded. The
@uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}} has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; the consequences
are undefined if the @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}} is referred to outside the
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} of the macro
expansion function.

@strong{Examples:}

@verbatim
 (defun hook (expander form env)
    (format t "Now expanding: ~S~%" form)
    (funcall expander form env)) =>  HOOK 
 (defmacro machook (x y) `(/ (+ ,x ,y) 2)) =>  MACHOOK 
 (macroexpand '(machook 1 2)) =>  (/ (+ 1 2) 2), true 
 (let ((*macroexpand-hook* #'hook)) (macroexpand '(machook 1 2)))
>>  Now expanding (MACHOOK 1 2) 
=>  (/ (+ 1 2) 2), true
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_macroexpa_acroexpand-1.html#macroexpand,@strong{macroexpand}},
@uref{fun_macroexpa_acroexpand-1.html#macroexpand-1,@strong{macroexpand-1}},
@uref{fun_funcall.html#funcall,@strong{funcall}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

The net effect of the chosen initial value is to just invoke the
@uref{glo_m.html#macro_function,@emph{macro function}}, giving it the
@uref{glo_m.html#macro_form,@emph{macro form}} and
@uref{glo_e.html#environment,@emph{environment}} as its two arguments.

Users or user programs can @uref{glo_a.html#assign,@emph{assign}} this
@uref{glo_v.html#variable,@emph{variable}} to customize or trace the
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} mechanism.
Note, however, that this @uref{glo_v.html#variable,@emph{variable}} is a
global resource, potentially shared by multiple
@uref{glo_p.html#program,@emph{programs}}; as such, if any two
@uref{glo_p.html#program,@emph{programs}} depend for their correctness
on the setting of this @uref{glo_v.html#variable,@emph{variable}}, those
@uref{glo_p.html#program,@emph{programs}} may not be able to run in the
same @uref{glo_l.html#lisp_image,@emph{Lisp image}}. For this reason, it
is frequently best to confine its uses to debugging situations.

Users who put their own function into
@ref{#STmacroexpand-hookST,@strong{*macroexpand-hook*}} should consider
saving the previous value of the hook, and calling that value from their
own.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss229.html,MACRO-ENVIRONMENT-EXTENT:DYNAMIC}
@item
@uref{../Issues/iss234.html,MACROEXPAND-HOOK-INITIAL-VALUE:IMPLEMENTATION-DEPENDENT}
@item
@uref{../Issues/iss233.html,MACROEXPAND-HOOK-DEFAULT:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 4
@section CLHS: Chapter 4
@anchor{#clhs-chapter-4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_constantp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4. Types and Classes

@uref{sec_4-1.html,}

4.1 Introduction

@uref{sec_4-2.html,}

4.2 Types

@uref{sec_4-3.html,}

4.3 Classes

@uref{sec_the_types_s_dictionary.html,}

4.4 The Types and Classes Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 42::
* CLHS Section 43::
* CLHS Section The Types and Classes Dictionary::
@end menu

@node CLHS Section 42
@subsection CLHS: Section 4.2
@anchor{#clhs-section-4.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.2 Types

@uref{sec_4-2-1.html,}

4.2.1 Data Type Definition

@uref{sec_4-2-2.html,}

4.2.2 Type Relationships

@uref{sec_4-2-3.html,}

4.2.3 Type Specifiers

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 422::
* CLHS Section 423::
@end menu

@node CLHS Section 422
@subsubsection CLHS: Section 4.2.2
@anchor{#clhs-section-4.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.2.2 Type Relationships

* The @uref{glo_t.html#type,@emph{types}}
@uref{syscla_cons.html#cons,@strong{cons}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{syscla_array.html#array,@strong{array}},
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_character.html#character,@strong{character}},
@uref{syscla_hash-table.html#hash-table,@strong{hash-table}},
@uref{syscla_function.html#function,@strong{function}},
@uref{syscla_readtable.html#readtable,@strong{readtable}},
@uref{syscla_package.html#package,@strong{package}},
@uref{syscla_pathname.html#pathname,@strong{pathname}},
@uref{syscla_stream.html#stream,@strong{stream}},
@uref{syscla_random-state.html#random-state,@strong{random-state}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_restart.html#restart,@strong{restart}}, and any single
other @uref{glo_t.html#type,@emph{type}} created by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}},
@uref{mac_define-condition.html#define-condition,@strong{define-condition}},
or @uref{mac_defclass.html#defclass,@strong{defclass}} are
@uref{glo_p.html#pairwise,@emph{pairwise}}
@uref{glo_d.html#disjoint,@emph{disjoint}}, except for type relations
explicitly established by specifying
@uref{glo_s.html#superclass,@emph{superclasses}} in
@uref{mac_defclass.html#defclass,@strong{defclass}} or
@uref{mac_define-condition.html#define-condition,@strong{define-condition}}
or the :include option of @strong{destruct}.

* Any two @uref{glo_t.html#type,@emph{types}} created by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} are
@uref{glo_d.html#disjoint,@emph{disjoint}} unless one is a
@uref{glo_s.html#supertype,@emph{supertype}} of the other by virtue of
the @uref{mac_defstruct.html#defstruct,@strong{defstruct}} :include
option.

* Any two @uref{glo_d.html#distinct,@emph{distinct}}
@uref{glo_c.html#class,@emph{classes}} created by
@uref{mac_defclass.html#defclass,@strong{defclass}} or
@uref{mac_define-condition.html#define-condition,@strong{define-condition}}
are @uref{glo_d.html#disjoint,@emph{disjoint}} unless they have a common
@uref{glo_s.html#subclass,@emph{subclass}} or one
@uref{glo_c.html#class,@emph{class}} is a
@uref{glo_s.html#subclass,@emph{subclass}} of the other.

* An implementation may be extended to add other
@uref{glo_s.html#subtype,@emph{subtype}} relationships between the
specified @uref{glo_t.html#type,@emph{types}}, as long as they do not
violate the type relationships and disjointness requirements specified
here. An implementation may define additional
@uref{glo_t.html#type,@emph{types}} that are
@uref{glo_s.html#subtype,@emph{subtypes}} or
@uref{glo_s.html#supertype,@emph{supertypes}} of any specified
@uref{glo_t.html#type,@emph{types}}, as long as each additional
@uref{glo_t.html#type,@emph{type}} is a
@uref{glo_s.html#subtype,@emph{subtype}} of
@uref{glo_t.html#type,@emph{type}} @uref{syscla_t.html#t,@strong{t}} and
a @uref{glo_s.html#supertype,@emph{supertype}} of
@uref{glo_t.html#type,@emph{type}} @uref{typ_nil.html#nil,@strong{nil}}
and the disjointness requirements are not violated.

At the discretion of the implementation, either
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
or
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}
might appear in any class precedence list for a
@uref{glo_s.html#system_class,@emph{system class}} that does not already
specify either
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
or
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}.
If it does, it must precede the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}} and follow all other
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_c.html#class,@emph{classes}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss057.html,COMMON-TYPE:REMOVE}
@item
@uref{../Issues/iss049.html,CLOS-CONDITIONS:INTEGRATE}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss090.html,DATA-TYPES-HIERARCHY-UNDERSPECIFIED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 423
@subsubsection CLHS: Section 4.2.3
@anchor{#clhs-section-4.2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.2.3 Type Specifiers

@uref{glo_t.html#type_specifier,@emph{Type specifiers}} can be
@uref{glo_s.html#symbol,@emph{symbols}},
@uref{glo_c.html#class,@emph{classes}}, or
@uref{glo_l.html#list,@emph{lists}}.
@ref{#standardizedatomictypespecs,Figure 4-2} lists
@uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifiers}},
and @ref{#standardizedcompoundtypespecnames,Figure 4-3} lists
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_c.html#compound_type_specifier,@emph{compound type specifier}}
@uref{glo_n.html#name,@emph{names}}. For syntax information, see the
dictionary entry for the corresponding
@uref{glo_t.html#type_specifier,@emph{type specifier}}. It is possible
to define new @uref{glo_t.html#type_specifier,@emph{type specifiers}}
using @uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{mac_define-condition.html#define-condition,@strong{define-condition}},
@uref{mac_defstruct.html#defstruct,@strong{defstruct}}, or
@uref{mac_deftype.html#deftype,@strong{deftype}}.

@verbatim
arithmetic-error                  function            simple-condition           
array                             generic-function    simple-error               
atom                              hash-table          simple-string              
base-char                         integer             simple-type-error          
base-string                       keyword             simple-vector              
bignum                            list                simple-warning             
bit                               logical-pathname    single-float               
bit-vector                        long-float          standard-char              
broadcast-stream                  method              standard-class             
built-in-class                    method-combination  standard-generic-function  
cell-error                        nil                 standard-method            
character                         null                standard-object            
class                             number              storage-condition          
compiled-function                 package             stream                     
complex                           package-error       stream-error               
concatenated-stream               parse-error         string                     
condition                         pathname            string-stream              
cons                              print-not-readable  structure-class            
control-error                     program-error       structure-object           
division-by-zero                  random-state        style-warning              
double-float                      ratio               symbol                     
echo-stream                       rational            synonym-stream             
end-of-file                       reader-error        t                          
error                             readtable           two-way-stream             
extended-char                     real                type-error                 
file-error                        restart             unbound-slot               
file-stream                       sequence            unbound-variable           
fixnum                            serious-condition   undefined-function         
float                             short-float         unsigned-byte              
floating-point-inexact            signed-byte         vector                     
floating-point-invalid-operation  simple-array        warning                    
floating-point-overflow           simple-base-string                             
floating-point-underflow          simple-bit-vector                              
@end verbatim

@strong{Figure 4-2. Standardized Atomic Type Specifiers}

If a @uref{glo_t.html#type_specifier,@emph{type specifier}} is a
@uref{glo_l.html#list,@emph{list}}, the @uref{glo_c.html#car,@emph{car}}
of the @uref{glo_l.html#list,@emph{list}} is a
@uref{glo_s.html#symbol,@emph{symbol}}, and the rest of the
@uref{glo_l.html#list,@emph{list}} is subsidiary
@uref{glo_t.html#type,@emph{type}} information. Such a
@uref{glo_t.html#type_specifier,@emph{type specifier}} is called a
@uref{glo_c.html#compound_type_specifier,@emph{compound type
specifier}}. Except as explicitly stated otherwise, the subsidiary items
can be unspecified. The unspecified subsidiary items are indicated by
writing *. For example, to completely specify a
@uref{glo_v.html#vector,@emph{vector}}, the
@uref{glo_t.html#type,@emph{type}} of the elements and the length of the
@uref{glo_v.html#vector,@emph{vector}} must be present.

@verbatim
 (vector double-float 100)
@end verbatim

The following leaves the length unspecified:

@verbatim
 (vector double-float *)
@end verbatim

The following leaves the element type unspecified:

@verbatim
 (vector * 100)                                      
@end verbatim

Suppose that two @uref{glo_t.html#type_specifier,@emph{type specifiers}}
are the same except that the first has a * where the second has a more
explicit specification. Then the second denotes a
@uref{glo_s.html#subtype,@emph{subtype}} of the
@uref{glo_t.html#type,@emph{type}} denoted by the first.

If a @uref{glo_l.html#list,@emph{list}} has one or more unspecified
items at the end, those items can be dropped. If dropping all
occurrences of * results in a
@uref{glo_s.html#singleton,@emph{singleton}}
@uref{glo_l.html#list,@emph{list}}, then the parentheses can be dropped
as well (the list can be replaced by the
@uref{glo_s.html#symbol,@emph{symbol}} in its
@uref{glo_c.html#car,@emph{car}}). For example, (vector double-float *)
can be abbreviated to (vector double-float), and (vector * *) can be
abbreviated to (vector) and then to vector.

@verbatim
and           long-float    simple-base-string  
array         member        simple-bit-vector   
base-string   mod           simple-string       
bit-vector    not           simple-vector       
complex       or            single-float        
cons          rational      string              
double-float  real          unsigned-byte       
eql           satisfies     values              
float         short-float   vector              
function      signed-byte                       
integer       simple-array                      
@end verbatim

@strong{Figure 4-3. Standardized Compound Type Specifier Names}

The next figure show the @uref{glo_d.html#defined_name,@emph{defined
names}} that can be used as
@uref{glo_c.html#compound_type_specifier,@emph{compound type specifier}}
@uref{glo_n.html#name,@emph{names}} but that cannot be used as
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifiers}}.

@verbatim
and     mod  satisfies  
eql     not  values     
member  or              
@end verbatim

@strong{Figure 4-4. Standardized Compound-Only Type Specifier Names}

New @uref{glo_t.html#type_specifier,@emph{type specifiers}} can come
into existence in two ways.

* Defining a structure by using
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} without using the
:type specifier or defining a @uref{glo_c.html#class,@emph{class}} by
using @uref{mac_defclass.html#defclass,@strong{defclass}} or
@uref{mac_define-condition.html#define-condition,@strong{define-condition}}
automatically causes the name of the structure or class to be a new
@uref{glo_t.html#type_specifier,@emph{type specifier}}
@uref{glo_s.html#symbol,@emph{symbol}}.

* @uref{mac_deftype.html#deftype,@strong{deftype}} can be used to define
@uref{glo_d.html#derived_type_specifier,@emph{derived type specifiers}},
which act as `abbreviations' for other
@uref{glo_t.html#type_specifier,@emph{type specifiers}}.

A @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} can be used as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}. When used this
way, it denotes the set of all members of that
@uref{glo_c.html#class,@emph{class}}.

The next figure shows some @uref{glo_d.html#defined_name,@emph{defined
names}} relating to @uref{glo_t.html#type,@emph{types}} and
@uref{glo_d.html#declaration,@emph{declarations}}.

@verbatim
coerce            defstruct  subtypep  
declaim           deftype    the       
declare           ftype      type      
defclass          locally    type-of   
define-condition  proclaim   typep     
@end verbatim

@strong{Figure 4-5. Defined names relating to types and declarations.}

The next figure shows all @uref{glo_d.html#defined_name,@emph{defined
names}} that are @uref{glo_t.html#type_specifier,@emph{type specifier}}
@uref{glo_n.html#name,@emph{names}}, whether for
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifiers}} or
@uref{glo_c.html#compound_type_specifier,@emph{compound type
specifiers}}; this list is the union of the lists in
@ref{#standardizedatomictypespecs,Figure 4-2} and
@ref{#standardizedcompoundtypespecnames,Figure 4-3}.

@verbatim
and                               function            simple-array               
arithmetic-error                  generic-function    simple-base-string         
array                             hash-table          simple-bit-vector          
atom                              integer             simple-condition           
base-char                         keyword             simple-error               
base-string                       list                simple-string              
bignum                            logical-pathname    simple-type-error          
bit                               long-float          simple-vector              
bit-vector                        member              simple-warning             
broadcast-stream                  method              single-float               
built-in-class                    method-combination  standard-char              
cell-error                        mod                 standard-class             
character                         nil                 standard-generic-function  
class                             not                 standard-method            
compiled-function                 null                standard-object            
complex                           number              storage-condition          
concatenated-stream               or                  stream                     
condition                         package             stream-error               
cons                              package-error       string                     
control-error                     parse-error         string-stream              
division-by-zero                  pathname            structure-class            
double-float                      print-not-readable  structure-object           
echo-stream                       program-error       style-warning              
end-of-file                       random-state        symbol                     
eql                               ratio               synonym-stream             
error                             rational            t                          
extended-char                     reader-error        two-way-stream             
file-error                        readtable           type-error                 
file-stream                       real                unbound-slot               
fixnum                            restart             unbound-variable           
float                             satisfies           undefined-function         
floating-point-inexact            sequence            unsigned-byte              
floating-point-invalid-operation  serious-condition   values                     
floating-point-overflow           short-float         vector                     
floating-point-underflow          signed-byte         warning                    
@end verbatim

@strong{Figure 4-6. Standardized Type Specifier Names}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@item
@uref{../Issues/iss327.html,STREAM-ACCESS:ADD-TYPES-ACCESSORS}
@item
@uref{../Issues/iss046.html,CHARACTER-VS-CHAR:LESS-INCONSISTENT-SHORT}
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 43
@subsection CLHS: Section 4.3
@anchor{#clhs-section-4.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3 Classes

While the object system is general enough to describe all
@uref{glo_s.html#standardized,@emph{standardized}}
@uref{glo_c.html#class,@emph{classes}} (including, for example,
@uref{syscla_number.html#number,@strong{number}},
@uref{syscla_hash-table.html#hash-table,@strong{hash-table}}, and
@uref{syscla_symbol.html#symbol,@strong{symbol}}), the next figure
contains a list of @uref{glo_c.html#class,@emph{classes}} that are
especially relevant to understanding the object system.

@verbatim
built-in-class    method-combination         standard-object   
class             standard-class             structure-class   
generic-function  standard-generic-function  structure-object  
method            standard-method                              
@end verbatim

@strong{Figure 4-7. Object System Classes}

@uref{sec_4-3-1.html,}

4.3.1 Introduction to Classes

@uref{sec_4-3-1-1.html,}

4.3.1.1 Standard Metaclasses

@uref{sec_4-3-2.html,}

4.3.2 Defining Classes

@uref{sec_4-3-3.html,}

4.3.3 Creating Instances of Classes

@uref{sec_4-3-4.html,}

4.3.4 Inheritance

@uref{sec_4-3-5.html,}

4.3.5 Determining the Class Precedence List

@uref{sec_4-3-6.html,}

4.3.6 Redefining Classes

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 4311::
* CLHS Section 432::
* CLHS Section 433::
* CLHS Section 434::
* CLHS Section 435::
* CLHS Section 436::
@end menu

@node CLHS Section 4311
@subsubsection CLHS: Section 4.3.1.1
@anchor{#clhs-section-4.3.1.1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-2.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.1.1 Standard Metaclasses

The object system provides a number of predefined
@uref{glo_m.html#metaclass,@emph{metaclasses}}. These include the
@uref{glo_c.html#class,@emph{classes}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}},
and
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}:

* The @uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}
is the default @uref{glo_c.html#class,@emph{class}} of
@uref{glo_c.html#class,@emph{classes}} defined by
@uref{mac_defclass.html#defclass,@strong{defclass}}.

* The @uref{glo_c.html#class,@emph{class}}
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}
is the @uref{glo_c.html#class,@emph{class}} whose
@uref{glo_i.html#instance,@emph{instances}} are
@uref{glo_c.html#class,@emph{classes}} that have special implementations
with restricted capabilities. Any @uref{glo_c.html#class,@emph{class}}
that corresponds to a standard @uref{glo_t.html#type,@emph{type}} might
be an @uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}.
The predefined @uref{glo_t.html#type,@emph{type}} specifiers that are
required to have corresponding @uref{glo_c.html#class,@emph{classes}}
are listed in @uref{sec_4-3-7.html#classtypecorrespondence,Figure 4-8}.
It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether each of these @uref{glo_c.html#class,@emph{classes}} is
implemented as a @uref{glo_b.html#built-in_class,@emph{built-in class}}.

* All @uref{glo_c.html#class,@emph{classes}} defined by means of
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} are
@uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 432
@subsubsection CLHS: Section 4.3.2
@anchor{#clhs-section-4.3.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-1-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.2 Defining Classes

The macro @uref{mac_defclass.html#defclass,@strong{defclass}} is used to
define a new named @uref{glo_c.html#class,@emph{class}}.

The definition of a @uref{glo_c.html#class,@emph{class}} includes:

* The @uref{glo_n.html#name,@emph{name}} of the new
@uref{glo_c.html#class,@emph{class}}. For newly-defined
@uref{glo_c.html#class,@emph{classes}} this
@uref{glo_n.html#name,@emph{name}} is a
@uref{glo_p.html#proper_name,@emph{proper name}}.

* The list of the direct
@uref{glo_s.html#superclass,@emph{superclasses}} of the new
@uref{glo_c.html#class,@emph{class}}.

* A set of @uref{glo_s.html#slot_specifier,@emph{slot specifiers}}. Each
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} includes the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_s.html#slot,@emph{slot}} and zero or more
@uref{glo_s.html#slot,@emph{slot}} options. A
@uref{glo_s.html#slot,@emph{slot}} option pertains only to a single
@uref{glo_s.html#slot,@emph{slot}}. If a
@uref{glo_c.html#class,@emph{class}} definition contains two
@uref{glo_s.html#slot_specifier,@emph{slot specifiers}} with the same
@uref{glo_n.html#name,@emph{name}}, an error is signaled.

* A set of @uref{glo_c.html#class,@emph{class}} options. Each
@uref{glo_c.html#class,@emph{class}} option pertains to the
@uref{glo_c.html#class,@emph{class}} as a whole.

The @uref{glo_s.html#slot,@emph{slot}} options and
@uref{glo_c.html#class,@emph{class}} options of the
@uref{mac_defclass.html#defclass,@strong{defclass}} form provide
mechanisms for the following:

* Supplying a default initial value @uref{glo_f.html#form,@emph{form}}
for a given @uref{glo_s.html#slot,@emph{slot}}.

* Requesting that @uref{glo_m.html#method,@emph{methods}} for
@uref{glo_g.html#generic_function,@emph{generic functions}} be
automatically generated for reading or writing
@uref{glo_s.html#slot,@emph{slots}}.

* Controlling whether a given @uref{glo_s.html#slot,@emph{slot}} is
shared by all @uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{class}} or whether each
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}} has its own
@uref{glo_s.html#slot,@emph{slot}}.

* Supplying a set of initialization arguments and initialization
argument defaults to be used in
@uref{glo_i.html#instance,@emph{instance}} creation.

* Indicating that the @uref{glo_m.html#metaclass,@emph{metaclass}} is to
be other than the default. The :metaclass option is reserved for future
use; an implementation can be extended to make use of the :metaclass
option.

* Indicating the expected @uref{glo_t.html#type,@emph{type}} for the
value stored in the @uref{glo_s.html#slot,@emph{slot}}.

* Indicating the
@uref{glo_d.html#documentation_string,@emph{documentation string}} for
the @uref{glo_s.html#slot,@emph{slot}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 433
@subsubsection CLHS: Section 4.3.3
@anchor{#clhs-section-4.3.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.3 Creating Instances of Classes

The generic function
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
creates and returns a new @uref{glo_i.html#instance,@emph{instance}} of
a @uref{glo_c.html#class,@emph{class}}. The object system provides
several mechanisms for specifying how a new
@uref{glo_i.html#instance,@emph{instance}} is to be initialized. For
example, it is possible to specify the initial values for
@uref{glo_s.html#slot,@emph{slots}} in newly created
@uref{glo_i.html#instance,@emph{instances}} either by giving arguments
to
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
or by providing default initial values. Further initialization
activities can be performed by @uref{glo_m.html#method,@emph{methods}}
written for @uref{glo_g.html#generic_function,@emph{generic functions}}
that are part of the initialization protocol. The complete
initialization protocol is described in @uref{sec_7-1.html,Section 7.1
(Object Creation and Initialization)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 434
@subsubsection CLHS: Section 4.3.4
@anchor{#clhs-section-4.3.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.4 Inheritance

A @uref{glo_c.html#class,@emph{class}} can inherit
@uref{glo_m.html#method,@emph{methods}},
@uref{glo_s.html#slot,@emph{slots}}, and some
@uref{mac_defclass.html#defclass,@strong{defclass}} options from its
@uref{glo_s.html#superclass,@emph{superclasses}}. Other sections
describe the inheritance of @uref{glo_m.html#method,@emph{methods}}, the
inheritance of @uref{glo_s.html#slot,@emph{slots}} and
@uref{glo_s.html#slot,@emph{slot}} options, and the inheritance of
@uref{glo_c.html#class,@emph{class}} options.

@uref{sec_4-3-4-1.html,}

4.3.4.1 Examples of Inheritance

@uref{sec_4-3-4-2.html,}

4.3.4.2 Inheritance of Class Options

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 4.3.4.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.4.2 Inheritance of Class Options

The :default-initargs class option is inherited. The set of defaulted
initialization arguments for a @uref{glo_c.html#class,@emph{class}} is
the union of the sets of initialization arguments supplied in the
:default-initargs class options of the
@uref{glo_c.html#class,@emph{class}} and its
@uref{glo_s.html#superclass,@emph{superclasses}}. When more than one
default initial value @uref{glo_f.html#form,@emph{form}} is supplied for
a given initialization argument, the default initial value
@uref{glo_f.html#form,@emph{form}} that is used is the one supplied by
the @uref{glo_c.html#class,@emph{class}} that is most specific according
to the @uref{glo_c.html#class_precedence_list,@emph{class precedence
list}}.

If a given :default-initargs class option specifies an initialization
argument of the same @uref{glo_n.html#name,@emph{name}} more than once,
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 435
@subsubsection CLHS: Section 4.3.5
@anchor{#clhs-section-4.3.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-4-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.5 Determining the Class Precedence List

The @uref{mac_defclass.html#defclass,@strong{defclass}} form for a
@uref{glo_c.html#class,@emph{class}} provides a total ordering on that
@uref{glo_c.html#class,@emph{class}} and its direct
@uref{glo_s.html#superclass,@emph{superclasses}}. This ordering is
called the @uref{glo_l.html#local_precedence_order,@emph{local
precedence order}}. It is an ordered list of the
@uref{glo_c.html#class,@emph{class}} and its direct
@uref{glo_s.html#superclass,@emph{superclasses}}. The
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} for
a class C is a total ordering on C and its
@uref{glo_s.html#superclass,@emph{superclasses}} that is consistent with
the @uref{glo_l.html#local_precedence_order,@emph{local precedence
orders}} for each of C and its
@uref{glo_s.html#superclass,@emph{superclasses}}.

A @uref{glo_c.html#class,@emph{class}} precedes its direct
@uref{glo_s.html#superclass,@emph{superclasses}}, and a direct
@uref{glo_s.html#superclass,@emph{superclass}} precedes all other direct
@uref{glo_s.html#superclass,@emph{superclasses}} specified to its right
in the @uref{glo_s.html#superclass,@emph{superclasses}} list of the
@uref{mac_defclass.html#defclass,@strong{defclass}} form. For every
class C, define

RC=@{(C,C1),(C1,C2),...,(Cn-1,Cn)@}

where C1,...,Cn are the direct
@uref{glo_s.html#superclass,@emph{superclasses}} of C in the order in
which they are mentioned in the
@uref{mac_defclass.html#defclass,@strong{defclass}} form. These ordered
pairs generate the total ordering on the class C and its direct
@uref{glo_s.html#superclass,@emph{superclasses}}.

Let SC be the set of C and its
@uref{glo_s.html#superclass,@emph{superclasses}}. Let R be

R=Uc<ELEMENT-OF>SCRc

.

The set R might or might not generate a partial ordering, depending on
whether the Rc, c<ELEMENT-OF>SC, are consistent; it is assumed that they
are consistent and that R generates a partial ordering. When the Rc are
not consistent, it is said that R is inconsistent.

To compute the @uref{glo_c.html#class_precedence_list,@emph{class
precedence list}} for C, topologically sort the elements of SC with
respect to the partial ordering generated by R. When the topological
sort must select a @uref{glo_c.html#class,@emph{class}} from a set of
two or more @uref{glo_c.html#class,@emph{classes}}, none of which are
preceded by other @uref{glo_c.html#class,@emph{classes}} with respect to
R, the @uref{glo_c.html#class,@emph{class}} selected is chosen
deterministically, as described below.

If R is inconsistent, an error is signaled.

@uref{sec_4-3-5-1.html,}

4.3.5.1 Topological Sorting

@uref{sec_4-3-5-2.html,}

4.3.5.2 Examples of Class Precedence List Determination

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 4.3.5.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-5-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.5.2 Examples of Class Precedence List Determination

This example determines a
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} for
the class pie. The following @uref{glo_c.html#class,@emph{classes}} are
defined:

@verbatim
 (defclass pie (apple cinnamon) ())
 
 (defclass apple (fruit) ())
 
 (defclass cinnamon (spice) ())
 
 (defclass fruit (food) ())

 (defclass spice (food) ())

 (defclass food () ())
@end verbatim

The set Spie = @{pie, apple, cinnamon, fruit, spice, food,
standard-object, t@}. The set R = @{(pie, apple), (apple, cinnamon),
(apple, fruit), (cinnamon, spice),@*
(fruit, food), (spice, food), (food, standard-object), (standard-object,
t)@}.

The class pie is not preceded by anything, so it comes first; the result
so far is (pie). Remove pie from S and pairs mentioning pie from R to
get S = @{apple, cinnamon, fruit, spice, food, standard-object, t@} and
R = @{(apple, cinnamon), (apple, fruit), (cinnamon, spice),@*
(fruit, food), (spice, food), (food, standard-object), (standard-object,
t)@}.

The class apple is not preceded by anything, so it is next; the result
is (pie apple). Removing apple and the relevant pairs results in S =
@{cinnamon, fruit, spice, food, standard-object, t@} and R =
@{(cinnamon, spice), (fruit, food), (spice, food), (food,
standard-object),@*
(standard-object, t)@}.

The classes cinnamon and fruit are not preceded by anything, so the one
with a direct @uref{glo_s.html#subclass,@emph{subclass}} rightmost in
the @uref{glo_c.html#class_precedence_list,@emph{class precedence list}}
computed so far goes next. The class apple is a direct
@uref{glo_s.html#subclass,@emph{subclass}} of fruit, and the class pie
is a direct @uref{glo_s.html#subclass,@emph{subclass}} of cinnamon.
Because apple appears to the right of pie in the
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}},
fruit goes next, and the result so far is (pie apple fruit). S =
@{cinnamon, spice, food, standard-object, t@}; R = @{(cinnamon, spice),
(spice, food),@*
(food, standard-object), (standard-object, t)@}.

The class cinnamon is next, giving the result so far as (pie apple fruit
cinnamon). At this point S = @{spice, food, standard-object, t@}; R =
@{(spice, food), (food, standard-object), (standard-object, t)@}.

The classes spice, food,
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
and @uref{syscla_t.html#t,@strong{t}} are added in that order, and the
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} is
(pie apple fruit cinnamon spice food standard-object t).

It is possible to write a set of @uref{glo_c.html#class,@emph{class}}
definitions that cannot be ordered. For example:

@verbatim
 (defclass new-class (fruit apple) ())
 
 (defclass apple (fruit) ())
@end verbatim

The class fruit must precede apple because the local ordering of
@uref{glo_s.html#superclass,@emph{superclasses}} must be preserved. The
class apple must precede fruit because a
@uref{glo_c.html#class,@emph{class}} always precedes its own
@uref{glo_s.html#superclass,@emph{superclasses}}. When this situation
occurs, an error is signaled, as happens here when the system tries to
compute the @uref{glo_c.html#class_precedence_list,@emph{class
precedence list}} of new-class.

The following might appear to be a conflicting set of definitions:

@verbatim
 (defclass pie (apple cinnamon) ())
 
 (defclass pastry (cinnamon apple) ())
 
 (defclass apple () ())
 
 (defclass cinnamon () ())
@end verbatim

The @uref{glo_c.html#class_precedence_list,@emph{class precedence list}}
for pie is (pie apple cinnamon standard-object t).

The @uref{glo_c.html#class_precedence_list,@emph{class precedence list}}
for pastry is (pastry cinnamon apple standard-object t).

It is not a problem for apple to precede cinnamon in the ordering of the
@uref{glo_s.html#superclass,@emph{superclasses}} of pie but not in the
ordering for pastry. However, it is not possible to build a new
@uref{glo_c.html#class,@emph{class}} that has both pie and pastry as
@uref{glo_s.html#superclass,@emph{superclasses}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 436
@subsubsection CLHS: Section 4.3.6
@anchor{#clhs-section-4.3.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-5-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.6 Redefining Classes

A @uref{glo_c.html#class,@emph{class}} that is a
@uref{glo_d.html#direct_instance,@emph{direct instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}
can be redefined if the new @uref{glo_c.html#class,@emph{class}} is also
a @uref{glo_d.html#direct_instance,@emph{direct instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.
Redefining a @uref{glo_c.html#class,@emph{class}} modifies the existing
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} to reflect the new
@uref{glo_c.html#class,@emph{class}} definition; it does not create a
new @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} for the
@uref{glo_c.html#class,@emph{class}}. Any
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} created by a :reader, :writer, or
:accessor option specified by the old
@uref{mac_defclass.html#defclass,@strong{defclass}} form is removed from
the corresponding @uref{glo_g.html#generic_function,@emph{generic
function}}. @uref{glo_m.html#method,@emph{Methods}} specified by the new
@uref{mac_defclass.html#defclass,@strong{defclass}} form are added.

When the class C is redefined, changes are propagated to its
@uref{glo_i.html#instance,@emph{instances}} and to
@uref{glo_i.html#instance,@emph{instances}} of any of its
@uref{glo_s.html#subclass,@emph{subclasses}}. Updating such an
@uref{glo_i.html#instance,@emph{instance}} occurs at an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
time, but no later than the next time a
@uref{glo_s.html#slot,@emph{slot}} of that
@uref{glo_i.html#instance,@emph{instance}} is read or written. Updating
an @uref{glo_i.html#instance,@emph{instance}} does not change its
identity as defined by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_eq.html#eq,@strong{eq}}. The updating process may change the
@uref{glo_s.html#slot,@emph{slots}} of that particular
@uref{glo_i.html#instance,@emph{instance}}, but it does not create a new
@uref{glo_i.html#instance,@emph{instance}}. Whether updating an
@uref{glo_i.html#instance,@emph{instance}} consumes storage is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

Note that redefining a @uref{glo_c.html#class,@emph{class}} may cause
@uref{glo_s.html#slot,@emph{slots}} to be added or deleted. If a
@uref{glo_c.html#class,@emph{class}} is redefined in a way that changes
the set of @uref{glo_l.html#local_slot,@emph{local slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in
@uref{glo_i.html#instance,@emph{instances}}, the
@uref{glo_i.html#instance,@emph{instances}} are updated. It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @uref{glo_i.html#instance,@emph{instances}} are updated if a
@uref{glo_c.html#class,@emph{class}} is redefined in a way that does not
change the set of @uref{glo_l.html#local_slot,@emph{local slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in
@uref{glo_i.html#instance,@emph{instances}}.

The value of a @uref{glo_s.html#slot,@emph{slot}} that is specified as
shared both in the old @uref{glo_c.html#class,@emph{class}} and in the
new @uref{glo_c.html#class,@emph{class}} is retained. If such a
@uref{glo_s.html#shared_slot,@emph{shared slot}} was unbound in the old
@uref{glo_c.html#class,@emph{class}}, it is unbound in the new
@uref{glo_c.html#class,@emph{class}}.
@uref{glo_s.html#slot,@emph{Slots}} that were local in the old
@uref{glo_c.html#class,@emph{class}} and that are shared in the new
@uref{glo_c.html#class,@emph{class}} are initialized. Newly added
@uref{glo_s.html#shared_slot,@emph{shared slots}} are initialized.

Each newly added @uref{glo_s.html#shared_slot,@emph{shared slot}} is set
to the result of evaluating the
@uref{glo_c.html#captured_initialization_form,@emph{captured
initialization form}} for the @uref{glo_s.html#slot,@emph{slot}} that
was specified in the @uref{mac_defclass.html#defclass,@strong{defclass}}
@uref{glo_f.html#form,@emph{form}} for the new
@uref{glo_c.html#class,@emph{class}}. If there was no
@uref{glo_i.html#initialization_form,@emph{initialization form}}, the
@uref{glo_s.html#slot,@emph{slot}} is unbound.

If a @uref{glo_c.html#class,@emph{class}} is redefined in such a way
that the set of @uref{glo_l.html#local_slot,@emph{local slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}} is changed, a two-step process of
updating the @uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{class}} takes place. The process may be
explicitly started by invoking the generic function
@uref{stagenfun_mak_ces-obsolete.html#make-instances-obsolete,@strong{make-instances-obsolete}}.
This two-step process can happen in other circumstances in some
implementations. For example, in some implementations this two-step
process is triggered if the order of @uref{glo_s.html#slot,@emph{slots}}
in storage is changed.

The first step modifies the structure of the
@uref{glo_i.html#instance,@emph{instance}} by adding new
@uref{glo_l.html#local_slot,@emph{local slots}} and discarding
@uref{glo_l.html#local_slot,@emph{local slots}} that are not defined in
the new version of the @uref{glo_c.html#class,@emph{class}}. The second
step initializes the newly-added @uref{glo_l.html#local_slot,@emph{local
slots}} and performs any other user-defined actions. These two steps are
further specified in the next two sections.

@uref{sec_4-3-6-1.html,}

4.3.6.1 Modifying the Structure of Instances

@uref{sec_4-3-6-2.html,}

4.3.6.2 Initializing Newly Added Local Slots

@uref{sec_4-3-6-3.html,}

4.3.6.3 Customizing Class Redefinition

@uref{sec_4-3-7.html,}

4.3.7 Integrating Types and Classes

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 4.3.6.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-6-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-6-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.6.2 Initializing Newly Added Local Slots

The second step initializes the newly added
@uref{glo_l.html#local_slot,@emph{local slots}} and performs any other
user-defined actions. This step is implemented by the generic function
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}},
which is called after completion of the first step of modifying the
structure of the @uref{glo_i.html#instance,@emph{instance}}.

The generic function
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
takes four required arguments: the
@uref{glo_i.html#instance,@emph{instance}} being updated after it has
undergone the first step, a list of the names of
@uref{glo_l.html#local_slot,@emph{local slots}} that were added, a list
of the names of @uref{glo_l.html#local_slot,@emph{local slots}} that
were discarded, and a property list containing the
@uref{glo_s.html#slot,@emph{slot}} names and values of
@uref{glo_s.html#slot,@emph{slots}} that were discarded and had values.
Included among the discarded @uref{glo_s.html#slot,@emph{slots}} are
@uref{glo_s.html#slot,@emph{slots}} that were local in the old
@uref{glo_c.html#class,@emph{class}} and that are shared in the new
@uref{glo_c.html#class,@emph{class}}.

The generic function
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
also takes any number of initialization arguments. When it is called by
the system to update an @uref{glo_i.html#instance,@emph{instance}} whose
@uref{glo_c.html#class,@emph{class}} has been redefined, no
initialization arguments are provided.

There is a system-supplied primary
@uref{glo_m.html#method,@emph{method}} for
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
whose @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} for its @uref{glo_i.html#instance,@emph{instance}}
argument is the @uref{glo_c.html#class,@emph{class}}
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}.
First this @uref{glo_m.html#method,@emph{method}} checks the validity of
initialization arguments and signals an error if an initialization
argument is supplied that is not declared as valid. (For more
information, see @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the
Validity of Initialization Arguments)}.) Then it calls the generic
function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the
@uref{glo_i.html#instance,@emph{instance}}, the list of
@uref{glo_n.html#name,@emph{names}} of the newly added
@uref{glo_s.html#slot,@emph{slots}}, and the initialization arguments it
received.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 4.3.6.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-6-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_4-3-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.6.3 Customizing Class Redefinition

@uref{glo_m.html#method,@emph{Methods}} for
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
may be defined to specify actions to be taken when an
@uref{glo_i.html#instance,@emph{instance}} is updated. If only
@uref{glo_a.html#after_method,@emph{after methods}} for
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
are defined, they will be run after the system-supplied primary
@uref{glo_m.html#method,@emph{method}} for initialization and therefore
will not interfere with the default behavior of
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}.
Because no initialization arguments are passed to
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
when it is called by the system, the
@uref{glo_i.html#initialization_form,@emph{initialization forms}} for
@uref{glo_s.html#slot,@emph{slots}} that are filled by
@uref{glo_b.html#before_method,@emph{before methods}} for
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
will not be evaluated by
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}.

@uref{glo_m.html#method,@emph{Methods}} for
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
may be defined to customize @uref{glo_c.html#class,@emph{class}}
redefinition. For more information, see @uref{sec_7-1-5.html,Section
7.1.5 (Shared-Initialize)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 4.3.7
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-6-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_4-3-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.3.7 Integrating Types and Classes

The object system maps the space of
@uref{glo_c.html#class,@emph{classes}} into the space of
@uref{glo_t.html#type,@emph{types}}. Every
@uref{glo_c.html#class,@emph{class}} that has a proper name has a
corresponding @uref{glo_t.html#type,@emph{type}} with the same
@uref{glo_n.html#name,@emph{name}}.

The proper name of every @uref{glo_c.html#class,@emph{class}} is a valid
@uref{glo_t.html#type_specifier,@emph{type specifier}}. In addition,
every @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} is a valid
@uref{glo_t.html#type_specifier,@emph{type specifier}}. Thus the
expression (typep @emph{object} @emph{class}) evaluates to
@uref{glo_t.html#true,@emph{true}} if the
@uref{glo_c.html#class,@emph{class}} of @emph{object} is @emph{class}
itself or a @uref{glo_s.html#subclass,@emph{subclass}} of
@uref{glo_c.html#class,@emph{class}}. The evaluation of the expression
(subtypep class1 class2) returns the values
@uref{glo_t.html#true,@emph{true}} and
@uref{glo_t.html#true,@emph{true}} if class1 is a subclass of class2 or
if they are the same @uref{glo_c.html#class,@emph{class}}; otherwise it
returns the values @uref{glo_f.html#false,@emph{false}} and
@uref{glo_t.html#true,@emph{true}}. If I is an
@uref{glo_i.html#instance,@emph{instance}} of some
@uref{glo_c.html#class,@emph{class}} C named S and C is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
the evaluation of the expression (type-of I) returns S if S is the
@uref{glo_p.html#proper_name,@emph{proper name}} of C; otherwise, it
returns C.

Because the names of @uref{glo_c.html#class,@emph{classes}} and
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{objects}} are
@uref{glo_t.html#type_specifier,@emph{type specifiers}}, they may be
used in the special form @uref{speope_the.html#the,@strong{the}} and in
type declarations.

Many but not all of the predefined
@uref{glo_t.html#type_specifier,@emph{type specifiers}} have a
corresponding @uref{glo_c.html#class,@emph{class}} with the same proper
name as the @uref{glo_t.html#type,@emph{type}}. These type specifiers
are listed in @ref{#classtypecorrespondence,Figure 4-8}. For example,
the @uref{glo_t.html#type,@emph{type}}
@uref{syscla_array.html#array,@strong{array}} has a corresponding
@uref{glo_c.html#class,@emph{class}} named
@uref{syscla_array.html#array,@strong{array}}. No
@uref{glo_t.html#type_specifier,@emph{type specifier}} that is a list,
such as (vector double-float 100), has a corresponding
@uref{glo_c.html#class,@emph{class}}. The
@uref{glo_o.html#operator,@emph{operator}}
@uref{mac_deftype.html#deftype,@strong{deftype}} does not create any
@uref{glo_c.html#class,@emph{classes}}.

Each @uref{glo_c.html#class,@emph{class}} that corresponds to a
predefined @uref{glo_t.html#type_specifier,@emph{type specifier}} can be
implemented in one of three ways, at the discretion of each
implementation. It can be a
@uref{glo_s.html#standard_class,@emph{standard class}}, a
@uref{glo_s.html#structure_class,@emph{structure class}}, or a
@uref{glo_s.html#system_class,@emph{system class}}.

A @uref{glo_b.html#built-in_class,@emph{built-in class}} is one whose
@uref{glo_g.html#generalized_instance,@emph{generalized instances}} have
restricted capabilities or special representations. Attempting to use
@uref{mac_defclass.html#defclass,@strong{defclass}} to define
@uref{glo_s.html#subclass,@emph{subclasses}} of a
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}
signals an error. Calling
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
to create a @uref{glo_g.html#generalized_instance,@emph{generalized
instance}} of a @uref{glo_b.html#built-in_class,@emph{built-in class}}
signals an error. Calling
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} on a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error.
Redefining a @uref{glo_b.html#built-in_class,@emph{built-in class}} or
using
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} to
change the @uref{glo_c.html#class,@emph{class}} of an
@uref{glo_o.html#object,@emph{object}} to or from a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error.
However, @uref{glo_b.html#built-in_class,@emph{built-in classes}} can be
used as @uref{glo_p.html#parameter_specializer,@emph{parameter
specializers}} in @uref{glo_m.html#method,@emph{methods}}.

It is possible to determine whether a
@uref{glo_c.html#class,@emph{class}} is a
@uref{glo_b.html#built-in_class,@emph{built-in class}} by checking the
@uref{glo_m.html#metaclass,@emph{metaclass}}. A
@uref{glo_s.html#standard_class,@emph{standard class}} is an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
a @uref{glo_b.html#built-in_class,@emph{built-in class}} is an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}},
and a @uref{glo_s.html#structure_class,@emph{structure class}} is an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}.

Each @uref{glo_s.html#structure,@emph{structure}}
@uref{glo_t.html#type,@emph{type}} created by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} without using the
:type option has a corresponding @uref{glo_c.html#class,@emph{class}}.
This @uref{glo_c.html#class,@emph{class}} is a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}.
The :include option of
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} creates a direct
@uref{glo_s.html#subclass,@emph{subclass}} of the
@uref{glo_c.html#class,@emph{class}} that corresponds to the included
@uref{glo_s.html#structure,@emph{structure}}
@uref{glo_t.html#type,@emph{type}}.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @uref{glo_s.html#slot,@emph{slots}} are involved in the
operation of @uref{glo_f.html#function,@emph{functions}} defined in this
specification on @uref{glo_i.html#instance,@emph{instances}} of
@uref{glo_c.html#class,@emph{classes}} defined in this specification,
except when @uref{glo_s.html#slot,@emph{slots}} are explicitly defined
by this specification.

If in a particular
@uref{glo_i.html#implementation,@emph{implementation}} a
@uref{glo_c.html#class,@emph{class}} defined in this specification has
@uref{glo_s.html#slot,@emph{slots}} that are not defined by this
specfication, the names of these @uref{glo_s.html#slot,@emph{slots}}
must not be @uref{glo_e.html#external_symbol,@emph{external symbols}} of
@uref{glo_p.html#package,@emph{packages}} defined in this specification
nor otherwise @uref{glo_a.html#accessible,@emph{accessible}} in the
CL-USER package.

The purpose of specifying that many of the standard
@uref{glo_t.html#type_specifier,@emph{type specifiers}} have a
corresponding @uref{glo_c.html#class,@emph{class}} is to enable users to
write @uref{glo_m.html#method,@emph{methods}} that discriminate on these
@uref{glo_t.html#type,@emph{types}}.
@uref{glo_m.html#method,@emph{Method}} selection requires that a
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} can
be determined for each @uref{glo_c.html#class,@emph{class}}.

The hierarchical relationships among the
@uref{glo_t.html#type_specifier,@emph{type specifiers}} are mirrored by
relationships among the @uref{glo_c.html#class,@emph{classes}}
corresponding to those @uref{glo_t.html#type,@emph{types}}.

@ref{#classtypecorrespondence,Figure 4-8} lists the set of
@uref{glo_c.html#class,@emph{classes}} that correspond to predefined
@uref{glo_t.html#type_specifier,@emph{type specifiers}}.

@verbatim
arithmetic-error                  generic-function    simple-error               
array                             hash-table          simple-type-error          
bit-vector                        integer             simple-warning             
broadcast-stream                  list                standard-class             
built-in-class                    logical-pathname    standard-generic-function  
cell-error                        method              standard-method            
character                         method-combination  standard-object            
class                             null                storage-condition          
complex                           number              stream                     
concatenated-stream               package             stream-error               
condition                         package-error       string                     
cons                              parse-error         string-stream              
control-error                     pathname            structure-class            
division-by-zero                  print-not-readable  structure-object           
echo-stream                       program-error       style-warning              
end-of-file                       random-state        symbol                     
error                             ratio               synonym-stream             
file-error                        rational            t                          
file-stream                       reader-error        two-way-stream             
float                             readtable           type-error                 
floating-point-inexact            real                unbound-slot               
floating-point-invalid-operation  restart             unbound-variable           
floating-point-overflow           sequence            undefined-function         
floating-point-underflow          serious-condition   vector                     
function                          simple-condition    warning                    
@end verbatim

@strong{Figure 4-8. Classes that correspond to pre-defined type
specifiers}

The @uref{glo_c.html#class_precedence_list,@emph{class precedence list}}
information specified in the entries for each of these
@uref{glo_c.html#class,@emph{classes}} are those that are required by
the object system.

Individual implementations may be extended to define other type
specifiers to have a corresponding @uref{glo_c.html#class,@emph{class}}.
Individual implementations may be extended to add other
@uref{glo_s.html#subclass,@emph{subclass}} relationships and to add
other @uref{glo_e.html#element,@emph{elements}} to the
@uref{glo_c.html#class_precedence_list,@emph{class precedence lists}} as
long as they do not violate the type relationships and disjointness
requirements specified by this standard. A standard
@uref{glo_c.html#class,@emph{class}} defined with no direct
@uref{glo_s.html#superclass,@emph{superclasses}} is guaranteed to be
disjoint from all of the @uref{glo_c.html#class,@emph{classes}} in the
table, except for the class named @uref{syscla_t.html#t,@strong{t}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@item
@uref{../Issues/iss077.html,CONDITION-SLOTS:HIDDEN}
@item
@uref{../Issues/iss241.html,METACLASS-OF-SYSTEM-CLASS:UNSPECIFIED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Types and Classes Dictionary
@subsection CLHS: Section The Types and Classes Dictionary
@anchor{#clhs-section-the-types-and-classes-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_4-3-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-4.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_nil.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
4.4 The Types and Classes Dictionary

@uref{typ_nil.html,@emph{Type} @strong{NIL}}

@uref{typ_boolean.html,@emph{Type} @strong{BOOLEAN}}

@uref{syscla_function.html,@emph{System Class} @strong{FUNCTION}}

@uref{typ_compiled-function.html,@emph{Type} @strong{COMPILED-FUNCTION}}

@uref{syscla_generic-function.html,@emph{System Class}
@strong{GENERIC-FUNCTION}}

@uref{syscla_standa_ric-function.html,@emph{System Class}
@strong{STANDARD-GENERIC-FUNCTION}}

@uref{syscla_class.html,@emph{System Class} @strong{CLASS}}

@uref{syscla_built-in-class.html,@emph{System Class}
@strong{BUILT-IN-CLASS}}

@uref{syscla_structure-class.html,@emph{System Class}
@strong{STRUCTURE-CLASS}}

@uref{syscla_standard-class.html,@emph{System Class}
@strong{STANDARD-CLASS}}

@uref{syscla_method.html,@emph{System Class} @strong{METHOD}}

@uref{syscla_standard-method.html,@emph{System Class}
@strong{STANDARD-METHOD}}

@uref{cla_structure-object.html,@emph{Class} @strong{STRUCTURE-OBJECT}}

@uref{cla_standard-object.html,@emph{Class} @strong{STANDARD-OBJECT}}

@uref{syscla_method-combination.html,@emph{System Class}
@strong{METHOD-COMBINATION}}

@uref{syscla_t.html,@emph{System Class} @strong{T}}

@uref{typspe_satisfies.html,@emph{Type Specifier} @strong{SATISFIES}}

@uref{typspe_member.html,@emph{Type Specifier} @strong{MEMBER}}

@uref{typspe_not.html,@emph{Type Specifier} @strong{NOT}}

@uref{typspe_and.html,@emph{Type Specifier} @strong{AND}}

@uref{typspe_or.html,@emph{Type Specifier} @strong{OR}}

@uref{typspe_values.html,@emph{Type Specifier} @strong{VALUES}}

@uref{typspe_eql.html,@emph{Type Specifier} @strong{EQL}}

@uref{fun_coerce.html,@emph{Function} @strong{COERCE}}

@uref{mac_deftype.html,@emph{Macro} @strong{DEFTYPE}}

@uref{fun_subtypep.html,@emph{Function} @strong{SUBTYPEP}}

@uref{fun_type-of.html,@emph{Function} @strong{TYPE-OF}}

@uref{fun_typep.html,@emph{Function} @strong{TYPEP}}

@uref{contyp_type-error.html,@emph{Condition Type} @strong{TYPE-ERROR}}

@uref{fun_type-erro_xpected-type.html,@emph{Function}
@strong{TYPE-ERROR-DATUM, TYPE-ERROR-EXPECTED-TYPE}}

@uref{contyp_simple-type-error.html,@emph{Condition Type}
@strong{SIMPLE-TYPE-ERROR}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Class STANDARD-OBJECT::
* CLHS Class STRUCTURE-OBJECT::
* CLHS Condition Type SIMPLE-TYPE-ERROR::
* CLHS Condition Type TYPE-ERROR::
* CLHS Function COERCE::
* CLHS Function SUBTYPEP::
* CLHS Function TYPE-ERROR-DATUM TYPE-ERROR-EXPECTED-TYPE::
* CLHS Function TYPE-OF::
* CLHS Function TYPEP::
* CLHS Macro DEFTYPE::
* CLHS System Class BUILT-IN-CLASS::
* CLHS System Class CLASS::
* CLHS System Class FUNCTION::
* CLHS System Class GENERIC-FUNCTION::
* CLHS System Class METHOD-COMBINATION::
* CLHS System Class METHOD::
* CLHS System Class STANDARD-GENERIC-FUNCTION::
* CLHS System Class STANDARD-CLASS::
* CLHS System Class STANDARD-METHOD::
* CLHS System Class STRUCTURE-CLASS::
* CLHS System Class T::
* CLHS Type BOOLEAN::
* CLHS Type COMPILED-FUNCTION::
* CLHS Type Specifier AND::
* CLHS Type Specifier EQL::
* CLHS Type Specifier MEMBER::
* CLHS Type Specifier NOT::
* CLHS Type Specifier OR::
* CLHS Type Specifier SATISFIES::
* CLHS Type Specifier VALUES::
@end menu

@node CLHS Class STANDARD-OBJECT
@subsubsection CLHS: Class STANDARD-OBJECT
@anchor{#clhs-class-standard-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{cla_structure-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_method-combination.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Class} @strong{STANDARD-OBJECT}

@strong{Class Precedence List:}

@ref{#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_c.html#class,@emph{class}}
@ref{#standard-object,@strong{standard-object}} is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}
and is a @uref{glo_s.html#superclass,@emph{superclass}} of every
@uref{glo_c.html#class,@emph{class}} that is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}
except itself.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Class STRUCTURE-OBJECT
@subsubsection CLHS: Class STRUCTURE-OBJECT
@anchor{#clhs-class-structure-object}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_standard-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{cla_standard-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Class} @strong{STRUCTURE-OBJECT}

@strong{Class Precedence List:}

@ref{#structure-object,@strong{structure-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_c.html#class,@emph{class}}
@ref{#structure-object,@strong{structure-object}} is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}
and is a @uref{glo_s.html#superclass,@emph{superclass}} of every
@uref{glo_c.html#class,@emph{class}} that is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}
except itself, and is a @uref{glo_s.html#superclass,@emph{superclass}}
of every @uref{glo_c.html#class,@emph{class}} that is defined by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}}.

@strong{See Also:}

@uref{mac_defstruct.html#defstruct,@strong{defstruct}},
@uref{sec_2-4-8-13.html,Section 2.4.8.13 (Sharpsign S)},
@uref{sec_22-1-3-12.html,Section 22.1.3.12 (Printing Structures)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss090.html,DATA-TYPES-HIERARCHY-UNDERSPECIFIED}
@item
@uref{../Issues/iss207.html,JUN90-TRIVIAL-ISSUES:9}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type SIMPLE-TYPE-ERROR
@subsubsection CLHS: Condition Type SIMPLE-TYPE-ERROR
@anchor{#clhs-condition-type-simple-type-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_type-erro_xpected-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{SIMPLE-TYPE-ERROR}

@strong{Class Precedence List:}

@ref{#simple-type-error,@strong{simple-type-error}},
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}},
@uref{contyp_type-error.html#type-error,@strong{type-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

@uref{glo_c.html#condition,@emph{Conditions}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#simple-type-error,@strong{simple-type-error}} are like
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}}, except
that they provide an alternate mechanism for specifying how the
@uref{glo_c.html#condition,@emph{condition}} is to be @emph{reported};
see the @uref{glo_t.html#type,@emph{type}}
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}}.

@strong{See Also:}

@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}},
@uref{fun_simple-co_at-arguments.html#simple-condition-format-control,@strong{simple-condition-format-control}},
@uref{fun_simple-co_at-arguments.html#simple-condition-format-arguments,@strong{simple-condition-format-arguments}},
@uref{fun_type-erro_xpected-type.html#type-error-datum,@strong{type-error-datum}},
@uref{fun_type-erro_xpected-type.html#type-error-expected-type,@strong{type-error-expected-type}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type TYPE-ERROR
@subsubsection CLHS: Condition Type TYPE-ERROR
@anchor{#clhs-condition-type-type-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_typep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_type-erro_xpected-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{TYPE-ERROR}

@strong{Class Precedence List:}

@ref{#type-error,@strong{type-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#type-error,@strong{type-error}} represents a situation in which an
@uref{glo_o.html#object,@emph{object}} is not of the expected type. The
``offending datum'' and ``expected type'' are initialized by the
initialization arguments named :datum and :expected-type to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and are @emph{accessed} by the functions
@uref{fun_type-erro_xpected-type.html#type-error-datum,@strong{type-error-datum}}
and
@uref{fun_type-erro_xpected-type.html#type-error-expected-type,@strong{type-error-expected-type}}.

@strong{See Also:}

@uref{fun_type-erro_xpected-type.html#type-error-datum,@strong{type-error-datum}},
@uref{fun_type-erro_xpected-type.html#type-error-expected-type,@strong{type-error-expected-type}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COERCE
@subsubsection CLHS: Function COERCE
@anchor{#clhs-function-coerce}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_eql.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_deftype.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COERCE}

@strong{Syntax:}

@strong{coerce} @emph{object result-type} => @emph{result}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{result-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}, of
@uref{glo_t.html#type,@emph{type}} @emph{result-type} except in
situations described in @uref{sec_12-1-5-3.html,Section 12.1.5.3 (Rule
of Canonical Representation for Complex Rationals)}.

@strong{Description:}

@uref{glo_c.html#coerce,@emph{Coerces}} the @emph{object} to
@uref{glo_t.html#type,@emph{type}} @emph{result-type}.

If @emph{object} is already of @uref{glo_t.html#type,@emph{type}}
@emph{result-type}, the @emph{object} itself is returned, regardless of
whether it would have been possible in general to coerce an
@uref{glo_o.html#object,@emph{object}} of some other
@uref{glo_t.html#type,@emph{type}} to @emph{result-type}.

Otherwise, the @emph{object} is @emph{coerced} to
@uref{glo_t.html#type,@emph{type}} @emph{result-type} according to the
following rules:

@uref{syscla_sequence.html#sequence,@strong{sequence}}

If the @emph{result-type} is a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_list.html#list,@strong{list}}, and the
@uref{glo_o.html#object,@emph{object}} is a
@uref{glo_s.html#sequence,@emph{sequence}}, then the @emph{result} is a
@uref{glo_l.html#list,@emph{list}} that has the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_e.html#element,@emph{elements}} as @emph{object}.

If the @emph{result-type} is a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@uref{syscla_vector.html#vector,@strong{vector}}, and the
@uref{glo_o.html#object,@emph{object}} is a
@uref{glo_s.html#sequence,@emph{sequence}}, then the @emph{result} is a
@uref{glo_v.html#vector,@emph{vector}} that has the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_e.html#element,@emph{elements}} as @emph{object}. If
@emph{result-type} is a specialized @uref{glo_t.html#type,@emph{type}},
the @emph{result} has an
@uref{glo_a.html#actual_array_element_type,@emph{actual array element
type}} that is the result of @emph{upgrading} the element type part of
that @uref{glo_s.html#specialized,@emph{specialized}}
@uref{glo_t.html#type,@emph{type}}. If no element type is specified, the
element type defaults to @uref{syscla_t.html#t,@strong{t}}. If the
@uref{glo_i.html#implementation,@emph{implementation}} cannot determine
the element type, an error is signaled.

@uref{syscla_character.html#character,@strong{character}}

If the @emph{result-type} is
@uref{syscla_character.html#character,@strong{character}} and the
@uref{glo_o.html#object,@emph{object}} is a
@uref{glo_c.html#character_designator,@emph{character designator}}, the
@emph{result} is the @uref{glo_c.html#character,@emph{character}} it
denotes.

@uref{syscla_complex.html#complex,@strong{complex}}

If the @emph{result-type} is
@uref{syscla_complex.html#complex,@strong{complex}} and the
@uref{glo_o.html#object,@emph{object}} is a
@uref{syscla_real.html#real,@emph{real}}, then the @emph{result} is
obtained by constructing a @uref{glo_c.html#complex,@emph{complex}}
whose real part is the @uref{glo_o.html#object,@emph{object}} and whose
imaginary part is the result of @emph{coercing} an
@uref{glo_i.html#integer,@emph{integer}} zero to the
@uref{glo_t.html#type,@emph{type}} of the
@uref{glo_o.html#object,@emph{object}} (using
@ref{#coerce,@strong{coerce}}). (If the real part is a
@uref{glo_r.html#rational,@emph{rational}}, however, then the result
must be represented as a @uref{glo_r.html#rational,@emph{rational}}
rather than a @uref{glo_c.html#complex,@emph{complex}}; see
@uref{sec_12-1-5-3.html,Section 12.1.5.3 (Rule of Canonical
Representation for Complex Rationals)}. So, for example, (coerce 3
'complex) is permissible, but will return 3, which is not a
@uref{glo_c.html#complex,@emph{complex}}.)

@uref{syscla_float.html#float,@strong{float}}

If the @emph{result-type} is any of
@uref{syscla_float.html#float,@strong{float}},
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}},
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}},
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}},
@uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}},
and the @uref{glo_o.html#object,@emph{object}} is a
@uref{syscla_real.html#real,@emph{real}}, then the @emph{result} is a
@uref{glo_f.html#float,@emph{float}} of
@uref{glo_t.html#type,@emph{type}} @emph{result-type} which is equal in
sign and magnitude to the @uref{glo_o.html#object,@emph{object}} to
whatever degree of representational precision is permitted by that
@uref{glo_f.html#float,@emph{float}} representation. (If the
@emph{result-type} is @uref{syscla_float.html#float,@strong{float}} and
@emph{object} is not already a @uref{glo_f.html#float,@emph{float}},
then the @emph{result} is a @uref{glo_s.html#single_float,@emph{single
float}}.)

@uref{syscla_function.html#function,@strong{function}}

If the @emph{result-type} is
@uref{syscla_function.html#function,@strong{function}}, and
@emph{object} is any @uref{glo_f.html#function_name,@emph{function
name}} that is @uref{glo_f.html#fbound,@emph{fbound}} but that is
globally defined neither as a @uref{glo_m.html#macro_name,@emph{macro
name}} nor as a @uref{glo_s.html#special_operator,@emph{special
operator}}, then the @emph{result} is the
@uref{glo_f.html#functional_value,@emph{functional value}} of
@emph{object}.

If the @emph{result-type} is
@uref{syscla_function.html#function,@strong{function}}, and
@emph{object} is a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}}, then the @emph{result} is a
@uref{glo_c.html#closure,@emph{closure}} of @emph{object} in the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}}.

@uref{syscla_t.html#t,@strong{t}}

Any @emph{object} can be @emph{coerced} to an
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} @uref{syscla_t.html#t,@strong{t}}. In
this case, the @emph{object} is simply returned.

@strong{Examples:}

@verbatim
 (coerce '(a b c) 'vector) =>  #(A B C)
 (coerce 'a 'character) =>  #\A
 (coerce 4.56 'complex) =>  #C(4.56 0.0)
 (coerce 4.5s0 'complex) =>  #C(4.5s0 0.0s0)
 (coerce 7/2 'complex) =>  7/2
 (coerce 0 'short-float) =>  0.0s0
 (coerce 3.5L0 'float) =>  3.5L0
 (coerce 7/2 'float) =>  3.5
 (coerce (cons 1 2) t) =>  (1 . 2)
@end verbatim

All the following @uref{glo_f.html#form,@emph{forms}} should signal an
error:

@verbatim
 (coerce '(a b c) '(vector * 4))
 (coerce #(a b c) '(vector * 4))
 (coerce '(a b c) '(vector * 2))
 (coerce #(a b c) '(vector * 2))
 (coerce "foo" '(string 2))
 (coerce #(#\a #\b #\c) '(string 2))
 (coerce '(0 1) '(simple-bit-vector 3))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If a coercion is not possible, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

(coerce x 'nil) always signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if the
@emph{result-type} is
@uref{syscla_function.html#function,@strong{function}} but @emph{object}
is a @uref{glo_s.html#symbol,@emph{symbol}} that is not
@uref{glo_f.html#fbound,@emph{fbound}} or if the
@uref{glo_s.html#symbol,@emph{symbol}} names a
@uref{glo_m.html#macro,@emph{macro}} or a
@uref{glo_s.html#special_operator,@emph{special operator}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} should be
signaled if @emph{result-type} specifies the number of elements and
@emph{object} is of a different length.

@strong{See Also:}

@uref{fun_rationalcm_rationalize.html#rational,@strong{rational}},
@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}},
@uref{fun_char-code.html#char-code,@strong{char-code}},
@uref{fun_char-int.html#char-int,@strong{char-int}}

@strong{Notes:}

Coercions from @uref{glo_f.html#float,@emph{floats}} to
@uref{glo_r.html#rational,@emph{rationals}} and from
@uref{glo_r.html#ratio,@emph{ratios}} to
@uref{glo_i.html#integer,@emph{integers}} are not provided because of
rounding problems.

@verbatim
 (coerce x 't) ==  (identity x) ==  x
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss302.html,SEQUENCE-TYPE-LENGTH:MUST-MATCH}
@item
@uref{../Issues/iss054.html,COERCING-SETF-NAME-TO-FUNCTION:ALL-FUNCTION-NAMES}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss290.html,REAL-NUMBER-TYPE:X3J13-MAR-89}
@item
@uref{../Issues/iss025.html,CHARACTER-LOOSE-ENDS:FIX}
@item
@uref{../Issues/iss073.html,CONCATENATE-SEQUENCE:SIGNAL-ERROR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SUBTYPEP
@subsubsection CLHS: Function SUBTYPEP
@anchor{#clhs-function-subtypep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_deftype.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_type-of.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SUBTYPEP}

@strong{Syntax:}

@strong{subtypep} @emph{type-1 type-2 &optional environment} =>
@emph{subtype-p, valid-p}

@strong{Arguments and Values:}

@emph{type-1}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{type-2}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}, denoting the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} and the current
@uref{glo_g.html#global_environment,@emph{global environment}}.

@emph{subtype-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{valid-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

If @emph{type-1} is a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
@emph{type-2}, the first @uref{glo_v.html#value,@emph{value}} is
@uref{glo_t.html#true,@emph{true}}. Otherwise, the first
@uref{glo_v.html#value,@emph{value}} is
@uref{glo_f.html#false,@emph{false}}, indicating that either
@emph{type-1} is not a @uref{glo_s.html#subtype,@emph{subtype}} of
@emph{type-2}, or else @emph{type-1} is a
@uref{glo_s.html#subtype,@emph{subtype}} of @emph{type-2} but is not a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}}.

A second @uref{glo_v.html#value,@emph{value}} is also returned
indicating the `certainty' of the first
@uref{glo_v.html#value,@emph{value}}. If this value is
@uref{glo_t.html#true,@emph{true}}, then the first value is an accurate
indication of the @uref{glo_s.html#subtype,@emph{subtype}} relationship.
(The second @uref{glo_v.html#value,@emph{value}} is always
@uref{glo_t.html#true,@emph{true}} when the first
@uref{glo_v.html#value,@emph{value}} is
@uref{glo_t.html#true,@emph{true}}.)

The next figure summarizes the possible combinations of
@uref{glo_v.html#value,@emph{values}} that might result.

@verbatim
Value 1  Value 2  Meaning                                               
true     true     type-1 is definitely a subtype of type-2.             
false    true     type-1 is definitely not a subtype of type-2.         
false    false    subtypep could not determine the relationship,        
                  so type-1 might or might not be a subtype of type-2.  
@end verbatim

@strong{Figure 4-9. Result possibilities for subtypep}

@ref{#subtypep,@strong{subtypep}} is permitted to return the
@uref{glo_v.html#value,@emph{values}}
@uref{glo_f.html#false,@emph{false}} and
@uref{glo_f.html#false,@emph{false}} only when at least one argument
involves one of these @uref{glo_t.html#type_specifier,@emph{type
specifiers}}: @strong{and}, @strong{eql}, the list form of
@strong{function}, @strong{member}, @strong{not}, @strong{or},
@strong{satisfies}, or @strong{values}. (A
@uref{glo_t.html#type_specifier,@emph{type specifier}} `involves' such a
@uref{glo_s.html#symbol,@emph{symbol}} if, after being
@uref{glo_t.html#type,@emph{type}} @emph{expanded}, it contains that
@uref{glo_s.html#symbol,@emph{symbol}} in a position that would call for
its meaning as a @uref{glo_t.html#type_specifier,@emph{type specifier}}
to be used.) One consequence of this is that if neither @emph{type-1}
nor @emph{type-2} involves any of these
@uref{glo_t.html#type_specifier,@emph{type specifiers}}, then
@ref{#subtypep,@strong{subtypep}} is obliged to determine the
relationship accurately. In particular,
@ref{#subtypep,@strong{subtypep}} returns the
@uref{glo_v.html#value,@emph{values}} @uref{glo_t.html#true,@emph{true}}
and @uref{glo_t.html#true,@emph{true}} if the arguments are
@uref{fun_equal.html#equal,@strong{equal}} and do not involve any of
these @uref{glo_t.html#type_specifier,@emph{type specifiers}}.

@ref{#subtypep,@strong{subtypep}} never returns a second value of
@uref{any_nil.html#nil,@strong{nil}} when both @emph{type-1} and
@emph{type-2} involve only the names in
@uref{sec_4-2-3.html#standardizedatomictypespecs,Figure 4-2}, or names
of @uref{glo_t.html#type,@emph{types}} defined by
@uref{mac_defstruct.html#defstruct,@strong{defstruct}},
@uref{mac_define-condition.html#define-condition,@strong{define-condition}},
or @uref{mac_defclass.html#defclass,@strong{defclass}}, or
@uref{glo_d.html#derived_type,@emph{derived types}} that expand into
only those names. While @uref{glo_t.html#type_specifier,@emph{type
specifiers}} listed in
@uref{sec_4-2-3.html#standardizedatomictypespecs,Figure 4-2} and names
of @uref{mac_defclass.html#defclass,@strong{defclass}} and
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} can in some cases
be implemented as @uref{glo_d.html#derived_type,@emph{derived types}},
@ref{#subtypep,@strong{subtypep}} regards them as primitive.

The relationships between @uref{glo_t.html#type,@emph{types}} reflected
by @ref{#subtypep,@strong{subtypep}} are those specific to the
particular implementation. For example, if an implementation supports
only a single type of floating-point numbers, in that implementation
(subtypep 'float 'long-float) returns the
@uref{glo_v.html#value,@emph{values}} @uref{glo_t.html#true,@emph{true}}
and @uref{glo_t.html#true,@emph{true}} (since the two
@uref{glo_t.html#type,@emph{types}} are identical).

For all @emph{T1} and @emph{T2} other than *, (array @emph{T1}) and
(array @emph{T2}) are two different
@uref{glo_t.html#type_specifier,@emph{type specifiers}} that always
refer to the same sets of things if and only if they refer to
@uref{glo_a.html#array,@emph{arrays}} of exactly the same specialized
representation, i.e., if (upgraded-array-element-type '@emph{T1}) and
(upgraded-array-element-type '@emph{T2}) return two different
@uref{glo_t.html#type_specifier,@emph{type specifiers}} that always
refer to the same sets of @uref{glo_o.html#object,@emph{objects}}. This
is another way of saying that `(array @emph{type-specifier}) and `(array
,(upgraded-array-element-type '@emph{type-specifier})) refer to the same
set of specialized @uref{glo_a.html#array,@emph{array}} representations.
For all @emph{T1} and @emph{T2} other than *, the intersection of (array
@emph{T1}) and (array @emph{T2}) is the empty set if and only if they
refer to @uref{glo_a.html#array,@emph{arrays}} of different, distinct
specialized representations.

Therefore,

@verbatim
 (subtypep '(array T1) '(array T2)) =>  true
@end verbatim

if and only if

@verbatim
 (upgraded-array-element-type 'T1)  and
 (upgraded-array-element-type 'T2)  
@end verbatim

return two different @uref{glo_t.html#type_specifier,@emph{type
specifiers}} that always refer to the same sets of
@uref{glo_o.html#object,@emph{objects}}.

For all type-specifiers @emph{T1} and @emph{T2} other than *,

@verbatim
 (subtypep '(complex T1) '(complex T2)) =>  true, true
@end verbatim

if:

1. T1 is a @uref{glo_s.html#subtype,@emph{subtype}} of T2, or

2. (upgraded-complex-part-type '@emph{T1}) and
(upgraded-complex-part-type '@emph{T2}) return two different
@uref{glo_t.html#type_specifier,@emph{type specifiers}} that always
refer to the same sets of @uref{glo_o.html#object,@emph{objects}}; in
this case, (complex @emph{T1}) and (complex @emph{T2}) both refer to the
same specialized representation.

The @uref{glo_v.html#value,@emph{values}} are
@uref{glo_f.html#false,@emph{false}} and
@uref{glo_t.html#true,@emph{true}} otherwise.

The form

@verbatim
 (subtypep '(complex single-float) '(complex float))
@end verbatim

must return @uref{glo_t.html#true,@emph{true}} in all implementations,
but

@verbatim
 (subtypep '(array single-float) '(array float))
@end verbatim

returns @uref{glo_t.html#true,@emph{true}} only in implementations that
do not have a specialized @uref{glo_a.html#array,@emph{array}}
representation for @uref{glo_s.html#single_float,@emph{single floats}}
distinct from that for other @uref{glo_f.html#float,@emph{floats}}.

@strong{Examples:}

@verbatim
 (subtypep 'compiled-function 'function) =>  true, true
 (subtypep 'null 'list) =>  true, true
 (subtypep 'null 'symbol) =>  true, true
 (subtypep 'integer 'string) =>  false, true
 (subtypep '(satisfies dummy) nil) =>  false, implementation-dependent
 (subtypep '(integer 1 3) '(integer 1 4)) =>  true, true
 (subtypep '(integer (0) (0)) 'nil) =>  true, true
 (subtypep 'nil '(integer (0) (0))) =>  true, true
 (subtypep '(integer (0) (0)) '(member)) =>  true, true ;or false, false
 (subtypep '(member) 'nil) =>  true, true ;or false, false
 (subtypep 'nil '(member)) =>  true, true ;or false, false
@end verbatim

Let <aet-x> and <aet-y> be two distinct
@uref{glo_t.html#type_specifier,@emph{type specifiers}} that do not
always refer to the same sets of @uref{glo_o.html#object,@emph{objects}}
in a given implementation, but for which
@uref{fun_make-array.html#make-array,@strong{make-array}}, will return
an @uref{glo_o.html#object,@emph{object}} of the same
@uref{glo_a.html#array,@emph{array}} @uref{glo_t.html#type,@emph{type}}.

Thus, in each case,

@verbatim
  (subtypep (array-element-type (make-array 0 :element-type '<aet-x>))
            (array-element-type (make-array 0 :element-type '<aet-y>)))
=>  true, true
 
  (subtypep (array-element-type (make-array 0 :element-type '<aet-y>))
            (array-element-type (make-array 0 :element-type '<aet-x>)))
=>  true, true
@end verbatim

If (array <aet-x>) and (array <aet-y>) are different names for exactly
the same set of @uref{glo_o.html#object,@emph{objects}}, these names
should always refer to the same sets of
@uref{glo_o.html#object,@emph{objects}}. That implies that the following
set of tests are also true:

@verbatim
 (subtypep '(array <aet-x>) '(array <aet-y>)) =>  true, true
 (subtypep '(array <aet-y>) '(array <aet-x>)) =>  true, true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_4-2.html,Section 4.2 (Types)}

@strong{Notes:}

The small differences between the @ref{#subtypep,@strong{subtypep}}
specification for the @uref{syscla_array.html#array,@strong{array}} and
@uref{syscla_complex.html#complex,@strong{complex}} types are necessary
because there is no creation function for
@uref{glo_c.html#complex,@emph{complexes}} which allows the
specification of the resultant part type independently of the actual
types of the parts. Thus in the case of the
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_complex.html#complex,@strong{complex}}, the actual type of
the parts is referred to, although a
@uref{glo_n.html#number,@emph{number}} can be a member of more than one
@uref{glo_t.html#type,@emph{type}}. For example, 17 is of
@uref{glo_t.html#type,@emph{type}} (mod 18) as well as
@uref{glo_t.html#type,@emph{type}} (mod 256) and
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_integer.html#integer,@strong{integer}}; and 2.3f5 is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}}
as well as @uref{glo_t.html#type,@emph{type}}
@uref{syscla_float.html#float,@strong{float}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss336.html,SUBTYPEP-TOO-VAGUE:CLARIFY-MORE}
@item
@uref{../Issues/iss335.html,SUBTYPEP-ENVIRONMENT:ADD-ARG}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TYPE-ERROR-DATUM TYPE-ERROR-EXPECTED-TYPE
@subsubsection CLHS: Function TYPE-ERROR-DATUM, TYPE-ERROR-EXPECTED-TYPE
@anchor{#clhs-function-type-error-datum-type-error-expected-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_type-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_simple-type-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TYPE-ERROR-DATUM, TYPE-ERROR-EXPECTED-TYPE}

@strong{Syntax:}

@strong{type-error-datum} @emph{condition} => @emph{datum}

@strong{type-error-expected-type} @emph{condition} =>
@emph{expected-type}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}}.

@emph{datum}---an @uref{glo_o.html#object,@emph{object}}.

@emph{expected-type}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

@ref{#type-error-datum,@strong{type-error-datum}} returns the offending
datum in the @uref{glo_s.html#situation,@emph{situation}} represented by
the @emph{condition}.

@ref{#type-error-expected-type,@strong{type-error-expected-type}}
returns the expected type of the offending datum in the
@uref{glo_s.html#situation,@emph{situation}} represented by the
@emph{condition}.

@strong{Examples:}

@verbatim
 (defun fix-digits (condition)
   (check-type condition type-error)
   (let* ((digits '(zero one two three four
                   five six seven eight nine))
         (val (position (type-error-datum condition) digits)))
     (if (and val (subtypep 'fixnum (type-error-expected-type condition)))
         (store-value 7))))
 
 (defun foo (x)
   (handler-bind ((type-error #'fix-digits))
     (check-type x number)
     (+ x 3)))
 
 (foo 'seven)
=>  10
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_type-error.html#type-error,@strong{type-error}},
@uref{chap-9.html,Section 9 (Conditions)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TYPE-OF
@subsubsection CLHS: Function TYPE-OF
@anchor{#clhs-function-type-of}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_subtypep.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_typep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TYPE-OF}

@strong{Syntax:}

@strong{type-of} @emph{object} => @emph{typespec}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Description:}

Returns a @uref{glo_t.html#type_specifier,@emph{type specifier}},
@emph{typespec}, for a @uref{glo_t.html#type,@emph{type}} that has the
@emph{object} as an @uref{glo_e.html#element,@emph{element}}. The
@emph{typespec} satisfies the following:

1. For any @emph{object} that is an
@uref{glo_e.html#element,@emph{element}} of some
@uref{glo_b.html#built-in_type,@emph{built-in type}}:

a. the @uref{glo_t.html#type,@emph{type}} returned is a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
that @uref{glo_b.html#built-in_type,@emph{built-in type}}.

b. the @uref{glo_t.html#type,@emph{type}} returned does not involve and,
eql, member, not, or, satisfies, or values.

2. For all @emph{objects}, (typep @emph{object} (type-of @emph{object}))
returns @uref{glo_t.html#true,@emph{true}}. Implicit in this is that
@uref{glo_t.html#type_specifier,@emph{type specifiers}} which are not
valid for use with @uref{fun_typep.html#typep,@strong{typep}}, such as
the @uref{glo_l.html#list,@emph{list}} form of the
@uref{speope_function.html#function,@strong{function}}
@uref{glo_t.html#type_specifier,@emph{type specifier}}, are never
returned by @ref{#type-of,@strong{type-of}}.

3. The @uref{glo_t.html#type,@emph{type}} returned by
@ref{#type-of,@strong{type-of}} is always a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
the @uref{glo_c.html#class,@emph{class}} returned by
@uref{fun_class-of.html#class-of,@strong{class-of}}. That is,

@verbatim
 (subtypep (type-of object) (class-of object)) =>  true, true
@end verbatim

4. For @emph{objects} of metaclass
@uref{syscla_structure-class.html#structure-class,@strong{structure-class}}
or
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
and for @uref{glo_c.html#condition,@emph{conditions}},
@ref{#type-of,@strong{type-of}} returns the
@uref{glo_p.html#proper_name,@emph{proper name}} of the
@uref{glo_c.html#class,@emph{class}} returned by
@uref{fun_class-of.html#class-of,@strong{class-of}} if it has a
@uref{glo_p.html#proper_name,@emph{proper name}}, and otherwise returns
the @uref{glo_c.html#class,@emph{class}} itself. In particular, for
@emph{objects} created by the constructor function of a structure
defined with @uref{mac_defstruct.html#defstruct,@strong{defstruct}}
without a :type option, @ref{#type-of,@strong{type-of}} returns the
structure name; and for @emph{objects} created by
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
the @emph{typespec} is the @uref{glo_n.html#name,@emph{name}} of the
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}}.

5. For each of the @uref{glo_t.html#type,@emph{types}}
@uref{typ_short-flo_m_long-float.html#short-float,@strong{short-float}},
@uref{typ_short-flo_m_long-float.html#single-float,@strong{single-float}},
@uref{typ_short-flo_m_long-float.html#double-float,@strong{double-float}},
or @uref{typ_short-flo_m_long-float.html#long-float,@strong{long-float}}
of which the @emph{object} is an
@uref{glo_e.html#element,@emph{element}}, the @emph{typespec} is a
@uref{glo_r.html#recognizable_subtype,@emph{recognizable subtype}} of
that @uref{glo_t.html#type,@emph{type}}.

@strong{Examples:}

@verbatim
@end verbatim

@verbatim
 (type-of 'a) =>  SYMBOL          
 (type-of '(1 . 2))
=>  CONS
OR=>  (CONS FIXNUM FIXNUM)
 (type-of #c(0 1))
=>  COMPLEX
OR=>  (COMPLEX INTEGER)
 (defstruct temp-struct x y z) =>  TEMP-STRUCT
 (type-of (make-temp-struct)) =>  TEMP-STRUCT
 (type-of "abc")
=>  STRING
OR=>  (STRING 3)
 (subtypep (type-of "abc") 'string) =>  true, true
 (type-of (expt 2 40))
=>  BIGNUM
OR=>  INTEGER
OR=>  (INTEGER 1099511627776 1099511627776)
OR=>  SYSTEM::TWO-WORD-BIGNUM
OR=>  FIXNUM
 (subtypep (type-of 112312) 'integer) =>  true, true
 (defvar *foo* (make-array 5 :element-type t)) =>  *FOO*
 (class-name (class-of *foo*)) =>  VECTOR
 (type-of *foo*)
=>  VECTOR
OR=>  (VECTOR T 5)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_array-element-type.html#array-element-type,@strong{array-element-type}},
@uref{fun_class-of.html#class-of,@strong{class-of}},
@uref{mac_defstruct.html#defstruct,@strong{defstruct}},
@uref{mac_typecasec_cm_etypecase.html#typecase,@strong{typecase}},
@uref{fun_typep.html#typep,@strong{typep}}, @uref{sec_4-2.html,Section
4.2 (Types)}

@strong{Notes:}

Implementors are encouraged to arrange for
@ref{#type-of,@strong{type-of}} to return a portable value.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss351.html,TYPE-OF-AND-PREDEFINED-CLASSES:TYPE-OF-HANDLES-FLOATS}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@item
@uref{../Issues/iss353.html,TYPE-OF-UNDERCONSTRAINED:ADD-CONSTRAINTS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function TYPEP
@subsubsection CLHS: Function TYPEP
@anchor{#clhs-function-typep}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_type-of.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_type-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{TYPEP}

@strong{Syntax:}

@strong{typep} @emph{object type-specifier &optional environment} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{type-specifier}---any @uref{glo_t.html#type_specifier,@emph{type
specifier}} except @uref{any_values.html#values,@strong{values}}, or a
@uref{glo_t.html#type_specifier,@emph{type specifier}} list whose first
element is either @uref{any_function.html#function,@strong{function}} or
@uref{any_values.html#values,@strong{values}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}. The default is
@uref{any_nil.html#nil,@strong{nil}}, denoting the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} and the and current
@uref{glo_g.html#global_environment,@emph{global environment}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of the
@uref{glo_t.html#type,@emph{type}} specified by @emph{type-specifier};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

A @emph{type-specifier} of the form (satisfies fn) is handled by
applying the function fn to @emph{object}.

(typep @emph{object} '(array @emph{type-specifier})), where
@emph{type-specifier} is not *, returns
@uref{glo_t.html#true,@emph{true}} if and only if @emph{object} is an
@uref{glo_a.html#array,@emph{array}} that could be the result of
supplying @emph{type-specifier} as the :element-type argument to
@uref{fun_make-array.html#make-array,@strong{make-array}}. (array *)
refers to all @uref{glo_a.html#array,@emph{arrays}} regardless of
element type, while (array @emph{type-specifier}) refers only to those
@uref{glo_a.html#array,@emph{arrays}} that can result from giving
@emph{type-specifier} as the :element-type argument to
@uref{fun_make-array.html#make-array,@strong{make-array}}. A similar
interpretation applies to (simple-array @emph{type-specifier}) and
(vector @emph{type-specifier}). See @uref{sec_15-1-2-1.html,Section
15.1.2.1 (Array Upgrading)}.

(typep @emph{object} '(complex @emph{type-specifier})) returns
@uref{glo_t.html#true,@emph{true}} for all
@uref{glo_c.html#complex,@emph{complex}} numbers that can result from
giving @uref{glo_n.html#number,@emph{numbers}} of type
@emph{type-specifier} to the @uref{glo_f.html#function,@emph{function}}
@uref{fun_complex.html#complex,@strong{complex}}, plus all other
@uref{glo_c.html#complex,@emph{complex}} numbers of the same specialized
representation. Both the real and the imaginary parts of any such
@uref{glo_c.html#complex,@emph{complex}} number must satisfy:

@verbatim
 (typep realpart 'type-specifier)
 (typep imagpart 'type-specifier)
@end verbatim

See the @uref{glo_f.html#function,@emph{function}}
@uref{fun_upgraded-_ex-part-type.html#upgraded-complex-part-type,@strong{upgraded-complex-part-type}}.

@strong{Examples:}

@verbatim
 (typep 12 'integer) =>  true
 (typep (1+ most-positive-fixnum) 'fixnum) =>  false
 (typep nil t) =>  true
 (typep nil nil) =>  false
 (typep 1 '(mod 2)) =>  true
 (typep #c(1 1) '(complex (eql 1))) =>  true
;; To understand this next example, you might need to refer to
;; Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals).
 (typep #c(0 0) '(complex (eql 0))) =>  false
@end verbatim

Let Ax and Ay be two @uref{glo_t.html#type_specifier,@emph{type
specifiers}} that denote different @uref{glo_t.html#type,@emph{types}},
but for which

@verbatim
 (upgraded-array-element-type 'Ax)
@end verbatim

and

@verbatim
 (upgraded-array-element-type 'Ay)
@end verbatim

denote the same @uref{glo_t.html#type,@emph{type}}. Notice that

@verbatim
 (typep (make-array 0 :element-type 'Ax) '(array Ax)) =>  true
 (typep (make-array 0 :element-type 'Ay) '(array Ay)) =>  true
 (typep (make-array 0 :element-type 'Ax) '(array Ay)) =>  true
 (typep (make-array 0 :element-type 'Ay) '(array Ax)) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if
@emph{type-specifier} is values, or a
@uref{glo_t.html#type_specifier,@emph{type specifier}} list whose first
element is either @uref{any_function.html#function,@strong{function}} or
@uref{any_values.html#values,@strong{values}}.

The consequences are undefined if the @emph{type-specifier} is not a
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@strong{See Also:}

@uref{fun_type-of.html#type-of,@strong{type-of}},
@uref{fun_upgraded-_element-type.html#upgraded-array-element-type,@strong{upgraded-array-element-type}},
@uref{fun_upgraded-_ex-part-type.html#upgraded-complex-part-type,@strong{upgraded-complex-part-type}},
@uref{sec_4-2-3.html,Section 4.2.3 (Type Specifiers)}

@strong{Notes:}

@uref{glo_i.html#implementation,@emph{Implementations}} are encouraged
to recognize and optimize the case of (typep @emph{x} (the class
@emph{y})), since it does not involve any need for expansion of
@uref{mac_deftype.html#deftype,@strong{deftype}} information at runtime.

@verbatim
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss015.html,ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING}
@item
@uref{../Issues/iss175.html,FUNCTION-TYPE}
@item
@uref{../Issues/iss335.html,SUBTYPEP-ENVIRONMENT:ADD-ARG}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFTYPE
@subsubsection CLHS: Macro DEFTYPE
@anchor{#clhs-macro-deftype}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_coerce.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_subtypep.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFTYPE}

@strong{Syntax:}

@strong{deftype} @emph{name lambda-list [[@emph{declaration}@strong{*} |
@emph{documentation}]] @emph{form}@strong{*}} => @emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{lambda-list}---a
@uref{glo_d.html#deftype_lambda_list,@emph{deftype lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

@ref{#deftype,@strong{deftype}} defines a
@uref{glo_d.html#derived_type_specifier,@emph{derived type specifier}}
named @emph{name}.

The meaning of the new @uref{glo_t.html#type_specifier,@emph{type
specifier}} is given in terms of a function which expands the
@uref{glo_t.html#type_specifier,@emph{type specifier}} into another
@uref{glo_t.html#type_specifier,@emph{type specifier}}, which itself
will be expanded if it contains references to another
@uref{glo_d.html#derived_type_specifier,@emph{derived type specifier}}.

The newly defined @uref{glo_t.html#type_specifier,@emph{type specifier}}
may be referenced as a list of the form (@emph{name} @emph{arg}1@emph{}
@emph{arg}2@emph{} ...). The number of arguments must be appropriate to
the @emph{lambda-list}. If the new
@uref{glo_t.html#type_specifier,@emph{type specifier}} takes no
arguments, or if all of its arguments are optional, the
@uref{glo_t.html#type_specifier,@emph{type specifier}} may be used as an
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}}.

The @uref{glo_a.html#argument,@emph{argument}}
@uref{glo_e.html#expression,@emph{expressions}} to the
@uref{glo_t.html#type_specifier,@emph{type specifier}}, @emph{arg1} ...
@emph{argn}, are not @emph{evaluated}. Instead, these
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}} become the
@uref{glo_o.html#object,@emph{objects}} to which corresponding
@uref{glo_p.html#parameter,@emph{parameters}} become
@uref{glo_b.html#bound,@emph{bound}}.

The body of the @ref{#deftype,@strong{deftype}}
@uref{glo_f.html#form,@emph{form}} (but not the @emph{lambda-list}) is
implicitly enclosed in a @uref{glo_b.html#block,@emph{block}} named
@emph{name}, and is evaluated as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}, returning a new
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

The @uref{glo_l.html#lexical_environment,@emph{lexical environment}} of
the body is the one which was current at the time the
@ref{#deftype,@strong{deftype}} form was evaluated, augmented by the
@uref{glo_v.html#variable,@emph{variables}} in the @emph{lambda-list}.

Recursive expansion of the @uref{glo_t.html#type_specifier,@emph{type
specifier}} returned as the expansion must terminate, including the
expansion of @uref{glo_t.html#type_specifier,@emph{type specifiers}}
which are nested within the expansion.

The consequences are undefined if the result of fully expanding a
@uref{glo_t.html#type_specifier,@emph{type specifier}} contains any
circular structure, except within the
@uref{glo_o.html#object,@emph{objects}} referred to by
@uref{typspe_member.html#member,@strong{member}} and
@uref{typspe_eql.html#eql,@strong{eql}}
@uref{glo_t.html#type_specifier,@emph{type specifiers}}.

@emph{Documentation} is attached to @emph{name} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
kind @uref{any_type.html#type,@strong{type}}.

If a @ref{#deftype,@strong{deftype}} @uref{glo_f.html#form,@emph{form}}
appears as a @uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must ensure that the
@emph{name} is recognized in subsequent
@uref{glo_t.html#type,@emph{type}} declarations. The
@uref{glo_p.html#programmer,@emph{programmer}} must ensure that the body
of a @ref{#deftype,@strong{deftype}} form can be @emph{evaluated} at
compile time if the @emph{name} is referenced in subsequent
@uref{glo_t.html#type,@emph{type}} declarations. If the expansion of a
@uref{glo_t.html#type_specifier,@emph{type specifier}} is not defined
fully at compile time (perhaps because it expands into an unknown
@uref{glo_t.html#type_specifier,@emph{type specifier}} or a
@strong{satisfies} of a named @uref{glo_f.html#function,@emph{function}}
that isn't defined in the compile-time environment), an
@uref{glo_i.html#implementation,@emph{implementation}} may ignore any
references to this @uref{glo_t.html#type,@emph{type}} in declarations
and/or signal a warning.

@strong{Examples:}

@verbatim
 (defun equidimensional (a)
   (or (< (array-rank a) 2)
       (apply #'= (array-dimensions a)))) =>  EQUIDIMENSIONAL
 (deftype square-matrix (&optional type size)
   `(and (array ,type (,size ,size))
         (satisfies equidimensional))) =>  SQUARE-MATRIX
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_4-2-3.html,Section 4.2.3 (Type Specifiers)},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss291.html,RECURSIVE-DEFTYPE:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss161.html,FLET-IMPLICIT-BLOCK:YES}
@item
@uref{../Issues/iss105.html,DEFMACRO-BLOCK-SCOPE:EXCLUDES-BINDINGS}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class BUILT-IN-CLASS
@subsubsection CLHS: System Class BUILT-IN-CLASS
@anchor{#clhs-system-class-built-in-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_structure-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{BUILT-IN-CLASS}

@strong{Class Precedence List:}

@ref{#built-in-class,@strong{built-in-class}},
@uref{syscla_class.html#class,@strong{class}},
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_b.html#built-in_class,@emph{built-in class}} is a
@uref{glo_c.html#class,@emph{class}} whose
@uref{glo_i.html#instance,@emph{instances}} have restricted capabilities
or special representations. Attempting to use
@uref{mac_defclass.html#defclass,@strong{defclass}} to define
@uref{glo_s.html#subclass,@emph{subclasses}} of a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. Calling
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
to create an @uref{glo_i.html#instance,@emph{instance}} of a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. Calling
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} on an
@uref{glo_i.html#instance,@emph{instance}} of a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. Redefining a
@uref{glo_b.html#built-in_class,@emph{built-in class}} or using
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} to
change the @uref{glo_c.html#class,@emph{class}} of an
@uref{glo_i.html#instance,@emph{instance}} to or from a
@uref{glo_b.html#built-in_class,@emph{built-in class}} signals an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}. However,
@uref{glo_b.html#built-in_class,@emph{built-in classes}} can be used as
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}} in
@uref{glo_m.html#method,@emph{methods}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class CLASS
@subsubsection CLHS: System Class CLASS
@anchor{#clhs-system-class-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_standa_ric-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_built-in-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{CLASS}

@strong{Class Precedence List:}

@ref{#class,@strong{class}},
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#class,@strong{class}}
represents @uref{glo_o.html#object,@emph{objects}} that determine the
structure and behavior of their
@uref{glo_i.html#instance,@emph{instances}}. Associated with an
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} @ref{#class,@strong{class}} is
information describing its place in the directed acyclic graph of
@uref{glo_c.html#class,@emph{classes}}, its
@uref{glo_s.html#slot,@emph{slots}}, and its options.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@item
@uref{../Issues/iss207.html,JUN90-TRIVIAL-ISSUES:9}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class FUNCTION
@subsubsection CLHS: System Class FUNCTION
@anchor{#clhs-system-class-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_boolean.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typ_compiled-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{FUNCTION}

@strong{Class Precedence List:}

@ref{#function,@strong{function}}, @uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_f.html#function,@emph{function}} is an
@uref{glo_o.html#object,@emph{object}} that represents code to be
executed when an appropriate number of arguments is supplied. A
@uref{glo_f.html#function,@emph{function}} is produced by the
@uref{speope_function.html#function,@strong{function}}
@uref{glo_s.html#special_form,@emph{special form}}, the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_coerce.html#coerce,@strong{coerce}}, or the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_compile.html#compile,@strong{compile}}. A
@uref{glo_f.html#function,@emph{function}} can be directly invoked by
using it as the first argument to
@uref{fun_funcall.html#funcall,@strong{funcall}},
@uref{fun_apply.html#apply,@strong{apply}}, or
@uref{speope_multiple-value-call.html#multiple-value-call,@strong{multiple-value-call}}.

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{function} @emph{[arg-typespec [value-typespec]]}

@verbatim
arg-typespec::= (typespec*  
                 [&optional typespec*]  
                 [&rest typespec]  
                 [&key (keyword typespec)*]) 
@end verbatim

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{value-typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

The list form of the @ref{#function,@strong{function}}
@emph{type-specifier} can be used only for declaration and not for
discrimination. Every element of this @uref{glo_t.html#type,@emph{type}}
is a @uref{glo_f.html#function,@emph{function}} that accepts arguments
of the types specified by the @emph{argj-types} and returns values that
are members of the @uref{glo_t.html#type,@emph{types}} specified by
@emph{value-type}. The &optional, &rest, &key, and &allow-other-keys
markers can appear in the list of argument types. The
@uref{glo_t.html#type_specifier,@emph{type specifier}} provided with
&rest is the @uref{glo_t.html#type,@emph{type}} of each actual argument,
not the @uref{glo_t.html#type,@emph{type}} of the corresponding
variable.

The &key parameters should be supplied as lists of the form
(@emph{keyword} @emph{type}). The @emph{keyword} must be a valid
keyword-name symbol as must be supplied in the actual arguments of a
call. This is usually a @uref{glo_s.html#symbol,@emph{symbol}} in the
KEYWORD package but can be any @uref{glo_s.html#symbol,@emph{symbol}}.
When &key is given in a @strong{function}
@uref{glo_t.html#type_specifier,@emph{type specifier}}
@uref{glo_l.html#lambda_list,@emph{lambda list}}, the
@uref{glo_k.html#keyword_parameter,@emph{keyword parameters}} given are
exhaustive unless &allow-other-keys is also present. &allow-other-keys
is an indication that other keyword arguments might actually be supplied
and, if supplied, can be used. For example, the
@uref{glo_t.html#type,@emph{type}} of the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_make-list.html#make-list,@strong{make-list}} could be declared
as follows:

@verbatim
 (function ((integer 0) &key (:initial-element t)) list)
@end verbatim

The @emph{value-type} can be a @strong{values}
@uref{glo_t.html#type_specifier,@emph{type specifier}} in order to
indicate the @uref{glo_t.html#type,@emph{types}} of
@uref{glo_m.html#multiple_values,@emph{multiple values}}.

Consider a declaration of the following form:

@verbatim
 (ftype (function (arg0-type arg1-type ...) val-type) f))
@end verbatim

Any @uref{glo_f.html#form,@emph{form}} (f arg0 arg1 ...) within the
scope of that declaration is equivalent to the following:

@verbatim
 (the val-type (f (the arg0-type arg0) (the arg1-type arg1) ...))
@end verbatim

That is, the consequences are undefined if any of the arguments are not
of the specified @uref{glo_t.html#type,@emph{types}} or the result is
not of the specified @uref{glo_t.html#type,@emph{type}}. In particular,
if any argument is not of the correct
@uref{glo_t.html#type,@emph{type}}, the result is not guaranteed to be
of the specified @uref{glo_t.html#type,@emph{type}}.

Thus, an @uref{dec_ftype.html#ftype,@strong{ftype}} declaration for a
@uref{glo_f.html#function,@emph{function}} describes
@uref{glo_c.html#call,@emph{calls}} to the
@uref{glo_f.html#function,@emph{function}}, not the actual definition of
the @uref{glo_f.html#function,@emph{function}}.

Consider a declaration of the following form:

@verbatim
 (type (function (arg0-type arg1-type ...) val-type) fn-valued-variable)
@end verbatim

This declaration has the interpretation that, within the scope of the
declaration, the consequences are unspecified if the value of
fn-valued-variable is called with arguments not of the specified
@uref{glo_t.html#type,@emph{types}}; the value resulting from a valid
call will be of type val-type.

As with variable type declarations, nested declarations imply
intersections of @uref{glo_t.html#type,@emph{types}}, as follows:

* Consider the following two declarations of
@uref{dec_ftype.html#ftype,@strong{ftype}}:

@verbatim
 (ftype (function (arg0-type1 arg1-type1 ...) val-type1) f))
@end verbatim

and

@verbatim
 (ftype (function (arg0-type2 arg1-type2 ...) val-type2) f))
@end verbatim

If both these declarations are in effect, then within the shared scope
of the declarations, calls to f can be treated as if f were declared as
follows:

@verbatim
 (ftype (function ((and arg0-type1 arg0-type2) (and arg1-type1 arg1-type2 ...) ...)
                  (and val-type1 val-type2)) 
        f))
@end verbatim

It is permitted to ignore one or all of the
@uref{dec_ftype.html#ftype,@strong{ftype}} declarations in force.

* If two (or more) type declarations are in effect for a variable, and
they are both function declarations, the declarations combine similarly.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss176.html,FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS:RESTRICTIVE}
@item
@uref{../Issues/iss208.html,KEYWORD-ARGUMENT-NAME-PACKAGE:ANY}
@item
@uref{../Issues/iss178.html,FUNCTION-TYPE-REST-LIST-ELEMENT:USE-ACTUAL-ARGUMENT-TYPE}
@item
@uref{../Issues/iss177.html,FUNCTION-TYPE-KEY-NAME:SPECIFY-KEYWORD}
@item
@uref{../Issues/iss343.html,SYNTACTIC-ENVIRONMENT-ACCESS:RETRACTED-MAR91}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class GENERIC-FUNCTION
@subsubsection CLHS: System Class GENERIC-FUNCTION
@anchor{#clhs-system-class-generic-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_compiled-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_standa_ric-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{GENERIC-FUNCTION}

@strong{Class Precedence List:}

@ref{#generic-function,@strong{generic-function}},
@uref{syscla_function.html#function,@strong{function}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_g.html#generic_function,@emph{generic function}} is a
@uref{glo_f.html#function,@emph{function}} whose behavior depends on the
@uref{glo_c.html#class,@emph{classes}} or identities of the
@uref{glo_a.html#argument,@emph{arguments}} supplied to it. A generic
function object contains a set of
@uref{glo_m.html#method,@emph{methods}}, a
@uref{glo_l.html#lambda_list,@emph{lambda list}}, a
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_t.html#type,@emph{type}}, and other information. The
@uref{glo_m.html#method,@emph{methods}} define the class-specific
behavior and operations of the
@uref{glo_g.html#generic_function,@emph{generic function}}; a
@uref{glo_m.html#method,@emph{method}} is said to
@uref{glo_s.html#specialize,@emph{specialize}} a
@uref{glo_g.html#generic_function,@emph{generic function}}. When
invoked, a @uref{glo_g.html#generic_function,@emph{generic function}}
executes a subset of its @uref{glo_m.html#method,@emph{methods}} based
on the @uref{glo_c.html#class,@emph{classes}} or identities of its
@uref{glo_a.html#argument,@emph{arguments}}.

A @uref{glo_g.html#generic_function,@emph{generic function}} can be used
in the same ways that an ordinary
@uref{glo_f.html#function,@emph{function}} can be used; specifically, a
@uref{glo_g.html#generic_function,@emph{generic function}} can be used
as an argument to @uref{fun_funcall.html#funcall,@strong{funcall}} and
@uref{fun_apply.html#apply,@strong{apply}}, and can be given a global or
a local name.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss207.html,JUN90-TRIVIAL-ISSUES:9}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class METHOD-COMBINATION
@subsubsection CLHS: System Class METHOD-COMBINATION
@anchor{#clhs-system-class-method-combination}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{cla_standard-object.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_t.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{METHOD-COMBINATION}

@strong{Class Precedence List:}

@ref{#method-combination,@strong{method-combination}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

Every @uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_o.html#object,@emph{object}} is an
@uref{glo_i.html#indirect_instance,@emph{indirect instance}} of the
@uref{glo_c.html#class,@emph{class}}
@ref{#method-combination,@strong{method-combination}}. A
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_o.html#object,@emph{object}} represents the information about
the @uref{glo_m.html#method_combination,@emph{method combination}} being
used by a @uref{glo_g.html#generic_function,@emph{generic function}}. A
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_o.html#object,@emph{object}} contains information about both
the type of @uref{glo_m.html#method_combination,@emph{method
combination}} and the arguments being used with that
@uref{glo_t.html#type,@emph{type}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class METHOD
@subsubsection CLHS: System Class METHOD
@anchor{#clhs-system-class-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_standard-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_standard-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{METHOD}

@strong{Class Precedence List:}

@ref{#method,@strong{method}}, @uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

A @uref{glo_m.html#method,@emph{method}} is an
@uref{glo_o.html#object,@emph{object}} that represents a modular part of
the behavior of a @uref{glo_g.html#generic_function,@emph{generic
function}}.

A @uref{glo_m.html#method,@emph{method}} contains
@uref{glo_c.html#code,@emph{code}} to implement the
@uref{glo_m.html#method,@emph{method}}'s behavior, a sequence of
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
that specify when the given @uref{glo_m.html#method,@emph{method}} is
applicable, and a sequence of
@uref{glo_q.html#qualifier,@emph{qualifiers}} that is used by the method
combination facility to distinguish among
@uref{glo_m.html#method,@emph{methods}}. Each required parameter of each
@uref{glo_m.html#method,@emph{method}} has an associated
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}},
and the @uref{glo_m.html#method,@emph{method}} will be invoked only on
arguments that satisfy its
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}.

The method combination facility controls the selection of
@uref{glo_m.html#method,@emph{methods}}, the order in which they are
run, and the values that are returned by the generic function. The
object system offers a default method combination type and provides a
facility for declaring new types of method combination.

@strong{See Also:}

@uref{sec_7-6.html,Section 7.6 (Generic Functions and Methods)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss207.html,JUN90-TRIVIAL-ISSUES:9}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class STANDARD-GENERIC-FUNCTION
@subsubsection CLHS: System Class STANDARD-GENERIC-FUNCTION
@anchor{#clhs-system-class-standard-generic-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_generic-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{STANDARD-GENERIC-FUNCTION}

@strong{Class Precedence List:}

@ref{#standard-generic-function,@strong{standard-generic-function}},
@uref{syscla_generic-function.html#generic-function,@strong{generic-function}},
@uref{syscla_function.html#function,@strong{function}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_c.html#class,@emph{class}}
@ref{#standard-generic-function,@strong{standard-generic-function}} is
the default @uref{glo_c.html#class,@emph{class}} of
@uref{glo_g.html#generic_function,@emph{generic functions}}
@emph{established} by
@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{fun_ensure-ge_ric-function.html#ensure-generic-function,@strong{ensure-generic-function}},
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}, and
@uref{mac_defclass.html#defclass,@strong{defclass}}
@uref{glo_f.html#form,@emph{forms}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class STANDARD-CLASS
@subsubsection CLHS: System Class STANDARD-CLASS
@anchor{#clhs-system-class-standard-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_structure-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{STANDARD-CLASS}

@strong{Class Precedence List:}

@ref{#standard-class,@strong{standard-class}},
@uref{syscla_class.html#class,@strong{class}},
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_c.html#class,@emph{class}}
@ref{#standard-class,@strong{standard-class}} is the default
@uref{glo_c.html#class,@emph{class}} of
@uref{glo_c.html#class,@emph{classes}} defined by
@uref{mac_defclass.html#defclass,@strong{defclass}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class STANDARD-METHOD
@subsubsection CLHS: System Class STANDARD-METHOD
@anchor{#clhs-system-class-standard-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{cla_structure-object.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{STANDARD-METHOD}

@strong{Class Precedence List:}

@ref{#standard-method,@strong{standard-method}},
@uref{syscla_method.html#method,@strong{method}},
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_c.html#class,@emph{class}}
@ref{#standard-method,@strong{standard-method}} is the default
@uref{glo_c.html#class,@emph{class}} of
@uref{glo_m.html#method,@emph{methods}} defined by the
@uref{mac_defmethod.html#defmethod,@strong{defmethod}} and
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}
@uref{glo_f.html#form,@emph{forms}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss360.html,WITH-ADDED-METHODS:DELETE}
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class STRUCTURE-CLASS
@subsubsection CLHS: System Class STRUCTURE-CLASS
@anchor{#clhs-system-class-structure-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_built-in-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_standard-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{STRUCTURE-CLASS}

@strong{Class Precedence List:}

@ref{#structure-class,@strong{structure-class}},
@uref{syscla_class.html#class,@strong{class}},
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

All @uref{glo_c.html#class,@emph{classes}} defined by means of
@uref{mac_defstruct.html#defstruct,@strong{defstruct}} are
@uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{class}}
@ref{#structure-class,@strong{structure-class}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class T
@subsubsection CLHS: System Class T
@anchor{#clhs-system-class-t}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_method-combination.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_satisfies.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{T}

@strong{Class Precedence List:}

@ref{#t,@strong{t}}

@strong{Description:}

The set of all @uref{glo_o.html#object,@emph{objects}}. The
@uref{glo_t.html#type,@emph{type}} @ref{#t,@strong{t}} is a
@uref{glo_s.html#supertype,@emph{supertype}} of every
@uref{glo_t.html#type,@emph{type}}, including itself. Every
@uref{glo_o.html#object,@emph{object}} is of
@uref{glo_t.html#type,@emph{type}} @ref{#t,@strong{t}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss057.html,COMMON-TYPE:REMOVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type BOOLEAN
@subsubsection CLHS: Type BOOLEAN
@anchor{#clhs-type-boolean}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typ_nil.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{BOOLEAN}

@strong{Supertypes:}

@ref{#boolean,@strong{boolean}},
@uref{syscla_symbol.html#symbol,@strong{symbol}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#boolean,@strong{boolean}}
contains the @uref{glo_s.html#symbol,@emph{symbols}}
@uref{any_t.html#t,@strong{t}} and @uref{any_nil.html#nil,@strong{nil}},
which represent true and false, respectively.

@strong{See Also:}

@uref{any_t.html#t,@strong{t}}
(@uref{glo_c.html#constant_variable,@emph{constant variable}}),
@uref{any_nil.html#nil,@strong{nil}}
(@uref{glo_c.html#constant_variable,@emph{constant variable}}),
@uref{speope_if.html#if,@strong{if}},
@uref{fun_not.html#not,@strong{not}},
@uref{fun_complement.html#complement,@strong{complement}}

@strong{Notes:}

Conditional operations, such as @uref{speope_if.html#if,@strong{if}},
permit the use of @uref{glo_g.html#generalized_boolean,@emph{generalized
booleans}}, not just @uref{glo_b.html#boolean,@emph{booleans}}; any
@uref{glo_n.html#non-nil,@emph{non-nil}} value, not just
@uref{any_t.html#t,@strong{t}}, counts as true for a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.
However, as a matter of convention, the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_t.html#t,@strong{t}} is
considered the canonical value to use even for a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}} when no
better choice presents itself.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type COMPILED-FUNCTION
@subsubsection CLHS: Type COMPILED-FUNCTION
@anchor{#clhs-type-compiled-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_generic-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type} @strong{COMPILED-FUNCTION}

@strong{Supertypes:}

@ref{#compiled-function,@strong{compiled-function}},
@uref{syscla_function.html#function,@strong{function}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

Any @uref{glo_f.html#function,@emph{function}} may be considered by an
@uref{glo_i.html#implementation,@emph{implementation}} to be a a
@uref{glo_c.html#compiled_function,@emph{compiled function}} if it
contains no references to @uref{glo_m.html#macro,@emph{macros}} that
must be expanded at run time, and it contains no unresolved references
to @uref{glo_l.html#load_time_value,@emph{load time values}}. See
@uref{sec_3-2-2.html,Section 3.2.2 (Compilation Semantics)}.

@uref{glo_f.html#function,@emph{Functions}} whose definitions appear
lexically within a @uref{glo_f.html#file,@emph{file}} that has been
@emph{compiled} with
@uref{fun_compile-file.html#compile-file,@strong{compile-file}} and then
@emph{loaded} with @uref{fun_load.html#load,@strong{load}} are of
@uref{glo_t.html#type,@emph{type}}
@ref{#compiled-function,@strong{compiled-function}}.
@uref{glo_f.html#function,@emph{Functions}} produced by the
@uref{fun_compile.html#compile,@strong{compile}} function are of
@uref{glo_t.html#type,@emph{type}}
@ref{#compiled-function,@strong{compiled-function}}. Other
@uref{glo_f.html#function,@emph{functions}} might also be of
@uref{glo_t.html#type,@emph{type}}
@ref{#compiled-function,@strong{compiled-function}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss064.html,COMPILED-FUNCTION-REQUIREMENTS:TIGHTEN}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier AND
@subsubsection CLHS: Type Specifier AND
@anchor{#clhs-type-specifier-and}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_or.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{AND}

@strong{Compound Type Specifier Kind:}

Combining.

@strong{Compound Type Specifier Syntax:}

@strong{and} @emph{@emph{typespec}@strong{*}}

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

This denotes the set of all @uref{glo_o.html#object,@emph{objects}} of
the @uref{glo_t.html#type,@emph{type}} determined by the intersection of
the @emph{typespecs}.

@uref{any_st.html#ST,@strong{*}} is not permitted as an argument.

The @uref{glo_t.html#type_specifier,@emph{type specifiers}} (and) and
@uref{any_t.html#t,@strong{t}} are equivalent. The symbol
@uref{any_and.html#and,@strong{and}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}, and,
specifically, it is not an abbreviation for (and).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier EQL
@subsubsection CLHS: Type Specifier EQL
@anchor{#clhs-type-specifier-eql}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_values.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_coerce.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{EQL}

@strong{Compound Type Specifier Kind:}

Combining.

@strong{Compound Type Specifier Syntax:}

@strong{eql} @emph{object}

@strong{Compound Type Specifier Arguments:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Compound Type Specifier Description:}

Represents the @uref{glo_t.html#type,@emph{type}} of all @emph{x} for
which (eql @emph{object} @emph{x}) is true.

The argument @emph{object} is required. The @emph{object} can be
@uref{any_st.html#ST,@strong{*}}, but if so it denotes itself (the
symbol @uref{any_st.html#ST,@strong{*}}) and does not represent an
unspecified value. The @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_eql.html#eql,@strong{eql}} is not valid as an
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier MEMBER
@subsubsection CLHS: Type Specifier MEMBER
@anchor{#clhs-type-specifier-member}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_satisfies.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{MEMBER}

@strong{Compound Type Specifier Kind:}

Combining.

@strong{Compound Type Specifier Syntax:}

@strong{member} @emph{@emph{object}@strong{*}}

@strong{Compound Type Specifier Arguments:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Compound Type Specifier Description:}

This denotes the set containing the named @emph{objects}. An
@uref{glo_o.html#object,@emph{object}} is of this
@uref{glo_t.html#type,@emph{type}} if and only if it is
@uref{fun_eql.html#eql,@strong{eql}} to one of the specified
@emph{objects}.

The @uref{glo_t.html#type_specifier,@emph{type specifiers}} (member) and
@uref{any_nil.html#nil,@strong{nil}} are equivalent.
@uref{any_st.html#ST,@strong{*}} can be among the @emph{objects}, but if
so it denotes itself (the symbol @uref{any_st.html#ST,@strong{*}}) and
does not represent an unspecified value. The symbol
@uref{any_member.html#member,@strong{member}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}; and,
specifically, it is not an abbreviation for either (member) or (member
*).

@strong{See Also:}

the @uref{glo_t.html#type,@emph{type}}
@uref{typspe_eql.html#eql,@strong{eql}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier NOT
@subsubsection CLHS: Type Specifier NOT
@anchor{#clhs-type-specifier-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_member.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_and.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{NOT}

@strong{Compound Type Specifier Kind:}

Combining.

@strong{Compound Type Specifier Syntax:}

@strong{not} @emph{typespec}

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

This denotes the set of all @uref{glo_o.html#object,@emph{objects}} that
are not of the @uref{glo_t.html#type,@emph{type}} @emph{typespec}.

The argument is required, and cannot be
@uref{any_st.html#ST,@strong{*}}.

The symbol @ref{#not,@strong{not}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier OR
@subsubsection CLHS: Type Specifier OR
@anchor{#clhs-type-specifier-or}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_and.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_values.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{OR}

@strong{Compound Type Specifier Kind:}

Combining.

@strong{Compound Type Specifier Syntax:}

@strong{or} @emph{@emph{typespec}@strong{*}}

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

This denotes the set of all @uref{glo_o.html#object,@emph{objects}} of
the @uref{glo_t.html#type,@emph{type}} determined by the union of the
@emph{typespecs}. For example, the @uref{glo_t.html#type,@emph{type}}
@uref{syscla_list.html#list,@strong{list}} by definition is the same as
(or null cons). Also, the value returned by
@uref{fun_positionc_ition-if-not.html#position,@strong{position}} is an
@uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} (or null (integer 0 *)); i.e., either
@uref{any_nil.html#nil,@strong{nil}} or a non-negative
@uref{glo_i.html#integer,@emph{integer}}.

@uref{any_st.html#ST,@strong{*}} is not permitted as an argument.

The @uref{glo_t.html#type_specifier,@emph{type specifiers}} (or) and
@uref{any_nil.html#nil,@strong{nil}} are equivalent. The symbol
@ref{#or,@strong{or}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}; and,
specifically, it is not an abbreviation for (or).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier SATISFIES
@subsubsection CLHS: Type Specifier SATISFIES
@anchor{#clhs-type-specifier-satisfies}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_t.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_member.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{SATISFIES}

@strong{Compound Type Specifier Kind:}

Predicating.

@strong{Compound Type Specifier Syntax:}

@strong{satisfies} @emph{predicate-name}

@strong{Compound Type Specifier Arguments:}

@emph{predicate-name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Compound Type Specifier Description:}

This denotes the set of all @uref{glo_o.html#object,@emph{objects}} that
satisfy the @uref{glo_p.html#predicate,@emph{predicate}}
@emph{predicate-name}, which must be a
@uref{glo_s.html#symbol,@emph{symbol}} whose global
@uref{glo_f.html#function,@emph{function}} definition is a one-argument
predicate. A name is required for @emph{predicate-name};
@uref{glo_l.html#lambda_expression,@emph{lambda expressions}} are not
allowed. For example, the @uref{glo_t.html#type_specifier,@emph{type
specifier}} (and integer (satisfies evenp)) denotes the set of all even
integers. The form (typep @emph{x} '(satisfies @emph{p})) is equivalent
to (if (@emph{p} @emph{x}) t nil).

The argument is required. The @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}} can be the argument, but it denotes
itself (the @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_st.html#ST,@strong{*}}), and does not represent an unspecified
value.

The symbol @ref{#satisfies,@strong{satisfies}} is not valid as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Type Specifier VALUES
@subsubsection CLHS: Type Specifier VALUES
@anchor{#clhs-type-specifier-values}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{typspe_or.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_types_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{typspe_eql.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Type Specifier} @strong{VALUES}

@strong{Compound Type Specifier Kind:}

Specializing.

@strong{Compound Type Specifier Syntax:}

@strong{values} @emph{@emph{value-typespec}}

@verbatim
value-typespec::= typespec* [&optional typespec*] [&rest typespec] [&allow-other-keys] 
@end verbatim

@strong{Compound Type Specifier Arguments:}

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@strong{Compound Type Specifier Description:}

This @uref{glo_t.html#type_specifier,@emph{type specifier}} can be used
only as the @emph{value-type} in a
@uref{syscla_function.html#function,@strong{function}}
@uref{glo_t.html#type_specifier,@emph{type specifier}} or a
@uref{speope_the.html#the,@strong{the}}
@uref{glo_s.html#special_form,@emph{special form}}. It is used to
specify individual @uref{glo_t.html#type,@emph{types}} when
@uref{glo_m.html#multiple_values,@emph{multiple values}} are involved.
The &optional and &rest markers can appear in the @emph{value-type}
list; they indicate the parameter list of a
@uref{glo_f.html#function,@emph{function}} that, when given to
@uref{speope_multiple-value-call.html#multiple-value-call,@strong{multiple-value-call}}
along with the values, would correctly receive those values.

The symbol @uref{any_st.html#ST,@strong{*}} may not be among the
@emph{value-types}.

The symbol @uref{any_values.html#values,@strong{values}} is not valid as
a @uref{glo_t.html#type_specifier,@emph{type specifier}}; and,
specifically, it is not an abbreviation for (values).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss354.html,TYPE-SPECIFIER-ABBREVIATION:X3J13-JUN90-GUESS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 5
@section CLHS: Chapter 5
@anchor{#clhs-chapter-5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_simple-type-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
5. Data and Control Flow

@uref{sec_5-1.html,}

5.1 Generalized Reference

@uref{sec_5-2.html,}

5.2 Transfer of Control to an Exit Point

@uref{sec_the_data__w_dictionary.html,}

5.3 The Data and Control Flow Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 52::
* CLHS Section The Data and Control Flow Dictionary::
@end menu

@node CLHS Section 52
@subsection CLHS: Section 5.2
@anchor{#clhs-section-5.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_5-1-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
5.2 Transfer of Control to an Exit Point

When a transfer of control is initiated by
@uref{speope_go.html#go,@strong{go}},
@uref{speope_return-from.html#return-from,@strong{return-from}}, or
@uref{speope_throw.html#throw,@strong{throw}} the following events occur
in order to accomplish the transfer of control. Note that for
@uref{speope_go.html#go,@strong{go}}, the
@uref{glo_e.html#exit_point,@emph{exit point}} is the
@uref{glo_f.html#form,@emph{form}} within the
@uref{speope_tagbody.html#tagbody,@strong{tagbody}} that is being
executed at the time the @uref{speope_go.html#go,@strong{go}} is
performed; for
@uref{speope_return-from.html#return-from,@strong{return-from}}, the
@uref{glo_e.html#exit_point,@emph{exit point}} is the corresponding
@uref{speope_block.html#block,@strong{block}}
@uref{glo_f.html#form,@emph{form}}; and for
@uref{speope_throw.html#throw,@strong{throw}}, the
@uref{glo_e.html#exit_point,@emph{exit point}} is the corresponding
@uref{speope_catch.html#catch,@strong{catch}}
@uref{glo_f.html#form,@emph{form}}.

1. Intervening @uref{glo_e.html#exit_point,@emph{exit points}} are
``abandoned'' (i.e., their @uref{glo_e.html#extent,@emph{extent}} ends
and it is no longer valid to attempt to transfer control through them).

2. The cleanup clauses of any intervening
@uref{speope_unwind-protect.html#unwind-protect,@strong{unwind-protect}}
clauses are evaluated.

3. Intervening dynamic @uref{glo_b.html#binding,@emph{bindings}} of
@uref{dec_special.html#special,@strong{special}} variables,
@uref{glo_c.html#catch_tag,@emph{catch tags}},
@uref{glo_c.html#condition_handler,@emph{condition handlers}}, and
@uref{glo_r.html#restart,@emph{restarts}} are undone.

4. The @uref{glo_e.html#extent,@emph{extent}} of the
@uref{glo_e.html#exit_point,@emph{exit point}} being invoked ends, and
control is passed to the target.

The extent of an exit being ``abandoned'' because it is being passed
over ends as soon as the transfer of control is initiated. That is,
event 1 occurs at the beginning of the initiation of the transfer of
control. The consequences are undefined if an attempt is made to
transfer control to an @uref{glo_e.html#exit_point,@emph{exit point}}
whose @uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} has ended.

Events 2 and 3 are actually performed interleaved, in the order
corresponding to the reverse order in which they were established. The
effect of this is that the cleanup clauses of an
@uref{speope_unwind-protect.html#unwind-protect,@strong{unwind-protect}}
see the same dynamic @uref{glo_b.html#binding,@emph{bindings}} of
variables and @uref{glo_c.html#catch_tag,@emph{catch tags}} as were
visible when the
@uref{speope_unwind-protect.html#unwind-protect,@strong{unwind-protect}}
was entered.

Event 4 occurs at the end of the transfer of control.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss152.html,EXIT-EXTENT:MINIMAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Data and Control Flow Dictionary
@subsection CLHS: Section The Data and Control Flow Dictionary
@anchor{#clhs-section-the-data-and-control-flow-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_5-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_apply.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
5.3 The Data and Control Flow Dictionary

@uref{fun_apply.html,@emph{Function} @strong{APPLY}}

@uref{mac_defun.html,@emph{Macro} @strong{DEFUN}}

@uref{acc_fdefinition.html,@emph{Accessor} @strong{FDEFINITION}}

@uref{fun_fboundp.html,@emph{Function} @strong{FBOUNDP}}

@uref{fun_fmakunbound.html,@emph{Function} @strong{FMAKUNBOUND}}

@uref{speope_fletcm_scm_macrolet.html,@emph{Special Operator}
@strong{FLET, LABELS, MACROLET}}

@uref{fun_funcall.html,@emph{Function} @strong{FUNCALL}}

@uref{speope_function.html,@emph{Special Operator} @strong{FUNCTION}}

@uref{fun_function-_a-expression.html,@emph{Function}
@strong{FUNCTION-LAMBDA-EXPRESSION}}

@uref{fun_functionp.html,@emph{Function} @strong{FUNCTIONP}}

@uref{fun_compiled-function-p.html,@emph{Function}
@strong{COMPILED-FUNCTION-P}}

@uref{convar_call-a_uments-limit.html,@emph{Constant Variable}
@strong{CALL-ARGUMENTS-LIMIT}}

@uref{convar_lambda_ist-keywords.html,@emph{Constant Variable}
@strong{LAMBDA-LIST-KEYWORDS}}

@uref{convar_lambda_meters-limit.html,@emph{Constant Variable}
@strong{LAMBDA-PARAMETERS-LIMIT}}

@uref{mac_defconstant.html,@emph{Macro} @strong{DEFCONSTANT}}

@uref{mac_defparametercm_defvar.html,@emph{Macro} @strong{DEFPARAMETER,
DEFVAR}}

@uref{mac_destructuring-bind.html,@emph{Macro}
@strong{DESTRUCTURING-BIND}}

@uref{speope_letcm_letst.html,@emph{Special Operator} @strong{LET,
LET*}}

@uref{speope_progv.html,@emph{Special Operator} @strong{PROGV}}

@uref{spefor_setq.html,@emph{Special Form} @strong{SETQ}}

@uref{mac_psetq.html,@emph{Macro} @strong{PSETQ}}

@uref{speope_block.html,@emph{Special Operator} @strong{BLOCK}}

@uref{speope_catch.html,@emph{Special Operator} @strong{CATCH}}

@uref{speope_go.html,@emph{Special Operator} @strong{GO}}

@uref{speope_return-from.html,@emph{Special Operator}
@strong{RETURN-FROM}}

@uref{mac_return.html,@emph{Macro} @strong{RETURN}}

@uref{speope_tagbody.html,@emph{Special Operator} @strong{TAGBODY}}

@uref{speope_throw.html,@emph{Special Operator} @strong{THROW}}

@uref{speope_unwind-protect.html,@emph{Special Operator}
@strong{UNWIND-PROTECT}}

@uref{convar_nil.html,@emph{Constant Variable} @strong{NIL}}

@uref{fun_not.html,@emph{Function} @strong{NOT}}

@uref{convar_t.html,@emph{Constant Variable} @strong{T}}

@uref{fun_eq.html,@emph{Function} @strong{EQ}}

@uref{fun_eql.html,@emph{Function} @strong{EQL}}

@uref{fun_equal.html,@emph{Function} @strong{EQUAL}}

@uref{fun_equalp.html,@emph{Function} @strong{EQUALP}}

@uref{fun_identity.html,@emph{Function} @strong{IDENTITY}}

@uref{fun_complement.html,@emph{Function} @strong{COMPLEMENT}}

@uref{fun_constantly.html,@emph{Function} @strong{CONSTANTLY}}

@uref{fun_everycm_s_erycm_notany.html,@emph{Function} @strong{EVERY,
SOME, NOTEVERY, NOTANY}}

@uref{mac_and.html,@emph{Macro} @strong{AND}}

@uref{mac_cond.html,@emph{Macro} @strong{COND}}

@uref{speope_if.html,@emph{Special Operator} @strong{IF}}

@uref{mac_or.html,@emph{Macro} @strong{OR}}

@uref{mac_whencm_unless.html,@emph{Macro} @strong{WHEN, UNLESS}}

@uref{mac_casecm_ccasecm_ecase.html,@emph{Macro} @strong{CASE, CCASE,
ECASE}}

@uref{mac_typecasec_cm_etypecase.html,@emph{Macro} @strong{TYPECASE,
CTYPECASE, ETYPECASE}}

@uref{mac_multiple-value-bind.html,@emph{Macro}
@strong{MULTIPLE-VALUE-BIND}}

@uref{speope_multiple-value-call.html,@emph{Special Operator}
@strong{MULTIPLE-VALUE-CALL}}

@uref{mac_multiple-value-list.html,@emph{Macro}
@strong{MULTIPLE-VALUE-LIST}}

@uref{speope_multip_-value-prog1.html,@emph{Special Operator}
@strong{MULTIPLE-VALUE-PROG1}}

@uref{mac_multiple-value-setq.html,@emph{Macro}
@strong{MULTIPLE-VALUE-SETQ}}

@uref{acc_values.html,@emph{Accessor} @strong{VALUES}}

@uref{fun_values-list.html,@emph{Function} @strong{VALUES-LIST}}

@uref{convar_multip_values-limit.html,@emph{Constant Variable}
@strong{MULTIPLE-VALUES-LIMIT}}

@uref{mac_nth-value.html,@emph{Macro} @strong{NTH-VALUE}}

@uref{mac_progcm_progst.html,@emph{Macro} @strong{PROG, PROG*}}

@uref{mac_prog1cm_prog2.html,@emph{Macro} @strong{PROG1, PROG2}}

@uref{speope_progn.html,@emph{Special Operator} @strong{PROGN}}

@uref{mac_define-modify-macro.html,@emph{Macro}
@strong{DEFINE-MODIFY-MACRO}}

@uref{mac_defsetf.html,@emph{Macro} @strong{DEFSETF}}

@uref{mac_define-setf-expander.html,@emph{Macro}
@strong{DEFINE-SETF-EXPANDER}}

@uref{fun_get-setf-expansion.html,@emph{Function}
@strong{GET-SETF-EXPANSION}}

@uref{mac_setfcm_psetf.html,@emph{Macro} @strong{SETF, PSETF}}

@uref{mac_shiftf.html,@emph{Macro} @strong{SHIFTF}}

@uref{mac_rotatef.html,@emph{Macro} @strong{ROTATEF}}

@uref{contyp_control-error.html,@emph{Condition Type}
@strong{CONTROL-ERROR}}

@uref{contyp_program-error.html,@emph{Condition Type}
@strong{PROGRAM-ERROR}}

@uref{contyp_undefined-function.html,@emph{Condition Type}
@strong{UNDEFINED-FUNCTION}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor FDEFINITION::
* CLHS Accessor VALUES::
* CLHS Condition Type CONTROL-ERROR::
* CLHS Condition Type PROGRAM-ERROR::
* CLHS Condition Type UNDEFINED-FUNCTION::
* CLHS Constant Variable CALL-ARGUMENTS-LIMIT::
* CLHS Constant Variable LAMBDA-LIST-KEYWORDS::
* CLHS Constant Variable LAMBDA-PARAMETERS-LIMIT::
* CLHS Constant Variable MULTIPLE-VALUES-LIMIT::
* CLHS Constant Variable NIL::
* CLHS Constant Variable T::
* CLHS Function COMPILED-FUNCTION-P::
* CLHS Function COMPLEMENT::
* CLHS Function CONSTANTLY::
* CLHS Function EQ::
* CLHS Function EQL::
* CLHS Function EQUAL::
* CLHS Function EQUALP::
* CLHS Function EVERY SOME NOTEVERY NOTANY::
* CLHS Function FBOUNDP::
* CLHS Function FMAKUNBOUND::
* CLHS Function FUNCALL::
* CLHS Function FUNCTION-LAMBDA-EXPRESSION::
* CLHS Function FUNCTIONP::
* CLHS Function GET-SETF-EXPANSION::
* CLHS Function IDENTITY::
* CLHS Function NOT::
* CLHS Function VALUES-LIST::
* CLHS Macro AND::
* CLHS Macro CASE CCASE ECASE::
* CLHS Macro COND::
* CLHS Macro DEFCONSTANT::
* CLHS Macro DEFINE-MODIFY-MACRO::
* CLHS Macro DEFINE-SETF-EXPANDER::
* CLHS Macro DEFPARAMETER DEFVAR::
* CLHS Macro DEFSETF::
* CLHS Macro DEFUN::
* CLHS Macro DESTRUCTURING-BIND::
* CLHS Macro MULTIPLE-VALUE-BIND::
* CLHS Macro MULTIPLE-VALUE-LIST::
* CLHS Macro MULTIPLE-VALUE-SETQ::
* CLHS Macro NTH-VALUE::
* CLHS Macro OR::
* CLHS Macro PROG1 PROG2::
* CLHS Macro PROG PROG*::
* CLHS Macro PSETQ::
* CLHS Macro RETURN::
* CLHS Macro ROTATEF::
* CLHS Macro SETF PSETF::
* CLHS Macro SHIFTF::
* CLHS Macro TYPECASE CTYPECASE ETYPECASE::
* CLHS Macro WHEN UNLESS::
* CLHS Special Form SETQ::
* CLHS Special Operator BLOCK::
* CLHS Special Operator CATCH::
* CLHS Special Operator FLET LABELS MACROLET::
* CLHS Special Operator FUNCTION::
* CLHS Special Operator GO::
* CLHS Special Operator IF::
* CLHS Special Operator LET LET*::
* CLHS Special Operator MULTIPLE-VALUE-PROG1::
* CLHS Special Operator MULTIPLE-VALUE-CALL::
* CLHS Special Operator PROGN::
* CLHS Special Operator PROGV::
* CLHS Special Operator RETURN-FROM::
* CLHS Special Operator TAGBODY::
* CLHS Special Operator THROW::
* CLHS Special Operator UNWIND-PROTECT::
@end menu

@node CLHS Accessor FDEFINITION
@subsubsection CLHS: Accessor FDEFINITION
@anchor{#clhs-accessor-fdefinition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defun.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_fboundp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{FDEFINITION}

@strong{Syntax:}

@strong{fdefinition} @emph{function-name} => @emph{definition}

(setf (@strong{fdefinition} @emph{function-name}) @emph{new-definition})

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}. In the non-@uref{mac_setfcm_psetf.html#setf,@strong{setf}} case,
the @uref{glo_n.html#name,@emph{name}} must be
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}.

@emph{definition}---Current global function definition named by
@emph{function-name}.

@emph{new-definition}---a @uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

@ref{#fdefinition,@strong{fdefinition}}
@uref{glo_a.html#access,@emph{accesses}} the current global function
definition named by @emph{function-name}. The definition may be a
@uref{glo_f.html#function,@emph{function}} or may be an
@uref{glo_o.html#object,@emph{object}} representing a
@uref{glo_s.html#special_form,@emph{special form}} or
@uref{glo_m.html#macro,@emph{macro}}. The value returned by
@ref{#fdefinition,@strong{fdefinition}} when
@uref{fun_fboundp.html#fboundp,@strong{fboundp}} returns true but the
@emph{function-name} denotes a @uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#special_form,@emph{special form}} is not well-defined,
but @ref{#fdefinition,@strong{fdefinition}} does not signal an error.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{function-name} is not a
@uref{glo_f.html#function_name,@emph{function name}}.

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_undefined-function.html#undefined-function,@strong{undefined-function}}
is signaled in the non-@uref{mac_setfcm_psetf.html#setf,@strong{setf}}
case if @emph{function-name} is not
@uref{glo_f.html#fbound,@emph{fbound}}.

@strong{See Also:}

@uref{fun_fboundp.html#fboundp,@strong{fboundp}},
@uref{fun_fmakunbound.html#fmakunbound,@strong{fmakunbound}},
@uref{acc_macro-function.html#macro-function,@strong{macro-function}},
@uref{fun_special-operator-p.html#special-operator-p,@strong{special-operator-p}},
@uref{acc_symbol-function.html#symbol-function,@strong{symbol-function}}

@strong{Notes:}

@ref{#fdefinition,@strong{fdefinition}} cannot
@uref{glo_a.html#access,@emph{access}} the value of a lexical function
name produced by
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}} or
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}; it can
@uref{glo_a.html#access,@emph{access}} only the global function value.

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} can be used with
@ref{#fdefinition,@strong{fdefinition}} to replace a global function
definition when the @emph{function-name}'s function definition does not
represent a @uref{glo_s.html#special_form,@emph{special form}}.
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#fdefinition,@strong{fdefinition}} requires a
@uref{glo_f.html#function,@emph{function}} as the new value. It is an
error to set the @ref{#fdefinition,@strong{fdefinition}} of a
@emph{function-name} to a @uref{glo_s.html#symbol,@emph{symbol}}, a
@uref{glo_l.html#list,@emph{list}}, or the value returned by
@ref{#fdefinition,@strong{fdefinition}} on the name of a
@uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#special_form,@emph{special form}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss321.html,SPECIAL-FORM-P-MISNOMER:RENAME}
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Accessor VALUES
@subsubsection CLHS: Accessor VALUES
@anchor{#clhs-accessor-values}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_multiple-value-setq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_values-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{VALUES}

@strong{Syntax:}

@strong{values} @emph{&rest object} => @emph{@emph{object}@strong{*}}

(setf (@strong{values} @emph{&rest place}) @emph{new-values})

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{new-value}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#values,@strong{values}} returns the @emph{objects} as
@uref{glo_m.html#multiple_values,@emph{multiple values}}[2].

@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#values,@strong{values}} is used to store the
@uref{glo_m.html#multiple_values,@emph{multiple values}}[2]
@emph{new-values} into the @emph{places}. See
@uref{sec_5-1-2-3.html,Section 5.1.2.3 (VALUES Forms as Places)}.

@strong{Examples:}

@verbatim
 (values) =>  <no values>
 (values 1) =>  1
 (values 1 2) =>  1, 2
 (values 1 2 3) =>  1, 2, 3
 (values (values 1 2 3) 4 5) =>  1, 4, 5
 (defun polar (x y)
   (values (sqrt (+ (* x x) (* y y))) (atan y x))) =>  POLAR
 (multiple-value-bind (r theta) (polar 3.0 4.0)
   (vector r theta))
=>  #(5.0 0.927295)
@end verbatim

Sometimes it is desirable to indicate explicitly that a function returns
exactly one value. For example, the function

@verbatim
 (defun foo (x y)
   (floor (+ x y) y)) =>  FOO
@end verbatim

returns two values because
@uref{fun_floorcm_f_undcm_fround.html#floor,@strong{floor}} returns two
values. It may be that the second value makes no sense, or that for
efficiency reasons it is desired not to compute the second value.
@ref{#values,@strong{values}} is the standard idiom for indicating that
only one value is to be returned:

@verbatim
 (defun foo (x y)
   (values (floor (+ x y) y))) =>  FOO
@end verbatim

This works because @ref{#values,@strong{values}} returns exactly one
value for each of @emph{args}; as for any function call, if any of
@emph{args} produces more than one value, all but the first are
discarded.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_values-list.html#values-list,@strong{values-list}},
@uref{mac_multiple-value-bind.html#multiple-value-bind,@strong{multiple-value-bind}},
@uref{convar_multip_values-limit.html#multiple-values-limit,@strong{multiple-values-limit}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

Since @ref{#values,@strong{values}} is a
@uref{glo_f.html#function,@emph{function}}, not a
@uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#special_form,@emph{special form}}, it receives as
@uref{glo_a.html#argument,@emph{arguments}} only the
@uref{glo_p.html#primary_value,@emph{primary values}} of its
@uref{glo_a.html#argument,@emph{argument}}
@uref{glo_f.html#form,@emph{forms}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss311.html,SETF-OF-VALUES:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type CONTROL-ERROR
@subsubsection CLHS: Condition Type CONTROL-ERROR
@anchor{#clhs-condition-type-control-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_rotatef.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_program-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{CONTROL-ERROR}

@strong{Class Precedence List:}

@ref{#control-error,@strong{control-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#control-error,@strong{control-error}} consists of error conditions
that result from invalid dynamic transfers of control in a program. The
errors that result from giving
@uref{speope_throw.html#throw,@strong{throw}} a tag that is not active
or from giving @uref{speope_go.html#go,@strong{go}} or
@uref{speope_return-from.html#return-from,@strong{return-from}} a tag
that is no longer dynamically available are of
@uref{glo_t.html#type,@emph{type}}
@ref{#control-error,@strong{control-error}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type PROGRAM-ERROR
@subsubsection CLHS: Condition Type PROGRAM-ERROR
@anchor{#clhs-condition-type-program-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_control-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_undefined-function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{PROGRAM-ERROR}

@strong{Class Precedence List:}

@ref{#program-error,@strong{program-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#program-error,@strong{program-error}} consists of error conditions
related to incorrect program syntax. The errors that result from naming
a @uref{glo_g.html#go_tag,@emph{go tag}} or a
@uref{glo_b.html#block_tag,@emph{block tag}} that is not lexically
apparent are of @uref{glo_t.html#type,@emph{type}}
@ref{#program-error,@strong{program-error}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type UNDEFINED-FUNCTION
@subsubsection CLHS: Condition Type UNDEFINED-FUNCTION
@anchor{#clhs-condition-type-undefined-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_program-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{UNDEFINED-FUNCTION}

@strong{Class Precedence List:}

@ref{#undefined-function,@strong{undefined-function}},
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#undefined-function,@strong{undefined-function}} consists of
@uref{glo_e.html#error,@emph{error}}
@uref{glo_c.html#condition,@emph{conditions}} that represent attempts to
@uref{glo_r.html#read,@emph{read}} the definition of an
@uref{glo_u.html#undefined_function,@emph{undefined function}}.

The name of the cell (see
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}}) is the
@uref{glo_f.html#function_name,@emph{function name}} which was
@uref{glo_f.html#funbound,@emph{funbound}}.

@strong{See Also:}

@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable CALL-ARGUMENTS-LIMIT
@subsubsection CLHS: Constant Variable CALL-ARGUMENTS-LIMIT
@anchor{#clhs-constant-variable-call-arguments-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_compiled-function-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_lambda_ist-keywords.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{CALL-ARGUMENTS-LIMIT}

@strong{Constant Value:}

An integer not smaller than 50 and at least as great as the
@uref{glo_v.html#value,@emph{value}} of
@uref{convar_lambda_meters-limit.html#lambda-parameters-limit,@strong{lambda-parameters-limit}},
the exact magnitude of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The upper exclusive bound on the number of
@uref{glo_a.html#argument,@emph{arguments}} that may be passed to a
@uref{glo_f.html#function,@emph{function}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{convar_lambda_meters-limit.html#lambda-parameters-limit,@strong{lambda-parameters-limit}},
@uref{convar_multip_values-limit.html#multiple-values-limit,@strong{multiple-values-limit}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable LAMBDA-LIST-KEYWORDS
@subsubsection CLHS: Constant Variable LAMBDA-LIST-KEYWORDS
@anchor{#clhs-constant-variable-lambda-list-keywords}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_call-a_uments-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_lambda_meters-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{LAMBDA-LIST-KEYWORDS}

@strong{Constant Value:}

a @uref{glo_l.html#list,@emph{list}}, the
@uref{glo_e.html#element,@emph{elements}} of which are
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but which must contain at least the
@uref{glo_s.html#symbol,@emph{symbols}} &allow-other-keys, &aux, &body,
&environment, &key, &optional, &rest, and &whole.

@strong{Description:}

A @uref{glo_l.html#list,@emph{list}} of all the
@uref{glo_l.html#lambda_list_keyword,@emph{lambda list keywords}} used
in the @uref{glo_i.html#implementation,@emph{implementation}}, including
the additional ones used only by @uref{glo_m.html#macro,@emph{macro}}
definition @uref{glo_f.html#form,@emph{forms}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{mac_defun.html#defun,@strong{defun}},
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}},
@uref{sec_3-1-2.html,Section 3.1.2 (The Evaluation Model)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable LAMBDA-PARAMETERS-LIMIT
@subsubsection CLHS: Constant Variable LAMBDA-PARAMETERS-LIMIT
@anchor{#clhs-constant-variable-lambda-parameters-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_lambda_ist-keywords.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defconstant.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{LAMBDA-PARAMETERS-LIMIT}

@strong{Constant Value:}

@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
but not smaller than 50.

@strong{Description:}

A positive @uref{glo_i.html#integer,@emph{integer}} that is the upper
exclusive bound on the number of
@uref{glo_p.html#parameter,@emph{parameter}}
@uref{glo_n.html#name,@emph{names}} that can appear in a single
@uref{glo_l.html#lambda_list,@emph{lambda list}}.

@strong{Examples:} None.

@strong{See Also:}

@uref{convar_call-a_uments-limit.html#call-arguments-limit,@strong{call-arguments-limit}}

@strong{Notes:}

Implementors are encouraged to make the
@uref{glo_v.html#value,@emph{value}} of
@ref{#lambda-parameters-limit,@strong{lambda-parameters-limit}} as large
as possible.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable MULTIPLE-VALUES-LIMIT
@subsubsection CLHS: Constant Variable MULTIPLE-VALUES-LIMIT
@anchor{#clhs-constant-variable-multiple-values-limit}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_values-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_nth-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{MULTIPLE-VALUES-LIMIT}

@strong{Constant Value:}

An @uref{glo_i.html#integer,@emph{integer}} not smaller than 20, the
exact magnitude of which is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Description:}

The upper exclusive bound on the number of
@uref{glo_v.html#value,@emph{values}} that may be returned from a
@uref{glo_f.html#function,@emph{function}}, bound or assigned by
@uref{mac_multiple-value-bind.html#multiple-value-bind,@strong{multiple-value-bind}}
or
@uref{mac_multiple-value-setq.html#multiple-value-setq,@strong{multiple-value-setq}},
or passed as a first argument to
@uref{mac_nth-value.html#nth-value,@strong{nth-value}}. (If these
individual limits might differ, the minimum value is used.)

@strong{Examples:} None.

@strong{See Also:}

@uref{convar_lambda_meters-limit.html#lambda-parameters-limit,@strong{lambda-parameters-limit}},
@uref{convar_call-a_uments-limit.html#call-arguments-limit,@strong{call-arguments-limit}}

@strong{Notes:}

Implementors are encouraged to make this limit as large as possible.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss246.html,MULTIPLE-VALUES-LIMIT-ON-VARIABLES:UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable NIL
@subsubsection CLHS: Constant Variable NIL
@anchor{#clhs-constant-variable-nil}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_unwind-protect.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_not.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{NIL}

@strong{Constant Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@uref{any_nil.html#nil,@strong{nil}} represents both
@uref{glo_b.html#boolean,@emph{boolean}} (and
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}})
@uref{glo_f.html#false,@emph{false}} and the
@uref{glo_e.html#empty_list,@emph{empty list}}.

@strong{Examples:}

@verbatim
 nil =>  NIL 
@end verbatim

@strong{See Also:}

@uref{convar_t.html#t,@strong{t}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Constant Variable T
@subsubsection CLHS: Constant Variable T
@anchor{#clhs-constant-variable-t}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_not.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_eq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Constant Variable} @strong{T}

@strong{Constant Value:}

@uref{any_t.html#t,@strong{t}}.

@strong{Description:}

The @uref{glo_b.html#boolean,@emph{boolean}} representing true, and the
canonical @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}} representing true. Although any
@uref{glo_o.html#object,@emph{object}} other than
@uref{any_nil.html#nil,@strong{nil}} is considered
@uref{glo_t.html#true,@emph{true}}, @uref{any_t.html#t,@strong{t}} is
generally used when there is no special reason to prefer one such
@uref{glo_o.html#object,@emph{object}} over another.

The @uref{glo_s.html#symbol,@emph{symbol}}
@uref{any_t.html#t,@strong{t}} is also sometimes used for other purposes
as well. For example, as the @uref{glo_n.html#name,@emph{name}} of a
@uref{glo_c.html#class,@emph{class}}, as a
@uref{glo_d.html#designator,@emph{designator}} (e.g., a
@uref{glo_s.html#stream_designator,@emph{stream designator}}) or as a
special symbol for some syntactic reason (e.g., in
@uref{mac_casecm_ccasecm_ecase.html#case,@strong{case}} and
@uref{mac_typecasec_cm_etypecase.html#typecase,@strong{typecase}} to
label the @emph{otherwise-clause}).

@strong{Examples:}

@verbatim
 t =>  T 
 (eq t 't) =>  true
 (find-class 't) =>  #<CLASS T 610703333>
 (case 'a (a 1) (t 2)) =>  1
 (case 'b (a 1) (t 2)) =>  2
 (prin1 'hello t)
>>  HELLO
=>  HELLO
@end verbatim

@strong{See Also:}

@uref{convar_nil.html#nil,@strong{nil}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPILED-FUNCTION-P
@subsubsection CLHS: Function COMPILED-FUNCTION-P
@anchor{#clhs-function-compiled-function-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_functionp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_call-a_uments-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPILED-FUNCTION-P}

@strong{Syntax:}

@strong{compiled-function-p} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{typ_compiled-function.html#compiled-function,@strong{compiled-function}};
otherwise, returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (defun f (x) x) =>  F
 (compiled-function-p #'f)
=>  false
OR=>  true
 (compiled-function-p 'f) =>  false
 (compile 'f) =>  F
 (compiled-function-p #'f) =>  true
 (compiled-function-p 'f) =>  false
 (compiled-function-p (compile nil '(lambda (x) x)))
=>  true
 (compiled-function-p #'(lambda (x) x))
=>  false
OR=>  true
 (compiled-function-p '(lambda (x) x)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compile.html#compile,@strong{compile}},
@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@strong{compiled-function}

@strong{Notes:}

@verbatim
 (compiled-function-p object) ==  (typep object 'compiled-function)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPLEMENT
@subsubsection CLHS: Function COMPLEMENT
@anchor{#clhs-function-complement}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_identity.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_constantly.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPLEMENT}

@strong{Syntax:}

@strong{complement} @emph{function} => @emph{complement-function}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_f.html#function,@emph{function}}.

@emph{complement-function}---a
@uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

Returns a @uref{glo_f.html#function,@emph{function}} that takes the same
@uref{glo_a.html#argument,@emph{arguments}} as @emph{function}, and has
the same side-effect behavior as @emph{function}, but returns only a
single value: a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}} with the opposite truth value of that which would be returned
as the @uref{glo_p.html#primary_value,@emph{primary value}} of
@emph{function}. That is, when the @emph{function} would have returned
@uref{glo_t.html#true,@emph{true}} as its
@uref{glo_p.html#primary_value,@emph{primary value}} the
@emph{complement-function} returns @uref{glo_f.html#false,@emph{false}},
and when the @emph{function} would have returned
@uref{glo_f.html#false,@emph{false}} as its
@uref{glo_p.html#primary_value,@emph{primary value}} the
@emph{complement-function} returns @uref{glo_t.html#true,@emph{true}}.

@strong{Examples:}

@verbatim
 (funcall (complement #'zerop) 1) =>  true
 (funcall (complement #'characterp) #\A) =>  false
 (funcall (complement #'member) 'a '(a b c)) =>  false
 (funcall (complement #'member) 'd '(a b c)) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_not.html#not,@strong{not}}

@strong{Notes:}

@verbatim
 (complement x) ==  #'(lambda (&rest arguments) (not (apply x arguments)))
@end verbatim

In Common Lisp, functions with names like ``@emph{xxx}-if-not'' are
related to functions with names like ``@emph{xxx}-if'' in that

@verbatim
(xxx-if-not f . arguments) ==  (xxx-if (complement f) . arguments)
@end verbatim

For example,

@verbatim
 (find-if-not #'zerop '(0 0 3)) == 
 (find-if (complement #'zerop) '(0 0 3)) =>  3
@end verbatim

Note that since the ``@emph{xxx}-if-not''
@uref{glo_f.html#function,@emph{functions}} and the :test-not arguments
have been deprecated, uses of ``@emph{xxx}-if''
@uref{glo_f.html#function,@emph{functions}} or :test arguments with
@ref{#complement,@strong{complement}} are preferred.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss172.html,FUNCTION-COMPOSITION:JAN89-X3J13}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CONSTANTLY
@subsubsection CLHS: Function CONSTANTLY
@anchor{#clhs-function-constantly}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_complement.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_everycm_s_erycm_notany.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CONSTANTLY}

@strong{Syntax:}

@strong{constantly} @emph{value} => @emph{function}

@strong{Arguments and Values:}

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{function}---a @uref{glo_f.html#function,@emph{function}}.

@strong{Description:}

@ref{#constantly,@strong{constantly}} returns a
@uref{glo_f.html#function,@emph{function}} that accepts any number of
arguments, that has no side-effects, and that always returns
@emph{value}.

@strong{Examples:}

@verbatim
 (mapcar (constantly 3) '(a b c d)) =>  (3 3 3 3)
 (defmacro with-vars (vars &body forms)
   `((lambda ,vars ,@forms) ,@(mapcar (constantly nil) vars)))
=>  WITH-VARS
 (macroexpand '(with-vars (a b) (setq a 3 b (* a a)) (list a b)))
=>  ((LAMBDA (A B) (SETQ A 3 B (* A A)) (LIST A B)) NIL NIL), true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_identity.html#identity,@strong{identity}}

@strong{Notes:}

@ref{#constantly,@strong{constantly}} could be defined by:

@verbatim
 (defun constantly (object)
   #'(lambda (&rest arguments) object))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss172.html,FUNCTION-COMPOSITION:JAN89-X3J13}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EQ
@subsubsection CLHS: Function EQ
@anchor{#clhs-function-eq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_t.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_eql.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EQ}

@strong{Syntax:}

@strong{eq} @emph{x y} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{x}---an @uref{glo_o.html#object,@emph{object}}.

@emph{y}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if its
@uref{glo_a.html#argument,@emph{arguments}} are the same, identical
@uref{glo_o.html#object,@emph{object}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (eq 'a 'b) =>  false
 (eq 'a 'a) =>  true
 (eq 3 3)
=>  true
OR=>  false
 (eq 3 3.0) =>  false
 (eq 3.0 3.0)
=>  true
OR=>  false
 (eq #c(3 -4) #c(3 -4))
=>  true
OR=>  false
 (eq #c(3 -4.0) #c(3 -4)) =>  false
 (eq (cons 'a 'b) (cons 'a 'c)) =>  false
 (eq (cons 'a 'b) (cons 'a 'b)) =>  false
 (eq '(a . b) '(a . b))
=>  true
OR=>  false
 (progn (setq x (cons 'a 'b)) (eq x x)) =>  true
 (progn (setq x '(a . b)) (eq x x)) =>  true
 (eq #\A #\A)
=>  true
OR=>  false
 (let ((x "Foo")) (eq x x)) =>  true
 (eq "Foo" "Foo")
=>  true
OR=>  false
 (eq "Foo" (copy-seq "Foo")) =>  false
 (eq "FOO" "foo") =>  false
 (eq "string-seq" (copy-seq "string-seq")) =>  false
 (let ((x 5)) (eq x x))
=>  true
OR=>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_eql.html#eql,@strong{eql}},
@uref{fun_equal.html#equal,@strong{equal}},
@uref{fun_equalp.html#equalp,@strong{equalp}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

@uref{glo_o.html#object,@emph{Objects}} that appear the same when
printed are not necessarily @ref{#eq,@strong{eq}} to each other.
@uref{glo_s.html#symbol,@emph{Symbols}} that print the same usually are
@ref{#eq,@strong{eq}} to each other because of the use of the
@uref{fun_intern.html#intern,@strong{intern}} function. However,
@uref{glo_n.html#number,@emph{numbers}} with the same value need not be
@ref{#eq,@strong{eq}}, and two similar
@uref{glo_l.html#list,@emph{lists}} are usually not
@uref{glo_i.html#identical,@emph{identical}}.

An implementation is permitted to make ``copies'' of
@uref{glo_c.html#character,@emph{characters}} and
@uref{glo_n.html#number,@emph{numbers}} at any time. The effect is that
Common Lisp makes no guarantee that @ref{#eq,@strong{eq}} is true even
when both its arguments are ``the same thing'' if that thing is a
@uref{glo_c.html#character,@emph{character}} or
@uref{glo_n.html#number,@emph{number}}.

Most Common Lisp @uref{glo_o.html#operator,@emph{operators}} use
@uref{fun_eql.html#eql,@strong{eql}} rather than @ref{#eq,@strong{eq}}
to compare objects, or else they default to
@uref{fun_eql.html#eql,@strong{eql}} and only use @ref{#eq,@strong{eq}}
if specifically requested to do so. However, the following
@uref{glo_o.html#operator,@emph{operators}} are defined to use
@ref{#eq,@strong{eq}} rather than @uref{fun_eql.html#eql,@strong{eql}}
in a way that cannot be overridden by the
@uref{glo_c.html#code,@emph{code}} which employs them:

@verbatim
catch           getf     throw  
get             remf            
get-properties  remprop  
@end verbatim

@strong{Figure 5-11. Operators that always prefer EQ over EQL}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EQL
@subsubsection CLHS: Function EQL
@anchor{#clhs-function-eql}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_eq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_equal.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EQL}

@strong{Syntax:}

@strong{eql} @emph{x y} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{x}---an @uref{glo_o.html#object,@emph{object}}.

@emph{y}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

The value of @ref{#eql,@strong{eql}} is
@uref{glo_t.html#true,@emph{true}} of two objects, @emph{x} and
@emph{y}, in the folowing cases:

1. If @emph{x} and @emph{y} are @uref{fun_eq.html#eq,@strong{eq}}.

2. If @emph{x} and @emph{y} are both
@uref{glo_n.html#number,@emph{numbers}} of the same
@uref{glo_t.html#type,@emph{type}} and the same value.

3. If they are both @uref{glo_c.html#character,@emph{characters}} that
represent the same character.

Otherwise the value of @ref{#eql,@strong{eql}} is
@uref{glo_f.html#false,@emph{false}}.

If an implementation supports positive and negative zeros as
@uref{glo_d.html#distinct,@emph{distinct}} values, then (eql 0.0 -0.0)
returns @uref{glo_f.html#false,@emph{false}}. Otherwise, when the syntax
-0.0 is read it is interpreted as the value 0.0, and so (eql 0.0 -0.0)
returns @uref{glo_t.html#true,@emph{true}}.

@strong{Examples:}

@verbatim
 (eql 'a 'b) =>  false
 (eql 'a 'a) =>  true
 (eql 3 3) =>  true
 (eql 3 3.0) =>  false
 (eql 3.0 3.0) =>  true
 (eql #c(3 -4) #c(3 -4)) =>  true
 (eql #c(3 -4.0) #c(3 -4)) =>  false
 (eql (cons 'a 'b) (cons 'a 'c)) =>  false
 (eql (cons 'a 'b) (cons 'a 'b)) =>  false
 (eql '(a . b) '(a . b))
=>  true
OR=>  false
 (progn (setq x (cons 'a 'b)) (eql x x)) =>  true
 (progn (setq x '(a . b)) (eql x x)) =>  true
 (eql #\A #\A) =>  true
 (eql "Foo" "Foo")
=>  true
OR=>  false
 (eql "Foo" (copy-seq "Foo")) =>  false
 (eql "FOO" "foo") =>  false
@end verbatim

Normally (eql 1.0s0 1.0d0) is false, under the assumption that 1.0s0 and
1.0d0 are of distinct data types. However, implementations that do not
provide four distinct floating-point formats are permitted to
``collapse'' the four formats into some smaller number of them; in such
an implementation (eql 1.0s0 1.0d0) might be true.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_eq.html#eq,@strong{eq}},
@uref{fun_equal.html#equal,@strong{equal}},
@uref{fun_equalp.html#equalp,@strong{equalp}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}},
@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}}

@strong{Notes:}

@ref{#eql,@strong{eql}} is the same as
@uref{fun_eq.html#eq,@strong{eq}}, except that if the arguments are
@uref{glo_c.html#character,@emph{characters}} or
@uref{glo_n.html#number,@emph{numbers}} of the same type then their
values are compared. Thus @ref{#eql,@strong{eql}} tells whether two
@uref{glo_o.html#object,@emph{objects}} are conceptually the same,
whereas @uref{fun_eq.html#eq,@strong{eq}} tells whether two
@uref{glo_o.html#object,@emph{objects}} are implementationally
identical. It is for this reason that @ref{#eql,@strong{eql}}, not
@uref{fun_eq.html#eq,@strong{eq}}, is the default comparison predicate
for @uref{glo_o.html#operator,@emph{operators}} that take
@uref{glo_s.html#sequence,@emph{sequences}} as arguments.

@ref{#eql,@strong{eql}} may not be true of two
@uref{glo_f.html#float,@emph{floats}} even when they represent the same
value. @uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}} is used to
compare mathematical values.

Two @uref{glo_c.html#complex,@emph{complex}} numbers are considered to
be @ref{#eql,@strong{eql}} if their real parts are
@ref{#eql,@strong{eql}} and their imaginary parts are
@ref{#eql,@strong{eql}}. For example, (eql #C(4 5) #C(4 5)) is
@uref{glo_t.html#true,@emph{true}} and (eql #C(4 5) #C(4.0 5.0)) is
@uref{glo_f.html#false,@emph{false}}. Note that while (eql #C(5.0 0.0)
5.0) is @uref{glo_f.html#false,@emph{false}}, (eql #C(5 0) 5) is
@uref{glo_t.html#true,@emph{true}}. In the case of (eql #C(5.0 0.0) 5.0)
the two arguments are of different types, and so cannot satisfy
@ref{#eql,@strong{eql}}. In the case of (eql #C(5 0) 5), #C(5 0) is not
a @uref{glo_c.html#complex,@emph{complex}} number, but is automatically
reduced to the @uref{glo_i.html#integer,@emph{integer}} 5.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EQUAL
@subsubsection CLHS: Function EQUAL
@anchor{#clhs-function-equal}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_eql.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_equalp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EQUAL}

@strong{Syntax:}

@strong{equal} @emph{x y} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{x}---an @uref{glo_o.html#object,@emph{object}}.

@emph{y}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{x} and @emph{y} are
structurally similar (isomorphic)
@uref{glo_o.html#object,@emph{objects}}.
@uref{glo_o.html#object,@emph{Objects}} are treated as follows by
@ref{#equal,@strong{equal}}.

@uref{glo_s.html#symbol,@emph{Symbols}},
@uref{glo_n.html#number,@emph{Numbers}}, and
@uref{glo_c.html#character,@emph{Characters}}

@ref{#equal,@strong{equal}} is @uref{glo_t.html#true,@emph{true}} of two
@uref{glo_o.html#object,@emph{objects}} if they are
@uref{glo_s.html#symbol,@emph{symbols}} that are
@uref{fun_eq.html#eq,@strong{eq}}, if they are
@uref{glo_n.html#number,@emph{numbers}} that are
@uref{fun_eql.html#eql,@strong{eql}}, or if they are
@uref{glo_c.html#character,@emph{characters}} that are
@uref{fun_eql.html#eql,@strong{eql}}.

@uref{glo_c.html#cons,@emph{Conses}}

For @uref{glo_c.html#cons,@emph{conses}}, @ref{#equal,@strong{equal}} is
defined recursively as the two @uref{glo_c.html#car,@emph{cars}} being
@ref{#equal,@strong{equal}} and the two
@uref{glo_c.html#cdr,@emph{cdrs}} being @ref{#equal,@strong{equal}}.

@uref{glo_a.html#array,@emph{Arrays}}

Two @uref{glo_a.html#array,@emph{arrays}} are
@ref{#equal,@strong{equal}} only if they are
@uref{fun_eq.html#eq,@strong{eq}}, with one exception:
@uref{glo_s.html#string,@emph{strings}} and
@uref{glo_b.html#bit_vector,@emph{bit vectors}} are compared
element-by-element (using @uref{fun_eql.html#eql,@strong{eql}}). If
either @emph{x} or @emph{y} has a
@uref{glo_f.html#fill_pointer,@emph{fill pointer}}, the
@uref{glo_f.html#fill_pointer,@emph{fill pointer}} limits the number of
elements examined by @ref{#equal,@strong{equal}}. Uppercase and
lowercase letters in @uref{glo_s.html#string,@emph{strings}} are
considered by @ref{#equal,@strong{equal}} to be different.

@uref{glo_p.html#pathname,@emph{Pathnames}}

Two @uref{glo_p.html#pathname,@emph{pathnames}} are
@ref{#equal,@strong{equal}} if and only if all the corresponding
components (host, device, and so on) are equivalent. Whether or not
uppercase and lowercase letters are considered equivalent in
@uref{glo_s.html#string,@emph{strings}} appearing in components is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.
@uref{glo_p.html#pathname,@emph{pathnames}} that are
@ref{#equal,@strong{equal}} should be functionally equivalent.

@strong{Other (Structures, hash-tables, instances, ...)}

Two other @uref{glo_o.html#object,@emph{objects}} are
@ref{#equal,@strong{equal}} only if they are
@uref{fun_eq.html#eq,@strong{eq}}.

@ref{#equal,@strong{equal}} does not descend any
@uref{glo_o.html#object,@emph{objects}} other than the ones explicitly
specified above. The next figure summarizes the information given in the
previous list. In addition, the figure specifies the priority of the
behavior of @ref{#equal,@strong{equal}}, with upper entries taking
priority over lower ones.

@verbatim
Type          Behavior                     
number        uses eql                     
character     uses eql                     
cons          descends                     
bit vector    descends                     
string        descends                     
pathname      ``functionally equivalent''  
structure     uses eq                      
Other array   uses eq                      
hash table    uses eq                      
Other object  uses eq                      
@end verbatim

@strong{Figure 5-12. Summary and priorities of behavior of
@ref{#equal,@strong{equal}}}

Any two @uref{glo_o.html#object,@emph{objects}} that are
@uref{fun_eql.html#eql,@strong{eql}} are also
@ref{#equal,@strong{equal}}.

@ref{#equal,@strong{equal}} may fail to terminate if @emph{x} or
@emph{y} is circular.

@strong{Examples:}

@verbatim
 (equal 'a 'b) =>  false
 (equal 'a 'a) =>  true
 (equal 3 3) =>  true
 (equal 3 3.0) =>  false
 (equal 3.0 3.0) =>  true
 (equal #c(3 -4) #c(3 -4)) =>  true
 (equal #c(3 -4.0) #c(3 -4)) =>  false
 (equal (cons 'a 'b) (cons 'a 'c)) =>  false
 (equal (cons 'a 'b) (cons 'a 'b)) =>  true
 (equal #\A #\A) =>  true
 (equal #\A #\a) =>  false
 (equal "Foo" "Foo") =>  true
 (equal "Foo" (copy-seq "Foo")) =>  true
 (equal "FOO" "foo") =>  false
 (equal "This-string" "This-string") =>  true
 (equal "This-string" "this-string") =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_eq.html#eq,@strong{eq}}, @uref{fun_eql.html#eql,@strong{eql}},
@uref{fun_equalp.html#equalp,@strong{equalp}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}},
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}},
@uref{fun_stringeqc_ng-not-lessp.html#string-equal,@strong{string-equal}},
@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}},
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}},
@uref{fun_tree-equal.html#tree-equal,@strong{tree-equal}}

@strong{Notes:}

@uref{glo_o.html#object,@emph{Object}} equality is not a concept for
which there is a uniquely determined correct algorithm. The
appropriateness of an equality predicate can be judged only in the
context of the needs of some particular program. Although these
functions take any type of argument and their names sound very generic,
@ref{#equal,@strong{equal}} and
@uref{fun_equalp.html#equalp,@strong{equalp}} are not appropriate for
every application.

A rough rule of thumb is that two
@uref{glo_o.html#object,@emph{objects}} are @ref{#equal,@strong{equal}}
if and only if their printed representations are the same.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss143.html,EQUAL-STRUCTURE:MAYBE-STATUS-QUO}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EQUALP
@subsubsection CLHS: Function EQUALP
@anchor{#clhs-function-equalp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_equal.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_identity.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EQUALP}

@strong{Syntax:}

@strong{equalp} @emph{x y} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{x}---an @uref{glo_o.html#object,@emph{object}}.

@emph{y}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{x} and @emph{y} are
@uref{fun_equal.html#equal,@strong{equal}}, or if they have components
that are of the same @uref{glo_t.html#type,@emph{type}} as each other
and if those components are @ref{#equalp,@strong{equalp}}; specifically,
@ref{#equalp,@strong{equalp}} returns @uref{glo_t.html#true,@emph{true}}
in the following cases:

@uref{glo_c.html#character,@emph{Characters}}

If two @uref{glo_c.html#character,@emph{characters}} are
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}}.

@uref{glo_n.html#number,@emph{Numbers}}

If two @uref{glo_n.html#number,@emph{numbers}} are the
@uref{glo_s.html#same,@emph{same}} under
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}}.

@uref{glo_c.html#cons,@emph{Conses}}

If the two @uref{glo_c.html#car,@emph{cars}} in the
@uref{glo_c.html#cons,@emph{conses}} are @ref{#equalp,@strong{equalp}}
and the two @uref{glo_c.html#cdr,@emph{cdrs}} in the
@uref{glo_c.html#cons,@emph{conses}} are @ref{#equalp,@strong{equalp}}.

@uref{glo_a.html#array,@emph{Arrays}}

If two @uref{glo_a.html#array,@emph{arrays}} have the same number of
dimensions, the dimensions match, and the corresponding
@uref{glo_a.html#active,@emph{active}}
@uref{glo_e.html#element,@emph{elements}} are
@ref{#equalp,@strong{equalp}}. The @uref{glo_t.html#type,@emph{types}}
for which the @uref{glo_a.html#array,@emph{arrays}} are
@uref{glo_s.html#specialized,@emph{specialized}} need not match; for
example, a @uref{glo_s.html#string,@emph{string}} and a general
@uref{glo_a.html#array,@emph{array}} that happens to contain the same
@uref{glo_c.html#character,@emph{characters}} are
@ref{#equalp,@strong{equalp}}. Because @ref{#equalp,@strong{equalp}}
performs
@uref{glo_e.html#element,@emph{element}}-by-@uref{glo_e.html#element,@emph{element}}
comparisons of @uref{glo_s.html#string,@emph{strings}} and ignores the
@uref{glo_c.html#case,@emph{case}} of
@uref{glo_c.html#character,@emph{characters}},
@uref{glo_c.html#case,@emph{case}} distinctions are ignored when
@ref{#equalp,@strong{equalp}} compares
@uref{glo_s.html#string,@emph{strings}}.

@uref{glo_s.html#structure,@emph{Structures}}

If two @uref{glo_s.html#structure,@emph{structures}} S1 and S2 have the
same @uref{glo_c.html#class,@emph{class}} and the value of each
@uref{glo_s.html#slot,@emph{slot}} in S1 is the
@uref{glo_s.html#same,@emph{same}} under @ref{#equalp,@strong{equalp}}
as the value of the corresponding @uref{glo_s.html#slot,@emph{slot}} in
S2.

@uref{glo_h.html#hash_table,@emph{Hash Tables}}

@ref{#equalp,@strong{equalp}} descends @emph{hash-tables} by first
comparing the count of entries and the :test function; if those are the
same, it compares the keys of the tables using the :test function and
then the values of the matching keys using @ref{#equalp,@strong{equalp}}
recursively.

@ref{#equalp,@strong{equalp}} does not descend any
@uref{glo_o.html#object,@emph{objects}} other than the ones explicitly
specified above. The next figure summarizes the information given in the
previous list. In addition, the figure specifies the priority of the
behavior of @ref{#equalp,@strong{equalp}}, with upper entries taking
priority over lower ones.

@verbatim
Type          Behavior                      
number        uses =                        
character     uses char-equal               
cons          descends                      
bit vector    descends                      
string        descends                      
pathname      same as equal                 
structure     descends, as described above  
Other array   descends                      
hash table    descends, as described above  
Other object  uses eq                       
@end verbatim

@strong{Figure 5-13. Summary and priorities of behavior of
@ref{#equalp,@strong{equalp}}}

@strong{Examples:}

@verbatim
 (equalp 'a 'b) =>  false
 (equalp 'a 'a) =>  true
 (equalp 3 3) =>  true
 (equalp 3 3.0) =>  true
 (equalp 3.0 3.0) =>  true
 (equalp #c(3 -4) #c(3 -4)) =>  true
 (equalp #c(3 -4.0) #c(3 -4)) =>  true
 (equalp (cons 'a 'b) (cons 'a 'c)) =>  false
 (equalp (cons 'a 'b) (cons 'a 'b)) =>  true
 (equalp #\A #\A) =>  true
 (equalp #\A #\a) =>  true
 (equalp "Foo" "Foo") =>  true
 (equalp "Foo" (copy-seq "Foo")) =>  true
 (equalp "FOO" "foo") =>  true
@end verbatim

@verbatim
 (setq array1 (make-array 6 :element-type 'integer
                            :initial-contents '(1 1 1 3 5 7))) 
=>  #(1 1 1 3 5 7)
 (setq array2 (make-array 8 :element-type 'integer
                            :initial-contents '(1 1 1 3 5 7 2 6)
                            :fill-pointer 6))
=>  #(1 1 1 3 5 7)
 (equalp array1 array2) =>  true
 (setq vector1 (vector 1 1 1 3 5 7)) =>  #(1 1 1 3 5 7)
 (equalp array1 vector1) =>  true 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_eq.html#eq,@strong{eq}}, @uref{fun_eql.html#eql,@strong{eql}},
@uref{fun_equal.html#equal,@strong{equal}},
@uref{fun_eqcm_sleq__lteqcm_gteq.html#EQ,@strong{=}},
@uref{fun_stringeqc_ng-not-lessp.html#stringEQ,@strong{string=}},
@uref{fun_stringeqc_ng-not-lessp.html#string-equal,@strong{string-equal}},
@uref{fun_chareqcm__ar-not-lessp.html#charEQ,@strong{char=}},
@uref{fun_chareqcm__ar-not-lessp.html#char-equal,@strong{char-equal}}

@strong{Notes:}

@uref{glo_o.html#object,@emph{Object}} equality is not a concept for
which there is a uniquely determined correct algorithm. The
appropriateness of an equality predicate can be judged only in the
context of the needs of some particular program. Although these
functions take any type of argument and their names sound very generic,
@uref{fun_equal.html#equal,@strong{equal}} and
@ref{#equalp,@strong{equalp}} are not appropriate for every application.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss143.html,EQUAL-STRUCTURE:MAYBE-STATUS-QUO}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function EVERY SOME NOTEVERY NOTANY
@subsubsection CLHS: Function EVERY, SOME, NOTEVERY, NOTANY
@anchor{#clhs-function-every-some-notevery-notany}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_constantly.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_and.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{EVERY, SOME, NOTEVERY, NOTANY}

@strong{Syntax:}

@strong{every} @emph{predicate &rest sequences+} =>
@emph{generalized-boolean}

@strong{some} @emph{predicate &rest sequences+} => @emph{result}

@strong{notevery} @emph{predicate &rest sequences+} =>
@emph{generalized-boolean}

@strong{notany} @emph{predicate &rest sequences+} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{predicate}---a @uref{glo_d.html#designator,@emph{designator}} for
a @uref{glo_f.html#function,@emph{function}} of as many
@uref{glo_a.html#argument,@emph{arguments}} as there are
@emph{sequences}.

@emph{sequence}---a @uref{glo_s.html#sequence,@emph{sequence}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

@ref{#every,@strong{every}}, @ref{#some,@strong{some}},
@ref{#notevery,@strong{notevery}}, and @ref{#notany,@strong{notany}}
test @uref{glo_e.html#element,@emph{elements}} of @emph{sequences} for
satisfaction of a given @emph{predicate}. The first argument to
@emph{predicate} is an @uref{glo_e.html#element,@emph{element}} of the
first @emph{sequence}; each succeeding argument is an
@uref{glo_e.html#element,@emph{element}} of a succeeding
@emph{sequence}.

@emph{Predicate} is first applied to the elements with index 0 in each
of the @emph{sequences}, and possibly then to the elements with index 1,
and so on, until a termination criterion is met or the end of the
shortest of the @emph{sequences} is reached.

@ref{#every,@strong{every}} returns @uref{glo_f.html#false,@emph{false}}
as soon as any invocation of @emph{predicate} returns
@uref{glo_f.html#false,@emph{false}}. If the end of a @emph{sequence} is
reached, @ref{#every,@strong{every}} returns
@uref{glo_t.html#true,@emph{true}}. Thus, @ref{#every,@strong{every}}
returns @uref{glo_t.html#true,@emph{true}} if and only if every
invocation of @emph{predicate} returns
@uref{glo_t.html#true,@emph{true}}.

@ref{#some,@strong{some}} returns the first
@uref{glo_n.html#non-nil,@emph{non-nil}} value which is returned by an
invocation of @emph{predicate}. If the end of a @emph{sequence} is
reached without any invocation of the @emph{predicate} returning
@uref{glo_t.html#true,@emph{true}}, @ref{#some,@strong{some}} returns
@uref{glo_f.html#false,@emph{false}}. Thus, @ref{#some,@strong{some}}
returns @uref{glo_t.html#true,@emph{true}} if and only if some
invocation of @emph{predicate} returns
@uref{glo_t.html#true,@emph{true}}.

@ref{#notany,@strong{notany}} returns
@uref{glo_f.html#false,@emph{false}} as soon as any invocation of
@emph{predicate} returns @uref{glo_t.html#true,@emph{true}}. If the end
of a @emph{sequence} is reached, @ref{#notany,@strong{notany}} returns
@uref{glo_t.html#true,@emph{true}}. Thus, @ref{#notany,@strong{notany}}
returns @uref{glo_t.html#true,@emph{true}} if and only if it is not the
case that any invocation of @emph{predicate} returns
@uref{glo_t.html#true,@emph{true}}.

@ref{#notevery,@strong{notevery}} returns
@uref{glo_t.html#true,@emph{true}} as soon as any invocation of
@emph{predicate} returns @uref{glo_f.html#false,@emph{false}}. If the
end of a @emph{sequence} is reached, @ref{#notevery,@strong{notevery}}
returns @uref{glo_f.html#false,@emph{false}}. Thus,
@ref{#notevery,@strong{notevery}} returns
@uref{glo_t.html#true,@emph{true}} if and only if it is not the case
that every invocation of @emph{predicate} returns
@uref{glo_t.html#true,@emph{true}}.

@strong{Examples:}

@verbatim
 (every #'characterp "abc") =>  true
 (some #'= '(1 2 3 4 5) '(5 4 3 2 1)) =>  true
 (notevery #'< '(1 2 3 4) '(5 6 7 8) '(9 10 11 12)) =>  false
 (notany #'> '(1 2 3 4) '(5 6 7 8) '(9 10 11 12)) =>  true 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
first argument is neither a @uref{glo_s.html#symbol,@emph{symbol}} nor a
@uref{glo_f.html#function,@emph{function}} or if any subsequent argument
is not a @uref{glo_p.html#proper_sequence,@emph{proper sequence}}.

Other exceptional situations are possible, depending on the nature of
the @emph{predicate}.

@strong{See Also:}

@uref{mac_and.html#and,@strong{and}}, @uref{mac_or.html#or,@strong{or}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

@verbatim
 (notany predicate sequence*) ==  (not (some predicate sequence*))
 (notevery predicate sequence*) ==  (not (every predicate sequence*))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FBOUNDP
@subsubsection CLHS: Function FBOUNDP
@anchor{#clhs-function-fboundp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_fdefinition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_fmakunbound.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FBOUNDP}

@strong{Syntax:}

@strong{fboundp} @emph{name} => @emph{generalized-boolean}

@strong{Pronunciation:}

[,ef'bandpee]

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{name} is
@uref{glo_f.html#fbound,@emph{fbound}}; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (fboundp 'car) =>  true
 (fboundp 'nth-value) =>  false
 (fboundp 'with-open-file) =>  true
 (fboundp 'unwind-protect) =>  true
 (defun my-function (x) x) =>  MY-FUNCTION
 (fboundp 'my-function) =>  true
 (let ((saved-definition (symbol-function 'my-function)))
   (unwind-protect (progn (fmakunbound 'my-function)
                          (fboundp 'my-function))
     (setf (symbol-function 'my-function) saved-definition)))
=>  false
 (fboundp 'my-function) =>  true
 (defmacro my-macro (x) `',x) =>  MY-MACRO
 (fboundp 'my-macro) =>  true
 (fmakunbound 'my-function) =>  MY-FUNCTION
 (fboundp 'my-function) =>  false
 (flet ((my-function (x) x))
   (fboundp 'my-function)) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{name} is not a @uref{glo_f.html#function_name,@emph{function
name}}.

@strong{See Also:}

@uref{acc_symbol-function.html#symbol-function,@strong{symbol-function}},
@uref{fun_fmakunbound.html#fmakunbound,@strong{fmakunbound}},
@uref{acc_fdefinition.html#fdefinition,@strong{fdefinition}}

@strong{Notes:}

It is permissible to call
@uref{acc_symbol-function.html#symbol-function,@strong{symbol-function}}
on any @uref{glo_s.html#symbol,@emph{symbol}} that is
@uref{glo_f.html#fbound,@emph{fbound}}.

@ref{#fboundp,@strong{fboundp}} is sometimes used to ``guard'' an access
to the @uref{glo_f.html#function_cell,@emph{function cell}}, as in:

@verbatim
(if (fboundp x) (symbol-function x))
@end verbatim

Defining a @uref{glo_s.html#setf_expander,@emph{setf expander}} @emph{F}
does not cause the @uref{glo_s.html#setf_function,@emph{setf function}}
(setf @emph{F}) to become defined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss305.html,SETF-FUNCTIONS-AGAIN:MINIMAL-CHANGES}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FMAKUNBOUND
@subsubsection CLHS: Function FMAKUNBOUND
@anchor{#clhs-function-fmakunbound}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_fboundp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_fletcm_scm_macrolet.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FMAKUNBOUND}

@strong{Syntax:}

@strong{fmakunbound} @emph{name} => @emph{name}

@strong{Pronunciation:}

[,ef'makuhn,band] or [,ef'maykuhn,band]

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}}.

@strong{Description:}

Removes the @uref{glo_f.html#function,@emph{function}} or
@uref{glo_m.html#macro,@emph{macro}} definition, if any, of @emph{name}
in the @uref{glo_g.html#global_environment,@emph{global environment}}.

@strong{Examples:}

@verbatim
(defun add-some (x) (+ x 19)) =>  ADD-SOME
 (fboundp 'add-some) =>  true
 (flet ((add-some (x) (+ x 37)))
    (fmakunbound 'add-some)
    (add-some 1)) =>  38
 (fboundp 'add-some) =>  false
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{name} is not a @uref{glo_f.html#function_name,@emph{function
name}}.

The consequences are undefined if @emph{name} is a
@uref{glo_s.html#special_operator,@emph{special operator}}.

@strong{See Also:}

@uref{fun_fboundp.html#fboundp,@strong{fboundp}},
@uref{fun_makunbound.html#makunbound,@strong{makunbound}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FUNCALL
@subsubsection CLHS: Function FUNCALL
@anchor{#clhs-function-funcall}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_fletcm_scm_macrolet.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_function.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FUNCALL}

@strong{Syntax:}

@strong{funcall} @emph{function &rest args} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_f.html#function_designator,@emph{function
designator}}.

@emph{args}---@uref{glo_a.html#argument,@emph{arguments}} to the
@emph{function}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{function}.

@strong{Description:}

@ref{#funcall,@strong{funcall}} applies @emph{function} to @emph{args}.
If @emph{function} is a @uref{glo_s.html#symbol,@emph{symbol}}, it is
coerced to a @uref{glo_f.html#function,@emph{function}} as if by finding
its @uref{glo_f.html#functional_value,@emph{functional value}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}.

@strong{Examples:}

@verbatim
 (funcall #'+ 1 2 3) =>  6
 (funcall 'car '(1 2 3)) =>  1
 (funcall 'position 1 '(1 2 3 2 1) :start 1) =>  4
 (cons 1 2) =>  (1 . 2)
 (flet ((cons (x y) `(kons ,x ,y)))
   (let ((cons (symbol-function '+)))
     (funcall #'cons
              (funcall 'cons 1 2)
              (funcall cons 1 2))))
=>  (KONS (1 . 2) 3)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_undefined-function.html#undefined-function,@strong{undefined-function}}
should be signaled if @emph{function} is a
@uref{glo_s.html#symbol,@emph{symbol}} that does not have a global
definition as a @uref{glo_f.html#function,@emph{function}} or that has a
global definition as a @uref{glo_m.html#macro,@emph{macro}} or a
@uref{glo_s.html#special_operator,@emph{special operator}}.

@strong{See Also:}

@uref{fun_apply.html#apply,@strong{apply}},
@uref{speope_function.html#function,@strong{function}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@verbatim
 (funcall function arg1 arg2 ...)
 ==  (apply function arg1 arg2 ... nil)
 ==  (apply function (list arg1 arg2 ...))
@end verbatim

The difference between @ref{#funcall,@strong{funcall}} and an ordinary
function call is that in the former case the @emph{function} is obtained
by ordinary @uref{glo_e.html#evaluation,@emph{evaluation}} of a
@uref{glo_f.html#form,@emph{form}}, and in the latter case it is
obtained by the special interpretation of the function position that
normally occurs.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FUNCTION-LAMBDA-EXPRESSION
@subsubsection CLHS: Function FUNCTION-LAMBDA-EXPRESSION
@anchor{#clhs-function-function-lambda-expression}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_functionp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FUNCTION-LAMBDA-EXPRESSION}

@strong{Syntax:}

@strong{function-lambda-expression} @emph{function}

=> @emph{lambda-expression, closure-p, name}

@strong{Arguments and Values:}

@emph{function}---a @uref{glo_f.html#function,@emph{function}}.

@emph{lambda-expression}---a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}} or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{closure-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{name}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns information about @emph{function} as follows:

The @uref{glo_p.html#primary_value,@emph{primary value}},
@emph{lambda-expression}, is @emph{function}'s defining
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}, or
@uref{any_nil.html#nil,@strong{nil}} if the information is not
available. The @uref{glo_l.html#lambda_expression,@emph{lambda
expression}} may have been pre-processed in some ways, but it should
remain a suitable argument to
@uref{fun_compile.html#compile,@strong{compile}} or
@uref{speope_function.html#function,@strong{function}}. Any
@uref{glo_i.html#implementation,@emph{implementation}} may legitimately
return @uref{any_nil.html#nil,@strong{nil}} as the
@emph{lambda-expression} of any @emph{function}.

The @uref{glo_s.html#secondary_value,@emph{secondary value}},
@emph{closure-p}, is @uref{any_nil.html#nil,@strong{nil}} if
@emph{function}'s definition was enclosed in the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} or something @uref{glo_n.html#non-nil,@emph{non-nil}} if
@emph{function}'s definition might have been enclosed in some
@uref{glo_n.html#non-null_lexical_environment,@emph{non-null lexical
environment}}. Any
@uref{glo_i.html#implementation,@emph{implementation}} may legitimately
return @uref{glo_t.html#true,@emph{true}} as the @emph{closure-p} of any
@emph{function}.

The @uref{glo_t.html#tertiary_value,@emph{tertiary value}}, @emph{name},
is the ``name'' of @emph{function}. The name is intended for debugging
only and is not necessarily one that would be valid for use as a name in
@uref{mac_defun.html#defun,@strong{defun}} or
@uref{speope_function.html#function,@strong{function}}, for example. By
convention, @uref{any_nil.html#nil,@strong{nil}} is used to mean that
@emph{function} has no name. Any
@uref{glo_i.html#implementation,@emph{implementation}} may legitimately
return @uref{any_nil.html#nil,@strong{nil}} as the @emph{name} of any
@emph{function}.

@strong{Examples:}

The following examples illustrate some possible return values, but are
not intended to be exhaustive:

@verbatim
 (function-lambda-expression #'(lambda (x) x))
=>  NIL, false, NIL
OR=>  NIL, true, NIL
OR=>  (LAMBDA (X) X), true, NIL
OR=>  (LAMBDA (X) X), false, NIL

 (function-lambda-expression
    (funcall #'(lambda () #'(lambda (x) x))))
=>  NIL, false, NIL
OR=>  NIL, true, NIL
OR=>  (LAMBDA (X) X), true, NIL
OR=>  (LAMBDA (X) X), false, NIL
 
 (function-lambda-expression 
    (funcall #'(lambda (x) #'(lambda () x)) nil))
=>  NIL, true, NIL
OR=>  (LAMBDA () X), true, NIL
NOT=>  NIL, false, NIL
NOT=>  (LAMBDA () X), false, NIL
  
 (flet ((foo (x) x))
   (setf (symbol-function 'bar) #'foo)
   (function-lambda-expression #'bar))
=>  NIL, false, NIL
OR=>  NIL, true, NIL
OR=>  (LAMBDA (X) (BLOCK FOO X)), true, NIL
OR=>  (LAMBDA (X) (BLOCK FOO X)), false, FOO
OR=>  (SI::BLOCK-LAMBDA FOO (X) X), false, FOO
 
 (defun foo ()
   (flet ((bar (x) x))
     #'bar))
 (function-lambda-expression (foo))
=>  NIL, false, NIL
OR=>  NIL, true, NIL
OR=>  (LAMBDA (X) (BLOCK BAR X)), true, NIL
OR=>  (LAMBDA (X) (BLOCK BAR X)), true, (:INTERNAL FOO 0 BAR)
OR=>  (LAMBDA (X) (BLOCK BAR X)), false, "BAR in FOO"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

Although @uref{glo_i.html#implementation,@emph{implementations}} are
free to return ``@uref{any_nil.html#nil,@strong{nil}},
@uref{glo_t.html#true,@emph{true}},
@uref{any_nil.html#nil,@strong{nil}}'' in all cases, they are encouraged
to return a @uref{glo_l.html#lambda_expression,@emph{lambda expression}}
as the @uref{glo_p.html#primary_value,@emph{primary value}} in the case
where the argument was created by a call to
@uref{fun_compile.html#compile,@strong{compile}} or
@uref{fun_eval.html#eval,@strong{eval}} (as opposed to being created by
@emph{loading} a @uref{glo_c.html#compiled_file,@emph{compiled file}}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss173.html,FUNCTION-DEFINITION:JAN89-X3J13}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FUNCTIONP
@subsubsection CLHS: Function FUNCTIONP
@anchor{#clhs-function-functionp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_function-_a-expression.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_compiled-function-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FUNCTIONP}

@strong{Syntax:}

@strong{functionp} @emph{object} => @emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if @emph{object} is of
@uref{glo_t.html#type,@emph{type}}
@uref{syscla_function.html#function,@strong{function}}; otherwise,
returns @uref{glo_f.html#false,@emph{false}}.

@strong{Examples:}

@verbatim
 (functionp 'append) =>  false
 (functionp #'append) =>  true
 (functionp (symbol-function 'append)) =>  true
 (flet ((f () 1)) (functionp #'f)) =>  true
 (functionp (compile nil '(lambda () 259))) =>  true
 (functionp nil) =>  false
 (functionp 12) =>  false
 (functionp '(lambda (x) (* x x))) =>  false
 (functionp #'(lambda (x) (* x x))) =>  true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@verbatim
 (functionp object) ==  (typep object 'function)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function GET-SETF-EXPANSION
@subsubsection CLHS: Function GET-SETF-EXPANSION
@anchor{#clhs-function-get-setf-expansion}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-setf-expander.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_setfcm_psetf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{GET-SETF-EXPANSION}

@strong{Syntax:}

@strong{get-setf-expansion} @emph{place &optional environment}

=> @emph{vars, vals, store-vars, writer-form, reader-form}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{environment}---an @uref{glo_e.html#environment,@emph{environment}}
@uref{glo_o.html#object,@emph{object}}.

@emph{vars, vals, store-vars, writer-form, reader-form}---a
@uref{glo_s.html#setf_expansion,@emph{setf expansion}}.

@strong{Description:}

Determines five values constituting the
@uref{glo_s.html#setf_expansion,@emph{setf expansion}} for @emph{place}
in @emph{environment}; see @uref{sec_5-1-1-2.html,Section 5.1.1.2 (Setf
Expansions)}.

If @emph{environment} is not supplied or
@uref{any_nil.html#nil,@strong{nil}}, the environment is the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}}.

@strong{Examples:}

@verbatim
 (get-setf-expansion 'x)
=>  NIL, NIL, (#:G0001), (SETQ X #:G0001), X 
@end verbatim

@verbatim
;;; This macro is like POP 

 (defmacro xpop (place &environment env)
   (multiple-value-bind (dummies vals new setter getter)
                        (get-setf-expansion place env)
      `(let* (,@(mapcar #'list dummies vals) (,(car new) ,getter))
         (if (cdr new) (error "Can't expand this."))
         (prog1 (car ,(car new))
                (setq ,(car new) (cdr ,(car new)))
                ,setter))))
 
 (defsetf frob (x) (value) 
     `(setf (car ,x) ,value)) =>  FROB
;;; The following is an error; an error might be signaled at macro expansion time
 (flet ((frob (x) (cdr x)))  ;Invalid
   (xpop (frob z)))
 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}

@strong{Notes:}

Any @uref{glo_c.html#compound_form,@emph{compound form}} is a valid
@uref{glo_p.html#place,@emph{place}}, since any
@uref{glo_c.html#compound_form,@emph{compound form}} whose
@uref{glo_o.html#operator,@emph{operator}} @emph{f} has no
@uref{glo_s.html#setf_expander,@emph{setf expander}} are expanded into a
call to (setf @emph{f}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss185.html,GET-SETF-METHOD-ENVIRONMENT:ADD-ARG}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function IDENTITY
@subsubsection CLHS: Function IDENTITY
@anchor{#clhs-function-identity}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_equalp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_complement.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{IDENTITY}

@strong{Syntax:}

@strong{identity} @emph{object} => @emph{object}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns its argument @emph{object}.

@strong{Examples:}

@verbatim
 (identity 101) =>  101
 (mapcan #'identity (list (list 1 2 3) '(4 5 6))) =>  (1 2 3 4 5 6)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:} None.

@strong{Notes:}

@ref{#identity,@strong{identity}} is intended for use with functions
that require a @uref{glo_f.html#function,@emph{function}} as an
argument.

(eql x (identity x)) returns @uref{glo_t.html#true,@emph{true}} for all
possible values of @emph{x}, but (eq x (identity x)) might return
@uref{glo_f.html#false,@emph{false}} when @emph{x} is a
@uref{glo_n.html#number,@emph{number}} or
@uref{glo_c.html#character,@emph{character}}.

@ref{#identity,@strong{identity}} could be defined by

@verbatim
(defun identity (x) x)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function NOT
@subsubsection CLHS: Function NOT
@anchor{#clhs-function-not}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_nil.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_t.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{NOT}

@strong{Syntax:}

@strong{not} @emph{x} => @emph{boolean}

@strong{Arguments and Values:}

@emph{x}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}} (i.e., any @uref{glo_o.html#object,@emph{object}}).

@emph{boolean}---a @uref{glo_b.html#boolean,@emph{boolean}}.

@strong{Description:}

Returns @uref{any_t.html#t,@strong{t}} if @emph{x} is
@uref{glo_f.html#false,@emph{false}}; otherwise, returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (not nil) =>  T
 (not '()) =>  T
 (not (integerp 'sss)) =>  T
 (not (integerp 1)) =>  NIL
 (not 3.7) =>  NIL
 (not 'apple) =>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_null.html#null,@strong{null}}

@strong{Notes:}

@ref{#not,@strong{not}} is intended to be used to invert the `truth
value' of a @uref{glo_b.html#boolean,@emph{boolean}} (or
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}})
whereas @uref{fun_null.html#null,@strong{null}} is intended to be used
to test for the @uref{glo_e.html#empty_list,@emph{empty list}}.
Operationally, @ref{#not,@strong{not}} and
@uref{fun_null.html#null,@strong{null}} compute the same result; which
to use is a matter of style.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss249.html,NOT-AND-NULL-RETURN-VALUE:X3J13-MAR-93}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function VALUES-LIST
@subsubsection CLHS: Function VALUES-LIST
@anchor{#clhs-function-values-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_values.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_multip_values-limit.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{VALUES-LIST}

@strong{Syntax:}

@strong{values-list} @emph{list} => @emph{@emph{element}@strong{*}}

@strong{Arguments and Values:}

@emph{list}---a @uref{glo_l.html#list,@emph{list}}.

@emph{elements}---the @uref{glo_e.html#element,@emph{elements}} of the
@emph{list}.

@strong{Description:}

Returns the @uref{glo_e.html#element,@emph{elements}} of the @emph{list}
as @uref{glo_m.html#multiple_values,@emph{multiple values}}[2].

@strong{Examples:}

@verbatim
 (values-list nil) =>  <no values>
 (values-list '(1)) =>  1
 (values-list '(1 2)) =>  1, 2
 (values-list '(1 2 3)) =>  1, 2, 3
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Should signal
@uref{contyp_type-error.html#type-error,@strong{type-error}} if its
argument is not a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{See Also:}

@uref{mac_multiple-value-bind.html#multiple-value-bind,@strong{multiple-value-bind}},
@strong{multiple-value-list},
@uref{convar_multip_values-limit.html#multiple-values-limit,@strong{multiple-values-limit}},
@uref{acc_values.html#values,@strong{values}}

@strong{Notes:}

@verbatim
 (values-list list) ==  (apply #'values list)
@end verbatim

(equal @emph{x} (multiple-value-list (values-list @emph{x}))) returns
@uref{glo_t.html#true,@emph{true}} for all
@uref{glo_l.html#list,@emph{lists}} @emph{x}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro AND
@subsubsection CLHS: Macro AND
@anchor{#clhs-macro-and}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_everycm_s_erycm_notany.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_cond.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{AND}

@strong{Syntax:}

@strong{and} @emph{@emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} resulting
from the evaluation of the last @emph{form}, or the symbols
@uref{any_nil.html#nil,@strong{nil}} or @uref{any_t.html#t,@strong{t}}.

@strong{Description:}

The macro @ref{#and,@strong{and}} evaluates each @emph{form} one at a
time from left to right. As soon as any @emph{form} evaluates to
@uref{any_nil.html#nil,@strong{nil}}, @ref{#and,@strong{and}} returns
@uref{any_nil.html#nil,@strong{nil}} without evaluating the remaining
@emph{forms}. If all @emph{forms} but the last evaluate to
@uref{glo_t.html#true,@emph{true}} values, @ref{#and,@strong{and}}
returns the results produced by evaluating the last @emph{form}.

If no @emph{forms} are supplied, (and) returns
@uref{any_t.html#t,@strong{t}}.

@ref{#and,@strong{and}} passes back multiple values from the last
@uref{glo_s.html#subform,@emph{subform}} but not from subforms other
than the last.

@strong{Examples:}

@verbatim
 (if (and (>= n 0)
          (< n (length a-simple-vector))
          (eq (elt a-simple-vector n) 'foo))
     (princ "Foo!"))
@end verbatim

The above expression prints Foo! if element n of a-simple-vector is the
symbol foo, provided also that n is indeed a valid index for
a-simple-vector. Because @ref{#and,@strong{and}} guarantees
left-to-right testing of its parts, @uref{acc_elt.html#elt,@strong{elt}}
is not called if n is out of range.

@verbatim
 (setq temp1 1 temp2 1 temp3 1) =>  1 
 (and (incf temp1) (incf temp2) (incf temp3)) =>  2 
 (and (eql 2 temp1) (eql 2 temp2) (eql 2 temp3)) =>  true
 (decf temp3) =>  1 
 (and (decf temp1) (decf temp2) (eq temp3 'nil) (decf temp3)) =>  NIL 
 (and (eql temp1 temp2) (eql temp2 temp3)) =>  true
 (and) =>  T 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_cond.html#cond,@strong{cond}},
@uref{fun_everycm_s_erycm_notany.html#every,@strong{every}},
@uref{speope_if.html#if,@strong{if}}, @uref{mac_or.html#or,@strong{or}},
@uref{mac_whencm_unless.html#when,@strong{when}}

@strong{Notes:}

@verbatim
 (and form) ==  (let () form)
 (and form1 form2 ...) ==  (when form1 (and form2 ...))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro CASE CCASE ECASE
@subsubsection CLHS: Macro CASE, CCASE, ECASE
@anchor{#clhs-macro-case-ccase-ecase}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_whencm_unless.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_typecasec_cm_etypecase.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{CASE, CCASE, ECASE}

@strong{Syntax:}

@strong{case} @emph{keyform @{@emph{normal-clause}@}@strong{*}
[@emph{otherwise-clause}]} => @emph{@emph{result}@strong{*}}

@strong{ccase} @emph{keyplace @{@emph{normal-clause}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{ecase} @emph{keyform @{@emph{normal-clause}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@verbatim
normal-clause::= (keys form*) 
@end verbatim

@verbatim
otherwise-clause::= ({otherwise | t} form*) 
@end verbatim

@verbatim
clause::= normal-clause | otherwise-clause 
@end verbatim

@strong{Arguments and Values:}

@emph{keyform}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @emph{test-key}.

@emph{keyplace}---a @uref{glo_f.html#form,@emph{form}}; evaluated
initially to produce a @emph{test-key}. Possibly also used later as a
@uref{glo_p.html#place,@emph{place}} if no @emph{keys} match.

@emph{test-key}---an object produced by evaluating @emph{keyform} or
@emph{keyplace}.

@emph{keys}---a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_l.html#list,@emph{list}} of
@uref{glo_o.html#object,@emph{objects}}. In the case of
@ref{#case,@strong{case}}, the @uref{glo_s.html#symbol,@emph{symbols}}
@uref{any_t.html#t,@strong{t}} and @ref{#otherwise,@strong{otherwise}}
may not be used as the @emph{keys}
@uref{glo_d.html#designator,@emph{designator}}. To refer to these
@uref{glo_s.html#symbol,@emph{symbols}} by themselves as @emph{keys},
the designators (t) and (otherwise), respectively, must be used instead.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms} in the matching @emph{clause}.

@strong{Description:}

These @uref{glo_m.html#macro,@emph{macros}} allow the conditional
execution of a body of @emph{forms} in a @emph{clause} that is selected
by matching the @emph{test-key} on the basis of its identity.

The @emph{keyform} or @emph{keyplace} is @emph{evaluated} to produce the
@emph{test-key}.

Each of the @emph{normal-clauses} is then considered in turn. If the
@emph{test-key} is the @uref{glo_s.html#same,@emph{same}} as any
@uref{glo_k.html#key,@emph{key}} for that @emph{clause}, the
@emph{forms} in that @emph{clause} are @emph{evaluated} as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}, and the
@uref{glo_v.html#value,@emph{values}} it returns are returned as the
value of the @ref{#case,@strong{case}}, @ref{#ccase,@strong{ccase}}, or
@ref{#ecase,@strong{ecase}} @uref{glo_f.html#form,@emph{form}}.

These @uref{glo_m.html#macro,@emph{macros}} differ only in their
@emph{behavior} when no @emph{normal-clause} matches; specifically:

@ref{#case,@strong{case}}

If no @emph{normal-clause} matches, and there is an
@emph{otherwise-clause}, then that @emph{otherwise-clause} automatically
matches; the @emph{forms} in that @emph{clause} are @emph{evaluated} as
an @uref{glo_i.html#implicit_progn,@emph{implicit progn}}, and the
@uref{glo_v.html#value,@emph{values}} it returns are returned as the
value of the @ref{#case,@strong{case}}.

If there is no @emph{otherwise-clause}, @ref{#case,@strong{case}}
returns @uref{any_nil.html#nil,@strong{nil}}.

@ref{#ccase,@strong{ccase}}

If no @emph{normal-clause} matches, a
@uref{glo_c.html#correctable,@emph{correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled. The offending datum is the @emph{test-key} and the expected
type is @uref{glo_t.html#type_equivalent,@emph{type equivalent}} to
(member @emph{key1} @emph{key2} ...). The
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} can be used to correct the
error.

If the @uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked, its
@uref{glo_a.html#argument,@emph{argument}} becomes the new
@emph{test-key}, and is stored in @emph{keyplace} as if by (setf
@emph{keyplace} @emph{test-key}). Then @ref{#ccase,@strong{ccase}}
starts over, considering each @emph{clause} anew.

The subforms of @emph{keyplace} might be evaluated again if none of the
cases holds.

@ref{#ecase,@strong{ecase}}

If no @emph{normal-clause} matches, a
@uref{glo_n.html#non-correctable,@emph{non-correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled. The offending datum is the @emph{test-key} and the expected
type is @uref{glo_t.html#type_equivalent,@emph{type equivalent}} to
(member @emph{key1} @emph{key2} ...).

Note that in contrast with @ref{#ccase,@strong{ccase}}, the caller of
@ref{#ecase,@strong{ecase}} may rely on the fact that
@ref{#ecase,@strong{ecase}} does not return if a @emph{normal-clause}
does not match.

@strong{Examples:}

@verbatim
 (dolist (k '(1 2 3 :four #\v () t 'other))
    (format t "~S "
       (case k ((1 2) 'clause1)
               (3 'clause2)
               (nil 'no-keys-so-never-seen)
               ((nil) 'nilslot)
               ((:four #\v) 'clause4)
               ((t) 'tslot)
               (otherwise 'others)))) 
>>  CLAUSE1 CLAUSE1 CLAUSE2 CLAUSE4 CLAUSE4 NILSLOT TSLOT OTHERS 
=>  NIL
 (defun add-em (x) (apply #'+ (mapcar #'decode x)))
=>  ADD-EM
 (defun decode (x)
   (ccase x
     ((i uno) 1)
     ((ii dos) 2)
     ((iii tres) 3)
     ((iv cuatro) 4)))
=>  DECODE
 (add-em '(uno iii)) =>  4
 (add-em '(uno iiii))
>>  Error: The value of X, IIII, is not I, UNO, II, DOS, III,
>>         TRES, IV, or CUATRO.
>>   1: Supply a value to use instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> :CONTINUE 1
>>  Value to evaluate and use for X: 'IV
=>  5
@end verbatim

@strong{Side Effects:}

The debugger might be entered. If the
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked, the
@uref{glo_v.html#value,@emph{value}} of @emph{keyplace} might be
changed.

@strong{Affected By:}

@ref{#ccase,@strong{ccase}} and @ref{#ecase,@strong{ecase}}, since they
might signal an error, are potentially affected by existing
@emph{handlers} and
@uref{var_stdebug-i_ace-outputst.html#STdebug-ioST,@strong{*debug-io*}}.

@strong{Exceptional Situations:}

@ref{#ccase,@strong{ccase}} and @ref{#ecase,@strong{ecase}} signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if no
@emph{normal-clause} matches.

@strong{See Also:}

@uref{mac_cond.html#cond,@strong{cond}},
@uref{mac_typecasec_cm_etypecase.html#typecase,@strong{typecase}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

@verbatim
(case test-key
  {((key*) form*)}*)
== 
(let ((#1=#:g0001 test-key))
  (cond {((member #1# '(key*)) form*)}*))
@end verbatim

The specific error message used by @ref{#ecase,@strong{ecase}} and
@ref{#ccase,@strong{ccase}} can vary between implementations. In
situations where control of the specific wording of the error message is
important, it is better to use @ref{#case,@strong{case}} with an
@emph{otherwise-clause} that explicitly signals an error with an
appropriate message.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro COND
@subsubsection CLHS: Macro COND
@anchor{#clhs-macro-cond}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_and.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_if.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{COND}

@strong{Syntax:}

@strong{cond} @emph{@{@emph{clause}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@verbatim
clause::= (test-form form*) 
@end verbatim

@strong{Arguments and Values:}

@emph{test-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@emph{forms} in the first @emph{clause} whose @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_t.html#true,@emph{true}}, or the
@uref{glo_p.html#primary_value,@emph{primary value}} of the
@emph{test-form} if there are no @emph{forms} in that @emph{clause}, or
else @uref{any_nil.html#nil,@strong{nil}} if no @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_t.html#true,@emph{true}}.

@strong{Description:}

@ref{#cond,@strong{cond}} allows the execution of @emph{forms} to be
dependent on @emph{test-form}.

@emph{Test-forms} are evaluated one at a time in the order in which they
are given in the argument list until a @emph{test-form} is found that
evaluates to @uref{glo_t.html#true,@emph{true}}.

If there are no @uref{glo_f.html#form,@emph{forms}} in that clause, the
@uref{glo_p.html#primary_value,@emph{primary value}} of the
@emph{test-form} is returned by the @ref{#cond,@strong{cond}}
@uref{glo_f.html#form,@emph{form}}. Otherwise, the @emph{forms}
associated with this @emph{test-form} are evaluated in order, left to
right, as an @uref{glo_i.html#implicit_progn,@emph{implicit progn}}, and
the @uref{glo_v.html#value,@emph{values}} returned by the last
@emph{form} are returned by the @ref{#cond,@strong{cond}}
@uref{glo_f.html#form,@emph{form}}.

Once one @emph{test-form} has @emph{yielded}
@uref{glo_t.html#true,@emph{true}}, no additional @emph{test-forms} are
@emph{evaluated}. If no @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_t.html#true,@emph{true}}, @uref{any_nil.html#nil,@strong{nil}}
is returned.

@strong{Examples:}

@verbatim
 (defun select-options ()
   (cond ((= a 1) (setq a 2))
         ((= a 2) (setq a 3))
         ((and (= a 3) (floor a 2)))
         (t (floor a 3)))) =>  SELECT-OPTIONS
 (setq a 1) =>  1
 (select-options) =>  2
 a =>  2
 (select-options) =>  3
 a =>  3
 (select-options) =>  1
 (setq a 5) =>  5
 (select-options) =>  1, 2
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_if.html#if,@strong{if}},
@uref{mac_casecm_ccasecm_ecase.html#case,@strong{case}}.

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFCONSTANT
@subsubsection CLHS: Macro DEFCONSTANT
@anchor{#clhs-macro-defconstant}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_lambda_meters-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defparametercm_defvar.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFCONSTANT}

@strong{Syntax:}

@strong{defconstant} @emph{name initial-value [documentation]} =>
@emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}; not evaluated.

@emph{initial-value}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@strong{Description:}

@ref{#defconstant,@strong{defconstant}} causes the global variable named
by @emph{name} to be given a value that is the result of evaluating
@emph{initial-value}.

A constant defined by @ref{#defconstant,@strong{defconstant}} can be
redefined with @ref{#defconstant,@strong{defconstant}}. However, the
consequences are undefined if an attempt is made to assign a
@uref{glo_v.html#value,@emph{value}} to the
@uref{glo_s.html#symbol,@emph{symbol}} using another operator, or to
assign it to a @uref{glo_d.html#different,@emph{different}}
@uref{glo_v.html#value,@emph{value}} using a subsequent
@ref{#defconstant,@strong{defconstant}}.

If @emph{documentation} is supplied, it is attached to @emph{name} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
kind @uref{stagenfun_doc_umentationcp.html#variable,@strong{variable}}.

@ref{#defconstant,@strong{defconstant}} normally appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, but it is
meaningful for it to appear as a
@uref{glo_n.html#non-top-level_form,@emph{non-top-level form}}. However,
the compile-time side effects described below only take place when
@ref{#defconstant,@strong{defconstant}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}.

The consequences are undefined if there are any
@uref{glo_b.html#binding,@emph{bindings}} of the variable named by
@emph{name} at the time @ref{#defconstant,@strong{defconstant}} is
executed or if the value is not @uref{fun_eql.html#eql,@strong{eql}} to
the value of @emph{initial-value}.

The consequences are undefined when constant
@uref{glo_s.html#symbol,@emph{symbols}} are rebound as either lexical or
dynamic variables. In other words, a reference to a
@uref{glo_s.html#symbol,@emph{symbol}} declared with
@ref{#defconstant,@strong{defconstant}} always refers to its global
value.

The side effects of the execution of
@ref{#defconstant,@strong{defconstant}} must be equivalent to at least
the side effects of the execution of the following code:

@verbatim
 (setf (symbol-value 'name) initial-value)
 (setf (documentation 'name 'variable) 'documentation)
@end verbatim

If a @ref{#defconstant,@strong{defconstant}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must recognize that
@emph{name} names a @uref{glo_c.html#constant_variable,@emph{constant
variable}}. An implementation may choose to evaluate the value-form at
compile time, load time, or both. Therefore, users must ensure that the
@emph{initial-value} can be @emph{evaluated} at compile time (regardless
of whether or not references to @emph{name} appear in the file) and that
it always @uref{glo_e.html#evaluate,@emph{evaluates}} to the same value.

@strong{Examples:}

@verbatim
 (defconstant this-is-a-constant 'never-changing "for a test") =>  THIS-IS-A-CONSTANT
this-is-a-constant =>  NEVER-CHANGING
 (documentation 'this-is-a-constant 'variable) =>  "for a test"
 (constantp 'this-is-a-constant) =>  true
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{mac_defparametercm_defvar.html#defparameter,@strong{defparameter}},
@uref{mac_defparametercm_defvar.html#defvar,@strong{defvar}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{fun_proclaim.html#proclaim,@strong{proclaim}},
@uref{sec_3-1-2-1-1-3.html,Section 3.1.2.1.1.3 (Constant Variables)},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss099.html,DEFCONSTANT-SPECIAL:NO}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss123.html,DEFVAR-DOCUMENTATION:UNEVALUATED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-MODIFY-MACRO
@subsubsection CLHS: Macro DEFINE-MODIFY-MACRO
@anchor{#clhs-macro-define-modify-macro}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_progn.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defsetf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-MODIFY-MACRO}

@strong{Syntax:}

@strong{define-modify-macro} @emph{name lambda-list function
[documentation]} => @emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{lambda-list}---a
@uref{glo_d.html#define-modify-macro_lambda_list,@emph{define-modify-macro
lambda list}}

@emph{function}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@strong{Description:}

@ref{#define-modify-macro,@strong{define-modify-macro}} defines a
@uref{glo_m.html#macro,@emph{macro}} named @emph{name} to
@uref{glo_r.html#read,@emph{read}} and
@uref{glo_w.html#write,@emph{write}} a
@uref{glo_p.html#place,@emph{place}}.

The arguments to the new @uref{glo_m.html#macro,@emph{macro}} are a
@uref{glo_p.html#place,@emph{place}}, followed by the arguments that are
supplied in @emph{lambda-list}. @uref{glo_m.html#macro,@emph{Macros}}
defined with @ref{#define-modify-macro,@strong{define-modify-macro}}
correctly pass the
@uref{glo_e.html#environment_parameter,@emph{environment parameter}} to
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}}.

When the @uref{glo_m.html#macro,@emph{macro}} is invoked,
@emph{function} is applied to the old contents of the
@uref{glo_p.html#place,@emph{place}} and the @emph{lambda-list}
arguments to obtain the new value, and the
@uref{glo_p.html#place,@emph{place}} is updated to contain the result.

Except for the issue of avoiding multiple evaluation (see below), the
expansion of a @ref{#define-modify-macro,@strong{define-modify-macro}}
is equivalent to the following:

@verbatim
 (defmacro name (reference . lambda-list)
   documentation
   `(setf ,reference
          (function ,reference ,arg1 ,arg2 ...)))
@end verbatim

where @emph{arg1}, @emph{arg2}, ..., are the parameters appearing in
@emph{lambda-list}; appropriate provision is made for a
@uref{glo_r.html#rest_parameter,@emph{rest parameter}}.

The @uref{glo_s.html#subform,@emph{subforms}} of the macro calls defined
by @ref{#define-modify-macro,@strong{define-modify-macro}} are evaluated
as specified in @uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of
Subforms to Places)}.

@emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
@emph{name} (as kind
@uref{speope_function.html#function,@strong{function}}) and to the
@uref{glo_m.html#macro_function,@emph{macro function}}.

If a @ref{#define-modify-macro,@strong{define-modify-macro}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must store the
@uref{glo_m.html#macro,@emph{macro}} definition at compile time, so that
occurrences of the macro later on in the file can be expanded correctly.

@strong{Examples:}

@verbatim
 (define-modify-macro appendf (&rest args) 
    append "Append onto list") =>  APPENDF
 (setq x '(a b c) y x) =>  (A B C)
 (appendf x '(d e f) '(1 2 3)) =>  (A B C D E F 1 2 3)
 x =>  (A B C D E F 1 2 3)
 y =>  (A B C)
 (define-modify-macro new-incf (&optional (delta 1)) +)
 (define-modify-macro unionf (other-set &rest keywords) union)
@end verbatim

@strong{Side Effects:}

A macro definition is assigned to @emph{name}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss185.html,GET-SETF-METHOD-ENVIRONMENT:ADD-ARG}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-SETF-EXPANDER
@subsubsection CLHS: Macro DEFINE-SETF-EXPANDER
@anchor{#clhs-macro-define-setf-expander}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defsetf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_get-setf-expansion.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-SETF-EXPANDER}

@strong{Syntax:}

@strong{define-setf-expander} @emph{access-fn lambda-list
[[@emph{declaration}@strong{*} | @emph{documentation}]]
@emph{form}@strong{*}}

=> @emph{access-fn}

@strong{Arguments and Values:}

@emph{access-fn}---a @uref{glo_s.html#symbol,@emph{symbol}} that
@uref{glo_n.html#name,@emph{names}} a
@uref{glo_f.html#function,@emph{function}} or
@uref{glo_m.html#macro,@emph{macro}}.

@emph{lambda-list} -- @uref{glo_m.html#macro_lambda_list,@emph{macro
lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@strong{Description:}

@ref{#define-setf-expander,@strong{define-setf-expander}} specifies the
means by which @uref{mac_setfcm_psetf.html#setf,@strong{setf}} updates a
@uref{glo_p.html#place,@emph{place}} that is referenced by
@emph{access-fn}.

When @uref{mac_setfcm_psetf.html#setf,@strong{setf}} is given a
@uref{glo_p.html#place,@emph{place}} that is specified in terms of
@emph{access-fn} and a new value for the
@uref{glo_p.html#place,@emph{place}}, it is expanded into a form that
performs the appropriate update.

The @emph{lambda-list} supports destructuring. See
@uref{sec_3-4-4.html,Section 3.4.4 (Macro Lambda Lists)}.

@emph{Documentation} is attached to @emph{access-fn} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
kind @uref{any_setf.html#setf,@strong{setf}}.

@emph{Forms} constitute the body of the
@uref{glo_s.html#setf_expander,@emph{setf expander}} definition and must
compute the @uref{glo_s.html#setf_expansion,@emph{setf expansion}} for a
call on @uref{mac_setfcm_psetf.html#setf,@strong{setf}} that references
the @uref{glo_p.html#place,@emph{place}} by means of the given
@emph{access-fn}. The @uref{glo_s.html#setf_expander,@emph{setf
expander}} function is defined in the same
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which the @ref{#define-setf-expander,@strong{define-setf-expander}}
@uref{glo_f.html#form,@emph{form}} appears. While @emph{forms} are being
executed, the variables in @emph{lambda-list} are bound to parts of the
@uref{glo_p.html#place,@emph{place}} @uref{glo_f.html#form,@emph{form}}.
The body @emph{forms} (but not the @emph{lambda-list}) in a
@ref{#define-setf-expander,@strong{define-setf-expander}}
@uref{glo_f.html#form,@emph{form}} are implicitly enclosed in a
@uref{glo_b.html#block,@emph{block}} whose name is @emph{access-fn}.

The evaluation of @emph{forms} must result in the five values described
in @uref{sec_5-1-1-2.html,Section 5.1.1.2 (Setf Expansions)}.

If a @ref{#define-setf-expander,@strong{define-setf-expander}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must make the
@uref{glo_s.html#setf_expander,@emph{setf expander}} available so that
it may be used to expand calls to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} later on in the
@uref{glo_f.html#file,@emph{file}}.
@uref{glo_p.html#programmer,@emph{Programmers}} must ensure that the
@emph{forms} can be evaluated at compile time if the @emph{access-fn} is
used in a @uref{glo_p.html#place,@emph{place}} later in the same
@uref{glo_f.html#file,@emph{file}}. The
@uref{glo_c.html#compiler,@emph{compiler}} must make these
@uref{glo_s.html#setf_expander,@emph{setf expanders}} available to
compile-time calls to
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}}
when its @emph{environment} argument is a value received as the
@uref{glo_e.html#environment_parameter,@emph{environment parameter}} of
a @uref{glo_m.html#macro,@emph{macro}}.

@strong{Examples:}

@verbatim
 (defun lastguy (x) (car (last x))) =>  LASTGUY
 (define-setf-expander lastguy (x &environment env)
   "Set the last element in a list to the given value."
   (multiple-value-bind (dummies vals newval setter getter)
       (get-setf-expansion x env)
     (let ((store (gensym)))
       (values dummies
               vals
               `(,store)
               `(progn (rplaca (last ,getter) ,store) ,store)
               `(lastguy ,getter))))) =>  LASTGUY
 (setq a (list 'a 'b 'c 'd)
       b (list 'x)
       c (list 1 2 3 (list 4 5 6))) =>  (1 2 3 (4 5 6))
 (setf (lastguy a) 3) =>  3
 (setf (lastguy b) 7) =>  7
 (setf (lastguy (lastguy c)) 'lastguy-symbol) =>  LASTGUY-SYMBOL
 a =>  (A B C 3)
 b =>  (7)
 c =>  (1 2 3 (4 5 LASTGUY-SYMBOL))
@end verbatim

@verbatim
;;; Setf expander for the form (LDB bytespec int).
;;; Recall that the int form must itself be suitable for SETF.
 (define-setf-expander ldb (bytespec int &environment env)
   (multiple-value-bind (temps vals stores
                          store-form access-form)
       (get-setf-expansion int env);Get setf expansion for int.
     (let ((btemp (gensym))     ;Temp var for byte specifier.
           (store (gensym))     ;Temp var for byte to store.
           (stemp (first stores))) ;Temp var for int to store.
       (if (cdr stores) (error "Can't expand this."))
;;; Return the setf expansion for LDB as five values.
       (values (cons btemp temps)       ;Temporary variables.
               (cons bytespec vals)     ;Value forms.
               (list store)             ;Store variables.
               `(let ((,stemp (dpb ,store ,btemp ,access-form)))
                  ,store-form
                  ,store)               ;Storing form.
               `(ldb ,btemp ,access-form) ;Accessing form.
              ))))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

@ref{#define-setf-expander,@strong{define-setf-expander}} differs from
the long form of @uref{mac_defsetf.html#defsetf,@strong{defsetf}} in
that while the body is being executed the
@uref{glo_v.html#variable,@emph{variables}} in @emph{lambda-list} are
bound to parts of the @uref{glo_p.html#place,@emph{place}}
@uref{glo_f.html#form,@emph{form}}, not to temporary variables that will
be bound to the values of such parts. In addition,
@ref{#define-setf-expander,@strong{define-setf-expander}} does not have
@uref{mac_defsetf.html#defsetf,@strong{defsetf}}'s restriction that
@emph{access-fn} must be a @uref{glo_f.html#function,@emph{function}} or
a function-like @uref{glo_m.html#macro,@emph{macro}}; an arbitrary
@uref{mac_defmacro.html#defmacro,@strong{defmacro}} destructuring
pattern is permitted in @emph{lambda-list}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss105.html,DEFMACRO-BLOCK-SCOPE:EXCLUDES-BINDINGS}
@item
@uref{../Issues/iss161.html,FLET-IMPLICIT-BLOCK:YES}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFPARAMETER DEFVAR
@subsubsection CLHS: Macro DEFPARAMETER, DEFVAR
@anchor{#clhs-macro-defparameter-defvar}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defconstant.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_destructuring-bind.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFPARAMETER, DEFVAR}

@strong{Syntax:}

@strong{defparameter} @emph{name initial-value [documentation]} =>
@emph{name}

@strong{defvar} @emph{name [initial-value [documentation]]} =>
@emph{name}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}; not evaluated.

@emph{initial-value}---a @uref{glo_f.html#form,@emph{form}}; for
@ref{#defparameter,@strong{defparameter}}, it is always
@emph{evaluated}, but for @ref{#defvar,@strong{defvar}} it is
@emph{evaluated} only if @emph{name} is not already
@uref{glo_b.html#bound,@emph{bound}}.

@emph{documentation}---a @emph{string}; not evaluated.

@strong{Description:}

@ref{#defparameter,@strong{defparameter}} and
@ref{#defvar,@strong{defvar}}
@uref{glo_e.html#establish,@emph{establish}} @emph{name} as a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}.

@ref{#defparameter,@strong{defparameter}} unconditionally
@uref{glo_a.html#assign,@emph{assigns}} the @emph{initial-value} to the
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}} named
@emph{name}. @ref{#defvar,@strong{defvar}}, by contrast,
@uref{glo_a.html#assign,@emph{assigns}} @emph{initial-value} (if
supplied) to the @uref{glo_d.html#dynamic_variable,@emph{dynamic
variable}} named @emph{name} only if @emph{name} is not already
@uref{glo_b.html#bound,@emph{bound}}.

If no @emph{initial-value} is supplied, @ref{#defvar,@strong{defvar}}
leaves the @uref{glo_v.html#value_cell,@emph{value cell}} of the
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}} named
@emph{name} undisturbed; if @emph{name} was previously
@uref{glo_b.html#bound,@emph{bound}}, its old
@uref{glo_v.html#value,@emph{value}} persists, and if it was previously
@uref{glo_u.html#unbound,@emph{unbound}}, it remains
@uref{glo_u.html#unbound,@emph{unbound}}.

If @emph{documentation} is supplied, it is attached to @emph{name} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
kind @uref{stagenfun_doc_umentationcp.html#variable,@strong{variable}}.

@ref{#defparameter,@strong{defparameter}} and
@ref{#defvar,@strong{defvar}} normally appear as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, but it is
meaningful for them to appear as
@uref{glo_n.html#non-top-level_form,@emph{non-top-level forms}}.
However, the compile-time side effects described below only take place
when they appear as @uref{glo_t.html#top_level_form,@emph{top level
forms}}.

@strong{Examples:}

@verbatim
 (defparameter *p* 1) =>  *P*
 *p* =>  1
 (constantp '*p*) =>  false
 (setq *p* 2) =>  2
 (defparameter *p* 3) =>  *P*
 *p* =>  3

 (defvar *v* 1) =>  *V*
 *v* =>  1
 (constantp '*v*) =>  false
 (setq *v* 2) =>  2
 (defvar *v* 3) =>  *V*
 *v* =>  2

 (defun foo ()
   (let ((*p* 'p) (*v* 'v))
     (bar))) =>  FOO
 (defun bar () (list *p* *v*)) =>  BAR
 (foo) =>  (P V)
@end verbatim

The principal operational distinction between
@ref{#defparameter,@strong{defparameter}} and
@ref{#defvar,@strong{defvar}} is that
@ref{#defparameter,@strong{defparameter}} makes an unconditional
assignment to @emph{name}, while @ref{#defvar,@strong{defvar}} makes a
conditional one. In practice, this means that
@ref{#defparameter,@strong{defparameter}} is useful in situations where
loading or reloading the definition would want to pick up a new value of
the variable, while @ref{#defvar,@strong{defvar}} is used in situations
where the old value would want to be retained if the file were loaded or
reloaded. For example, one might create a file which contained:

@verbatim
 (defvar *the-interesting-numbers* '())
 (defmacro define-interesting-number (name n)
   `(progn (defvar ,name ,n)
           (pushnew ,name *the-interesting-numbers*)
           ',name))
 (define-interesting-number *my-height* 168) ;cm
 (define-interesting-number *my-weight* 13)  ;stones
@end verbatim

Here the initial value, (), for the variable *the-interesting-numbers*
is just a seed that we are never likely to want to reset to something
else once something has been grown from it. As such, we have used
@ref{#defvar,@strong{defvar}} to avoid having the *interesting-numbers*
information reset if the file is loaded a second time. It is true that
the two calls to @strong{define-interesting-number} here would be
reprocessed, but if there were additional calls in another file, they
would not be and that information would be lost. On the other hand,
consider the following code:

@verbatim
 (defparameter *default-beep-count* 3)
 (defun beep (&optional (n *default-beep-count*))
   (dotimes (i n) (si:%beep 1000. 100000.) (sleep 0.1)))
@end verbatim

Here we could easily imagine editing the code to change the initial
value of *default-beep-count*, and then reloading the file to pick up
the new value. In order to make value updating easy, we have used
@ref{#defparameter,@strong{defparameter}}.

On the other hand, there is potential value to using
@ref{#defvar,@strong{defvar}} in this situation. For example, suppose
that someone had predefined an alternate value for *default-beep-count*,
or had loaded the file and then manually changed the value. In both
cases, if we had used @ref{#defvar,@strong{defvar}} instead of
@ref{#defparameter,@strong{defparameter}}, those user preferences would
not be overridden by (re)loading the file.

The choice of whether to use @ref{#defparameter,@strong{defparameter}}
or @ref{#defvar,@strong{defvar}} has visible consequences to programs,
but is nevertheless often made for subjective reasons.

@strong{Side Effects:}

If a @ref{#defvar,@strong{defvar}} or
@ref{#defparameter,@strong{defparameter}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must recognize that the
@emph{name} has been proclaimed
@uref{dec_special.html#special,@strong{special}}. However, it must
neither @uref{glo_e.html#evaluate,@emph{evaluate}} the
@emph{initial-value} @uref{glo_f.html#form,@emph{form}} nor
@uref{glo_a.html#assign,@emph{assign}} the
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}} named
@emph{name} at compile time.

There may be additional
(@uref{glo_i.html#implementation-defined,@emph{implementation-defined}})
compile-time or run-time side effects, as long as such effects do not
interfere with the correct operation of
@uref{glo_c.html#conforming_program,@emph{conforming programs}}.

@strong{Affected By:}

@ref{#defvar,@strong{defvar}} is affected by whether @emph{name} is
already @uref{glo_b.html#bound,@emph{bound}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_declaim.html#declaim,@strong{declaim}},
@uref{mac_defconstant.html#defconstant,@strong{defconstant}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

It is customary to name @uref{glo_d.html#dynamic_variable,@emph{dynamic
variables}} with an @uref{glo_a.html#asterisk,@emph{asterisk}} at the
beginning and end of the name. e.g., *foo* is a good name for a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}, but not for
a @uref{glo_l.html#lexical_variable,@emph{lexical variable}}; foo is a
good name for a @uref{glo_l.html#lexical_variable,@emph{lexical
variable}}, but not for a
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}. This naming
convention is observed for all
@uref{glo_d.html#defined_name,@emph{defined names}} in Common Lisp;
however, neither @uref{glo_c.html#conforming_program,@emph{conforming
programs}} nor
@uref{glo_c.html#conforming_implementation,@emph{conforming
implementations}} are obliged to adhere to this convention.

The intent of the permission for additional side effects is to allow
@uref{glo_i.html#implementation,@emph{implementations}} to do normal
``bookkeeping'' that accompanies definitions. For example, the
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} of a
@ref{#defvar,@strong{defvar}} or
@ref{#defparameter,@strong{defparameter}}
@uref{glo_f.html#form,@emph{form}} might include code that arranges to
record the name of the source file in which the definition occurs.

@ref{#defparameter,@strong{defparameter}} and
@ref{#defvar,@strong{defvar}} might be defined as follows:

@verbatim
 (defmacro defparameter (name initial-value 
                         &optional (documentation nil documentation-p))
   `(progn (declaim (special ,name))
           (setf (symbol-value ',name) ,initial-value)
           ,(when documentation-p
              `(setf (documentation ',name 'variable) ',documentation))
           ',name))
 (defmacro defvar (name &optional
                        (initial-value nil initial-value-p)
                        (documentation nil documentation-p))
   `(progn (declaim (special ,name))
           ,(when initial-value-p
              `(unless (boundp ',name)
                 (setf (symbol-value ',name) ,initial-value)))
           ,(when documentation-p
              `(setf (documentation ',name 'variable) ',documentation))
           ',name))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss125.html,DEFVAR-INITIALIZATION:CONSERVATIVE}
@item
@uref{../Issues/iss123.html,DEFVAR-DOCUMENTATION:UNEVALUATED}
@item
@uref{../Issues/iss124.html,DEFVAR-INIT-TIME:NOT-DELAYED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFSETF
@subsubsection CLHS: Macro DEFSETF
@anchor{#clhs-macro-defsetf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-modify-macro.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-setf-expander.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFSETF}

@strong{Syntax:}

The ``short form'':

@strong{defsetf} @emph{access-fn update-fn [documentation]}

=> @emph{access-fn}

The ``long form'':

@strong{defsetf} @emph{access-fn lambda-list
(@emph{store-variable}@strong{*}) [[@emph{declaration}@strong{*} |
@emph{documentation}]] @emph{form}@strong{*}}

=> @emph{access-fn}

@strong{Arguments and Values:}

@emph{access-fn}---a @uref{glo_s.html#symbol,@emph{symbol}} which names
a @uref{glo_f.html#function,@emph{function}} or a
@uref{glo_m.html#macro,@emph{macro}}.

@emph{update-fn}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_f.html#function,@emph{function}} or
@uref{glo_m.html#macro,@emph{macro}}.

@emph{lambda-list}---a
@uref{glo_d.html#defsetf_lambda_list,@emph{defsetf lambda list}}.

@emph{store-variable}---a @uref{glo_s.html#symbol,@emph{symbol}} (a
@uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}).

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

@ref{#defsetf,@strong{defsetf}} defines how to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} a
@uref{glo_p.html#place,@emph{place}} of the form (@emph{access-fn} ...)
for relatively simple cases. (See
@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}}
for more general access to this facility.) It must be the case that the
@uref{glo_f.html#function,@emph{function}} or
@uref{glo_m.html#macro,@emph{macro}} named by @emph{access-fn} evaluates
all of its arguments.

@ref{#defsetf,@strong{defsetf}} may take one of two forms, called the
``short form'' and the ``long form,'' which are distinguished by the
@uref{glo_t.html#type,@emph{type}} of the second
@uref{glo_a.html#argument,@emph{argument}}.

When the short form is used, @emph{update-fn} must name a
@uref{glo_f.html#function,@emph{function}} (or
@uref{glo_m.html#macro,@emph{macro}}) that takes one more argument than
@emph{access-fn} takes. When
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} is given a
@uref{glo_p.html#place,@emph{place}} that is a call on @emph{access-fn},
it expands into a call on @emph{update-fn} that is given all the
arguments to @emph{access-fn} and also, as its last argument, the new
value (which must be returned by @emph{update-fn} as its value).

The long form @ref{#defsetf,@strong{defsetf}} resembles
@uref{mac_defmacro.html#defmacro,@strong{defmacro}}. The
@emph{lambda-list} describes the arguments of @emph{access-fn}. The
@emph{store-variables} describe the value or values to be stored into
the @uref{glo_p.html#place,@emph{place}}. The @emph{body} must compute
the expansion of a @uref{mac_setfcm_psetf.html#setf,@strong{setf}} of a
call on @emph{access-fn}. The expansion function is defined in the same
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which the @ref{#defsetf,@strong{defsetf}}
@uref{glo_f.html#form,@emph{form}} appears.

During the evaluation of the @emph{forms}, the variables in the
@emph{lambda-list} and the @emph{store-variables} are bound to names of
temporary variables, generated as if by
@uref{fun_gensym.html#gensym,@strong{gensym}} or
@uref{fun_gentemp.html#gentemp,@strong{gentemp}}, that will be bound by
the expansion of @uref{mac_setfcm_psetf.html#setf,@strong{setf}} to the
values of those @uref{glo_s.html#subform,@emph{subforms}}. This binding
permits the @emph{forms} to be written without regard for
order-of-evaluation issues. @ref{#defsetf,@strong{defsetf}} arranges for
the temporary variables to be optimized out of the final result in cases
where that is possible.

The body code in @ref{#defsetf,@strong{defsetf}} is implicitly enclosed
in a @uref{glo_b.html#block,@emph{block}} whose name is @emph{access-fn}

@ref{#defsetf,@strong{defsetf}} ensures that
@uref{glo_s.html#subform,@emph{subforms}} of the
@uref{glo_p.html#place,@emph{place}} are evaluated exactly once.

@emph{Documentation} is attached to @emph{access-fn} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} of
kind @uref{any_setf.html#setf,@strong{setf}}.

If a @ref{#defsetf,@strong{defsetf}} @uref{glo_f.html#form,@emph{form}}
appears as a @uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must make the
@uref{glo_s.html#setf_expander,@emph{setf expander}} available so that
it may be used to expand calls to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} later on in the
@uref{glo_f.html#file,@emph{file}}. Users must ensure that the
@emph{forms}, if any, can be evaluated at compile time if the
@emph{access-fn} is used in a @uref{glo_p.html#place,@emph{place}} later
in the same @uref{glo_f.html#file,@emph{file}}. The
@uref{glo_c.html#compiler,@emph{compiler}} must make these
@uref{glo_s.html#setf_expander,@emph{setf expanders}} available to
compile-time calls to
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}}
when its @emph{environment} argument is a value received as the
@uref{glo_e.html#environment_parameter,@emph{environment parameter}} of
a @uref{glo_m.html#macro,@emph{macro}}.

@strong{Examples:}

The effect of

@verbatim
 (defsetf symbol-value set)
@end verbatim

is built into the Common Lisp system. This causes the form (setf
(symbol-value foo) fu) to expand into (set foo fu).

Note that

@verbatim
 (defsetf car rplaca)
@end verbatim

would be incorrect because
@uref{fun_rplacacm_rplacd.html#rplaca,@strong{rplaca}} does not return
its last argument.

@verbatim
 (defun middleguy (x) (nth (truncate (1- (list-length x)) 2) x)) =>  MIDDLEGUY
 (defun set-middleguy (x v)
    (unless (null x)
      (rplaca (nthcdr (truncate (1- (list-length x)) 2) x) v))
    v) =>  SET-MIDDLEGUY
 (defsetf middleguy set-middleguy) =>  MIDDLEGUY
 (setq a (list 'a 'b 'c 'd)
       b (list 'x)
       c (list 1 2 3 (list 4 5 6) 7 8 9)) =>  (1 2 3 (4 5 6) 7 8 9)
 (setf (middleguy a) 3) =>  3
 (setf (middleguy b) 7) =>  7
 (setf (middleguy (middleguy c)) 'middleguy-symbol) =>  MIDDLEGUY-SYMBOL
 a =>  (A 3 C D)
 b =>  (7)
 c =>  (1 2 3 (4 MIDDLEGUY-SYMBOL 6) 7 8 9)
@end verbatim

An example of the use of the long form of
@ref{#defsetf,@strong{defsetf}}:

@verbatim
 (defsetf subseq (sequence start &optional end) (new-sequence)
   `(progn (replace ,sequence ,new-sequence
                    :start1 ,start :end1 ,end)
           ,new-sequence)) =>  SUBSEQ
@end verbatim

@verbatim
 (defvar *xy* (make-array '(10 10)))
 (defun xy (&key ((x x) 0) ((y y) 0)) (aref *xy* x y)) =>  XY
 (defun set-xy (new-value &key ((x x) 0) ((y y) 0))
   (setf (aref *xy* x y) new-value)) =>  SET-XY
 (defsetf xy (&key ((x x) 0) ((y y) 0)) (store)
   `(set-xy ,store 'x ,x 'y ,y)) =>  XY
 (get-setf-expansion '(xy a b))
=>  (#:t0 #:t1),
   (a b),
   (#:store),
   ((lambda (&key ((x #:x)) ((y #:y))) 
      (set-xy #:store 'x #:x 'y #:y))
    #:t0 #:t1),
   (xy #:t0 #:t1)
 (xy 'x 1) =>  NIL
 (setf (xy 'x 1) 1) =>  1
 (xy 'x 1) =>  1
 (let ((a 'x) (b 'y))
   (setf (xy a 1 b 2) 3)
   (setf (xy b 5 a 9) 14))
=>  14
 (xy 'y 0 'x 1) =>  1
 (xy 'x 1 'y 2) =>  3
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{fun_get-setf-expansion.html#get-setf-expansion,@strong{get-setf-expansion}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

@emph{forms} must include provision for returning the correct value (the
value or values of @emph{store-variable}). This is handled by
@emph{forms} rather than by @ref{#defsetf,@strong{defsetf}} because in
many cases this value can be returned at no extra cost, by calling a
function that simultaneously stores into the
@uref{glo_p.html#place,@emph{place}} and returns the correct value.

A @uref{mac_setfcm_psetf.html#setf,@strong{setf}} of a call on
@emph{access-fn} also evaluates all of @emph{access-fn}'s arguments; it
cannot treat any of them specially. This means that
@ref{#defsetf,@strong{defsetf}} cannot be used to describe how to store
into a @uref{glo_g.html#generalized_reference,@emph{generalized
reference}} to a byte, such as (ldb field reference).
@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}}
is used to handle situations that do not fit the restrictions imposed by
@ref{#defsetf,@strong{defsetf}} and gives the user additional control.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss161.html,FLET-IMPLICIT-BLOCK:YES}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss309.html,SETF-MULTIPLE-STORE-VARIABLES:ALLOW}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFUN
@subsubsection CLHS: Macro DEFUN
@anchor{#clhs-macro-defun}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_apply.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_fdefinition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFUN}

@strong{Syntax:}

@strong{defun} @emph{function-name lambda-list
[[@emph{declaration}@strong{*} | @emph{documentation}]]
@emph{form}@strong{*}}

=> @emph{function-name}

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@emph{lambda-list}---an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{block-name}---the
@uref{glo_f.html#function_block_name,@emph{function block name}} of the
@emph{function-name}.

@strong{Description:}

Defines a new @uref{glo_f.html#function,@emph{function}} named
@emph{function-name} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The body
of the @uref{glo_f.html#function,@emph{function}} defined by
@ref{#defun,@strong{defun}} consists of @emph{forms}; they are executed
as an @uref{glo_i.html#implicit_progn,@emph{implicit progn}} when the
@uref{glo_f.html#function,@emph{function}} is called.
@ref{#defun,@strong{defun}} can be used to define a new
@uref{glo_f.html#function,@emph{function}}, to install a corrected
version of an incorrect definition, to redefine an already-defined
@uref{glo_f.html#function,@emph{function}}, or to redefine a
@uref{glo_m.html#macro,@emph{macro}} as a
@uref{glo_f.html#function,@emph{function}}.

@ref{#defun,@strong{defun}} implicitly puts a
@uref{speope_block.html#block,@strong{block}} named @emph{block-name}
around the body @emph{forms} (but not the
@uref{glo_f.html#form,@emph{forms}} in the @emph{lambda-list}) of the
@uref{glo_f.html#function,@emph{function}} defined.

@emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
@emph{name} (as kind
@uref{speope_function.html#function,@strong{function}}) and to the
@uref{glo_f.html#function,@emph{function}}
@uref{glo_o.html#object,@emph{object}}.

Evaluating @ref{#defun,@strong{defun}} causes @emph{function-name} to be
a global name for the @uref{glo_f.html#function,@emph{function}}
specified by the @uref{glo_l.html#lambda_expression,@emph{lambda
expression}}

@verbatim
 (lambda lambda-list
   [[declaration* | documentation]]
   (block block-name form*))
@end verbatim

processed in the @uref{glo_l.html#lexical_environment,@emph{lexical
environment}} in which @ref{#defun,@strong{defun}} was executed.

(None of the arguments are evaluated at macro expansion time.)

@ref{#defun,@strong{defun}} is not required to perform any compile-time
side effects. In particular, @ref{#defun,@strong{defun}} does not make
the @uref{glo_f.html#function,@emph{function}} definition available at
compile time. An @uref{glo_i.html#implementation,@emph{implementation}}
may choose to store information about the
@uref{glo_f.html#function,@emph{function}} for the purposes of
compile-time error-checking (such as checking the number of arguments on
calls), or to enable the @uref{glo_f.html#function,@emph{function}} to
be expanded inline.

@strong{Examples:}

@verbatim
 (defun recur (x)
  (when (> x 0)
    (recur (1- x)))) =>  RECUR 
 (defun ex (a b &optional c (d 66) &rest keys &key test (start 0))
    (list a b c d keys test start)) =>  EX 
 (ex 1 2) =>  (1 2 NIL 66 NIL NIL 0)
 (ex 1 2 3 4 :test 'equal :start 50) 
=>  (1 2 3 4 (:TEST EQUAL :START 50) EQUAL 50)
 (ex :test 1 :start 2) =>  (:TEST 1 :START 2 NIL NIL 0)

 ;; This function assumes its callers have checked the types of the
 ;; arguments, and authorizes the compiler to build in that assumption.
 (defun discriminant (a b c)
   (declare (number a b c))
   "Compute the discriminant for a quadratic equation."
   (- (* b b) (* 4 a c))) =>  DISCRIMINANT
 (discriminant 1 2/3 -2) =>  76/9

 ;; This function assumes its callers have not checked the types of the
 ;; arguments, and performs explicit type checks before making any assumptions. 
 (defun careful-discriminant (a b c)
   "Compute the discriminant for a quadratic equation."
   (check-type a number)
   (check-type b number)
   (check-type c number)
   (locally (declare (number a b c))
     (- (* b b) (* 4 a c)))) =>  CAREFUL-DISCRIMINANT
 (careful-discriminant 1 2/3 -2) =>  76/9
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}},
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}},
@uref{speope_block.html#block,@strong{block}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{sym_declare.html#declare,@strong{declare}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)},
@uref{sec_3-4-1.html,Section 3.4.1 (Ordinary Lambda Lists)},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

@uref{speope_return-from.html#return-from,@strong{return-from}} can be
used to return prematurely from a
@uref{glo_f.html#function,@emph{function}} defined by
@ref{#defun,@strong{defun}}.

Additional side effects might take place when additional information
(typically debugging information) about the function definition is
recorded.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss105.html,DEFMACRO-BLOCK-SCOPE:EXCLUDES-BINDINGS}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DESTRUCTURING-BIND
@subsubsection CLHS: Macro DESTRUCTURING-BIND
@anchor{#clhs-macro-destructuring-bind}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defparametercm_defvar.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_letcm_letst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DESTRUCTURING-BIND}

@strong{Syntax:}

@strong{destructuring-bind} @emph{lambda-list expression
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{lambda-list}---a
@uref{glo_d.html#destructuring_lambda_list,@emph{destructuring lambda
list}}.

@emph{expression}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

@ref{#destructuring-bind,@strong{destructuring-bind}} binds the
variables specified in @emph{lambda-list} to the corresponding values in
the tree structure resulting from the evaluation of @emph{expression};
then @ref{#destructuring-bind,@strong{destructuring-bind}} evaluates
@emph{forms}.

The @emph{lambda-list} supports destructuring as described in
@uref{sec_3-4-5.html,Section 3.4.5 (Destructuring Lambda Lists)}.

@strong{Examples:}

@verbatim
 (defun iota (n) (loop for i from 1 to n collect i))       ;helper
 (destructuring-bind ((a &optional (b 'bee)) one two three)
     `((alpha) ,@(iota 3))
   (list a b three two one)) =>  (ALPHA BEE 3 2 1)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If the result of evaluating the @emph{expression} does not match the
destructuring pattern, an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} should be signaled.

@strong{See Also:}

@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss130.html,DESTRUCTURING-BIND:NEW-MACRO}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro MULTIPLE-VALUE-BIND
@subsubsection CLHS: Macro MULTIPLE-VALUE-BIND
@anchor{#clhs-macro-multiple-value-bind}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_typecasec_cm_etypecase.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_multiple-value-call.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{MULTIPLE-VALUE-BIND}

@strong{Syntax:}

@strong{multiple-value-bind} @emph{(@emph{var}@strong{*})
@emph{values-form} @emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a variable;
not evaluated.

@emph{values-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

Creates new variable @uref{glo_b.html#binding,@emph{bindings}} for the
@emph{vars} and executes a series of @emph{forms} that use these
@uref{glo_b.html#binding,@emph{bindings}}.

The variable @uref{glo_b.html#binding,@emph{bindings}} created are
lexical unless @uref{dec_special.html#special,@strong{special}}
declarations are specified.

@emph{Values-form} is evaluated, and each of the @emph{vars} is bound to
the respective value returned by that
@uref{glo_f.html#form,@emph{form}}. If there are more @emph{vars} than
values returned, extra values of @uref{any_nil.html#nil,@strong{nil}}
are given to the remaining @emph{vars}. If there are more values than
@emph{vars}, the excess values are discarded. The @emph{vars} are bound
to the values over the execution of the @emph{forms}, which make up an
implicit @uref{speope_progn.html#progn,@strong{progn}}. The consequences
are unspecified if a type @emph{declaration} is specified for a
@emph{var}, but the value to which that @emph{var} is bound is not
consistent with the type @emph{declaration}.

The @uref{glo_s.html#scope,@emph{scopes}} of the name binding and
@emph{declarations} do not include the @emph{values-form}.

@strong{Examples:}

@verbatim
 (multiple-value-bind (f r) 
     (floor 130 11)
   (list f r)) =>  (11 9)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_letcm_letst.html#let,@strong{let}},
@uref{speope_multiple-value-call.html#multiple-value-call,@strong{multiple-value-call}}

@strong{Notes:}

@verbatim
 (multiple-value-bind (var*) values-form form*)
 ==  (multiple-value-call #'(lambda (&optional var* &rest #1=#:ignore)
                             (declare (ignore #1#))
                             form*)
                         values-form)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro MULTIPLE-VALUE-LIST
@subsubsection CLHS: Macro MULTIPLE-VALUE-LIST
@anchor{#clhs-macro-multiple-value-list}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_multiple-value-call.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_multip_-value-prog1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{MULTIPLE-VALUE-LIST}

@strong{Syntax:}

@strong{multiple-value-list} @emph{form} => @emph{list}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{list}---a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_v.html#value,@emph{values}} returned by @emph{form}.

@strong{Description:}

@ref{#multiple-value-list,@strong{multiple-value-list}} evaluates
@emph{form} and creates a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_m.html#multiple_values,@emph{multiple values}}[2] it returns.

@strong{Examples:}

@verbatim
 (multiple-value-list (floor -3 4)) =>  (-1 1)
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_values-list.html#values-list,@strong{values-list}},
@uref{speope_multiple-value-call.html#multiple-value-call,@strong{multiple-value-call}}

@strong{Notes:}

@ref{#multiple-value-list,@strong{multiple-value-list}} and
@uref{fun_values-list.html#values-list,@strong{values-list}} are
inverses of each other.

@verbatim
 (multiple-value-list form) ==  (multiple-value-call #'list form)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro MULTIPLE-VALUE-SETQ
@subsubsection CLHS: Macro MULTIPLE-VALUE-SETQ
@anchor{#clhs-macro-multiple-value-setq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_multip_-value-prog1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_values.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{MULTIPLE-VALUE-SETQ}

@strong{Syntax:}

@strong{multiple-value-setq} @emph{vars form} => @emph{result}

@strong{Arguments and Values:}

@emph{vars}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}} that are either
@uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{names}} or
@uref{glo_n.html#name,@emph{names}} of
@uref{glo_s.html#symbol_macro,@emph{symbol macros}}.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{result}---The @uref{glo_p.html#primary_value,@emph{primary value}}
returned by the @emph{form}.

@strong{Description:}

@ref{#multiple-value-setq,@strong{multiple-value-setq}} assigns values
to @emph{vars}.

The @emph{form} is evaluated, and each @emph{var} is @emph{assigned} to
the corresponding @uref{glo_v.html#value,@emph{value}} returned by that
@uref{glo_f.html#form,@emph{form}}. If there are more @emph{vars} than
@uref{glo_v.html#value,@emph{values}} returned,
@uref{any_nil.html#nil,@strong{nil}} is @emph{assigned} to the extra
@emph{vars}. If there are more @uref{glo_v.html#value,@emph{values}}
than @emph{vars}, the extra @uref{glo_v.html#value,@emph{values}} are
discarded.

If any @emph{var} is the @uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#symbol_macro,@emph{symbol macro}}, then it is
@emph{assigned} as if by
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}. Specifically,

@verbatim
 (multiple-value-setq (symbol1 ... symboln) value-producing-form)
@end verbatim

is defined to always behave in the same way as

@verbatim
 (values (setf (values symbol1 ... symboln) value-producing-form))
@end verbatim

in order that the rules for order of evaluation and side-effects be
consistent with those used by
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}. See
@uref{sec_5-1-2-3.html,Section 5.1.2.3 (VALUES Forms as Places)}.

@strong{Examples:}

@verbatim
 (multiple-value-setq (quotient remainder) (truncate 3.2 2)) =>  1
 quotient =>  1
 remainder =>  1.2
 (multiple-value-setq (a b c) (values 1 2)) =>  1
 a =>  1
 b =>  2
 c =>  NIL
 (multiple-value-setq (a b) (values 4 5 6)) =>  4
 a =>  4
 b =>  5
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{spefor_setq.html#setq,@strong{setq}},
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss245.html,MULTIPLE-VALUE-SETQ-ORDER:LIKE-SETF-OF-VALUES}
@item
@uref{../Issues/iss339.html,SYMBOL-MACROLET-SEMANTICS:SPECIAL-FORM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro NTH-VALUE
@subsubsection CLHS: Macro NTH-VALUE
@anchor{#clhs-macro-nth-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{convar_multip_values-limit.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_progcm_progst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{NTH-VALUE}

@strong{Syntax:}

@strong{nth-value} @emph{n form} => @emph{object}

@strong{Arguments and Values:}

@emph{n}---a non-negative @uref{glo_i.html#integer,@emph{integer}};
evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Evaluates @emph{n} and then @emph{form}, returning as its only value the
@emph{n}th value @emph{yielded} by @emph{form}, or
@uref{any_nil.html#nil,@strong{nil}} if @emph{n} is greater than or
equal to the number of @uref{glo_v.html#value,@emph{values}} returned by
@emph{form}. (The first returned value is numbered 0.)

@strong{Examples:}

@verbatim
 (nth-value 0 (values 'a 'b)) =>  A
 (nth-value 1 (values 'a 'b)) =>  B
 (nth-value 2 (values 'a 'b)) =>  NIL
 (let* ((x 83927472397238947423879243432432432)
        (y 32423489732)
        (a (nth-value 1 (floor x y)))
        (b (mod x y)))
   (values a b (= a b)))
=>  3332987528, 3332987528, true
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_multiple-value-list.html#multiple-value-list,@strong{multiple-value-list}},
@uref{acc_nth.html#nth,@strong{nth}}

@strong{Notes:}

Operationally, the following relationship is true, although
@ref{#nth-value,@strong{nth-value}} might be more efficient in some
@uref{glo_i.html#implementation,@emph{implementations}} because, for
example, some @emph{consing} might be avoided.

@verbatim
 (nth-value n form) ==  (nth n (multiple-value-list form))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss250.html,NTH-VALUE:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro OR
@subsubsection CLHS: Macro OR
@anchor{#clhs-macro-or}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_if.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_whencm_unless.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{OR}

@strong{Syntax:}

@strong{or} @emph{@emph{form}@strong{*}} =>
@emph{@emph{results}@strong{*}}

@strong{Arguments and Values:}

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} or
@uref{glo_p.html#primary_value,@emph{primary value}} (see below)
resulting from the evaluation of the last @emph{form} executed or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#or,@strong{or}} evaluates each @emph{form}, one at a time, from
left to right. The evaluation of all @emph{forms} terminates when a
@emph{form} evaluates to @uref{glo_t.html#true,@emph{true}} (i.e.,
something other than @uref{any_nil.html#nil,@strong{nil}}).

If the @uref{glo_e.html#evaluation,@emph{evaluation}} of any @emph{form}
other than the last returns a
@uref{glo_p.html#primary_value,@emph{primary value}} that is
@uref{glo_t.html#true,@emph{true}}, @ref{#or,@strong{or}} immediately
returns that @uref{glo_v.html#value,@emph{value}} (but no additional
@uref{glo_v.html#value,@emph{values}}) without evaluating the remaining
@emph{forms}. If every @emph{form} but the last returns
@uref{glo_f.html#false,@emph{false}} as its
@uref{glo_p.html#primary_value,@emph{primary value}},
@ref{#or,@strong{or}} returns all @uref{glo_v.html#value,@emph{values}}
returned by the last @emph{form}. If no @emph{forms} are supplied,
@ref{#or,@strong{or}} returns @uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (or) =>  NIL 
 (setq temp0 nil temp1 10 temp2 20 temp3 30) =>  30
 (or temp0 temp1 (setq temp2 37)) =>  10
 temp2 =>  20
 (or (incf temp1) (incf temp2) (incf temp3)) =>  11
 temp1 =>  11
 temp2 =>  20
 temp3 =>  30
 (or (values) temp1) =>  11
 (or (values temp1 temp2) temp3) =>  11
 (or temp0 (values temp1 temp2)) =>  11, 20
 (or (values temp0 temp1) (values temp2 temp3)) =>  20, 30
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_and.html#and,@strong{and}},
@uref{fun_everycm_s_erycm_notany.html#some,@strong{some}},
@uref{mac_whencm_unless.html#unless,@strong{unless}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PROG1 PROG2
@subsubsection CLHS: Macro PROG1, PROG2
@anchor{#clhs-macro-prog1-prog2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_progcm_progst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_progn.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PROG1, PROG2}

@strong{Syntax:}

@strong{prog1} @emph{first-form @emph{form}@strong{*}} =>
@emph{result-1}

@strong{prog2} @emph{first-form second-form @emph{form}@strong{*}} =>
@emph{result-2}

@strong{Arguments and Values:}

@emph{first-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{second-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}; evaluated as described below.

@emph{result-1}---the @uref{glo_p.html#primary_value,@emph{primary
value}} resulting from the
@uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{first-form}.

@emph{result-2}---the @uref{glo_p.html#primary_value,@emph{primary
value}} resulting from the
@uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{second-form}.

@strong{Description:}

@ref{#prog1,@strong{prog1}} @uref{glo_e.html#evaluate,@emph{evaluates}}
@emph{first-form} and then @emph{forms}, @emph{yielding} as its only
@uref{glo_v.html#value,@emph{value}} the
@uref{glo_p.html#primary_value,@emph{primary value}} @emph{yielded} by
@emph{first-form}.

@ref{#prog2,@strong{prog2}} @uref{glo_e.html#evaluate,@emph{evaluates}}
@emph{first-form}, then @emph{second-form}, and then @emph{forms},
@emph{yielding} as its only @uref{glo_v.html#value,@emph{value}} the
@uref{glo_p.html#primary_value,@emph{primary value}} @emph{yielded} by
@emph{first-form}.

@strong{Examples:}

@verbatim
 (setq temp 1) =>  1
 (prog1 temp (print temp) (incf temp) (print temp))
>>  1
>>  2
=>  1
 (prog1 temp (setq temp nil)) =>  2
 temp =>  NIL
 (prog1 (values 1 2 3) 4) =>  1 
 (setq temp (list 'a 'b 'c))
 (prog1 (car temp) (setf (car temp) 'alpha)) =>  A
 temp =>  (ALPHA B C)
 (flet ((swap-symbol-values (x y)
          (setf (symbol-value x) 
                (prog1 (symbol-value y)
                       (setf (symbol-value y) (symbol-value x))))))
   (let ((*foo* 1) (*bar* 2))
     (declare (special *foo* *bar*))
     (swap-symbol-values '*foo* '*bar*)
     (values *foo* *bar*)))
=>  2, 1
 (setq temp 1) =>  1
 (prog2 (incf temp) (incf temp) (incf temp)) =>  3
 temp =>  4
 (prog2 1 (values 2 3 4) 5) =>  2
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_multip_-value-prog1.html#multiple-value-prog1,@strong{multiple-value-prog1}},
@uref{speope_progn.html#progn,@strong{progn}}

@strong{Notes:}

@ref{#prog1,@strong{prog1}} and @ref{#prog2,@strong{prog2}} are
typically used to @uref{glo_e.html#evaluate,@emph{evaluate}} one or more
@uref{glo_f.html#form,@emph{forms}} with side effects and return a
@uref{glo_v.html#value,@emph{value}} that must be computed before some
or all of the side effects happen.

@verbatim
 (prog1 form*) ==  (values (multiple-value-prog1 form*))
 (prog2 form1 form*) ==  (let () form1 (prog1 form*))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PROG PROG*
@subsubsection CLHS: Macro PROG, PROG*
@anchor{#clhs-macro-prog-prog}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_nth-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_prog1cm_prog2.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PROG, PROG*}

@strong{Syntax:}

@strong{prog} @emph{(@{@emph{var} | (@emph{var} [@emph{init-form}])@}*)
@emph{declaration}@strong{*} @{@emph{tag} | @emph{statement}@}*}

=> @emph{@emph{result}@strong{*}}

@strong{prog*} @emph{(@{@emph{var} | (@emph{var} [@emph{init-form}])@}*)
@emph{declaration}@strong{*} @{@emph{tag} | @emph{statement}@}*}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---variable name.

@emph{init-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}; not evaluated.

@emph{statement}---a @uref{glo_c.html#compound_form,@emph{compound
form}}; evaluated as described below.

@emph{results}---@uref{any_nil.html#nil,@strong{nil}} if a
@uref{glo_n.html#normal_return,@emph{normal return}} occurs, or else, if
an @uref{glo_e.html#explicit_return,@emph{explicit return}} occurs, the
@uref{glo_v.html#value,@emph{values}} that were transferred.

@strong{Description:}

Three distinct operations are performed by @ref{#prog,@strong{prog}} and
@ref{#progST,@strong{prog*}}: they bind local variables, they permit use
of the @uref{mac_return.html#return,@strong{return}} statement, and they
permit use of the @uref{speope_go.html#go,@strong{go}} statement. A
typical @ref{#prog,@strong{prog}} looks like this:

@verbatim
 (prog (var1 var2 (var3 init-form-3) var4 (var5 init-form-5))
       declaration*
       statement1
  tag1
       statement2
       statement3
       statement4
  tag2
       statement5
       ...
       )
@end verbatim

For @ref{#prog,@strong{prog}}, @emph{init-forms} are evaluated first, in
the order in which they are supplied. The @emph{vars} are then bound to
the corresponding values in parallel. If no @emph{init-form} is supplied
for a given @emph{var}, that @emph{var} is bound to
@uref{any_nil.html#nil,@strong{nil}}.

The body of @ref{#prog,@strong{prog}} is executed as if it were a
@uref{speope_tagbody.html#tagbody,@strong{tagbody}}
@uref{glo_f.html#form,@emph{form}}; the
@uref{speope_go.html#go,@strong{go}} statement can be used to transfer
control to a @emph{tag}. @emph{Tags} label @emph{statements}.

@ref{#prog,@strong{prog}} implicitly establishes a
@uref{speope_block.html#block,@strong{block}} named
@uref{any_nil.html#nil,@strong{nil}} around the entire
@ref{#prog,@strong{prog}} @uref{glo_f.html#form,@emph{form}}, so that
@uref{mac_return.html#return,@strong{return}} can be used at any time to
exit from the @ref{#prog,@strong{prog}}
@uref{glo_f.html#form,@emph{form}}.

The difference between @ref{#progST,@strong{prog*}} and
@ref{#prog,@strong{prog}} is that in @ref{#progST,@strong{prog*}} the
@uref{glo_b.html#binding,@emph{binding}} and initialization of the
@emph{vars} is done @uref{glo_s.html#sequentially,@emph{sequentially}},
so that the @emph{init-form} for each one can use the values of previous
ones.

@strong{Examples:}

@verbatim
(prog* ((y z) (x (car y)))
       (return x))
@end verbatim

returns the @uref{glo_c.html#car,@emph{car}} of the value of z.

@verbatim
 (setq a 1) =>  1
 (prog ((a 2) (b a)) (return (if (= a b) '= '/=))) =>  /=
 (prog* ((a 2) (b a)) (return (if (= a b) '= '/=))) =>  =
 (prog () 'no-return-value) =>  NIL
@end verbatim

@verbatim
 (defun king-of-confusion (w)
   "Take a cons of two lists and make a list of conses.
    Think of this function as being like a zipper."
   (prog (x y z)          ;Initialize x, y, z to NIL
        (setq y (car w) z (cdr w))
    loop
        (cond ((null y) (return x))
              ((null z) (go err)))
    rejoin
        (setq x (cons (cons (car y) (car z)) x))
        (setq y (cdr y) z (cdr z))
        (go loop)
    err
        (cerror "Will self-pair extraneous items"
                "Mismatch - gleep!  ~S" y)
        (setq z y)
        (go rejoin))) =>  KING-OF-CONFUSION 
@end verbatim

This can be accomplished more perspicuously as follows:

@verbatim
 (defun prince-of-clarity (w)
   "Take a cons of two lists and make a list of conses.
    Think of this function as being like a zipper."
   (do ((y (car w) (cdr y))
        (z (cdr w) (cdr z))
        (x '() (cons (cons (car y) (car z)) x)))
       ((null y) x)
     (when (null z)
       (cerror "Will self-pair extraneous items"
              "Mismatch - gleep!  ~S" y)
       (setq z y)))) =>  PRINCE-OF-CLARITY 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_block.html#block,@strong{block}},
@uref{speope_letcm_letst.html#let,@strong{let}},
@uref{speope_tagbody.html#tagbody,@strong{tagbody}},
@uref{speope_go.html#go,@strong{go}},
@uref{mac_return.html#return,@strong{return}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@ref{#prog,@strong{prog}} can be explained in terms of
@uref{speope_block.html#block,@strong{block}},
@uref{speope_letcm_letst.html#let,@strong{let}}, and
@uref{speope_tagbody.html#tagbody,@strong{tagbody}} as follows:

@verbatim
 (prog variable-list declaration . body)
    ==  (block nil (let variable-list declaration (tagbody . body)))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro PSETQ
@subsubsection CLHS: Macro PSETQ
@anchor{#clhs-macro-psetq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{spefor_setq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_block.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{PSETQ}

@strong{Syntax:}

@strong{psetq} @emph{@{@emph{pair}@}@strong{*}} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@verbatim
pair::= var form 
@end verbatim

@strong{Pronunciation:}

@ref{#psetq,@strong{psetq}}: [;pee'set,kyoo]

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_v.html#variable,@emph{variable}} other than a
@uref{glo_c.html#constant_variable,@emph{constant variable}}.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

Assigns values to @uref{glo_v.html#variable,@emph{variables}}.

This is just like @uref{spefor_setq.html#setq,@strong{setq}}, except
that the assignments happen ``in parallel.'' That is, first all of the
forms are evaluated, and only then are the variables set to the
resulting values. In this way, the assignment to one variable does not
affect the value computation of another in the way that would occur with
@uref{spefor_setq.html#setq,@strong{setq}}'s sequential assignment.

If any @emph{var} refers to a @uref{glo_b.html#binding,@emph{binding}}
made by
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}},
then that @emph{var} is treated as if
@uref{mac_setfcm_psetf.html#psetf,@strong{psetf}} (not
@ref{#psetq,@strong{psetq}}) had been used.

@strong{Examples:}

@verbatim
 ;; A simple use of PSETQ to establish values for variables.
 ;; As a matter of style, many programmers would prefer SETQ 
 ;; in a simple situation like this where parallel assignment
 ;; is not needed, but the two have equivalent effect.
 (psetq a 1 b 2 c 3) =>  NIL
 a =>  1
 b =>  2
 c =>  3

 ;; Use of PSETQ to update values by parallel assignment.
 ;; The effect here is very different than if SETQ had been used.
 (psetq a (1+ b) b (1+ a) c (+ a b)) =>  NIL
 a =>  3
 b =>  2
 c =>  3

 ;; Use of PSETQ on a symbol macro.
 (let ((x (list 10 20 30)))
   (symbol-macrolet ((y (car x)) (z (cadr x)))
     (psetq y (1+ z) z (1+ y))
     (list x y z)))
=>  ((21 11 30) 21 11)

 ;; Use of parallel assignment to swap values of A and B.
 (let ((a 1) (b 2))
   (psetq a b  b a)
   (values a b))
=>  2, 1
@end verbatim

@strong{Side Effects:}

The values of @emph{forms} are assigned to @emph{vars}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_setfcm_psetf.html#psetf,@strong{psetf}},
@uref{spefor_setq.html#setq,@strong{setq}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss339.html,SYMBOL-MACROLET-SEMANTICS:SPECIAL-FORM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro RETURN
@subsubsection CLHS: Macro RETURN
@anchor{#clhs-macro-return}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_return-from.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_tagbody.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{RETURN}

@strong{Syntax:}

@strong{return} @emph{[@emph{result}]} =>|

@strong{Arguments and Values:}

@emph{result}---a @uref{glo_f.html#form,@emph{form}}; evaluated. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns, as if by
@uref{speope_return-from.html#return-from,@strong{return-from}}, from
the @uref{glo_b.html#block,@emph{block}} named
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (block nil (return) 1) =>  NIL
 (block nil (return 1) 2) =>  1
 (block nil (return (values 1 2)) 3) =>  1, 2
 (block nil (block alpha (return 1) 2)) =>  1
 (block alpha (block nil (return 1)) 2) =>  2
 (block nil (block nil (return 1) 2)) =>  1
@end verbatim

@strong{Affected By:} None.

@strong{Conditions:} None.

@strong{See Also:}

@uref{speope_block.html#block,@strong{block}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@verbatim
 (return) ==  (return-from nil)
 (return form) ==  (return-from nil form)
@end verbatim

The @uref{glo_i.html#implicit_block,@emph{implicit blocks}}
@emph{established} by @uref{glo_m.html#macro,@emph{macros}} such as
@uref{mac_docm_dost.html#do,@strong{do}} are often named
@uref{any_nil.html#nil,@strong{nil}}, so that
@ref{#return,@strong{return}} can be used to exit from such
@uref{glo_f.html#form,@emph{forms}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro ROTATEF
@subsubsection CLHS: Macro ROTATEF
@anchor{#clhs-macro-rotatef}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_shiftf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_control-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{ROTATEF}

@strong{Syntax:}

@strong{rotatef} @emph{@emph{place}@strong{*}} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@strong{Description:}

@ref{#rotatef,@strong{rotatef}} modifies the values of each @emph{place}
by rotating values from one @emph{place} into another.

If a @emph{place} produces more values than there are store variables,
the extra values are ignored. If a @emph{place} produces fewer values
than there are store variables, the missing values are set to
@uref{any_nil.html#nil,@strong{nil}}.

In the form (rotatef @emph{place1} @emph{place2} ... @emph{placen}), the
values in @emph{place1} through @emph{placen} are
@uref{glo_r.html#read,@emph{read}} and @emph{written}. Values 2 through
@emph{n} and value 1 are then stored into @emph{place1} through
@emph{placen}. It is as if all the places form an end-around shift
register that is rotated one place to the left, with the value of
@emph{place1} being shifted around the end to @emph{placen}.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{places}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (let ((n 0)
        (x (list 'a 'b 'c 'd 'e 'f 'g)))
    (rotatef (nth (incf n) x)
             (nth (incf n) x)
             (nth (incf n) x))
    x) =>  (A C D B E F G)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{mac_shiftf.html#shiftf,@strong{shiftf}},
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

The effect of (rotatef @emph{place1} @emph{place2} ... @emph{placen}) is
roughly equivalent to

@verbatim
 (psetf place1 place2
        place2 place3
        ...
        placen place1)
@end verbatim

except that the latter would evaluate any
@uref{glo_s.html#subform,@emph{subforms}} of each place twice, whereas
@ref{#rotatef,@strong{rotatef}} evaluates them once.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss309.html,SETF-MULTIPLE-STORE-VARIABLES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro SETF PSETF
@subsubsection CLHS: Macro SETF, PSETF
@anchor{#clhs-macro-setf-psetf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_get-setf-expansion.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_shiftf.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{SETF, PSETF}

@strong{Syntax:}

@strong{setf} @emph{@{@emph{pair}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{psetf} @emph{@{@emph{pair}@}@strong{*}} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@verbatim
pair::= place newvalue 
@end verbatim

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{newvalue}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_m.html#multiple_values,@emph{multiple
values}}[2] returned by the storing form for the last @emph{place}, or
@uref{any_nil.html#nil,@strong{nil}} if there are no @emph{pairs}.

@strong{Description:}

@ref{#setf,@strong{setf}} changes the
@uref{glo_v.html#value,@emph{value}} of @emph{place} to be
@emph{newvalue}.

(setf place newvalue) expands into an update form that stores the result
of evaluating @emph{newvalue} into the location referred to by
@emph{place}. Some @emph{place} forms involve uses of accessors that
take optional arguments. Whether those optional arguments are permitted
by @ref{#setf,@strong{setf}}, or what their use is, is up to the
@ref{#setf,@strong{setf}} expander function and is not under the control
of @ref{#setf,@strong{setf}}. The documentation for any
@uref{glo_f.html#function,@emph{function}} that accepts &optional,
&rest, or ..... key arguments and that claims to be usable with
@ref{#setf,@strong{setf}} must specify how those arguments are treated.

If more than one @emph{pair} is supplied, the @emph{pairs} are processed
sequentially; that is,

@verbatim
 (setf place-1 newvalue-1
       place-2 newvalue-2
       ...
       place-N newvalue-N)
@end verbatim

is precisely equivalent to

@verbatim
 (progn (setf place-1 newvalue-1)
        (setf place-2 newvalue-2)
        ...
        (setf place-N newvalue-N))
@end verbatim

For @ref{#psetf,@strong{psetf}}, if more than one @emph{pair} is
supplied then the assignments of new values to places are done in
parallel. More precisely, all @uref{glo_s.html#subform,@emph{subforms}}
(in both the @emph{place} and @emph{newvalue}
@uref{glo_f.html#form,@emph{forms}}) that are to be evaluated are
evaluated from left to right; after all evaluations have been performed,
all of the assignments are performed in an unpredictable order.

For detailed treatment of the expansion of @ref{#setf,@strong{setf}} and
@ref{#psetf,@strong{psetf}}, see @uref{sec_5-1-2.html,Section 5.1.2
(Kinds of Places)}.

@strong{Examples:}

@verbatim
 (setq x (cons 'a 'b) y (list 1 2 3)) =>  (1 2 3) 
 (setf (car x) 'x (cadr y) (car x) (cdr x) y) =>  (1 X 3) 
 x =>  (X 1 X 3) 
 y =>  (1 X 3) 
 (setq x (cons 'a 'b) y (list 1 2 3)) =>  (1 2 3) 
 (psetf (car x) 'x (cadr y) (car x) (cdr x) y) =>  NIL 
 x =>  (X 1 A 3) 
 y =>  (1 A 3) 
@end verbatim

@strong{Affected By:}

@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{fun_macroexpa_acroexpand-1.html#macroexpand-1,@strong{macroexpand-1}},
@uref{mac_rotatef.html#rotatef,@strong{rotatef}},
@uref{mac_shiftf.html#shiftf,@strong{shiftf}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro SHIFTF
@subsubsection CLHS: Macro SHIFTF
@anchor{#clhs-macro-shiftf}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_setfcm_psetf.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_rotatef.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{SHIFTF}

@strong{Syntax:}

@strong{shiftf} @emph{@emph{place}@strong{+} newvalue} =>
@emph{old-value-1}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{newvalue}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{old-value-1}---an @uref{glo_o.html#object,@emph{object}} (the old
@uref{glo_v.html#value,@emph{value}} of the first @emph{place}).

@strong{Description:}

@ref{#shiftf,@strong{shiftf}} modifies the values of each @emph{place}
by storing @emph{newvalue} into the last @emph{place}, and shifting the
values of the second through the last @emph{place} into the remaining
@emph{places}.

If @emph{newvalue} produces more values than there are store variables,
the extra values are ignored. If @emph{newvalue} produces fewer values
than there are store variables, the missing values are set to
@uref{any_nil.html#nil,@strong{nil}}.

In the form (shiftf @emph{place1} @emph{place2} ... @emph{placen}
@emph{newvalue}), the values in @emph{place1} through @emph{placen} are
@uref{glo_r.html#read,@emph{read}} and saved, and @emph{newvalue} is
evaluated, for a total of n+1 values in all. Values 2 through n+1 are
then stored into @emph{place1} through @emph{placen}, respectively. It
is as if all the @emph{places} form a shift register; the
@emph{newvalue} is shifted in from the right, all values shift over to
the left one place, and the value shifted out of @emph{place1} is
returned.

For information about the @uref{glo_e.html#evaluation,@emph{evaluation}}
of @uref{glo_s.html#subform,@emph{subforms}} of @emph{places}, see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@strong{Examples:}

@verbatim
 (setq x (list 1 2 3) y 'trash) =>  TRASH
 (shiftf y x (cdr x) '(hi there)) =>  TRASH
 x =>  (2 3)
 y =>  (1 HI THERE)

 (setq x (list 'a 'b 'c)) =>  (A B C)
 (shiftf (cadr x) 'z) =>  B
 x =>  (A Z C)
 (shiftf (cadr x) (cddr x) 'q) =>  Z
 x =>  (A (C) . Q)
 (setq n 0) =>  0
 (setq x (list 'a 'b 'c 'd)) =>  (A B C D)
 (shiftf (nth (setq n (+ n 1)) x) 'z) =>  B
 x =>  (A Z C D)
@end verbatim

@strong{Affected By:}

@uref{mac_define-setf-expander.html#define-setf-expander,@strong{define-setf-expander}},
@uref{mac_defsetf.html#defsetf,@strong{defsetf}},
@uref{var_stmacroexpand-hookst.html#STmacroexpand-hookST,@strong{*macroexpand-hook*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{mac_rotatef.html#rotatef,@strong{rotatef}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

The effect of (shiftf @emph{place1} @emph{place2} ... @emph{placen}
@emph{newvalue}) is roughly equivalent to

@verbatim
 (let ((var1 place1)
       (var2 place2)
       ...
       (varn placen)
       (var0 newvalue))
   (setf place1 var2)
   (setf place2 var3)
   ...
   (setf placen var0)
   var1)
@end verbatim

except that the latter would evaluate any
@uref{glo_s.html#subform,@emph{subforms}} of each place twice, whereas
@ref{#shiftf,@strong{shiftf}} evaluates them once. For example,

@verbatim
 (setq n 0) =>  0
 (setq x (list 'a 'b 'c 'd)) =>  (A B C D)
 (prog1 (nth (setq n (+ n 1)) x)
        (setf (nth (setq n (+ n 1)) x) 'z)) =>  B
 x =>  (A B Z D)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss309.html,SETF-MULTIPLE-STORE-VARIABLES:ALLOW}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro TYPECASE CTYPECASE ETYPECASE
@subsubsection CLHS: Macro TYPECASE, CTYPECASE, ETYPECASE
@anchor{#clhs-macro-typecase-ctypecase-etypecase}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_casecm_ccasecm_ecase.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_multiple-value-bind.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{TYPECASE, CTYPECASE, ETYPECASE}

@strong{Syntax:}

@strong{typecase} @emph{keyform @{@emph{normal-clause}@}@strong{*}
[@emph{otherwise-clause}]} => @emph{@emph{result}@strong{*}}

@strong{ctypecase} @emph{keyplace @{@emph{normal-clause}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{etypecase} @emph{keyform @{@emph{normal-clause}@}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@verbatim
normal-clause::= (type form*) 
@end verbatim

@verbatim
otherwise-clause::= ({otherwise | t} form*) 
@end verbatim

@verbatim
clause::= normal-clause | otherwise-clause 
@end verbatim

@strong{Arguments and Values:}

@emph{keyform}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @emph{test-key}.

@emph{keyplace}---a @uref{glo_f.html#form,@emph{form}}; evaluated
initially to produce a @emph{test-key}. Possibly also used later as a
@uref{glo_p.html#place,@emph{place}} if no @emph{types} match.

@emph{test-key}---an object produced by evaluating @emph{keyform} or
@emph{keyplace}.

@emph{type}---a @uref{glo_t.html#type_specifier,@emph{type specifier}}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms} in the matching @emph{clause}.

@strong{Description:}

These @uref{glo_m.html#macro,@emph{macros}} allow the conditional
execution of a body of @emph{forms} in a @emph{clause} that is selected
by matching the @emph{test-key} on the basis of its
@uref{glo_t.html#type,@emph{type}}.

The @emph{keyform} or @emph{keyplace} is @emph{evaluated} to produce the
@emph{test-key}.

Each of the @emph{normal-clauses} is then considered in turn. If the
@emph{test-key} is of the @uref{glo_t.html#type,@emph{type}} given by
the @emph{clauses}'s @emph{type}, the @emph{forms} in that @emph{clause}
are @emph{evaluated} as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}, and the
@uref{glo_v.html#value,@emph{values}} it returns are returned as the
value of the @ref{#typecase,@strong{typecase}},
@ref{#ctypecase,@strong{ctypecase}}, or
@ref{#etypecase,@strong{etypecase}} @uref{glo_f.html#form,@emph{form}}.

These @uref{glo_m.html#macro,@emph{macros}} differ only in their
@emph{behavior} when no @emph{normal-clause} matches; specifically:

@ref{#typecase,@strong{typecase}}

If no @emph{normal-clause} matches, and there is an
@emph{otherwise-clause}, then that @emph{otherwise-clause} automatically
matches; the @emph{forms} in that @emph{clause} are @emph{evaluated} as
an @uref{glo_i.html#implicit_progn,@emph{implicit progn}}, and the
@uref{glo_v.html#value,@emph{values}} it returns are returned as the
value of the @ref{#typecase,@strong{typecase}}.

If there is no @emph{otherwise-clause},
@ref{#typecase,@strong{typecase}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@ref{#ctypecase,@strong{ctypecase}}

If no @emph{normal-clause} matches, a
@uref{glo_c.html#correctable,@emph{correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled. The offending datum is the @emph{test-key} and the expected
type is @uref{glo_t.html#type_equivalent,@emph{type equivalent}} to (or
@emph{type1} @emph{type2} ...). The
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} can be used to correct the
error.

If the @uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked, its
@uref{glo_a.html#argument,@emph{argument}} becomes the new
@emph{test-key}, and is stored in @emph{keyplace} as if by (setf
@emph{keyplace} @emph{test-key}). Then
@ref{#ctypecase,@strong{ctypecase}} starts over, considering each
@emph{clause} anew.

If the @uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked interactively, the
user is prompted for a new @emph{test-key} to use.

The subforms of @emph{keyplace} might be evaluated again if none of the
cases holds.

@ref{#etypecase,@strong{etypecase}}

If no @emph{normal-clause} matches, a
@uref{glo_n.html#non-correctable,@emph{non-correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled. The offending datum is the @emph{test-key} and the expected
type is @uref{glo_t.html#type_equivalent,@emph{type equivalent}} to (or
@emph{type1} @emph{type2} ...).

Note that in contrast with @ref{#ctypecase,@strong{ctypecase}}, the
caller of @ref{#etypecase,@strong{etypecase}} may rely on the fact that
@ref{#etypecase,@strong{etypecase}} does not return if a
@emph{normal-clause} does not match.

In all three cases, is permissible for more than one @emph{clause} to
specify a matching @uref{glo_t.html#type,@emph{type}}, particularly if
one is a @uref{glo_s.html#subtype,@emph{subtype}} of another; the
earliest applicable @emph{clause} is chosen.

@strong{Examples:}

@verbatim
;;; (Note that the parts of this example which use TYPE-OF 
;;;  are implementation-dependent.)
 (defun what-is-it (x)
   (format t "~&~S is ~A.~%"
           x (typecase x
               (float "a float")
               (null "a symbol, boolean false, or the empty list")
               (list "a list")
               (t (format nil "a(n) ~(~A~)" (type-of x))))))
=>  WHAT-IS-IT
 (map 'nil #'what-is-it '(nil (a b) 7.0 7 box))
>>  NIL is a symbol, boolean false, or the empty list.
>>  (A B) is a list.
>>  7.0 is a float.
>>  7 is a(n) integer.
>>  BOX is a(n) symbol.
=>  NIL
 (setq x 1/3)
=>  1/3
 (ctypecase x
     (integer (* x 4))
     (symbol  (symbol-value x)))
>>  Error: The value of X, 1/3, is neither an integer nor a symbol.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> :CONTINUE 1
>>  Use value: 3.7
>>  Error: The value of X, 3.7, is neither an integer nor a symbol.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> :CONTINUE 1
>>  Use value: 12
=>  48
 x =>  12
@end verbatim

@strong{Affected By:}

@ref{#ctypecase,@strong{ctypecase}} and
@ref{#etypecase,@strong{etypecase}}, since they might signal an error,
are potentially affected by existing @emph{handlers} and
@uref{var_stdebug-i_ace-outputst.html#STdebug-ioST,@strong{*debug-io*}}.

@strong{Exceptional Situations:}

@ref{#ctypecase,@strong{ctypecase}} and
@ref{#etypecase,@strong{etypecase}} signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if no
@emph{normal-clause} matches.

The @uref{glo_c.html#compiler,@emph{compiler}} may choose to issue a
warning of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_style-warning.html#style-warning,@strong{style-warning}} if
a @emph{clause} will never be selected because it is completely shadowed
by earlier clauses.

@strong{See Also:}

@uref{mac_casecm_ccasecm_ecase.html#case,@strong{case}},
@uref{mac_cond.html#cond,@strong{cond}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{sec_5-1.html,Section 5.1 (Generalized Reference)}

@strong{Notes:}

@verbatim
(typecase test-key
  {(type form*)}*)
== 
(let ((#1=#:g0001 test-key))
  (cond {((typep #1# 'type) form*)}*))
@end verbatim

The specific error message used by @ref{#etypecase,@strong{etypecase}}
and @ref{#ctypecase,@strong{ctypecase}} can vary between
implementations. In situations where control of the specific wording of
the error message is important, it is better to use
@ref{#typecase,@strong{typecase}} with an @emph{otherwise-clause} that
explicitly signals an error with an appropriate message.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WHEN UNLESS
@subsubsection CLHS: Macro WHEN, UNLESS
@anchor{#clhs-macro-when-unless}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_or.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_casecm_ccasecm_ecase.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WHEN, UNLESS}

@strong{Syntax:}

@strong{when} @emph{test-form @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{unless} @emph{test-form @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{test-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@uref{glo_f.html#form,@emph{forms}} in a @ref{#when,@strong{when}}
@uref{glo_f.html#form,@emph{form}} if the @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}} @uref{glo_t.html#true,@emph{true}}
or in an @ref{#unless,@strong{unless}}
@uref{glo_f.html#form,@emph{form}} if the @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_f.html#false,@emph{false}}; otherwise
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#when,@strong{when}} and @ref{#unless,@strong{unless}} allow the
execution of @emph{forms} to be dependent on a single @emph{test-form}.

In a @ref{#when,@strong{when}} @uref{glo_f.html#form,@emph{form}}, if
the @emph{test-form} @uref{glo_y.html#yield,@emph{yields}}
@uref{glo_t.html#true,@emph{true}}, the @emph{forms} are
@emph{evaluated} in order from left to right and the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{forms} are
returned from the @ref{#when,@strong{when}}
@uref{glo_f.html#form,@emph{form}}. Otherwise, if the @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_f.html#false,@emph{false}}, the @emph{forms} are not
@emph{evaluated}, and the @ref{#when,@strong{when}}
@uref{glo_f.html#form,@emph{form}} returns
@uref{any_nil.html#nil,@strong{nil}}.

In an @ref{#unless,@strong{unless}} @uref{glo_f.html#form,@emph{form}},
if the @emph{test-form} @uref{glo_y.html#yield,@emph{yields}}
@uref{glo_f.html#false,@emph{false}}, the @emph{forms} are
@emph{evaluated} in order from left to right and the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{forms} are
returned from the @ref{#unless,@strong{unless}}
@uref{glo_f.html#form,@emph{form}}. Otherwise, if the @emph{test-form}
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_f.html#false,@emph{false}}, the @emph{forms} are not
@emph{evaluated}, and the @ref{#unless,@strong{unless}}
@uref{glo_f.html#form,@emph{form}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (when t 'hello) =>  HELLO
 (unless t 'hello) =>  NIL
 (when nil 'hello) =>  NIL
 (unless nil 'hello) =>  HELLO
 (when t) =>  NIL
 (unless nil) =>  NIL
 (when t (prin1 1) (prin1 2) (prin1 3))
>>  123
=>  3
 (unless t (prin1 1) (prin1 2) (prin1 3)) =>  NIL
 (when nil (prin1 1) (prin1 2) (prin1 3)) =>  NIL
 (unless nil (prin1 1) (prin1 2) (prin1 3))
>>  123
=>  3
 (let ((x 3))
   (list (when (oddp x) (incf x) (list x))
         (when (oddp x) (incf x) (list x))
         (unless (oddp x) (incf x) (list x))
         (unless (oddp x) (incf x) (list x))
         (if (oddp x) (incf x) (list x)) 
         (if (oddp x) (incf x) (list x)) 
         (if (not (oddp x)) (incf x) (list x)) 
         (if (not (oddp x)) (incf x) (list x))))
=>  ((4) NIL (5) NIL 6 (6) 7 (7))
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_and.html#and,@strong{and}},
@uref{mac_cond.html#cond,@strong{cond}},
@uref{speope_if.html#if,@strong{if}}, @uref{mac_or.html#or,@strong{or}}

@strong{Notes:}

@verbatim
 (when test {form}+) ==  (and test (progn {form}+))
 (when test {form}+) ==  (cond (test {form}+))
 (when test {form}+) ==  (if test (progn {form}+) nil)
 (when test {form}+) ==  (unless (not test) {form}+)
 (unless test {form}+) ==  (cond ((not test) {form}+))
 (unless test {form}+) ==  (if test nil (progn {form}+))
 (unless test {form}+) ==  (when (not test) {form}+)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Form SETQ
@subsubsection CLHS: Special Form SETQ
@anchor{#clhs-special-form-setq}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_progv.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_psetq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Form} @strong{SETQ}

@strong{Syntax:}

@strong{setq} @emph{@{@emph{pair}@}@strong{*}} => @emph{result}

@verbatim
pair::= var form 
@end verbatim

@strong{Pronunciation:}

['set,kyoo]

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_v.html#variable,@emph{variable}} other than a
@uref{glo_c.html#constant_variable,@emph{constant variable}}.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{result}---the @uref{glo_p.html#primary_value,@emph{primary value}}
of the last @emph{form}, or @uref{any_nil.html#nil,@strong{nil}} if no
@emph{pairs} were supplied.

@strong{Description:}

Assigns values to @uref{glo_v.html#variable,@emph{variables}}.

(setq @emph{var1} @emph{form1} @emph{var2} @emph{form2} ...) is the
simple variable assignment statement of Lisp. First @emph{form1} is
evaluated and the result is stored in the variable @emph{var1}, then
@emph{form2} is evaluated and the result stored in @emph{var2}, and so
forth. @ref{#setq,@strong{setq}} may be used for assignment of both
lexical and dynamic variables.

If any @emph{var} refers to a @uref{glo_b.html#binding,@emph{binding}}
made by
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}},
then that @emph{var} is treated as if
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} (not
@ref{#setq,@strong{setq}}) had been used.

@strong{Examples:}

@verbatim
 ;; A simple use of SETQ to establish values for variables.
 (setq a 1 b 2 c 3) =>  3
 a =>  1
 b =>  2
 c =>  3

 ;; Use of SETQ to update values by sequential assignment.
 (setq a (1+ b) b (1+ a) c (+ a b)) =>  7
 a =>  3
 b =>  4
 c =>  7

 ;; This illustrates the use of SETQ on a symbol macro.
 (let ((x (list 10 20 30)))
   (symbol-macrolet ((y (car x)) (z (cadr x)))
     (setq y (1+ z) z (1+ y))
     (list x y z)))
=>  ((21 22 30) 21 22)
@end verbatim

@strong{Side Effects:}

The @uref{glo_p.html#primary_value,@emph{primary value}} of each
@emph{form} is assigned to the corresponding @emph{var}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_psetq.html#psetq,@strong{psetq}},
@uref{fun_set.html#set,@strong{set}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss339.html,SYMBOL-MACROLET-SEMANTICS:SPECIAL-FORM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator BLOCK
@subsubsection CLHS: Special Operator BLOCK
@anchor{#clhs-special-operator-block}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_psetq.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_catch.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{BLOCK}

@strong{Syntax:}

@strong{block} @emph{@emph{name} @emph{form}*} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@uref{glo_f.html#form,@emph{forms}} if a
@uref{glo_n.html#normal_return,@emph{normal return}} occurs, or else, if
an @uref{glo_e.html#explicit_return,@emph{explicit return}} occurs, the
@uref{glo_v.html#value,@emph{values}} that were transferred.

@strong{Description:}

@ref{#block,@strong{block}}
@uref{glo_e.html#establish,@emph{establishes}} a
@uref{glo_b.html#block,@emph{block}} named @emph{name} and then
evaluates @emph{forms} as an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}.

The @uref{glo_s.html#special_operator,@emph{special operators}}
@ref{#block,@strong{block}} and
@uref{speope_return-from.html#return-from,@strong{return-from}} work
together to provide a structured, lexical, non-local exit facility. At
any point lexically contained within
@uref{glo_f.html#form,@emph{forms}},
@uref{speope_return-from.html#return-from,@strong{return-from}} can be
used with the given @emph{name} to return control and values from the
@ref{#block,@strong{block}} @uref{glo_f.html#form,@emph{form}}, except
when an intervening @uref{glo_b.html#block,@emph{block}} with the same
name has been @emph{established}, in which case the outer
@uref{glo_b.html#block,@emph{block}} is shadowed by the inner one.

The @uref{glo_b.html#block,@emph{block}} named
@uref{glo_n.html#name,@emph{name}} has
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} and
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}.

Once established, a @uref{glo_b.html#block,@emph{block}} may only be
exited once, whether by @uref{glo_n.html#normal_return,@emph{normal
return}} or @uref{glo_e.html#explicit_return,@emph{explicit return}}.

@strong{Examples:}

@verbatim
 (block empty) =>  NIL
 (block whocares (values 1 2) (values 3 4)) =>  3, 4
 (let ((x 1)) 
   (block stop (setq x 2) (return-from stop) (setq x 3))
   x) =>  2
 (block early (return-from early (values 1 2)) (values 3 4)) =>  1, 2
 (block outer (block inner (return-from outer 1)) 2) =>  1
 (block twin (block twin (return-from twin 1)) 2) =>  2
 ;; Contrast behavior of this example with corresponding example of CATCH.
 (block b
   (flet ((b1 () (return-from b 1)))
     (block b (b1) (print 'unreachable))
     2)) =>  1
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_return.html#return,@strong{return}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator CATCH
@subsubsection CLHS: Special Operator CATCH
@anchor{#clhs-special-operator-catch}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_block.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_go.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{CATCH}

@strong{Syntax:}

@strong{catch} @emph{@emph{tag} @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{tag}---a @uref{glo_c.html#catch_tag,@emph{catch tag}}; evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---if the @emph{forms} exit normally, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{forms}; if a
throw occurs to the @emph{tag}, the
@uref{glo_v.html#value,@emph{values}} that are thrown.

@strong{Description:}

@ref{#catch,@strong{catch}} is used as the destination of a non-local
control transfer by @uref{speope_throw.html#throw,@strong{throw}}.
@emph{Tags} are used to find the @ref{#catch,@strong{catch}} to which a
@uref{speope_throw.html#throw,@strong{throw}} is transferring control.
(catch 'foo @emph{form}) catches a (throw 'foo @emph{form}) but not a
(throw 'bar @emph{form}).

The order of execution of @ref{#catch,@strong{catch}} follows:

1. @emph{Tag} is evaluated. It serves as the name of the
@ref{#catch,@strong{catch}}.

2. @emph{Forms} are then evaluated as an implicit
@uref{speope_progn.html#progn,@strong{progn}}, and the results of the
last @emph{form} are returned unless a
@uref{speope_throw.html#throw,@strong{throw}} occurs.

3. If a @uref{speope_throw.html#throw,@strong{throw}} occurs during the
execution of one of the @emph{forms}, control is transferred to the
@ref{#catch,@strong{catch}} @uref{glo_f.html#form,@emph{form}} whose
@emph{tag} is @uref{fun_eq.html#eq,@strong{eq}} to the tag argument of
the @uref{speope_throw.html#throw,@strong{throw}} and which is the most
recently established @ref{#catch,@strong{catch}} with that @emph{tag}.
No further evaluation of @emph{forms} occurs.

4. The @emph{tag} @emph{established} by @ref{#catch,@strong{catch}} is
@emph{disestablished} just before the results are returned.

If during the execution of one of the @emph{forms}, a
@uref{speope_throw.html#throw,@strong{throw}} is executed whose tag is
@uref{fun_eq.html#eq,@strong{eq}} to the @ref{#catch,@strong{catch}}
tag, then the values specified by the
@uref{speope_throw.html#throw,@strong{throw}} are returned as the result
of the dynamically most recently established @ref{#catch,@strong{catch}}
form with that tag.

The mechanism for @ref{#catch,@strong{catch}} and
@uref{speope_throw.html#throw,@strong{throw}} works even if
@uref{speope_throw.html#throw,@strong{throw}} is not within the lexical
scope of @ref{#catch,@strong{catch}}.
@uref{speope_throw.html#throw,@strong{throw}} must occur within the
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} of the
@uref{glo_e.html#evaluation,@emph{evaluation}} of the body of a
@ref{#catch,@strong{catch}} with a corresponding @emph{tag}.

@strong{Examples:}

@verbatim
 (catch 'dummy-tag 1 2 (throw 'dummy-tag 3) 4) =>  3
 (catch 'dummy-tag 1 2 3 4) =>  4
 (defun throw-back (tag) (throw tag t)) =>  THROW-BACK
 (catch 'dummy-tag (throw-back 'dummy-tag) 2) =>  T

 ;; Contrast behavior of this example with corresponding example of BLOCK.
 (catch 'c
   (flet ((c1 () (throw 'c 1)))
     (catch 'c (c1) (print 'unreachable))
     2)) =>  2
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

An error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}} is
signaled if @uref{speope_throw.html#throw,@strong{throw}} is done when
there is no suitable @ref{#catch,@strong{catch}} @emph{tag}.

@strong{See Also:}

@uref{speope_throw.html#throw,@strong{throw}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

It is customary for @uref{glo_s.html#symbol,@emph{symbols}} to be used
as @emph{tags}, but any @uref{glo_o.html#object,@emph{object}} is
permitted. However, numbers should not be used because the comparison is
done using @uref{fun_eq.html#eq,@strong{eq}}.

@ref{#catch,@strong{catch}} differs from
@uref{speope_block.html#block,@strong{block}} in that
@ref{#catch,@strong{catch}} tags have dynamic
@uref{glo_s.html#scope,@emph{scope}} while
@uref{speope_block.html#block,@strong{block}} names have
@uref{glo_l.html#lexical_scope,@emph{lexical scope}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator FLET LABELS MACROLET
@subsubsection CLHS: Special Operator FLET, LABELS, MACROLET
@anchor{#clhs-special-operator-flet-labels-macrolet}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_fmakunbound.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_funcall.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{FLET, LABELS, MACROLET}

@strong{Syntax:}

@strong{flet} @emph{((@emph{function-name} @emph{lambda-list}
[[@emph{local-declaration}@strong{*} | @emph{local-documentation}]]
@emph{local-form}@strong{*})@strong{*}) @emph{declaration}@strong{*}
@emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{labels} @emph{((@emph{function-name} @emph{lambda-list}
[[@emph{local-declaration}@strong{*} | @emph{local-documentation}]]
@emph{local-form}@strong{*})@strong{*}) @emph{declaration}@strong{*}
@emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{macrolet} @emph{((@emph{name} @emph{lambda-list}
[[@emph{local-declaration}@strong{*} | @emph{local-documentation}]]
@emph{local-form}@strong{*})@strong{*}) @emph{declaration}@strong{*}
@emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{lambda-list}---a @uref{glo_l.html#lambda_list,@emph{lambda list}};
for @ref{#flet,@strong{flet}} and @ref{#labels,@strong{labels}}, it is
an @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}};
for @ref{#macrolet,@strong{macrolet}}, it is a
@uref{glo_m.html#macro_lambda_list,@emph{macro lambda list}}.

@emph{local-declaration}---a
@uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{local-documentation}---a @uref{glo_s.html#string,@emph{string}};
not evaluated.

@emph{local-forms}, @emph{forms}---an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@emph{forms}.

@strong{Description:}

@ref{#flet,@strong{flet}}, @ref{#labels,@strong{labels}}, and
@ref{#macrolet,@strong{macrolet}} define local
@uref{glo_f.html#function,@emph{functions}} and
@uref{glo_m.html#macro,@emph{macros}}, and execute @emph{forms} using
the local definitions. @emph{Forms} are executed in order of occurrence.

The body forms (but not the @uref{glo_l.html#lambda_list,@emph{lambda
list}}) of each @uref{glo_f.html#function,@emph{function}} created by
@ref{#flet,@strong{flet}} and @ref{#labels,@strong{labels}} and each
@uref{glo_m.html#macro,@emph{macro}} created by
@ref{#macrolet,@strong{macrolet}} are enclosed in an
@uref{glo_i.html#implicit_block,@emph{implicit block}} whose name is the
@uref{glo_f.html#function_block_name,@emph{function block name}} of the
@emph{function-name} or @emph{name}, as appropriate.

The scope of the @emph{declarations} between the list of local
function/macro definitions and the body @emph{forms} in
@ref{#flet,@strong{flet}} and @ref{#labels,@strong{labels}} does not
include the bodies of the locally defined
@uref{glo_f.html#function,@emph{functions}}, except that for
@ref{#labels,@strong{labels}}, any
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}},
@uref{dec_inlinecm_notinline.html#notinline,@strong{notinline}}, or
@uref{dec_ftype.html#ftype,@strong{ftype}} declarations that refer to
the locally defined functions do apply to the local function bodies.
That is, their @uref{glo_s.html#scope,@emph{scope}} is the same as the
function name that they affect. The scope of these @emph{declarations}
does not include the bodies of the macro expander functions defined by
@ref{#macrolet,@strong{macrolet}}.

@strong{flet}

@ref{#flet,@strong{flet}} defines locally named
@uref{glo_f.html#function,@emph{functions}} and executes a series of
@emph{forms} with these definition
@uref{glo_b.html#binding,@emph{bindings}}. Any number of such local
@uref{glo_f.html#function,@emph{functions}} can be defined.

The @uref{glo_s.html#scope,@emph{scope}} of the name
@uref{glo_b.html#binding,@emph{binding}} encompasses only the body.
Within the body of @ref{#flet,@strong{flet}}, @emph{function-names}
matching those defined by @ref{#flet,@strong{flet}} refer to the locally
defined @uref{glo_f.html#function,@emph{functions}} rather than to the
global function definitions of the same name. Also, within the scope of
@ref{#flet,@strong{flet}}, global
@uref{glo_s.html#setf_expander,@emph{setf expander}} definitions of the
@emph{function-name} defined by @ref{#flet,@strong{flet}} do not apply.
Note that this applies to (defsetf @emph{f} ...), not (defmethod (setf
@emph{f}) ...).

The names of @uref{glo_f.html#function,@emph{functions}} defined by
@ref{#flet,@strong{flet}} are in the
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}; they
retain their local definitions only within the body of
@ref{#flet,@strong{flet}}. The function definition bindings are visible
only in the body of @ref{#flet,@strong{flet}}, not the definitions
themselves. Within the function definitions, local function names that
match those being defined refer to
@uref{glo_f.html#function,@emph{functions}} or
@uref{glo_m.html#macro,@emph{macros}} defined outside the
@ref{#flet,@strong{flet}}. @ref{#flet,@strong{flet}} can locally
@uref{glo_s.html#shadow,@emph{shadow}} a global function name, and the
new definition can refer to the global definition.

Any @emph{local-documentation} is attached to the corresponding local
@emph{function} (if one is actually created) as a
@uref{glo_d.html#documentation_string,@emph{documentation string}}.

@strong{labels}

@ref{#labels,@strong{labels}} is equivalent to @ref{#flet,@strong{flet}}
except that the scope of the defined function names for
@ref{#labels,@strong{labels}} encompasses the function definitions
themselves as well as the body.

@strong{macrolet}

@ref{#macrolet,@strong{macrolet}} establishes local
@uref{glo_m.html#macro,@emph{macro}} definitions, using the same format
used by @uref{mac_defmacro.html#defmacro,@strong{defmacro}}.

Within the body of @ref{#macrolet,@strong{macrolet}}, global
@uref{glo_s.html#setf_expander,@emph{setf expander}} definitions of the
@emph{names} defined by the @ref{#macrolet,@strong{macrolet}} do not
apply; rather, @uref{mac_setfcm_psetf.html#setf,@strong{setf}} expands
the @uref{glo_m.html#macro_form,@emph{macro form}} and recursively
process the resulting @uref{glo_f.html#form,@emph{form}}.

The macro-expansion functions defined by
@ref{#macrolet,@strong{macrolet}} are defined in the
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which the @ref{#macrolet,@strong{macrolet}} form appears. Declarations
and @ref{#macrolet,@strong{macrolet}} and
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}
definitions affect the local macro definitions in a
@ref{#macrolet,@strong{macrolet}}, but the consequences are undefined if
the local macro definitions reference any local
@uref{glo_v.html#variable,@emph{variable}} or
@uref{glo_f.html#function,@emph{function}}
@uref{glo_b.html#binding,@emph{bindings}} that are visible in that
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}.

Any @emph{local-documentation} is attached to the corresponding local
@emph{macro function} as a
@uref{glo_d.html#documentation_string,@emph{documentation string}}.

@strong{Examples:}

@verbatim
 (defun foo (x flag)
   (macrolet ((fudge (z)
                 ;The parameters x and flag are not accessible
                 ; at this point; a reference to flag would be to
                 ; the global variable of that name.
                 ` (if flag (* ,z ,z) ,z)))
    ;The parameters x and flag are accessible here.
     (+ x
        (fudge x)
        (fudge (+ x 1)))))
 == 
 (defun foo (x flag)
   (+ x
      (if flag (* x x) x)
      (if flag (* (+ x 1) (+ x 1)) (+ x 1))))
@end verbatim

after macro expansion. The occurrences of x and flag legitimately refer
to the parameters of the function foo because those parameters are
visible at the site of the macro call which produced the expansion.

@verbatim
 (flet ((flet1 (n) (+ n n)))
    (flet ((flet1 (n) (+ 2 (flet1 n))))
      (flet1 2))) =>  6

 (defun dummy-function () 'top-level) =>  DUMMY-FUNCTION 
 (funcall #'dummy-function) =>  TOP-LEVEL 
 (flet ((dummy-function () 'shadow)) 
      (funcall #'dummy-function)) =>  SHADOW 
 (eq (funcall #'dummy-function) (funcall 'dummy-function))
=>  true 
 (flet ((dummy-function () 'shadow))
   (eq (funcall #'dummy-function)
       (funcall 'dummy-function)))
=>  false 

 (defun recursive-times (k n)
   (labels ((temp (n) 
              (if (zerop n) 0 (+ k (temp (1- n))))))
     (temp n))) =>  RECURSIVE-TIMES
 (recursive-times 2 3) =>  6

 (defmacro mlets (x &environment env) 
    (let ((form `(babbit ,x)))
      (macroexpand form env))) =>  MLETS
 (macrolet ((babbit (z) `(+ ,z ,z))) (mlets 5)) =>  10
@end verbatim

@verbatim
 (flet ((safesqrt (x) (sqrt (abs x))))
  ;; The safesqrt function is used in two places.
   (safesqrt (apply #'+ (map 'list #'safesqrt '(1 2 3 4 5 6)))))
=>  3.291173
@end verbatim

@verbatim
 (defun integer-power (n k)     
   (declare (integer n))         
   (declare (type (integer 0 *) k))
   (labels ((expt0 (x k a)
              (declare (integer x a) (type (integer 0 *) k))
              (cond ((zerop k) a)
                    ((evenp k) (expt1 (* x x) (floor k 2) a))
                    (t (expt0 (* x x) (floor k 2) (* x a)))))
            (expt1 (x k a)
              (declare (integer x a) (type (integer 0 *) k))
              (cond ((evenp k) (expt1 (* x x) (floor k 2) a))
                    (t (expt0 (* x x) (floor k 2) (* x a))))))
    (expt0 n k 1))) =>  INTEGER-POWER
@end verbatim

@verbatim
 (defun example (y l)
   (flet ((attach (x)
            (setq l (append l (list x)))))
     (declare (inline attach))
     (dolist (x y)
       (unless (null (cdr x))
         (attach x)))
     l))

 (example '((a apple apricot) (b banana) (c cherry) (d) (e))
          '((1) (2) (3) (4 2) (5) (6 3 2)))
=>  ((1) (2) (3) (4 2) (5) (6 3 2) (A APPLE APRICOT) (B BANANA) (C CHERRY))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sym_declare.html#declare,@strong{declare}},
@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{mac_defun.html#defun,@strong{defun}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{speope_letcm_letst.html#let,@strong{let}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

It is not possible to define recursive
@uref{glo_f.html#function,@emph{functions}} with
@ref{#flet,@strong{flet}}. @ref{#labels,@strong{labels}} can be used to
define mutually recursive @uref{glo_f.html#function,@emph{functions}}.

If a @ref{#macrolet,@strong{macrolet}}
@uref{glo_f.html#form,@emph{form}} is a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the body
@emph{forms} are also processed as
@uref{glo_t.html#top_level_form,@emph{top level forms}}. See
@uref{sec_3-2-3.html,Section 3.2.3 (File Compilation)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss214.html,LISP-SYMBOL-REDEFINITION:MAR89-X3J13}
@item
@uref{../Issues/iss104.html,DEFINING-MACROS-NON-TOP-LEVEL:ALLOW}
@item
@uref{../Issues/iss185.html,GET-SETF-METHOD-ENVIRONMENT:ADD-ARG}
@item
@uref{../Issues/iss308.html,SETF-METHOD-VS-SETF-METHOD:RENAME-OLD-TERMS}
@item
@uref{../Issues/iss092.html,DECLARATION-SCOPE:NO-HOISTING}
@item
@uref{../Issues/iss159.html,FLET-DECLARATIONS}
@item
@uref{../Issues/iss105.html,DEFMACRO-BLOCK-SCOPE:EXCLUDES-BINDINGS}
@item
@uref{../Issues/iss161.html,FLET-IMPLICIT-BLOCK:YES}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@item
@uref{../Issues/iss160.html,FLET-DECLARATIONS:ALLOW}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator FUNCTION
@subsubsection CLHS: Special Operator FUNCTION
@anchor{#clhs-special-operator-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_funcall.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_function-_a-expression.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{FUNCTION}

@strong{Syntax:}

@strong{function} @emph{name} => @emph{function}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_f.html#function_name,@emph{function name}} or
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}.

@emph{function}---a @uref{glo_f.html#function,@emph{function}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The @uref{glo_v.html#value,@emph{value}} of
@ref{#function,@strong{function}} is the
@uref{glo_f.html#functional_value,@emph{functional value}} of
@emph{name} in the current
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}.

If @emph{name} is a @uref{glo_f.html#function_name,@emph{function
name}}, the functional definition of that name is that established by
the innermost lexically enclosing
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}},
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}}, or
@uref{speope_fletcm_scm_macrolet.html#macrolet,@strong{macrolet}}
@uref{glo_f.html#form,@emph{form}}, if there is one. Otherwise the
global functional definition of the
@uref{glo_f.html#function_name,@emph{function name}} is returned.

If @emph{name} is a @uref{glo_l.html#lambda_expression,@emph{lambda
expression}}, then a @uref{glo_l.html#lexical_closure,@emph{lexical
closure}} is returned. In situations where a
@uref{glo_c.html#closure,@emph{closure}} over the same set of
@uref{glo_b.html#binding,@emph{bindings}} might be produced more than
once, the various resulting @uref{glo_c.html#closure,@emph{closures}}
might or might not be @uref{fun_eq.html#eq,@strong{eq}}.

It is an error to use @ref{#function,@strong{function}} on a
@uref{glo_f.html#function_name,@emph{function name}} that does not
denote a @uref{glo_f.html#function,@emph{function}} in the lexical
environment in which the @ref{#function,@strong{function}} form appears.
Specifically, it is an error to use @ref{#function,@strong{function}} on
a @uref{glo_s.html#symbol,@emph{symbol}} that denotes a
@uref{glo_m.html#macro,@emph{macro}} or
@uref{glo_s.html#special_form,@emph{special form}}. An implementation
may choose not to signal this error for performance reasons, but
implementations are forbidden from defining the failure to signal an
error as a useful behavior.

@strong{Examples:}

@verbatim
 (defun adder (x) (function (lambda (y) (+ x y))))
@end verbatim

The result of (adder 3) is a function that adds 3 to its argument:

@verbatim
 (setq add3 (adder 3))
 (funcall add3 5) =>  8
@end verbatim

This works because @ref{#function,@strong{function}} creates a
@uref{glo_c.html#closure,@emph{closure}} of the
@uref{glo_l.html#lambda_expression,@emph{lambda expression}} that is
able to refer to the @uref{glo_v.html#value,@emph{value}} 3 of the
variable x even after control has returned from the function adder.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defun.html#defun,@strong{defun}},
@uref{acc_fdefinition.html#fdefinition,@strong{fdefinition}},
@uref{speope_fletcm_scm_macrolet.html#flet,@strong{flet}},
@uref{speope_fletcm_scm_macrolet.html#labels,@strong{labels}},
@uref{acc_symbol-function.html#symbol-function,@strong{symbol-function}},
@uref{sec_3-1-2-1-1.html,Section 3.1.2.1.1 (Symbols as Forms)},
@uref{sec_2-4-8-2.html,Section 2.4.8.2 (Sharpsign Single-Quote)},
@uref{sec_22-1-3-13.html,Section 22.1.3.13 (Printing Other Objects)}

@strong{Notes:}

The notation #'@emph{name} may be used as an abbreviation for (function
@emph{name}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss179.html,FUNCTION-TYPE:X3J13-MARCH-88}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator GO
@subsubsection CLHS: Special Operator GO
@anchor{#clhs-special-operator-go}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_catch.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_return-from.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{GO}

@strong{Syntax:}

@strong{go} @emph{tag} =>|

@strong{Arguments and Values:}

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}.

@strong{Description:}

@ref{#go,@strong{go}} transfers control to the point in the body of an
enclosing @uref{speope_tagbody.html#tagbody,@strong{tagbody}} form
labeled by a tag @uref{fun_eql.html#eql,@strong{eql}} to @emph{tag}. If
there is no such @emph{tag} in the body, the bodies of lexically
containing @uref{speope_tagbody.html#tagbody,@strong{tagbody}}
@uref{glo_f.html#form,@emph{forms}} (if any) are examined as well. If
several tags are @uref{fun_eql.html#eql,@strong{eql}} to @emph{tag},
control is transferred to whichever matching @emph{tag} is contained in
the innermost @uref{speope_tagbody.html#tagbody,@strong{tagbody}} form
that contains the @ref{#go,@strong{go}}. The consequences are undefined
if there is no matching @emph{tag} lexically visible to the point of the
@ref{#go,@strong{go}}.

The transfer of control initiated by @ref{#go,@strong{go}} is performed
as described in @uref{sec_5-2.html,Section 5.2 (Transfer of Control to
an Exit Point)}.

@strong{Examples:}

@verbatim
 (tagbody
   (setq val 2)
   (go lp)
   (incf val 3)
   lp (incf val 4)) =>  NIL
 val =>  6 
@end verbatim

The following is in error because there is a normal exit of the
@uref{speope_tagbody.html#tagbody,@strong{tagbody}} before the
@ref{#go,@strong{go}} is executed.

@verbatim
 (let ((a nil)) 
   (tagbody t (setq a #'(lambda () (go t))))
   (funcall a))
@end verbatim

The following is in error because the
@uref{speope_tagbody.html#tagbody,@strong{tagbody}} is passed over
before the @ref{#go,@strong{go}} @uref{glo_f.html#form,@emph{form}} is
executed.

@verbatim
 (funcall (block nil
            (tagbody a (return #'(lambda () (go a))))))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_tagbody.html#tagbody,@strong{tagbody}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss152.html,EXIT-EXTENT:MINIMAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator IF
@subsubsection CLHS: Special Operator IF
@anchor{#clhs-special-operator-if}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_cond.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_or.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{IF}

@strong{Syntax:}

@strong{if} @emph{@emph{test-form} @emph{then-form} [@emph{else-form}]}
=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{Test-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{Then-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{Else-form}---a @uref{glo_f.html#form,@emph{form}}. The default is
@uref{any_nil.html#nil,@strong{nil}}.

@emph{results}---if the @emph{test-form} @emph{yielded}
@uref{glo_t.html#true,@emph{true}}, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{then-form};
otherwise, the @uref{glo_v.html#value,@emph{values}} returned by the
@emph{else-form}.

@strong{Description:}

@ref{#if,@strong{if}} allows the execution of a
@uref{glo_f.html#form,@emph{form}} to be dependent on a single
@emph{test-form}.

First @emph{test-form} is evaluated. If the result is
@uref{glo_t.html#true,@emph{true}}, then @emph{then-form} is selected;
otherwise @emph{else-form} is selected. Whichever form is selected is
then evaluated.

@strong{Examples:}

@verbatim
 (if t 1) =>  1
 (if nil 1 2) =>  2 
 (defun test ()
   (dolist (truth-value '(t nil 1 (a b c)))
     (if truth-value (print 'true) (print 'false))
     (prin1 truth-value))) =>  TEST
 (test)
>>  TRUE T
>>  FALSE NIL
>>  TRUE 1
>>  TRUE (A B C)
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_cond.html#cond,@strong{cond}},
@uref{mac_whencm_unless.html#unless,@strong{unless}},
@uref{mac_whencm_unless.html#when,@strong{when}}

@strong{Notes:}

@verbatim
 (if test-form then-form else-form)
 ==  (cond (test-form then-form) (t else-form))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator LET LET*
@subsubsection CLHS: Special Operator LET, LET*
@anchor{#clhs-special-operator-let-let}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_destructuring-bind.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_progv.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{LET, LET*}

@strong{Syntax:}

@strong{let} @emph{(@{@emph{var} | (@emph{var} [@emph{init-form}])@}*)
@emph{declaration}@strong{*} @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{let*} @emph{(@{@emph{var} | (@emph{var} [@emph{init-form}])@}*)
@emph{declaration}@strong{*} @emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{init-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

@ref{#let,@strong{let}} and @ref{#letST,@strong{let*}} create new
variable @uref{glo_b.html#binding,@emph{bindings}} and execute a series
of @emph{forms} that use these
@uref{glo_b.html#binding,@emph{bindings}}. @ref{#let,@strong{let}}
performs the @uref{glo_b.html#binding,@emph{bindings}} in parallel and
@ref{#letST,@strong{let*}} does them sequentially.

The form

@verbatim
 (let ((var1 init-form-1)
       (var2 init-form-2)
       ...
       (varm init-form-m))
   declaration1
   declaration2
   ...
   declarationp
   form1
   form2
   ...
   formn)
@end verbatim

first evaluates the expressions @emph{init-form-1}, @emph{init-form-2},
and so on, in that order, saving the resulting values. Then all of the
variables @emph{varj} are bound to the corresponding values; each
@uref{glo_b.html#binding,@emph{binding}} is lexical unless there is a
@uref{dec_special.html#special,@strong{special}} declaration to the
contrary. The expressions @emph{formk} are then evaluated in order; the
values of all but the last are discarded (that is, the body of a
@ref{#let,@strong{let}} is an
@uref{glo_i.html#implicit_progn,@emph{implicit progn}}).

@ref{#letST,@strong{let*}} is similar to @ref{#let,@strong{let}}, but
the @uref{glo_b.html#binding,@emph{bindings}} of variables are performed
sequentially rather than in parallel. The expression for the
@emph{init-form} of a @emph{var} can refer to @emph{vars} previously
bound in the @ref{#letST,@strong{let*}}.

The form

@verbatim
 (let* ((var1 init-form-1)
        (var2 init-form-2)
        ...
        (varm init-form-m))
   declaration1
   declaration2
   ...
   declarationp
   form1
   form2
   ...
   formn)
@end verbatim

first evaluates the expression @emph{init-form-1}, then binds the
variable @emph{var1} to that value; then it evaluates @emph{init-form-2}
and binds @emph{var2}, and so on. The expressions @emph{formj} are then
evaluated in order; the values of all but the last are discarded (that
is, the body of @ref{#letST,@strong{let*}} is an implicit
@uref{speope_progn.html#progn,@strong{progn}}).

For both @ref{#let,@strong{let}} and @ref{#letST,@strong{let*}}, if
there is not an @emph{init-form} associated with a @emph{var},
@emph{var} is initialized to @uref{any_nil.html#nil,@strong{nil}}.

The special form @ref{#let,@strong{let}} has the property that the
@uref{glo_s.html#scope,@emph{scope}} of the name binding does not
include any initial value form. For @ref{#letST,@strong{let*}}, a
variable's @uref{glo_s.html#scope,@emph{scope}} also includes the
remaining initial value forms for subsequent variable bindings.

@strong{Examples:}

@verbatim
 (setq a 'top) =>  TOP
 (defun dummy-function () a) =>  DUMMY-FUNCTION
 (let ((a 'inside) (b a))
    (format nil "~S ~S ~S" a b (dummy-function))) =>  "INSIDE TOP TOP" 
 (let* ((a 'inside) (b a))
    (format nil "~S ~S ~S" a b (dummy-function))) =>  "INSIDE INSIDE TOP" 
 (let ((a 'inside) (b a))
    (declare (special a))
    (format nil "~S ~S ~S" a b (dummy-function))) =>  "INSIDE TOP INSIDE"
@end verbatim

The code

@verbatim
 (let (x)
   (declare (integer x))
   (setq x (gcd y z))
   ...)
@end verbatim

is incorrect; although x is indeed set before it is used, and is set to
a value of the declared type @uref{glo_i.html#integer,@emph{integer}},
nevertheless x initially takes on the value
@uref{any_nil.html#nil,@strong{nil}} in violation of the type
declaration.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_progv.html#progv,@strong{progv}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss359.html,VARIABLE-LIST-ASYMMETRY:SYMMETRIZE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator MULTIPLE-VALUE-PROG1
@subsubsection CLHS: Special Operator MULTIPLE-VALUE-PROG1
@anchor{#clhs-special-operator-multiple-value-prog1}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_multiple-value-list.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_multiple-value-setq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{MULTIPLE-VALUE-PROG1}

@strong{Syntax:}

@strong{multiple-value-prog1} @emph{first-form @emph{form}@strong{*}} =>
@emph{first-form-results}

@strong{Arguments and Values:}

@emph{first-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@emph{first-form-results}---the @uref{glo_v.html#value,@emph{values}}
resulting from the @uref{glo_e.html#evaluation,@emph{evaluation}} of
@emph{first-form}.

@strong{Description:}

@ref{#multiple-value-prog1,@strong{multiple-value-prog1}} evaluates
@emph{first-form} and saves all the values produced by that
@uref{glo_f.html#form,@emph{form}}. It then evaluates each @emph{form}
from left to right, discarding their values.

@strong{Examples:}

@verbatim
 (setq temp '(1 2 3)) =>  (1 2 3)
 (multiple-value-prog1
    (values-list temp)
    (setq temp nil)
    (values-list temp)) =>  1, 2, 3
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_prog1cm_prog2.html#prog1,@strong{prog1}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator MULTIPLE-VALUE-CALL
@subsubsection CLHS: Special Operator MULTIPLE-VALUE-CALL
@anchor{#clhs-special-operator-multiple-value-call}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_multiple-value-bind.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_multiple-value-list.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{MULTIPLE-VALUE-CALL}

@strong{Syntax:}

@strong{multiple-value-call} @emph{@emph{function-form} @emph{form}*} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{function-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated
to produce @emph{function}.

@emph{function}---a @uref{glo_f.html#function_designator,@emph{function
designator}} resulting from the evaluation of @emph{function-form}.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{function}.

@strong{Description:}

Applies @emph{function} to a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_o.html#object,@emph{objects}} collected from groups of
@uref{glo_m.html#multiple_values,@emph{multiple values}}[2].

@ref{#multiple-value-call,@strong{multiple-value-call}} first evaluates
the @emph{function-form} to obtain @emph{function}, and then evaluates
each @emph{form}. All the values of each @emph{form} are gathered
together (not just one value from each) and given as arguments to the
@emph{function}.

@strong{Examples:}

@verbatim
 (multiple-value-call #'list 1 '/ (values 2 3) '/ (values) '/ (floor 2.5))
=>  (1 / 2 3 / / 2 0.5)
 (+ (floor 5 3) (floor 19 4)) ==  (+ 1 4)
=>  5
 (multiple-value-call #'+ (floor 5 3) (floor 19 4)) ==  (+ 1 2 4 3)
=>  10
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_multiple-value-list.html#multiple-value-list,@strong{multiple-value-list}},
@uref{mac_multiple-value-bind.html#multiple-value-bind,@strong{multiple-value-bind}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator PROGN
@subsubsection CLHS: Special Operator PROGN
@anchor{#clhs-special-operator-progn}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_prog1cm_prog2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-modify-macro.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{PROGN}

@strong{Syntax:}

@strong{progn} @emph{@emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

@ref{#progn,@strong{progn}} evaluates @emph{forms}, in the order in
which they are given.

The values of each @emph{form} but the last are discarded.

If @ref{#progn,@strong{progn}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, then all
@uref{glo_f.html#form,@emph{forms}} within that
@ref{#progn,@strong{progn}} are considered by the compiler to be
@uref{glo_t.html#top_level_form,@emph{top level forms}}.

@strong{Examples:}

@verbatim
 (progn) =>  NIL
 (progn 1 2 3) =>  3
 (progn (values 1 2 3)) =>  1, 2, 3
 (setq a 1) =>  1
 (if a
      (progn (setq a nil) 'here)
      (progn (setq a t) 'there)) =>  HERE
 a =>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_prog1cm_prog2.html#prog1,@strong{prog1}},
@uref{mac_prog1cm_prog2.html#prog2,@strong{prog2}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

Many places in Common Lisp involve syntax that uses
@uref{glo_i.html#implicit_progn,@emph{implicit progns}}. That is, part
of their syntax allows many @uref{glo_f.html#form,@emph{forms}} to be
written that are to be evaluated sequentially, discarding the results of
all @uref{glo_f.html#form,@emph{forms}} but the last and returning the
results of the last @uref{glo_f.html#form,@emph{form}}. Such places
include, but are not limited to, the following: the body of a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}; the bodies
of various control and conditional @uref{glo_f.html#form,@emph{forms}}
(e.g., @uref{mac_casecm_ccasecm_ecase.html#case,@strong{case}},
@uref{speope_catch.html#catch,@strong{catch}},
@ref{#progn,@strong{progn}}, and
@uref{mac_whencm_unless.html#when,@strong{when}}).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator PROGV
@subsubsection CLHS: Special Operator PROGV
@anchor{#clhs-special-operator-progv}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_letcm_letst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{spefor_setq.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{PROGV}

@strong{Syntax:}

@strong{progv} @emph{@emph{symbols} @emph{values} @emph{form}@strong{*}}
=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{symbols}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_s.html#symbol,@emph{symbols}}; evaluated.

@emph{values}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_o.html#object,@emph{objects}}; evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

@ref{#progv,@strong{progv}} creates new dynamic variable
@uref{glo_b.html#binding,@emph{bindings}} and executes each @emph{form}
using those @uref{glo_b.html#binding,@emph{bindings}}. Each @emph{form}
is evaluated in order.

@ref{#progv,@strong{progv}} allows
@uref{glo_b.html#binding,@emph{binding}} one or more dynamic variables
whose names may be determined at run time. Each @emph{form} is evaluated
in order with the dynamic variables whose names are in @emph{symbols}
bound to corresponding @emph{values}. If too few @emph{values} are
supplied, the remaining @uref{glo_s.html#symbol,@emph{symbols}} are
bound and then made to have no value. If too many @emph{values} are
supplied, the excess values are ignored. The
@uref{glo_b.html#binding,@emph{bindings}} of the dynamic variables are
undone on exit from @ref{#progv,@strong{progv}}.

@strong{Examples:}

@verbatim
 (setq *x* 1) =>  1
 (progv '(*x*) '(2) *x*) =>  2
 *x* =>  1

Assuming *x* is not globally special,

 (let ((*x* 3)) 
    (progv '(*x*) '(4) 
      (list *x* (symbol-value '*x*)))) =>  (3 4)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_letcm_letst.html#let,@strong{let}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

Among other things, @ref{#progv,@strong{progv}} is useful when writing
interpreters for languages embedded in Lisp; it provides a handle on the
mechanism for @uref{glo_b.html#binding,@emph{binding}}
@uref{glo_d.html#dynamic_variable,@emph{dynamic variables}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator RETURN-FROM
@subsubsection CLHS: Special Operator RETURN-FROM
@anchor{#clhs-special-operator-return-from}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_go.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_return.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{RETURN-FROM}

@strong{Syntax:}

@strong{return-from} @emph{@emph{name} [@emph{result}]} =>|

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_b.html#block_tag,@emph{block tag}}; not
evaluated.

@emph{result}---a @uref{glo_f.html#form,@emph{form}}; evaluated. The
default is @uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns control and @uref{glo_m.html#multiple_values,@emph{multiple
values}}[2] from a lexically enclosing
@uref{glo_b.html#block,@emph{block}}.

A @uref{speope_block.html#block,@strong{block}}
@uref{glo_f.html#form,@emph{form}} named @emph{name} must lexically
enclose the occurrence of @ref{#return-from,@strong{return-from}}; any
@uref{glo_v.html#value,@emph{values}} @emph{yielded} by the
@uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{result} are
immediately returned from the innermost such lexically enclosing
@uref{glo_b.html#block,@emph{block}}.

The transfer of control initiated by
@ref{#return-from,@strong{return-from}} is performed as described in
@uref{sec_5-2.html,Section 5.2 (Transfer of Control to an Exit Point)}.

@strong{Examples:}

@verbatim
 (block alpha (return-from alpha) 1) =>  NIL
 (block alpha (return-from alpha 1) 2) =>  1
 (block alpha (return-from alpha (values 1 2)) 3) =>  1, 2
 (let ((a 0))
    (dotimes (i 10) (incf a) (when (oddp i) (return)))
    a) =>  2
 (defun temp (x)
    (if x (return-from temp 'dummy))
    44) =>  TEMP
 (temp nil) =>  44
 (temp t) =>  DUMMY
 (block out
   (flet ((exit (n) (return-from out n)))
     (block out (exit 1)))
   2) =>  1
 (block nil   
   (unwind-protect (return-from nil 1)
     (return-from nil 2)))
=>  2
 (dolist (flag '(nil t))
   (block nil
     (let ((x 5))
       (declare (special x))
       (unwind-protect (return-from nil)
         (print x))))
   (print 'here))
>>  5
>>  HERE
>>  5
>>  HERE
=>  NIL
 (dolist (flag '(nil t))
   (block nil
     (let ((x 5))
       (declare (special x))
       (unwind-protect
           (if flag (return-from nil))
         (print x))))
   (print 'here))
>>  5
>>  HERE
>>  5
>>  HERE
=>  NIL
@end verbatim

The following has undefined consequences because the
@uref{speope_block.html#block,@strong{block}}
@uref{glo_f.html#form,@emph{form}} exits normally before the
@ref{#return-from,@strong{return-from}}
@uref{glo_f.html#form,@emph{form}} is attempted.

@verbatim
 (funcall (block nil #'(lambda () (return-from nil)))) is an error.
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_block.html#block,@strong{block}},
@uref{mac_return.html#return,@strong{return}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss152.html,EXIT-EXTENT:MINIMAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator TAGBODY
@subsubsection CLHS: Special Operator TAGBODY
@anchor{#clhs-special-operator-tagbody}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_return.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_throw.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{TAGBODY}

@strong{Syntax:}

@strong{tagbody} @emph{@{@emph{tag} | @emph{statement}@}*} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}; not evaluated.

@emph{statement}---a @uref{glo_c.html#compound_form,@emph{compound
form}}; evaluated as described below.

@strong{Description:}

Executes zero or more @emph{statements} in a
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} that
provides for control transfers to labels indicated by the @emph{tags}.

The @emph{statements} in a @ref{#tagbody,@strong{tagbody}} are
@emph{evaluated} in order from left to right, and their
@uref{glo_v.html#value,@emph{values}} are discarded. If at any time
there are no remaining @emph{statements},
@ref{#tagbody,@strong{tagbody}} returns
@uref{any_nil.html#nil,@strong{nil}}. However, if (go @emph{tag}) is
@emph{evaluated}, control jumps to the part of the body labeled with the
@emph{tag}. (Tags are compared with
@uref{fun_eql.html#eql,@strong{eql}}.)

A @emph{tag} established by @ref{#tagbody,@strong{tagbody}} has
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} and has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}. Once
@ref{#tagbody,@strong{tagbody}} has been exited, it is no longer valid
to @uref{speope_go.html#go,@strong{go}} to a @emph{tag} in its body. It
is permissible for @uref{speope_go.html#go,@strong{go}} to jump to a
@ref{#tagbody,@strong{tagbody}} that is not the innermost
@ref{#tagbody,@strong{tagbody}} containing that
@uref{speope_go.html#go,@strong{go}}; the @emph{tags} established by a
@ref{#tagbody,@strong{tagbody}} only shadow other @emph{tags} of like
name.

The determination of which elements of the body are @emph{tags} and
which are @emph{statements} is made prior to any
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} of that
element. If a @emph{statement} is a
@uref{glo_m.html#macro_form,@emph{macro form}} and its
@uref{glo_m.html#macro_expansion,@emph{macro expansion}} is an
@uref{glo_a.html#atom,@emph{atom}}, that
@uref{glo_a.html#atom,@emph{atom}} is treated as a @emph{statement}, not
a @emph{tag}.

@strong{Examples:}

@verbatim
 (let (val)
    (tagbody
      (setq val 1)
      (go point-a)
      (incf val 16)
     point-c
      (incf val 04)
      (go point-b)
      (incf val 32)
     point-a
      (incf val 02)
      (go point-c)
      (incf val 64)
     point-b
      (incf val 08))
    val)
=>  15
 (defun f1 (flag)
   (let ((n 1))
     (tagbody 
       (setq n (f2 flag #'(lambda () (go out))))
      out
       (prin1 n))))
=>  F1
 (defun f2 (flag escape)
   (if flag (funcall escape) 2))
=>  F2
 (f1 nil)
>>  2
=>  NIL
 (f1 t)
>>  1
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_go.html#go,@strong{go}}

@strong{Notes:}

The @uref{glo_m.html#macro,@emph{macros}} in the next figure have
@uref{glo_i.html#implicit_tagbody,@emph{implicit tagbodies}}.

@verbatim
do              do-external-symbols  dotimes  
do*             do-symbols           prog     
do-all-symbols  dolist               prog*    
@end verbatim

@strong{Figure 5-10. Macros that have implicit tagbodies.}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss344.html,TAGBODY-TAG-EXPANSION:NO}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator THROW
@subsubsection CLHS: Special Operator THROW
@anchor{#clhs-special-operator-throw}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_tagbody.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{speope_unwind-protect.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{THROW}

@strong{Syntax:}

@strong{throw} @emph{tag result-form} =>|

@strong{Arguments and Values:}

@emph{tag}---a @uref{glo_c.html#catch_tag,@emph{catch tag}}; evaluated.

@emph{result-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated as
described below.

@strong{Description:}

@ref{#throw,@strong{throw}} causes a non-local control transfer to a
@uref{speope_catch.html#catch,@strong{catch}} whose tag is
@uref{fun_eq.html#eq,@strong{eq}} to @emph{tag}.

@emph{Tag} is evaluated first to produce an
@uref{glo_o.html#object,@emph{object}} called the throw tag; then
@emph{result-form} is evaluated, and its results are saved. If the
@emph{result-form} produces multiple values, then all the values are
saved. The most recent outstanding
@uref{speope_catch.html#catch,@strong{catch}} whose @emph{tag} is
@uref{fun_eq.html#eq,@strong{eq}} to the throw tag is exited; the saved
results are returned as the value or values of
@uref{speope_catch.html#catch,@strong{catch}}.

The transfer of control initiated by @ref{#throw,@strong{throw}} is
performed as described in @uref{sec_5-2.html,Section 5.2 (Transfer of
Control to an Exit Point)}.

@strong{Examples:}

@verbatim
 (catch 'result
    (setq i 0 j 0)
    (loop (incf j 3) (incf i)
          (if (= i 3) (throw 'result (values i j))))) =>  3, 9
@end verbatim

@verbatim
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2))) =>  2
@end verbatim

The consequences of the following are undefined because the
@uref{speope_catch.html#catch,@strong{catch}} of b is passed over by the
first @ref{#throw,@strong{throw}}, hence portable programs must assume
that its @uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} is
terminated. The @uref{glo_b.html#binding,@emph{binding}} of the
@uref{glo_c.html#catch_tag,@emph{catch tag}} is not yet
@emph{disestablished} and therefore it is the target of the second
@ref{#throw,@strong{throw}}.

@verbatim
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
@end verbatim

The following prints ``The inner catch returns :SECOND-THROW'' and then
returns :outer-catch.

@verbatim
 (catch 'foo
         (format t "The inner catch returns ~s.~%"
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
>>  The inner catch returns :SECOND-THROW
=>  :OUTER-CATCH
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If there is no outstanding @uref{glo_c.html#catch_tag,@emph{catch tag}}
that matches the throw tag, no unwinding of the stack is performed, and
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}} is
signaled. When the error is signaled, the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} is that
which was in force at the point of the @ref{#throw,@strong{throw}}.

@strong{See Also:}

@uref{speope_block.html#block,@strong{block}},
@uref{speope_catch.html#catch,@strong{catch}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{speope_unwind-protect.html#unwind-protect,@strong{unwind-protect}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:}

@uref{speope_catch.html#catch,@strong{catch}} and
@ref{#throw,@strong{throw}} are normally used when the
@uref{glo_e.html#exit_point,@emph{exit point}} must have
@uref{glo_d.html#dynamic_scope,@emph{dynamic scope}} (e.g., the
@ref{#throw,@strong{throw}} is not lexically enclosed by the
@uref{speope_catch.html#catch,@strong{catch}}), while
@uref{speope_block.html#block,@strong{block}} and
@uref{mac_return.html#return,@strong{return}} are used when
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} is sufficient.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss152.html,EXIT-EXTENT:MINIMAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Special Operator UNWIND-PROTECT
@subsubsection CLHS: Special Operator UNWIND-PROTECT
@anchor{#clhs-special-operator-unwind-protect}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{speope_throw.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_data__w_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{convar_nil.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Special Operator} @strong{UNWIND-PROTECT}

@strong{Syntax:}

@strong{unwind-protect} @emph{@emph{protected-form}
@emph{cleanup-form}@strong{*}} => @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{protected-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{cleanup-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} of the
@emph{protected-form}.

@strong{Description:}

@ref{#unwind-protect,@strong{unwind-protect}} evaluates
@emph{protected-form} and guarantees that @emph{cleanup-forms} are
executed before @ref{#unwind-protect,@strong{unwind-protect}} exits,
whether it terminates normally or is aborted by a control transfer of
some kind. @ref{#unwind-protect,@strong{unwind-protect}} is intended to
be used to make sure that certain side effects take place after the
evaluation of @emph{protected-form}.

If a @uref{glo_n.html#non-local_exit,@emph{non-local exit}} occurs
during execution of @emph{cleanup-forms}, no special action is taken.
The @emph{cleanup-forms} of
@ref{#unwind-protect,@strong{unwind-protect}} are not protected by that
@ref{#unwind-protect,@strong{unwind-protect}}.

@ref{#unwind-protect,@strong{unwind-protect}} protects against all
attempts to exit from @emph{protected-form}, including
@uref{speope_go.html#go,@strong{go}},
@uref{mac_handler-case.html#handler-case,@strong{handler-case}},
@uref{mac_ignore-errors.html#ignore-errors,@strong{ignore-errors}},
@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{speope_throw.html#throw,@strong{throw}}, and
@uref{mac_with-simple-restart.html#with-simple-restart,@strong{with-simple-restart}}.

Undoing of @uref{glo_h.html#handler,@emph{handler}} and
@uref{glo_r.html#restart,@emph{restart}}
@uref{glo_b.html#binding,@emph{bindings}} during an exit happens in
parallel with the undoing of the bindings of
@uref{glo_d.html#dynamic_variable,@emph{dynamic variables}} and
@uref{speope_catch.html#catch,@strong{catch}} tags, in the reverse order
in which they were established. The effect of this is that
@emph{cleanup-form} sees the same
@uref{glo_h.html#handler,@emph{handler}} and
@uref{glo_r.html#restart,@emph{restart}}
@uref{glo_b.html#binding,@emph{bindings}}, as well as
@uref{glo_d.html#dynamic_variable,@emph{dynamic variable}}
@uref{glo_b.html#binding,@emph{bindings}} and
@uref{speope_catch.html#catch,@strong{catch}} tags, as were visible when
the @ref{#unwind-protect,@strong{unwind-protect}} was entered.

@strong{Examples:}

@verbatim
 (tagbody
   (let ((x 3))
     (unwind-protect
       (if (numberp x) (go out))
       (print x)))
  out
   ...)
@end verbatim

When @uref{speope_go.html#go,@strong{go}} is executed, the call to
@uref{fun_writecm_p_rintcm_princ.html#print,@strong{print}} is executed
first, and then the transfer of control to the tag out is completed.

@verbatim
 (defun dummy-function (x)
    (setq state 'running)
    (unless (numberp x) (throw 'abort 'not-a-number))
    (setq state (1+ x))) =>  DUMMY-FUNCTION
 (catch 'abort (dummy-function 1)) =>  2
 state =>  2
 (catch 'abort (dummy-function 'trash)) =>  NOT-A-NUMBER
 state =>  RUNNING
 (catch 'abort (unwind-protect (dummy-function 'trash) 
                  (setq state 'aborted))) =>  NOT-A-NUMBER
 state =>  ABORTED
@end verbatim

The following code is not correct:

@verbatim
 (unwind-protect
   (progn (incf *access-count*)
          (perform-access))
   (decf *access-count*))
@end verbatim

If an exit occurs before completion of
@uref{mac_incfcm_decf.html#incf,@strong{incf}}, the
@uref{mac_incfcm_decf.html#decf,@strong{decf}}
@uref{glo_f.html#form,@emph{form}} is executed anyway, resulting in an
incorrect value for *access-count*. The correct way to code this is as
follows:

@verbatim
 (let ((old-count *access-count*))
   (unwind-protect
     (progn (incf *access-count*)
            (perform-access))
     (setq *access-count* old-count)))
@end verbatim

@verbatim
;;; The following returns 2.
 (block nil   
   (unwind-protect (return 1)
     (return 2)))
 
;;; The following has undefined consequences.
 (block a    
   (block b
     (unwind-protect (return-from a 1)
       (return-from b 2))))
 
;;; The following returns 2.
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2)))
 
;;; The following has undefined consequences because the catch of B is 
;;; passed over by the first THROW, hence portable programs must assume 
;;; its dynamic extent is terminated.  The binding of the catch tag is not
;;; yet disestablished and therefore it is the target of the second throw.
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
 
;;; The following prints "The inner catch returns :SECOND-THROW"
;;; and then returns :OUTER-CATCH.
 (catch 'foo
         (format t "The inner catch returns ~s.~%"
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
 
 
;;; The following returns 10. The inner CATCH of A is passed over, but 
;;; because that CATCH is disestablished before the THROW to A is executed,
;;; it isn't seen.
 (catch 'a
   (catch 'b
     (unwind-protect (1+ (catch 'a (throw 'b 1)))
       (throw 'a 10))))
 
 
;;; The following has undefined consequences because the extent of
;;; the (CATCH 'BAR ...) exit ends when the (THROW 'FOO ...)
;;; commences.
 (catch 'foo
   (catch 'bar
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following returns 4; XXX is not printed.
;;; The (THROW 'FOO ...) has no effect on the scope of the BAR
;;; catch tag or the extent of the (CATCH 'BAR ...) exit.
 (catch 'bar
   (catch 'foo
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following prints 5.
 (block nil
   (let ((x 5))
     (declare (special x))
     (unwind-protect (return)
       (print x))))          
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{speope_catch.html#catch,@strong{catch}},
@uref{speope_go.html#go,@strong{go}},
@uref{mac_handler-case.html#handler-case,@strong{handler-case}},
@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{mac_return.html#return,@strong{return}},
@uref{speope_return-from.html#return-from,@strong{return-from}},
@uref{speope_throw.html#throw,@strong{throw}},
@uref{sec_3-1.html,Section 3.1 (Evaluation)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss152.html,EXIT-EXTENT:MINIMAL}
@item
@uref{../Issues/iss151.html,EXIT-EXTENT-AND-CONDITION-SYSTEM:LIKE-DYNAMIC-BINDINGS}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 6
@section CLHS: Chapter 6
@anchor{#clhs-chapter-6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_undefined-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
6. Iteration

@uref{sec_6-1.html,}

6.1 The LOOP Facility

@uref{sec_the_itera_n_dictionary.html,}

6.2 The Iteration Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Iteration Dictionary::
@end menu

@node CLHS Section The Iteration Dictionary
@subsection CLHS: Section The Iteration Dictionary
@anchor{#clhs-section-the-iteration-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_6-1-9.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_docm_dost.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
6.2 The Iteration Dictionary

@uref{mac_docm_dost.html,@emph{Macro} @strong{DO, DO*}}

@uref{mac_dotimes.html,@emph{Macro} @strong{DOTIMES}}

@uref{mac_dolist.html,@emph{Macro} @strong{DOLIST}}

@uref{mac_loop.html,@emph{Macro} @strong{LOOP}}

@uref{locmac_loop-finish.html,@emph{Local Macro} @strong{LOOP-FINISH}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Local Macro LOOP-FINISH::
* CLHS Macro DOLIST::
* CLHS Macro DOTIMES::
* CLHS Macro LOOP::
@end menu

@node CLHS Local Macro LOOP-FINISH
@subsubsection CLHS: Local Macro LOOP-FINISH
@anchor{#clhs-local-macro-loop-finish}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_loop.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_itera_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Macro} @strong{LOOP-FINISH}

@strong{Syntax:}

@strong{loop-finish} @emph{@emph{<no arguments>}} =>|

@strong{Description:}

The @ref{#loop-finish,@strong{loop-finish}}
@uref{glo_m.html#macro,@emph{macro}} can be used lexically within an
extended @uref{mac_loop.html#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}} to terminate that
@uref{glo_f.html#form,@emph{form}} ``normally.'' That is, it transfers
control to the loop epilogue of the lexically innermost extended
@uref{mac_loop.html#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}}. This permits execution of any
@strong{finally} clause (for effect) and the return of any accumulated
result.

@strong{Examples:}

@verbatim
;; Terminate the loop, but return the accumulated count.
 (loop for i in '(1 2 3 stop-here 4 5 6)
       when (symbolp i) do (loop-finish)
       count i)
=>  3
 
;; The preceding loop is equivalent to:
 (loop for i in '(1 2 3 stop-here 4 5 6)
       until (symbolp i)
       count i)
=>  3

;; While LOOP-FINISH can be used can be used in a variety of 
;; situations it is really most needed in a situation where a need
;; to exit is detected at other than the loop's `top level'
;; (where UNTIL or WHEN often work just as well), or where some 
;; computation must occur between the point where a need to exit is
;; detected and the point where the exit actually occurs.  For example:
 (defun tokenize-sentence (string)
   (macrolet ((add-word (wvar svar)
                `(when ,wvar
                   (push (coerce (nreverse ,wvar) 'string) ,svar)
                   (setq ,wvar nil))))
     (loop with word = '() and sentence = '() and endpos = nil
           for i below (length string)
           do (let ((char (aref string i)))
                (case char
                  (#\Space (add-word word sentence))
                  (#\. (setq endpos (1+ i)) (loop-finish))
                  (otherwise (push char word))))
           finally (add-word word sentence)
                   (return (values (nreverse sentence) endpos)))))
=>  TOKENIZE-SENTENCE
 
 (tokenize-sentence "this is a sentence. this is another sentence.")
=>  ("this" "is" "a" "sentence"), 19
 
 (tokenize-sentence "this is a sentence")
=>  ("this" "is" "a" "sentence"), NIL
@end verbatim

@strong{Side Effects:}

Transfers control.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

Whether or not @ref{#loop-finish,@strong{loop-finish}} is
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#loop-finish,@strong{loop-finish}} are the same as for
@uref{glo_s.html#symbol,@emph{symbols}} in the COMMON-LISP package which
are @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use
@ref{#loop-finish,@strong{loop-finish}} outside of
@uref{mac_loop.html#loop,@strong{loop}} are undefined.

@strong{See Also:}

@uref{mac_loop.html#loop,@strong{loop}}, @uref{sec_6-1.html,Section 6.1
(The LOOP Facility)}

@strong{Notes:}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DOLIST
@subsubsection CLHS: Macro DOLIST
@anchor{#clhs-macro-dolist}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_dotimes.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_itera_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_loop.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DOLIST}

@strong{Syntax:}

@strong{dolist} @emph{(var list-form [result-form])
@emph{declaration}@strong{*} @{tag | statement@}*}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{list-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{result-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}; not evaluated.

@emph{statement}---a @uref{glo_c.html#compound_form,@emph{compound
form}}; evaluated as described below.

@emph{results}---if a @uref{mac_return.html#return,@strong{return}} or
@uref{speope_return-from.html#return-from,@strong{return-from}} form is
executed, the @uref{glo_v.html#value,@emph{values}} passed from that
@uref{glo_f.html#form,@emph{form}}; otherwise, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{result-form}
or @uref{any_nil.html#nil,@strong{nil}} if there is no
@emph{result-form}.

@strong{Description:}

@ref{#dolist,@strong{dolist}} iterates over the elements of a
@uref{glo_l.html#list,@emph{list}}. The body of
@ref{#dolist,@strong{dolist}} is like a
@uref{speope_tagbody.html#tagbody,@strong{tagbody}}. It consists of a
series of @emph{tags} and @emph{statements}.

@ref{#dolist,@strong{dolist}} evaluates @emph{list-form}, which should
produce a @uref{glo_l.html#list,@emph{list}}. It then executes the body
once for each element in the @uref{glo_l.html#list,@emph{list}}, in the
order in which the @emph{tags} and @emph{statements} occur, with
@emph{var} bound to the element. Then @emph{result-form} is evaluated.
@emph{tags} label @emph{statements}.

At the time @emph{result-form} is processed, @emph{var} is bound to
@uref{any_nil.html#nil,@strong{nil}}.

An @uref{glo_i.html#implicit_block,@emph{implicit block}} named
@uref{any_nil.html#nil,@strong{nil}} surrounds
@ref{#dolist,@strong{dolist}}.
@uref{mac_return.html#return,@strong{return}} may be used to terminate
the loop immediately without performing any further iterations,
returning zero or more @uref{glo_v.html#value,@emph{values}}.

The @uref{glo_s.html#scope,@emph{scope}} of the binding of @emph{var}
does not include the @emph{list-form}, but the @emph{result-form} is
included.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @ref{#dolist,@strong{dolist}}
@uref{glo_e.html#establish,@emph{establishes}} a new
@uref{glo_b.html#binding,@emph{binding}} of @emph{var} on each iteration
or whether it @uref{glo_e.html#establish,@emph{establishes}} a binding
for @emph{var} once at the beginning and then @emph{assigns} it on any
subsequent iterations.

@strong{Examples:}

@verbatim
 (setq temp-two '()) =>  NIL
 (dolist (temp-one '(1 2 3 4) temp-two) (push temp-one temp-two)) =>  (4 3 2 1)

 (setq temp-two 0) =>  0
 (dolist (temp-one '(1 2 3 4)) (incf temp-two)) =>  NIL
 temp-two =>  4

 (dolist (x '(a b c d)) (prin1 x) (princ " ")) 
>>  A B C D 
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_docm_dost.html#do,@strong{do}},
@uref{mac_dotimes.html#dotimes,@strong{dotimes}},
@uref{speope_tagbody.html#tagbody,@strong{tagbody}},
@uref{sec_3-6.html,Section 3.6 (Traversal Rules and Side Effects)}

@strong{Notes:}

@uref{speope_go.html#go,@strong{go}} may be used within the body of
@ref{#dolist,@strong{dolist}} to transfer control to a statement labeled
by a @emph{tag}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss240.html,MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DOTIMES
@subsubsection CLHS: Macro DOTIMES
@anchor{#clhs-macro-dotimes}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_docm_dost.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_itera_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_dolist.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DOTIMES}

@strong{Syntax:}

@strong{dotimes} @emph{(var count-form [result-form])
@emph{declaration}@strong{*} @{tag | statement@}*}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{var}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{count-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{result-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{tag}---a @uref{glo_g.html#go_tag,@emph{go tag}}; not evaluated.

@emph{statement}---a @uref{glo_c.html#compound_form,@emph{compound
form}}; evaluated as described below.

@emph{results}---if a @uref{mac_return.html#return,@strong{return}} or
@uref{speope_return-from.html#return-from,@strong{return-from}} form is
executed, the @uref{glo_v.html#value,@emph{values}} passed from that
@uref{glo_f.html#form,@emph{form}}; otherwise, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{result-form}
or @uref{any_nil.html#nil,@strong{nil}} if there is no
@emph{result-form}.

@strong{Description:}

@ref{#dotimes,@strong{dotimes}} iterates over a series of
@uref{glo_i.html#integer,@emph{integers}}.

@ref{#dotimes,@strong{dotimes}} evaluates @emph{count-form}, which
should produce an @uref{glo_i.html#integer,@emph{integer}}. If
@emph{count-form} is zero or negative, the body is not executed.
@ref{#dotimes,@strong{dotimes}} then executes the body once for each
@uref{glo_i.html#integer,@emph{integer}} from 0 up to but not including
the value of @emph{count-form}, in the order in which the @emph{tags}
and @emph{statements} occur, with @emph{var} bound to each
@uref{glo_i.html#integer,@emph{integer}}. Then @emph{result-form} is
evaluated. At the time @emph{result-form} is processed, @emph{var} is
bound to the number of times the body was executed. @emph{Tags} label
@emph{statements}.

An @uref{glo_i.html#implicit_block,@emph{implicit block}} named
@uref{any_nil.html#nil,@strong{nil}} surrounds
@ref{#dotimes,@strong{dotimes}}.
@uref{mac_return.html#return,@strong{return}} may be used to terminate
the loop immediately without performing any further iterations,
returning zero or more @uref{glo_v.html#value,@emph{values}}.

The body of the loop is an
@uref{glo_i.html#implicit_tagbody,@emph{implicit tagbody}}; it may
contain tags to serve as the targets of
@uref{speope_go.html#go,@strong{go}} statements. Declarations may appear
before the body of the loop.

The @uref{glo_s.html#scope,@emph{scope}} of the binding of @emph{var}
does not include the @emph{count-form}, but the @emph{result-form} is
included.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @ref{#dotimes,@strong{dotimes}}
@uref{glo_e.html#establish,@emph{establishes}} a new
@uref{glo_b.html#binding,@emph{binding}} of @emph{var} on each iteration
or whether it @uref{glo_e.html#establish,@emph{establishes}} a binding
for @emph{var} once at the beginning and then @emph{assigns} it on any
subsequent iterations.

@strong{Examples:}

@verbatim
 (dotimes (temp-one 10 temp-one)) =>  10
 (setq temp-two 0) =>  0
 (dotimes (temp-one 10 t) (incf temp-two)) =>  T
 temp-two =>  10
@end verbatim

Here is an example of the use of dotimes in processing strings:

@verbatim
;;; True if the specified subsequence of the string is a
;;; palindrome (reads the same forwards and backwards).
 (defun palindromep (string &optional
                           (start 0)
                           (end (length string)))
   (dotimes (k (floor (- end start) 2) t)
    (unless (char-equal (char string (+ start k))
                        (char string (- end k 1)))
      (return nil))))
 (palindromep "Able was I ere I saw Elba") =>  T
 (palindromep "A man, a plan, a canal--Panama!") =>  NIL
 (remove-if-not #'alpha-char-p          ;Remove punctuation.
               "A man, a plan, a canal--Panama!")
=>  "AmanaplanacanalPanama"
 (palindromep
  (remove-if-not #'alpha-char-p
                "A man, a plan, a canal--Panama!")) =>  T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "Unremarkable was I ere I saw Elba Kramer, nu?")) =>  T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "A man, a plan, a cat, a ham, a yak,
                  a yam, a hat, a canal--Panama!")) =>  T
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_docm_dost.html#do,@strong{do}},
@uref{mac_dolist.html#dolist,@strong{dolist}},
@uref{speope_tagbody.html#tagbody,@strong{tagbody}}

@strong{Notes:}

@uref{speope_go.html#go,@strong{go}} may be used within the body of
@ref{#dotimes,@strong{dotimes}} to transfer control to a statement
labeled by a @emph{tag}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro LOOP
@subsubsection CLHS: Macro LOOP
@anchor{#clhs-macro-loop}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_dolist.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_itera_n_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locmac_loop-finish.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{LOOP}

@strong{Syntax:}

The ``simple'' @ref{#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}}:

@strong{loop} @emph{@emph{compound-form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

The ``extended'' @ref{#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}}:

@strong{loop} @emph{[@emph{name-clause}]
@{@emph{variable-clause}@}@strong{*} @{@emph{main-clause}@}@strong{*}}
=> @emph{@emph{result}@strong{*}}

@verbatim
name-clause::= named name 
@end verbatim

@verbatim
variable-clause::= with-clause | initial-final | for-as-clause 
@end verbatim

@verbatim
with-clause::= with var1 [type-spec] [= form1] {and var2 [type-spec] [= form2]}* 
@end verbatim

@verbatim
main-clause::= unconditional | accumulation | conditional | termination-test | initial-final 
@end verbatim

@verbatim
initial-final::= initially compound-form+ | finally compound-form+ 
@end verbatim

@verbatim
unconditional::= {do | doing} compound-form+ | return {form | it} 
@end verbatim

@verbatim
accumulation::= list-accumulation | numeric-accumulation 
@end verbatim

@verbatim
list-accumulation::= {collect | collecting | append | appending | nconc | nconcing} {form | it}  
                     [into simple-var] 
@end verbatim

@verbatim
numeric-accumulation::= {count | counting | sum | summing | } 
                         maximize | maximizing | minimize | minimizing {form | it} 
                        [into simple-var] [type-spec] 
@end verbatim

@verbatim
conditional::= {if | when | unless} form selectable-clause {and selectable-clause}*  
               [else selectable-clause {and selectable-clause}*]  
               [end] 
@end verbatim

@verbatim
selectable-clause::= unconditional | accumulation | conditional 
@end verbatim

@verbatim
termination-test::= while form | until form | repeat form | always form | never form | thereis form 
@end verbatim

@verbatim
for-as-clause::= {for | as} for-as-subclause {and for-as-subclause}* 
@end verbatim

@verbatim
for-as-subclause::= for-as-arithmetic | for-as-in-list | for-as-on-list | for-as-equals-then | 
                    for-as-across | for-as-hash | for-as-package 
@end verbatim

@verbatim
for-as-arithmetic::= var [type-spec] for-as-arithmetic-subclause 
@end verbatim

@verbatim
for-as-arithmetic-subclause::= arithmetic-up | arithmetic-downto | arithmetic-downfrom 
@end verbatim

@verbatim
arithmetic-up::= [[{from | upfrom} form1 |   {to | upto | below} form2 |   by form3]]+ 
@end verbatim

@verbatim
arithmetic-downto::= [[{{from form1}}1  |   {{{downto | above} form2}}1  |   by form3]] 
@end verbatim

@verbatim
arithmetic-downfrom::= [[{{downfrom form1}}1  |   {to | downto | above} form2 |   by form3]] 
@end verbatim

@verbatim
for-as-in-list::= var [type-spec] in form1 [by step-fun] 
@end verbatim

@verbatim
for-as-on-list::= var [type-spec] on form1 [by step-fun] 
@end verbatim

@verbatim
for-as-equals-then::= var [type-spec] = form1 [then form2] 
@end verbatim

@verbatim
for-as-across::= var [type-spec] across vector 
@end verbatim

@verbatim
for-as-hash::= var [type-spec] being {each | the}  
               {{hash-key | hash-keys} {in | of} hash-table  
                [using (hash-value other-var)] |  
                {hash-value | hash-values} {in | of} hash-table  
                [using (hash-key other-var)]} 
@end verbatim

@verbatim
for-as-package::= var [type-spec] being {each | the}  
                  {symbol | symbols | 
                   present-symbol | present-symbols | 
                   external-symbol | external-symbols} 
                  [{in | of} package] 
@end verbatim

@verbatim
type-spec::= simple-type-spec | destructured-type-spec 
@end verbatim

@verbatim
simple-type-spec::= fixnum | float | t | nil 
@end verbatim

@verbatim
destructured-type-spec::= of-type d-type-spec 
@end verbatim

@verbatim
d-type-spec::= type-specifier | (d-type-spec . d-type-spec) 
@end verbatim

@verbatim
var::= d-var-spec 
@end verbatim

@verbatim
var1::= d-var-spec 
@end verbatim

@verbatim
var2::= d-var-spec 
@end verbatim

@verbatim
other-var::= d-var-spec 
@end verbatim

@verbatim
d-var-spec::= simple-var | nil | (d-var-spec . d-var-spec) 
@end verbatim

@strong{Arguments and Values:}

@emph{compound-form}---a @uref{glo_c.html#compound_form,@emph{compound
form}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{simple-var}---a @uref{glo_s.html#symbol,@emph{symbol}} (a
@uref{glo_v.html#variable,@emph{variable}} name).

@emph{form}, @emph{form1}, @emph{form2}, @emph{form3}---a
@uref{glo_f.html#form,@emph{form}}.

@emph{step-fun}---a @uref{glo_f.html#form,@emph{form}} that evaluates to
a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}}.

@emph{vector}---a @uref{glo_f.html#form,@emph{form}} that evaluates to a
@uref{glo_v.html#vector,@emph{vector}}.

@emph{hash-table}---a @uref{glo_f.html#form,@emph{form}} that evaluates
to a @uref{glo_h.html#hash_table,@emph{hash table}}.

@emph{package}---a @uref{glo_f.html#form,@emph{form}} that evaluates to
a @uref{glo_p.html#package_designator,@emph{package designator}}.

@emph{type-specifier}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}. This might be either an
@uref{glo_a.html#atomic_type_specifier,@emph{atomic type specifier}} or
a @uref{glo_c.html#compound_type_specifier,@emph{compound type
specifier}}, which introduces some additional complications to proper
parsing in the face of destructuring; for further information, see
@uref{sec_6-1-1-7.html,Section 6.1.1.7 (Destructuring)}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

For details, see @uref{sec_6-1.html,Section 6.1 (The LOOP Facility)}.

@strong{Examples:}

@verbatim
;; An example of the simple form of LOOP.
 (defun sqrt-advisor ()
   (loop (format t "~&Number: ")
         (let ((n (parse-integer (read-line) :junk-allowed t)))
           (when (not n) (return))
           (format t "~&The square root of ~D is ~D.~%" n (sqrt n)))))
=>  SQRT-ADVISOR
 (sqrt-advisor)
>>  Number: 5<NEWLINE>
>>  The square root of 5 is 2.236068.
>>  Number: 4<NEWLINE>
>>  The square root of 4 is 2.
>>  Number: done<NEWLINE>
=>  NIL

;; An example of the extended form of LOOP.
 (defun square-advisor ()
   (loop as n = (progn (format t "~&Number: ")
                       (parse-integer (read-line) :junk-allowed t))
         while n
         do (format t "~&The square of ~D is ~D.~%" n (* n n))))
=>  SQUARE-ADVISOR
 (square-advisor)
>>  Number: 4<NEWLINE>
>>  The square of 4 is 16.
>>  Number: 23<NEWLINE>
>>  The square of 23 is 529.
>>  Number: done<NEWLINE>
=>  NIL

;; Another example of the extended form of LOOP.
 (loop for n from 1 to 10
       when (oddp n)
         collect n)
=>  (1 3 5 7 9)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_docm_dost.html#do,@strong{do}},
@uref{mac_dolist.html#dolist,@strong{dolist}},
@uref{mac_dotimes.html#dotimes,@strong{dotimes}},
@uref{mac_return.html#return,@strong{return}},
@uref{speope_go.html#go,@strong{go}},
@uref{speope_throw.html#throw,@strong{throw}},
@uref{sec_6-1-1-7.html,Section 6.1.1.7 (Destructuring)}

@strong{Notes:}

Except that
@uref{locmac_loop-finish.html#loop-finish,@strong{loop-finish}} cannot
be used within a simple @ref{#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}}, a simple @ref{#loop,@strong{loop}}
@uref{glo_f.html#form,@emph{form}} is related to an extended
@ref{#loop,@strong{loop}} @uref{glo_f.html#form,@emph{form}} in the
following way:

@verbatim
 (loop compound-form*) ==  (loop do compound-form*)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss223.html,LOOP-MISCELLANEOUS-REPAIRS:FIX}
@item
@uref{../Issues/iss226.html,LOOP-SYNTAX-OVERHAUL:REPAIR}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 7
@section CLHS: Chapter 7
@anchor{#clhs-chapter-7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locmac_loop-finish.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7. Objects

@uref{sec_7-1.html,}

7.1 Object Creation and Initialization

@uref{sec_7-2.html,}

7.2 Changing the Class of an Instance

@uref{sec_7-3.html,}

7.3 Reinitializing an Instance

@uref{sec_7-4.html,}

7.4 Meta-Objects

@uref{sec_7-5.html,}

7.5 Slots

@uref{sec_7-6.html,}

7.6 Generic Functions and Methods

@uref{sec_the_objects_dictionary.html,}

7.7 The Objects Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 72::
* CLHS Section 73::
* CLHS Section 74::
* CLHS Section 75::
* CLHS Section 76::
* CLHS Section The Objects Dictionary::
@end menu

@node CLHS Section 72
@subsection CLHS: Section 7.2
@anchor{#clhs-section-7.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-1-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-2-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.2 Changing the Class of an Instance

The @uref{glo_f.html#function,@emph{function}}
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}
can be used to change the @uref{glo_c.html#class,@emph{class}} of an
@uref{glo_i.html#instance,@emph{instance}} from its current class,
Cfrom, to a different class, Cto; it changes the structure of the
@uref{glo_i.html#instance,@emph{instance}} to conform to the definition
of the class Cto.

Note that changing the @uref{glo_c.html#class,@emph{class}} of an
@uref{glo_i.html#instance,@emph{instance}} may cause
@uref{glo_s.html#slot,@emph{slots}} to be added or deleted. Changing the
@uref{glo_c.html#class,@emph{class}} of an
@uref{glo_i.html#instance,@emph{instance}} does not change its identity
as defined by the @uref{fun_eq.html#eq,@strong{eq}} function.

When
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
invoked on an @uref{glo_i.html#instance,@emph{instance}}, a two-step
updating process takes place. The first step modifies the structure of
the @uref{glo_i.html#instance,@emph{instance}} by adding new
@uref{glo_l.html#local_slot,@emph{local slots}} and discarding
@uref{glo_l.html#local_slot,@emph{local slots}} that are not specified
in the new version of the @uref{glo_i.html#instance,@emph{instance}}.
The second step initializes the newly added
@uref{glo_l.html#local_slot,@emph{local slots}} and performs any other
user-defined actions. These two steps are further described in the two
following sections.

@uref{sec_7-2-1.html,}

7.2.1 Modifying the Structure of the Instance

@uref{sec_7-2-2.html,}

7.2.2 Initializing Newly Added Local Slots

@uref{sec_7-2-3.html,}

7.2.3 Customizing the Change of Class of an Instance

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 722::
* CLHS Section 723::
@end menu

@node CLHS Section 722
@subsubsection CLHS: Section 7.2.2
@anchor{#clhs-section-7.2.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-2-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-2-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.2.2 Initializing Newly Added Local Slots

The second step of the update initializes the newly added
@uref{glo_s.html#slot,@emph{slots}} and performs any other user-defined
actions. This step is implemented by the generic function
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}.
The generic function
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
is invoked by
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}
after the first step of the update has been completed.

The generic function
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
is invoked on arguments computed by
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.
The first argument passed is a copy of the
@uref{glo_i.html#instance,@emph{instance}} being updated and is an
@uref{glo_i.html#instance,@emph{instance}} of the class Cfrom; this copy
has @uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} within the
generic function
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.
The second argument is the @uref{glo_i.html#instance,@emph{instance}} as
updated so far by
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}
and is an @uref{glo_i.html#instance,@emph{instance}} of the class Cto.
The remaining arguments are an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

There is a system-supplied primary
@uref{glo_m.html#method,@emph{method}} for
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
that has two parameter specializers, each of which is the
@uref{glo_c.html#class,@emph{class}}
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}.
First this @uref{glo_m.html#method,@emph{method}} checks the validity of
initialization arguments and signals an error if an initialization
argument is supplied that is not declared as valid. (For more
information, see @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the
Validity of Initialization Arguments)}.) Then it calls the generic
function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the new
@uref{glo_i.html#instance,@emph{instance}}, a list of
@uref{glo_n.html#name,@emph{names}} of the newly added
@uref{glo_s.html#slot,@emph{slots}}, and the initialization arguments it
received.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss023.html,CHANGE-CLASS-INITARGS:PERMIT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 723
@subsubsection CLHS: Section 7.2.3
@anchor{#clhs-section-7.2.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-2-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-2.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.2.3 Customizing the Change of Class of an Instance

@uref{glo_m.html#method,@emph{Methods}} for
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
may be defined to specify actions to be taken when an
@uref{glo_i.html#instance,@emph{instance}} is updated. If only
@uref{glo_a.html#after_method,@emph{after methods}} for
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
are defined, they will be run after the system-supplied primary
@uref{glo_m.html#method,@emph{method}} for initialization and will not
interfere with the default behavior of
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}.

@uref{glo_m.html#method,@emph{Methods}} for
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
may be defined to customize @uref{glo_c.html#class,@emph{class}}
redefinition. For more information, see @uref{sec_7-1-5.html,Section
7.1.5 (Shared-Initialize)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 73
@subsection CLHS: Section 7.3
@anchor{#clhs-section-7.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-2-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-3-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.3 Reinitializing an Instance

The generic function
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}}
may be used to change the values of @uref{glo_s.html#slot,@emph{slots}}
according to initialization arguments.

The process of reinitialization changes the values of some
@uref{glo_s.html#slot,@emph{slots}} and performs any user-defined
actions. It does not modify the structure of an
@uref{glo_i.html#instance,@emph{instance}} to add or delete
@uref{glo_s.html#slot,@emph{slots}}, and it does not use any :initform
forms to initialize @uref{glo_s.html#slot,@emph{slots}}.

The generic function
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}}
may be called directly. It takes one required argument, the
@uref{glo_i.html#instance,@emph{instance}}. It also takes any number of
initialization arguments to be used by
@uref{glo_m.html#method,@emph{methods}} for
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}}
or for
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}.
The arguments after the required
@uref{glo_i.html#instance,@emph{instance}} must form an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

There is a system-supplied primary
@uref{glo_m.html#method,@emph{method}} for
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}}
whose @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} is the @uref{glo_c.html#class,@emph{class}}
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}.
First this @uref{glo_m.html#method,@emph{method}} checks the validity of
initialization arguments and signals an error if an initialization
argument is supplied that is not declared as valid. (For more
information, see @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the
Validity of Initialization Arguments)}.) Then it calls the generic
function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the
@uref{glo_i.html#instance,@emph{instance}},
@uref{any_nil.html#nil,@strong{nil}}, and the initialization arguments
it received.

@uref{sec_7-3-1.html,}

7.3.1 Customizing Reinitialization

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 74
@subsection CLHS: Section 7.4
@anchor{#clhs-section-7.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-3-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-4-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.4 Meta-Objects

The implementation of the object system manipulates
@uref{glo_c.html#class,@emph{classes}},
@uref{glo_m.html#method,@emph{methods}}, and
@uref{glo_g.html#generic_function,@emph{generic functions}}. The object
system contains a set of @uref{glo_g.html#generic_function,@emph{generic
functions}} defined by @uref{glo_m.html#method,@emph{methods}} on
@uref{glo_c.html#class,@emph{classes}}; the behavior of those
@uref{glo_g.html#generic_function,@emph{generic functions}} defines the
behavior of the object system. The
@uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{classes}} on which those
@uref{glo_m.html#method,@emph{methods}} are defined are called
meta-objects.

@uref{sec_7-4-1.html,}

7.4.1 Standard Meta-objects

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 75
@subsection CLHS: Section 7.5
@anchor{#clhs-section-7.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-4-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.5 Slots

@uref{sec_7-5-1.html,}

7.5.1 Introduction to Slots

@uref{sec_7-5-2.html,}

7.5.2 Accessing Slots

@uref{sec_7-5-3.html,}

7.5.3 Inheritance of Slots and Slot Options

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 752::
* CLHS Section 753::
@end menu

@node CLHS Section 752
@subsubsection CLHS: Section 7.5.2
@anchor{#clhs-section-7.5.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-5-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-5-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.5.2 Accessing Slots

@uref{glo_s.html#slot,@emph{Slots}} can be @emph{accessed} in two ways:
by use of the primitive function
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} and by use of
@uref{glo_g.html#generic_function,@emph{generic functions}} generated by
the @uref{mac_defclass.html#defclass,@strong{defclass}} form.

The @uref{glo_f.html#function,@emph{function}}
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} can be used
with any of the @uref{glo_s.html#slot,@emph{slot}} names specified in
the @uref{mac_defclass.html#defclass,@strong{defclass}} form to
@uref{glo_a.html#access,@emph{access}} a specific
@uref{glo_s.html#slot,@emph{slot}}
@uref{glo_a.html#accessible,@emph{accessible}} in an
@uref{glo_i.html#instance,@emph{instance}} of the given
@uref{glo_c.html#class,@emph{class}}.

The macro @uref{mac_defclass.html#defclass,@strong{defclass}} provides
syntax for generating @uref{glo_m.html#method,@emph{methods}} to read
and write @uref{glo_s.html#slot,@emph{slots}}. If a reader
@uref{glo_m.html#method,@emph{method}} is requested, a
@uref{glo_m.html#method,@emph{method}} is automatically generated for
reading the value of the @uref{glo_s.html#slot,@emph{slot}}, but no
@uref{glo_m.html#method,@emph{method}} for storing a value into it is
generated. If a writer @uref{glo_m.html#method,@emph{method}} is
requested, a @uref{glo_m.html#method,@emph{method}} is automatically
generated for storing a value into the
@uref{glo_s.html#slot,@emph{slot}}, but no
@uref{glo_m.html#method,@emph{method}} for reading its value is
generated. If an accessor @uref{glo_m.html#method,@emph{method}} is
requested, a @uref{glo_m.html#method,@emph{method}} for reading the
value of the @uref{glo_s.html#slot,@emph{slot}} and a
@uref{glo_m.html#method,@emph{method}} for storing a value into the
@uref{glo_s.html#slot,@emph{slot}} are automatically generated. Reader
and writer @uref{glo_m.html#method,@emph{methods}} are implemented using
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

When a reader or writer @uref{glo_m.html#method,@emph{method}} is
specified for a @uref{glo_s.html#slot,@emph{slot}}, the name of the
@uref{glo_g.html#generic_function,@emph{generic function}} to which the
generated @uref{glo_m.html#method,@emph{method}} belongs is directly
specified. If the @uref{glo_n.html#name,@emph{name}} specified for the
writer @uref{glo_m.html#method,@emph{method}} is the symbol name, the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} for writing
the @uref{glo_s.html#slot,@emph{slot}} is the symbol name, and the
@uref{glo_g.html#generic_function,@emph{generic function}} takes two
arguments: the new value and the
@uref{glo_i.html#instance,@emph{instance}}, in that order. If the
@uref{glo_n.html#name,@emph{name}} specified for the accessor
@uref{glo_m.html#method,@emph{method}} is the symbol name, the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} for reading
the @uref{glo_s.html#slot,@emph{slot}} is the symbol name, and the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} for writing
the @uref{glo_s.html#slot,@emph{slot}} is the list (setf name).

A @uref{glo_g.html#generic_function,@emph{generic function}} created or
modified by supplying :reader, :writer, or :accessor
@uref{glo_s.html#slot,@emph{slot}} options can be treated exactly as an
ordinary @uref{glo_g.html#generic_function,@emph{generic function}}.

Note that @uref{fun_slot-value.html#slot-value,@strong{slot-value}} can
be used to read or write the value of a
@uref{glo_s.html#slot,@emph{slot}} whether or not reader or writer
@uref{glo_m.html#method,@emph{methods}} exist for that
@uref{glo_s.html#slot,@emph{slot}}. When
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} is used, no
reader or writer @uref{glo_m.html#method,@emph{methods}} are invoked.

The macro @uref{mac_with-slots.html#with-slots,@strong{with-slots}} can
be used to establish a
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which specified @uref{glo_s.html#slot,@emph{slots}} are lexically
available as if they were variables. The macro
@uref{mac_with-slots.html#with-slots,@strong{with-slots}} invokes the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} to
@uref{glo_a.html#access,@emph{access}} the specified
@uref{glo_s.html#slot,@emph{slots}}.

The macro
@uref{mac_with-accessors.html#with-accessors,@strong{with-accessors}}
can be used to establish a lexical environment in which specified
@uref{glo_s.html#slot,@emph{slots}} are lexically available through
their accessors as if they were variables. The macro
@uref{mac_with-accessors.html#with-accessors,@strong{with-accessors}}
invokes the appropriate accessors to
@uref{glo_a.html#access,@emph{access}} the specified
@uref{glo_s.html#slot,@emph{slots}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 753
@subsubsection CLHS: Section 7.5.3
@anchor{#clhs-section-7.5.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-5-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-5.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.5.3 Inheritance of Slots and Slot Options

The set of the @uref{glo_n.html#name,@emph{names}} of all
@uref{glo_s.html#slot,@emph{slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in an
@uref{glo_i.html#instance,@emph{instance}} of a
@uref{glo_c.html#class,@emph{class}} C is the union of the sets of
@uref{glo_n.html#name,@emph{names}} of
@uref{glo_s.html#slot,@emph{slots}} defined by C and its
@uref{glo_s.html#superclass,@emph{superclasses}}. The structure of an
@uref{glo_i.html#instance,@emph{instance}} is the set of
@uref{glo_n.html#name,@emph{names}} of
@uref{glo_l.html#local_slot,@emph{local slots}} in that
@uref{glo_i.html#instance,@emph{instance}}.

In the simplest case, only one @uref{glo_c.html#class,@emph{class}}
among C and its @uref{glo_s.html#superclass,@emph{superclasses}} defines
a @uref{glo_s.html#slot,@emph{slot}} with a given
@uref{glo_s.html#slot,@emph{slot}} name. If a
@uref{glo_s.html#slot,@emph{slot}} is defined by a
@uref{glo_s.html#superclass,@emph{superclass}} of C, the
@uref{glo_s.html#slot,@emph{slot}} is said to be inherited. The
characteristics of the @uref{glo_s.html#slot,@emph{slot}} are determined
by the @uref{glo_s.html#slot_specifier,@emph{slot specifier}} of the
defining @uref{glo_c.html#class,@emph{class}}. Consider the defining
@uref{glo_c.html#class,@emph{class}} for a slot S. If the value of the
:allocation slot option is :instance, then S is a
@uref{glo_l.html#local_slot,@emph{local slot}} and each
@uref{glo_i.html#instance,@emph{instance}} of C has its own
@uref{glo_s.html#slot,@emph{slot}} named S that stores its own value. If
the value of the :allocation slot option is :class, then S is a
@uref{glo_s.html#shared_slot,@emph{shared slot}}, the
@uref{glo_c.html#class,@emph{class}} that defined S stores the value,
and all @uref{glo_i.html#instance,@emph{instances}} of C can
@uref{glo_a.html#access,@emph{access}} that single
@uref{glo_s.html#slot,@emph{slot}}. If the :allocation slot option is
omitted, :instance is used.

In general, more than one @uref{glo_c.html#class,@emph{class}} among C
and its @uref{glo_s.html#superclass,@emph{superclasses}} can define a
@uref{glo_s.html#slot,@emph{slot}} with a given
@uref{glo_n.html#name,@emph{name}}. In such cases, only one
@uref{glo_s.html#slot,@emph{slot}} with the given name is
@uref{glo_a.html#accessible,@emph{accessible}} in an
@uref{glo_i.html#instance,@emph{instance}} of C, and the characteristics
of that @uref{glo_s.html#slot,@emph{slot}} are a combination of the
several @uref{glo_s.html#slot,@emph{slot}} specifiers, computed as
follows:

* All the @uref{glo_s.html#slot_specifier,@emph{slot specifiers}} for a
given @uref{glo_s.html#slot,@emph{slot}} name are ordered from most
specific to least specific, according to the order in C's
@uref{glo_c.html#class_precedence_list,@emph{class precedence list}} of
the @uref{glo_c.html#class,@emph{classes}} that define them. All
references to the specificity of
@uref{glo_s.html#slot_specifier,@emph{slot specifiers}} immediately
below refers to this ordering.

* The allocation of a @uref{glo_s.html#slot,@emph{slot}} is controlled
by the most specific @uref{glo_s.html#slot_specifier,@emph{slot
specifier}}. If the most specific
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} does not contain
an :allocation slot option, :instance is used. Less specific
@uref{glo_s.html#slot_specifier,@emph{slot specifiers}} do not affect
the allocation.

* The default initial value form for a
@uref{glo_s.html#slot,@emph{slot}} is the value of the :initform slot
option in the most specific @uref{glo_s.html#slot_specifier,@emph{slot
specifier}} that contains one. If no
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} contains an
:initform slot option, the @uref{glo_s.html#slot,@emph{slot}} has no
default initial value form.

* The contents of a @uref{glo_s.html#slot,@emph{slot}} will always be of
type (and T1 ... Tn) where T1 ...Tn are the values of the :type slot
options contained in all of the
@uref{glo_s.html#slot_specifier,@emph{slot specifiers}}. If no
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} contains the
:type slot option, the contents of the
@uref{glo_s.html#slot,@emph{slot}} will always be of
@uref{glo_t.html#type,@emph{type}} @uref{syscla_t.html#t,@strong{t}}.
The consequences of attempting to store in a
@uref{glo_s.html#slot,@emph{slot}} a value that does not satisfy the
@uref{glo_t.html#type,@emph{type}} of the
@uref{glo_s.html#slot,@emph{slot}} are undefined.

* The set of initialization arguments that initialize a given
@uref{glo_s.html#slot,@emph{slot}} is the union of the initialization
arguments declared in the :initarg slot options in all the
@uref{glo_s.html#slot_specifier,@emph{slot specifiers}}.

* The @uref{glo_d.html#documentation_string,@emph{documentation string}}
for a @uref{glo_s.html#slot,@emph{slot}} is the value of the
:documentation slot option in the most specific
@uref{glo_s.html#slot,@emph{slot}} specifier that contains one. If no
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} contains a
:documentation slot option, the @uref{glo_s.html#slot,@emph{slot}} has
no @uref{glo_d.html#documentation_string,@emph{documentation string}}.

A consequence of the allocation rule is that a
@uref{glo_s.html#shared_slot,@emph{shared slot}} can be @emph{shadowed}.
For example, if a class C1 defines a @uref{glo_s.html#slot,@emph{slot}}
named S whose value for the :allocation slot option is :class, that
@uref{glo_s.html#slot,@emph{slot}} is
@uref{glo_a.html#accessible,@emph{accessible}} in
@uref{glo_i.html#instance,@emph{instances}} of C1 and all of its
@uref{glo_s.html#subclass,@emph{subclasses}}. However, if C2 is a
@uref{glo_s.html#subclass,@emph{subclass}} of C1 and also defines a
@uref{glo_s.html#slot,@emph{slot}} named S, C1's
@uref{glo_s.html#slot,@emph{slot}} is not shared by
@uref{glo_i.html#instance,@emph{instances}} of C2 and its
@uref{glo_s.html#subclass,@emph{subclasses}}. When a class C1 defines a
@uref{glo_s.html#shared_slot,@emph{shared slot}}, any subclass C2 of C1
will share this single @uref{glo_s.html#slot,@emph{slot}} unless the
@uref{mac_defclass.html#defclass,@strong{defclass}} form for C2
specifies a @uref{glo_s.html#slot,@emph{slot}} of the same
@uref{glo_n.html#name,@emph{name}} or there is a
@uref{glo_s.html#superclass,@emph{superclass}} of C2 that precedes C1 in
the @uref{glo_c.html#class_precedence_list,@emph{class precedence list}}
of C2 that defines a @uref{glo_s.html#slot,@emph{slot}} of the same
name.

A consequence of the type rule is that the value of a
@uref{glo_s.html#slot,@emph{slot}} satisfies the type constraint of each
@uref{glo_s.html#slot_specifier,@emph{slot specifier}} that contributes
to that @uref{glo_s.html#slot,@emph{slot}}. Because the result of
attempting to store in a @uref{glo_s.html#slot,@emph{slot}} a value that
does not satisfy the type constraint for the
@uref{glo_s.html#slot,@emph{slot}} is undefined, the value in a
@uref{glo_s.html#slot,@emph{slot}} might fail to satisfy its type
constraint.

The :reader, :writer, and :accessor slot options create
@uref{glo_m.html#method,@emph{methods}} rather than define the
characteristics of a @uref{glo_s.html#slot,@emph{slot}}. Reader and
writer @uref{glo_m.html#method,@emph{methods}} are inherited in the
sense described in @uref{sec_7-6-7.html,Section 7.6.7 (Inheritance of
Methods)}.

@uref{glo_m.html#method,@emph{Methods}} that
@uref{glo_a.html#access,@emph{access}}
@uref{glo_s.html#slot,@emph{slots}} use only the name of the
@uref{glo_s.html#slot,@emph{slot}} and the
@uref{glo_t.html#type,@emph{type}} of the
@uref{glo_s.html#slot,@emph{slot}}'s value. Suppose a
@uref{glo_s.html#superclass,@emph{superclass}} provides a
@uref{glo_m.html#method,@emph{method}} that expects to
@uref{glo_a.html#access,@emph{access}} a
@uref{glo_s.html#shared_slot,@emph{shared slot}} of a given
@uref{glo_n.html#name,@emph{name}}, and a
@uref{glo_s.html#subclass,@emph{subclass}} defines a
@uref{glo_l.html#local_slot,@emph{local slot}} with the same
@uref{glo_n.html#name,@emph{name}}. If the
@uref{glo_m.html#method,@emph{method}} provided by the
@uref{glo_s.html#superclass,@emph{superclass}} is used on an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_s.html#subclass,@emph{subclass}}, the
@uref{glo_m.html#method,@emph{method}}
@uref{glo_a.html#access,@emph{accesses}} the
@uref{glo_l.html#local_slot,@emph{local slot}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 76
@subsection CLHS: Section 7.6
@anchor{#clhs-section-7.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-5-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6 Generic Functions and Methods

@uref{sec_7-6-1.html,}

7.6.1 Introduction to Generic Functions

@uref{sec_7-6-2.html,}

7.6.2 Introduction to Methods

@uref{sec_7-6-3.html,}

7.6.3 Agreement on Parameter Specializers and Qualifiers

@uref{sec_7-6-4.html,}

7.6.4 Congruent Lambda-lists for all Methods of a Generic Function

@uref{sec_7-6-5.html,}

7.6.5 Keyword Arguments in Generic Functions and Methods

@uref{sec_7-6-6.html,}

7.6.6 Method Selection and Combination

@uref{sec_7-6-7.html,}

7.6.7 Inheritance of Methods

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section 762::
* CLHS Section 763::
* CLHS Section 764::
* CLHS Section 765::
* CLHS Section 766::
* CLHS Section 767::
@end menu

@node CLHS Section 762
@subsubsection CLHS: Section 7.6.2
@anchor{#clhs-section-7.6.2}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.2 Introduction to Methods

@uref{glo_m.html#method,@emph{Methods}} define the class-specific or
identity-specific behavior and operations of a
@uref{glo_g.html#generic_function,@emph{generic function}}.

A @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} is associated with
@uref{glo_c.html#code,@emph{code}} that implements the method's
behavior, a sequence of
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
that specify when the given @uref{glo_m.html#method,@emph{method}} is
applicable, a @uref{glo_l.html#lambda_list,@emph{lambda list}}, and a
sequence of @uref{glo_q.html#qualifier,@emph{qualifiers}} that are used
by the method combination facility to distinguish among
@uref{glo_m.html#method,@emph{methods}}.

A method object is not a function and cannot be invoked as a function.
Various mechanisms in the object system take a method object and invoke
its method function, as is the case when a generic function is invoked.
When this occurs it is said that the method is invoked or called.

A method-defining form contains the @uref{glo_c.html#code,@emph{code}}
that is to be run when the arguments to the generic function cause the
method that it defines to be invoked. When a method-defining form is
evaluated, a method object is created and one of four actions is taken:

* If a @uref{glo_g.html#generic_function,@emph{generic function}} of the
given name already exists and if a
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} already exists that agrees with
the new one on @uref{glo_p.html#parameter_specializer,@emph{parameter
specializers}} and @uref{glo_q.html#qualifier,@emph{qualifiers}}, the
new @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} replaces the old one. For a
definition of one method agreeing with another on
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
and @uref{glo_q.html#qualifier,@emph{qualifiers}}, see
@uref{sec_7-6-3.html,Section 7.6.3 (Agreement on Parameter Specializers
and Qualifiers)}.

* If a @uref{glo_g.html#generic_function,@emph{generic function}} of the
given name already exists and if there is no
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} that agrees with the new one on
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
and @uref{glo_q.html#qualifier,@emph{qualifiers}}, the existing
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_o.html#object,@emph{object}} is modified to contain the new
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}.

* If the given @uref{glo_n.html#name,@emph{name}} names an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error is
signaled.

* Otherwise a @uref{glo_g.html#generic_function,@emph{generic function}}
is created with the @uref{glo_m.html#method,@emph{method}} specified by
the @uref{glo_m.html#method-defining_form,@emph{method-defining form}}.

If the @uref{glo_l.html#lambda_list,@emph{lambda list}} of a new
@uref{glo_m.html#method,@emph{method}} is not
@uref{glo_c.html#congruent,@emph{congruent}} with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}, an error is
signaled. If a
@uref{glo_m.html#method-defining_operator,@emph{method-defining
operator}} that cannot specify
@uref{glo_g.html#generic_function,@emph{generic function}} options
creates a new @uref{glo_g.html#generic_function,@emph{generic
function}}, a @uref{glo_l.html#lambda_list,@emph{lambda list}} for that
@uref{glo_g.html#generic_function,@emph{generic function}} is derived
from the @uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_m.html#method,@emph{method}} in the
@uref{glo_m.html#method-defining_form,@emph{method-defining form}} in
such a way as to be @uref{glo_c.html#congruent,@emph{congruent}} with
it. For a discussion of @emph{congruence}, see
@uref{sec_7-6-4.html,Section 7.6.4 (Congruent Lambda-lists for all
Methods of a Generic Function)}.

Each method has a
@uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda
list}}, which determines when that method can be applied. A
@uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda list}}
is like an @uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda
list}} except that a specialized parameter may occur instead of the name
of a required parameter. A specialized parameter is a list
(@emph{variable-name} @emph{parameter-specializer-name}), where
@emph{parameter-specializer-name} is one of the following:

a @uref{glo_s.html#symbol,@emph{symbol}}

denotes a @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} which is the @uref{glo_c.html#class,@emph{class}} named by
that @uref{glo_s.html#symbol,@emph{symbol}}.

a @uref{glo_c.html#class,@emph{class}}

denotes a @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} which is the @uref{glo_c.html#class,@emph{class}} itself.

(eql @emph{form})

denotes a @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} which satisfies the
@uref{glo_t.html#type_specifier,@emph{type specifier}} (eql
@emph{object}), where @emph{object} is the result of evaluating
@emph{form}. The form @emph{form} is evaluated in the lexical
environment in which the method-defining form is evaluated. Note that
@emph{form} is evaluated only once, at the time the method is defined,
not each time the generic function is called.

@uref{glo_p.html#parameter_specializer_name,@emph{Parameter specializer
names}} are used in macros intended as the user-level interface
(@uref{mac_defmethod.html#defmethod,@strong{defmethod}}), while
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
are used in the functional interface.

Only required parameters may be specialized, and there must be a
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}} for
each required parameter. For notational simplicity, if some required
parameter in a
@uref{glo_s.html#specialized_lambda_list,@emph{specialized lambda list}}
in a method-defining form is simply a variable name, its
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}}
defaults to the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}}.

Given a generic function and a set of arguments, an applicable method is
a method for that generic function whose parameter specializers are
satisfied by their corresponding arguments. The following definition
specifies what it means for a method to be applicable and for an
argument to satisfy a
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}}.

Let <A1, ..., An> be the required arguments to a generic function in
order. Let <P1, ..., Pn> be the
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
corresponding to the required parameters of the method M in order. The
method M is applicable when each Ai is of the
@uref{glo_t.html#type,@emph{type}} specified by the
@uref{glo_t.html#type_specifier,@emph{type specifier}} Pi. Because every
valid @uref{glo_p.html#parameter_specializer,@emph{parameter
specializer}} is also a valid @uref{glo_t.html#type_specifier,@emph{type
specifier}}, the @uref{glo_f.html#function,@emph{function}}
@uref{fun_typep.html#typep,@strong{typep}} can be used during method
selection to determine whether an argument satisfies a
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}}.

A method all of whose
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
are the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}} is called a
@uref{glo_d.html#default_method,@emph{default method}}; it is always
applicable but may be shadowed by a more specific method.

Methods can have @uref{glo_q.html#qualifier,@emph{qualifiers}}, which
give the method combination procedure a way to distinguish among
methods. A method that has one or more
@uref{glo_q.html#qualifier,@emph{qualifiers}} is called a
@uref{glo_q.html#qualified_method,@emph{qualified method}}. A method
with no @uref{glo_q.html#qualifier,@emph{qualifiers}} is called an
@uref{glo_u.html#unqualified_method,@emph{unqualified method}}. A
@uref{glo_q.html#qualifier,@emph{qualifier}} is any
@uref{glo_n.html#non-list,@emph{non-list}}. The
@uref{glo_q.html#qualifier,@emph{qualifiers}} defined by the
@uref{glo_s.html#standardized,@emph{standardized}} method combination
types are @uref{glo_s.html#symbol,@emph{symbols}}.

In this specification, the terms
``@uref{glo_p.html#primary_method,@emph{primary method}}'' and
``@uref{glo_a.html#auxiliary_method,@emph{auxiliary method}}'' are used
to partition @uref{glo_m.html#method,@emph{methods}} within a method
combination type according to their intended use. In standard method
combination, @uref{glo_p.html#primary_method,@emph{primary methods}} are
@uref{glo_u.html#unqualified_method,@emph{unqualified methods}} and
@uref{glo_a.html#auxiliary_method,@emph{auxiliary methods}} are methods
with a single @uref{glo_q.html#qualifier,@emph{qualifier}} that is one
of :around, :before, or :after. @uref{glo_m.html#method,@emph{Methods}}
with these @uref{glo_q.html#qualifier,@emph{qualifiers}} are called
@uref{glo_a.html#around_method,@emph{around methods}},
@uref{glo_b.html#before_method,@emph{before methods}}, and
@uref{glo_a.html#after_method,@emph{after methods}}, respectively. When
a method combination type is defined using the short form of
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}},
@uref{glo_p.html#primary_method,@emph{primary methods}} are methods
qualified with the name of the type of method combination, and auxiliary
methods have the @uref{glo_q.html#qualifier,@emph{qualifier}} :around.
Thus the terms ``@uref{glo_p.html#primary_method,@emph{primary
method}}'' and ``@uref{glo_a.html#auxiliary_method,@emph{auxiliary
method}}'' have only a relative definition within a given method
combination type.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss047.html,CLASS-OBJECT-SPECIALIZER:AFFIRM}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 763
@subsubsection CLHS: Section 7.6.3
@anchor{#clhs-section-7.6.3}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.3 Agreement on Parameter Specializers and Qualifiers

Two @uref{glo_m.html#method,@emph{methods}} are said to agree with each
other on @uref{glo_p.html#parameter_specializer,@emph{parameter
specializers}} and @uref{glo_q.html#qualifier,@emph{qualifiers}} if the
following conditions hold:

1. Both methods have the same number of required parameters. Suppose the
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}} of
the two methods are P1,1...P1,n and P2,1...P2,n.

2. For each 1<=i<=n, P1,i agrees with P2,i. The
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}}
P1,i agrees with P2,i if P1,i and P2,i are the same class or if
P1,i=(@strong{eql} @emph{object}1), P2,i=(@strong{eql} @emph{object}2),
and (@strong{eql} @emph{object}1 @emph{object}2). Otherwise P1,i and
P2,i do not agree.

3. The two @uref{glo_l.html#list,@emph{lists}} of
@uref{glo_q.html#qualifier,@emph{qualifiers}} are the
@uref{glo_s.html#same,@emph{same}} under
@uref{fun_equal.html#equal,@strong{equal}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 764
@subsubsection CLHS: Section 7.6.4
@anchor{#clhs-section-7.6.4}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-5.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.4 Congruent Lambda-lists for all Methods of a Generic Function

These rules define the congruence of a set of
@uref{glo_l.html#lambda_list,@emph{lambda lists}}, including the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of each method for a
given generic function and the @uref{glo_l.html#lambda_list,@emph{lambda
list}} specified for the generic function itself, if given.

1. Each @uref{glo_l.html#lambda_list,@emph{lambda list}} must have the
same number of required parameters.

2. Each @uref{glo_l.html#lambda_list,@emph{lambda list}} must have the
same number of optional parameters. Each method can supply its own
default for an optional parameter.

3. If any @uref{glo_l.html#lambda_list,@emph{lambda list}} mentions
&rest or &key, each @uref{glo_l.html#lambda_list,@emph{lambda list}}
must mention one or both of them.

4. If the @uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_l.html#lambda_list,@emph{lambda list}} mentions &key, each
method must accept all of the keyword names mentioned after &key, either
by accepting them explicitly, by specifying &allow-other-keys, or by
specifying &rest but not &key. Each method can accept additional keyword
arguments of its own. The checking of the validity of keyword names is
done in the generic function, not in each method. A method is invoked as
if the keyword argument pair whose name is :allow-other-keys and whose
value is @uref{glo_t.html#true,@emph{true}} were supplied, though no
such argument pair will be passed.

5. The use of &allow-other-keys need not be consistent across
@uref{glo_l.html#lambda_list,@emph{lambda lists}}. If &allow-other-keys
is mentioned in the @uref{glo_l.html#lambda_list,@emph{lambda list}} of
any applicable @uref{glo_m.html#method,@emph{method}} or of the
@uref{glo_g.html#generic_function,@emph{generic function}}, any keyword
arguments may be mentioned in the call to the
@uref{glo_g.html#generic_function,@emph{generic function}}.

6. The use of &aux need not be consistent across methods.

If a @uref{glo_m.html#method-defining_operator,@emph{method-defining
operator}} that cannot specify
@uref{glo_g.html#generic_function,@emph{generic function}} options
creates a @uref{glo_g.html#generic_function,@emph{generic function}},
and if the @uref{glo_l.html#lambda_list,@emph{lambda list}} for the
method mentions keyword arguments, the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the generic function
will mention &key (but no keyword arguments).

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 765
@subsubsection CLHS: Section 7.6.5
@anchor{#clhs-section-7.6.5}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-5-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.5 Keyword Arguments in Generic Functions and Methods

When a generic function or any of its methods mentions &key in a
@uref{glo_l.html#lambda_list,@emph{lambda list}}, the specific set of
keyword arguments accepted by the generic function varies according to
the applicable methods. The set of keyword arguments accepted by the
generic function for a particular call is the union of the keyword
arguments accepted by all applicable methods and the keyword arguments
mentioned after &key in the generic function definition, if any. A
method that has &rest but not &key does not affect the set of acceptable
keyword arguments. If the @uref{glo_l.html#lambda_list,@emph{lambda
list}} of any applicable method or of the generic function definition
contains &allow-other-keys, all keyword arguments are accepted by the
generic function.

The @uref{glo_l.html#lambda_list,@emph{lambda list}} congruence rules
require that each method accept all of the keyword arguments mentioned
after &key in the generic function definition, by accepting them
explicitly, by specifying &allow-other-keys, or by specifying &rest but
not &key. Each method can accept additional keyword arguments of its
own, in addition to the keyword arguments mentioned in the generic
function definition.

If a @uref{glo_g.html#generic_function,@emph{generic function}} is
passed a keyword argument that no applicable method accepts, an error
should be signaled; see @uref{sec_3-5.html,Section 3.5 (Error Checking
in Function Calls)}.

@uref{sec_7-6-5-1.html,}

7.6.5.1 Examples of Keyword Arguments in Generic Functions and Methods

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 766
@subsubsection CLHS: Section 7.6.6
@anchor{#clhs-section-7.6.6}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-5-1.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-6-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.6 Method Selection and Combination

When a @uref{glo_g.html#generic_function,@emph{generic function}} is
called with particular arguments, it must determine the code to execute.
This code is called the
@uref{glo_e.html#effective_method,@emph{effective method}} for those
@uref{glo_a.html#argument,@emph{arguments}}. The
@uref{glo_e.html#effective_method,@emph{effective method}} is a
combination of the @uref{glo_a.html#applicable_method,@emph{applicable
methods}} in the @uref{glo_g.html#generic_function,@emph{generic
function}} that @uref{glo_c.html#call,@emph{calls}} some or all of the
@uref{glo_m.html#method,@emph{methods}}.

If a @uref{glo_g.html#generic_function,@emph{generic function}} is
called and no @uref{glo_m.html#method,@emph{methods}} are
@uref{glo_a.html#applicable,@emph{applicable}}, the
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{stagenfun_no-_cable-method.html#no-applicable-method,@strong{no-applicable-method}}
is invoked, with the @emph{results} from that call being used as the
@emph{results} of the call to the original
@uref{glo_g.html#generic_function,@emph{generic function}}. Calling
@uref{stagenfun_no-_cable-method.html#no-applicable-method,@strong{no-applicable-method}}
takes precedence over checking for acceptable keyword arguments; see
@uref{sec_7-6-5.html,Section 7.6.5 (Keyword Arguments in Generic
Functions and Methods)}.

When the @uref{glo_e.html#effective_method,@emph{effective method}} has
been determined, it is invoked with the same
@uref{glo_a.html#argument,@emph{arguments}} as were passed to the
@uref{glo_g.html#generic_function,@emph{generic function}}. Whatever
@uref{glo_v.html#value,@emph{values}} it returns are returned as the
@uref{glo_v.html#value,@emph{values}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}.

@uref{sec_7-6-6-1.html,}

7.6.6.1 Determining the Effective Method

@uref{sec_7-6-6-2.html,}

7.6.6.2 Standard Method Combination

@uref{sec_7-6-6-3.html,}

7.6.6.3 Declarative Method Combination

@uref{sec_7-6-6-4.html,}

7.6.6.4 Built-in Method Combination Types

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss050.html,CLOS-ERROR-CHECKING-ORDER:NO-APPLICABLE-METHOD-FIRST}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 7.6.6.2
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-6-1-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-6-3.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.6.2 Standard Method Combination

Standard method combination is supported by the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_standa_ric-function.html#standard-generic-function,@strong{standard-generic-function}}.
It is used if no other type of method combination is specified or if the
built-in method combination type @ref{#standard,@strong{standard}} is
specified.

Primary methods define the main action of the effective method, while
auxiliary methods modify that action in one of three ways. A primary
method has no method @uref{glo_q.html#qualifier,@emph{qualifiers}}.

An auxiliary method is a method whose
@uref{glo_q.html#qualifier,@emph{qualifier}} is :before, :after, or
:around. Standard method combination allows no more than one
@uref{glo_q.html#qualifier,@emph{qualifier}} per method; if a method
definition specifies more than one
@uref{glo_q.html#qualifier,@emph{qualifier}} per method, an error is
signaled.

* A @uref{glo_b.html#before_method,@emph{before method}} has the keyword
:before as its only @uref{glo_q.html#qualifier,@emph{qualifier}}. A
@uref{glo_b.html#before_method,@emph{before method}} specifies
@uref{glo_c.html#code,@emph{code}} that is to be run before any
@uref{glo_p.html#primary_method,@emph{primary methods}}.

* An @uref{glo_a.html#after_method,@emph{after method}} has the keyword
:after as its only @uref{glo_q.html#qualifier,@emph{qualifier}}. An
@uref{glo_a.html#after_method,@emph{after method}} specifies
@uref{glo_c.html#code,@emph{code}} that is to be run after
@uref{glo_p.html#primary_method,@emph{primary methods}}.

* An @uref{glo_a.html#around_method,@emph{around method}} has the
keyword :around as its only
@uref{glo_q.html#qualifier,@emph{qualifier}}. An
@uref{glo_a.html#around_method,@emph{around method}} specifies
@uref{glo_c.html#code,@emph{code}} that is to be run instead of other
@uref{glo_a.html#applicable_method,@emph{applicable methods}}, but which
might contain explicit @uref{glo_c.html#code,@emph{code}} which calls
some of those @emph{shadowed} @uref{glo_m.html#method,@emph{methods}}
(via
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}).

The semantics of standard method combination is as follows:

* If there are any @uref{glo_a.html#around_method,@emph{around
methods}}, the most specific @uref{glo_a.html#around_method,@emph{around
method}} is called. It supplies the value or values of the generic
function.

* Inside the body of an @uref{glo_a.html#around_method,@emph{around
method}},
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
can be used to call the @uref{glo_n.html#next_method,@emph{next
method}}. When the next method returns, the
@uref{glo_a.html#around_method,@emph{around method}} can execute more
code, perhaps based on the returned value or values. The
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{stagenfun_no-next-method.html#no-next-method,@strong{no-next-method}}
is invoked if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is used and there is no
@uref{glo_a.html#applicable_method,@emph{applicable method}} to call.
The @uref{glo_f.html#function,@emph{function}}
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
may be used to determine whether a
@uref{glo_n.html#next_method,@emph{next method}} exists.

* If an @uref{glo_a.html#around_method,@emph{around method}} invokes
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}},
the next most specific @uref{glo_a.html#around_method,@emph{around
method}} is called, if one is applicable. If there are no
@uref{glo_a.html#around_method,@emph{around methods}} or if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is called by the least specific
@uref{glo_a.html#around_method,@emph{around method}}, the other methods
are called as follows:

-- All the @uref{glo_b.html#before_method,@emph{before methods}} are
called, in most-specific-first order. Their values are ignored. An error
is signaled if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is used in a @uref{glo_b.html#before_method,@emph{before method}}.

-- The most specific primary method is called. Inside the body of a
primary method,
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
may be used to call the next most specific primary method. When that
method returns, the previous primary method can execute more code,
perhaps based on the returned value or values. The generic function
@uref{stagenfun_no-next-method.html#no-next-method,@strong{no-next-method}}
is invoked if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is used and there are no more applicable primary methods. The
@uref{glo_f.html#function,@emph{function}}
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
may be used to determine whether a
@uref{glo_n.html#next_method,@emph{next method}} exists. If
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is not used, only the most specific
@uref{glo_p.html#primary_method,@emph{primary method}} is called.

-- All the @uref{glo_a.html#after_method,@emph{after methods}} are
called in most-specific-last order. Their values are ignored. An error
is signaled if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is used in an @uref{glo_a.html#after_method,@emph{after method}}.

* If no @uref{glo_a.html#around_method,@emph{around methods}} were
invoked, the most specific primary method supplies the value or values
returned by the generic function. The value or values returned by the
invocation of
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
in the least specific @uref{glo_a.html#around_method,@emph{around
method}} are those returned by the most specific primary method.

In standard method combination, if there is an applicable method but no
applicable primary method, an error is signaled.

The @uref{glo_b.html#before_method,@emph{before methods}} are run in
most-specific-first order while the
@uref{glo_a.html#after_method,@emph{after methods}} are run in
least-specific-first order. The design rationale for this difference can
be illustrated with an example. Suppose class C1 modifies the behavior
of its superclass, C2, by adding
@uref{glo_b.html#before_method,@emph{before methods}} and
@uref{glo_a.html#after_method,@emph{after methods}}. Whether the
behavior of the class C2 is defined directly by methods on C2 or is
inherited from its superclasses does not affect the relative order of
invocation of methods on instances of the class C1. Class C1's
@uref{glo_b.html#before_method,@emph{before method}} runs before all of
class C2's methods. Class C1's @uref{glo_a.html#after_method,@emph{after
method}} runs after all of class C2's methods.

By contrast, all @uref{glo_a.html#around_method,@emph{around methods}}
run before any other methods run. Thus a less specific
@uref{glo_a.html#around_method,@emph{around method}} runs before a more
specific primary method.

If only primary methods are used and if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is not used, only the most specific method is invoked; that is, more
specific methods shadow more general ones.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 7.6.6.3
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-6-2.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-6-4.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.6.3 Declarative Method Combination

The macro
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}
defines new forms of method combination. It provides a mechanism for
customizing the production of the effective method. The default
procedure for producing an effective method is described in
@uref{sec_7-6-6-1.html,Section 7.6.6.1 (Determining the Effective
Method)}. There are two forms of
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}.
The short form is a simple facility while the long form is more powerful
and more verbose. The long form resembles
@uref{mac_defmacro.html#defmacro,@strong{defmacro}} in that the body is
an expression that computes a Lisp form; it provides mechanisms for
implementing arbitrary control structures within method combination and
for arbitrary processing of method
@uref{glo_q.html#qualifier,@emph{qualifiers}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}
CLHS: Section 7.6.6.4
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-6-3.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_7-6-7.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.6.4 Built-in Method Combination Types

The object system provides a set of built-in method combination types.
To specify that a generic function is to use one of these method
combination types, the name of the method combination type is given as
the argument to the :method-combination option to
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}} or to the
:method-combination option to any of the other operators that specify
generic function options.

The names of the built-in method combination types are listed in the
next figure.

@verbatim
+    append  max  nconc  progn     
and  list    min  or     standard  
@end verbatim

@strong{Figure 7-2. Built-in Method Combination Types}

The semantics of the @uref{sec_7-6-6-2.html#standard,@strong{standard}}
built-in method combination type is described in
@uref{sec_7-6-6-2.html,Section 7.6.6.2 (Standard Method Combination)}.
The other built-in method combination types are called simple built-in
method combination types.

The simple built-in method combination types act as though they were
defined by the short form of
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}.
They recognize two roles for @uref{glo_m.html#method,@emph{methods}}:

* An @uref{glo_a.html#around_method,@emph{around method}} has the
keyword symbol :around as its sole
@uref{glo_q.html#qualifier,@emph{qualifier}}. The meaning of :around
@uref{glo_m.html#method,@emph{methods}} is the same as in standard
method combination. Use of the functions
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
and
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}} is
supported in @uref{glo_a.html#around_method,@emph{around methods}}.

* A primary method has the name of the method combination type as its
sole @uref{glo_q.html#qualifier,@emph{qualifier}}. For example, the
built-in method combination type and recognizes methods whose sole
@uref{glo_q.html#qualifier,@emph{qualifier}} is and; these are primary
methods. Use of the functions
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
and
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}} is
not supported in @uref{glo_p.html#primary_method,@emph{primary
methods}}.

The semantics of the simple built-in method combination types is as
follows:

* If there are any @uref{glo_a.html#around_method,@emph{around
methods}}, the most specific @uref{glo_a.html#around_method,@emph{around
method}} is called. It supplies the value or values of the
@uref{glo_g.html#generic_function,@emph{generic function}}.

* Inside the body of an @uref{glo_a.html#around_method,@emph{around
method}}, the function
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
can be used to call the @uref{glo_n.html#next_method,@emph{next
method}}. The @uref{glo_g.html#generic_function,@emph{generic function}}
@uref{stagenfun_no-next-method.html#no-next-method,@strong{no-next-method}}
is invoked if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is used and there is no applicable method to call. The
@uref{glo_f.html#function,@emph{function}}
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
may be used to determine whether a
@uref{glo_n.html#next_method,@emph{next method}} exists. When the
@uref{glo_n.html#next_method,@emph{next method}} returns, the
@uref{glo_a.html#around_method,@emph{around method}} can execute more
code, perhaps based on the returned value or values.

* If an @uref{glo_a.html#around_method,@emph{around method}} invokes
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}},
the next most specific @uref{glo_a.html#around_method,@emph{around
method}} is called, if one is applicable. If there are no
@uref{glo_a.html#around_method,@emph{around methods}} or if
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
is called by the least specific
@uref{glo_a.html#around_method,@emph{around method}}, a Lisp form
derived from the name of the built-in method combination type and from
the list of applicable primary methods is evaluated to produce the value
of the generic function. Suppose the name of the method combination type
is @emph{operator} and the call to the generic function is of the form

(@emph{generic-function} a1...an)

Let M1,...,Mk be the applicable primary methods in order; then the
derived Lisp form is

(@emph{operator} <M1 a1...an>...<Mk a1...an>)

If the expression <Mi a1...an> is evaluated, the method Mi will be
applied to the arguments a1...an. For example, if @emph{operator} is or,
the expression <Mi a1...an> is evaluated only if <Mj a1...an>, 1<=j<i,
returned nil.

The default order for the primary methods is :most-specific-first.
However, the order can be reversed by supplying :most-specific-last as
the second argument to the :method-combination option.

The simple built-in method combination types require exactly one
@uref{glo_q.html#qualifier,@emph{qualifier}} per method. An error is
signaled if there are applicable methods with no
@uref{glo_q.html#qualifier,@emph{qualifiers}} or with
@uref{glo_q.html#qualifier,@emph{qualifiers}} that are not supported by
the method combination type. An error is signaled if there are
applicable @uref{glo_a.html#around_method,@emph{around methods}} and no
applicable primary methods.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section 767
@subsubsection CLHS: Section 7.6.7
@anchor{#clhs-section-7.6.7}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-6-4.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_7-6.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.6.7 Inheritance of Methods

A subclass inherits methods in the sense that any method applicable to
all instances of a class is also applicable to all instances of any
subclass of that class.

The inheritance of methods acts the same way regardless of which of the
@uref{glo_m.html#method-defining_operator,@emph{method-defining
operators}} created the methods.

The inheritance of methods is described in detail in
@uref{sec_7-6-6.html,Section 7.6.6 (Method Selection and Combination)}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Section The Objects Dictionary
@subsection CLHS: Section The Objects Dictionary
@anchor{#clhs-section-the-objects-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_7-6-7.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-7.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_fun_ion-keywords.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
7.7 The Objects Dictionary

@uref{stagenfun_fun_ion-keywords.html,@emph{Standard Generic Function}
@strong{FUNCTION-KEYWORDS}}

@uref{fun_ensure-ge_ric-function.html,@emph{Function}
@strong{ENSURE-GENERIC-FUNCTION}}

@uref{stagenfun_all_ate-instance.html,@emph{Standard Generic Function}
@strong{ALLOCATE-INSTANCE}}

@uref{stagenfun_rei_ize-instance.html,@emph{Standard Generic Function}
@strong{REINITIALIZE-INSTANCE}}

@uref{stagenfun_sha_d-initialize.html,@emph{Standard Generic Function}
@strong{SHARED-INITIALIZE}}

@uref{stagenfun_upd_ferent-class.html,@emph{Standard Generic Function}
@strong{UPDATE-INSTANCE-FOR-DIFFERENT-CLASS}}

@uref{stagenfun_upd_efined-class.html,@emph{Standard Generic Function}
@strong{UPDATE-INSTANCE-FOR-REDEFINED-CLASS}}

@uref{stagenfun_change-class.html,@emph{Standard Generic Function}
@strong{CHANGE-CLASS}}

@uref{fun_slot-boundp.html,@emph{Function} @strong{SLOT-BOUNDP}}

@uref{fun_slot-exists-p.html,@emph{Function} @strong{SLOT-EXISTS-P}}

@uref{fun_slot-makunbound.html,@emph{Function} @strong{SLOT-MAKUNBOUND}}

@uref{stagenfun_slot-missing.html,@emph{Standard Generic Function}
@strong{SLOT-MISSING}}

@uref{stagenfun_slot-unbound.html,@emph{Standard Generic Function}
@strong{SLOT-UNBOUND}}

@uref{fun_slot-value.html,@emph{Function} @strong{SLOT-VALUE}}

@uref{stagenfun_met_d-qualifiers.html,@emph{Standard Generic Function}
@strong{METHOD-QUALIFIERS}}

@uref{stagenfun_no-_cable-method.html,@emph{Standard Generic Function}
@strong{NO-APPLICABLE-METHOD}}

@uref{stagenfun_no-next-method.html,@emph{Standard Generic Function}
@strong{NO-NEXT-METHOD}}

@uref{stagenfun_remove-method.html,@emph{Standard Generic Function}
@strong{REMOVE-METHOD}}

@uref{stagenfun_make-instance.html,@emph{Standard Generic Function}
@strong{MAKE-INSTANCE}}

@uref{stagenfun_mak_ces-obsolete.html,@emph{Standard Generic Function}
@strong{MAKE-INSTANCES-OBSOLETE}}

@uref{stagenfun_make-load-form.html,@emph{Standard Generic Function}
@strong{MAKE-LOAD-FORM}}

@uref{fun_make-load_saving-slots.html,@emph{Function}
@strong{MAKE-LOAD-FORM-SAVING-SLOTS}}

@uref{mac_with-accessors.html,@emph{Macro} @strong{WITH-ACCESSORS}}

@uref{mac_with-slots.html,@emph{Macro} @strong{WITH-SLOTS}}

@uref{mac_defclass.html,@emph{Macro} @strong{DEFCLASS}}

@uref{mac_defgeneric.html,@emph{Macro} @strong{DEFGENERIC}}

@uref{mac_defmethod.html,@emph{Macro} @strong{DEFMETHOD}}

@uref{acc_find-class.html,@emph{Accessor} @strong{FIND-CLASS}}

@uref{locfun_next-method-p.html,@emph{Local Function}
@strong{NEXT-METHOD-P}}

@uref{locmac_call-m__make-method.html,@emph{Local Macro}
@strong{CALL-METHOD, MAKE-METHOD}}

@uref{locfun_call-next-method.html,@emph{Local Function}
@strong{CALL-NEXT-METHOD}}

@uref{stagenfun_com_able-methods.html,@emph{Standard Generic Function}
@strong{COMPUTE-APPLICABLE-METHODS}}

@uref{mac_define-me_-combination.html,@emph{Macro}
@strong{DEFINE-METHOD-COMBINATION}}

@uref{stagenfun_find-method.html,@emph{Standard Generic Function}
@strong{FIND-METHOD}}

@uref{stagenfun_add-method.html,@emph{Standard Generic Function}
@strong{ADD-METHOD}}

@uref{stagenfun_ini_ize-instance.html,@emph{Standard Generic Function}
@strong{INITIALIZE-INSTANCE}}

@uref{stagenfun_class-name.html,@emph{Standard Generic Function}
@strong{CLASS-NAME}}

@uref{stagenfun_ops_class-namecp.html,@emph{Standard Generic Function}
@strong{(SETF CLASS-NAME)}}

@uref{fun_class-of.html,@emph{Function} @strong{CLASS-OF}}

@uref{contyp_unbound-slot.html,@emph{Condition Type}
@strong{UNBOUND-SLOT}}

@uref{fun_unbound-slot-instance.html,@emph{Function}
@strong{UNBOUND-SLOT-INSTANCE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Accessor FIND-CLASS::
* CLHS Condition Type UNBOUND-SLOT::
* CLHS Function CLASS-OF::
* CLHS Function ENSURE-GENERIC-FUNCTION::
* CLHS Function MAKE-LOAD-FORM-SAVING-SLOTS::
* CLHS Function SLOT-BOUNDP::
* CLHS Function SLOT-EXISTS-P::
* CLHS Function SLOT-MAKUNBOUND::
* CLHS Function SLOT-VALUE::
* CLHS Function UNBOUND-SLOT-INSTANCE::
* CLHS Local Function CALL-NEXT-METHOD::
* CLHS Local Function NEXT-METHOD-P::
* CLHS Local Macro CALL-METHOD MAKE-METHOD::
* CLHS Macro DEFCLASS::
* CLHS Macro DEFGENERIC::
* CLHS Macro DEFINE-METHOD-COMBINATION::
* CLHS Macro DEFMETHOD::
* CLHS Macro WITH-ACCESSORS::
* CLHS Macro WITH-SLOTS::
* CLHS Standard Generic Function ADD-METHOD::
* CLHS Standard Generic Function ALLOCATE-INSTANCE::
* CLHS Standard Generic Function CHANGE-CLASS::
* CLHS Standard Generic Function CLASS-NAME::
* CLHS Standard Generic Function COMPUTE-APPLICABLE-METHODS::
* CLHS Standard Generic Function FIND-METHOD::
* CLHS Standard Generic Function INITIALIZE-INSTANCE::
* CLHS Standard Generic Function MAKE-INSTANCES-OBSOLETE::
* CLHS Standard Generic Function MAKE-INSTANCE::
* CLHS Standard Generic Function MAKE-LOAD-FORM::
* CLHS Standard Generic Function METHOD-QUALIFIERS::
* CLHS Standard Generic Function NO-APPLICABLE-METHOD::
* CLHS Standard Generic Function NO-NEXT-METHOD::
* CLHS Standard Generic Function SETF CLASS-NAME::
* CLHS Standard Generic Function REINITIALIZE-INSTANCE::
* CLHS Standard Generic Function REMOVE-METHOD::
* CLHS Standard Generic Function SHARED-INITIALIZE::
* CLHS Standard Generic Function SLOT-MISSING::
* CLHS Standard Generic Function SLOT-UNBOUND::
* CLHS Standard Generic Function UPDATE-INSTANCE-FOR-REDEFINED-CLASS::
* CLHS Standard Generic Function UPDATE-INSTANCE-FOR-DIFFERENT-CLASS::
@end menu

@node CLHS Accessor FIND-CLASS
@subsubsection CLHS: Accessor FIND-CLASS
@anchor{#clhs-accessor-find-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defmethod.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locfun_next-method-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Accessor} @strong{FIND-CLASS}

@strong{Syntax:}

@strong{find-class} @emph{symbol &optional errorp environment} =>
@emph{class}

(setf (@strong{find-class} @emph{symbol &optional errorp environment})
@emph{new-class})

@strong{Arguments and Values:}

@emph{symbol}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{errorp}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}. The default is @uref{glo_t.html#true,@emph{true}}.

@emph{environment} -- same as the &environment argument to macro
expansion functions and is used to distinguish between compile-time and
run-time environments. The &environment argument has
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}}; the consequences
are undefined if the &environment argument is referred to outside the
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} of the macro
expansion function.

@emph{class}---a @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Returns the @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} named by the @emph{symbol} in the
@emph{environment}. If there is no such
@uref{glo_c.html#class,@emph{class}},
@uref{any_nil.html#nil,@strong{nil}} is returned if @emph{errorp} is
@uref{glo_f.html#false,@emph{false}}; otherwise, if @emph{errorp} is
@uref{glo_t.html#true,@emph{true}}, an error is signaled.

The @uref{glo_c.html#class,@emph{class}} associated with a particular
@uref{glo_s.html#symbol,@emph{symbol}} can be changed by using
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} with
@ref{#find-class,@strong{find-class}}; or, if the new
@uref{glo_c.html#class,@emph{class}} given to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} is
@uref{any_nil.html#nil,@strong{nil}}, the
@uref{glo_c.html#class,@emph{class}} association is removed (but the
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} itself is not affected). The
results are undefined if the user attempts to change or remove the
@uref{glo_c.html#class,@emph{class}} associated with a
@uref{glo_s.html#symbol,@emph{symbol}} that is defined as a
@uref{glo_t.html#type_specifier,@emph{type specifier}} in this standard.
See @uref{sec_4-3-7.html,Section 4.3.7 (Integrating Types and Classes)}.

When using @uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@ref{#find-class,@strong{find-class}}, any @emph{errorp} argument is
@emph{evaluated} for effect, but any
@uref{glo_v.html#value,@emph{values}} it returns are ignored; the
@emph{errorp} @uref{glo_p.html#parameter,@emph{parameter}} is permitted
primarily so that the @emph{environment}
@uref{glo_p.html#parameter,@emph{parameter}} can be used.

The @emph{environment} might be used to distinguish between a
compile-time and a run-time environment.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If there is no such @uref{glo_c.html#class,@emph{class}} and
@emph{errorp} is @uref{glo_t.html#true,@emph{true}},
@ref{#find-class,@strong{find-class}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@uref{mac_defmacro.html#defmacro,@strong{defmacro}},
@uref{sec_4-3-7.html,Section 4.3.7 (Integrating Types and Classes)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss304.html,SETF-FIND-CLASS:ALLOW-NIL}
@item
@uref{../Issues/iss229.html,MACRO-ENVIRONMENT-EXTENT:DYNAMIC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type UNBOUND-SLOT
@subsubsection CLHS: Condition Type UNBOUND-SLOT
@anchor{#clhs-condition-type-unbound-slot}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_class-of.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_unbound-slot-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{UNBOUND-SLOT}

@strong{Class Precedence List:}

@ref{#unbound-slot,@strong{unbound-slot}},
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_o.html#object,@emph{object}} having the unbound slot is
initialized by the :instanceinitialization argument to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_unbound-slot-instance.html#unbound-slot-instance,@strong{unbound-slot-instance}}.

The name of the cell (see
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}}) is the
name of the slot.

@strong{See Also:}

@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}},
@strong{unbound-slot-object}, @uref{sec_9-1.html,Section 9.1 (Condition
System Concepts)}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss355.html,UNDEFINED-VARIABLES-AND-FUNCTIONS:COMPROMISE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CLASS-OF
@subsubsection CLHS: Function CLASS-OF
@anchor{#clhs-function-class-of}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_ops_class-namecp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_unbound-slot.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CLASS-OF}

@strong{Syntax:}

@strong{class-of} @emph{object} => @emph{class}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{class}---a @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns the @uref{glo_c.html#class,@emph{class}} of which the
@emph{object} is a @uref{glo_d.html#direct_instance,@emph{direct
instance}}.

@strong{Examples:}

@verbatim
 (class-of 'fred) =>  #<BUILT-IN-CLASS SYMBOL 610327300>
 (class-of 2/3) =>  #<BUILT-IN-CLASS RATIO 610326642>
 
 (defclass book () ()) =>  #<STANDARD-CLASS BOOK 33424745>
 (class-of (make-instance 'book)) =>  #<STANDARD-CLASS BOOK 33424745>
 
 (defclass novel (book) ()) =>  #<STANDARD-CLASS NOVEL 33424764>
 (class-of (make-instance 'novel)) =>  #<STANDARD-CLASS NOVEL 33424764>

 (defstruct kons kar kdr) =>  KONS
 (class-of (make-kons :kar 3 :kdr 4)) =>  #<STRUCTURE-CLASS KONS 250020317>
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
@uref{fun_type-of.html#type-of,@strong{type-of}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ENSURE-GENERIC-FUNCTION
@subsubsection CLHS: Function ENSURE-GENERIC-FUNCTION
@anchor{#clhs-function-ensure-generic-function}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_fun_ion-keywords.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_all_ate-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ENSURE-GENERIC-FUNCTION}

@strong{Syntax:}

@strong{ensure-generic-function} @emph{function-name &key
argument-precedence-order declare documentation environment
generic-function-class lambda-list method-class method-combination}

=> @emph{generic-function}

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

The keyword arguments correspond to the @emph{option} arguments of
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}, except that
the :method-class and :generic-function-class arguments can be
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}s as well as names.

Method-combination -- method combination object.

Environment -- the same as the &environment argument to macro expansion
functions and is used to distinguish between compile-time and run-time
environments.

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#ensure-generic-function,@strong{ensure-generic-function}} is used
to define a globally named
@uref{glo_g.html#generic_function,@emph{generic function}} with no
@uref{glo_m.html#method,@emph{methods}} or to specify or modify options
and declarations that pertain to a globally named
@uref{glo_g.html#generic_function,@emph{generic function}} as a whole.

If @emph{function-name} is not @uref{glo_f.html#fbound,@emph{fbound}} in
the @uref{glo_g.html#global_environment,@emph{global environment}}, a
new @uref{glo_g.html#generic_function,@emph{generic function}} is
created. If (fdefinition @emph{function-name}) is an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error is
signaled.

If @emph{function-name} is a @uref{glo_l.html#list,@emph{list}}, it must
be of the form (setf @emph{symbol}). If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for any of the following arguments, the
@uref{glo_g.html#generic_function,@emph{generic function}} is modified
to have the new value: :argument-precedence-order, :declare,
:documentation, :method-combination.

If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :lambda-list argument, and the new value is
congruent with the @uref{glo_l.html#lambda_list,@emph{lambda lists}} of
all existing @uref{glo_m.html#method,@emph{methods}} or there are no
@uref{glo_m.html#method,@emph{methods}}, the value is changed; otherwise
an error is signaled.

If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :generic-function-class argument and if the new
generic function class is compatible with the old,
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
called to change the @uref{glo_c.html#class,@emph{class}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}; otherwise an
error is signaled.

If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :method-class argument, the value is changed,
but any existing @uref{glo_m.html#method,@emph{methods}} are not
changed.

@strong{Examples:} None.

@strong{Affected By:}

Existing function binding of @emph{function-name}.

@strong{Exceptional Situations:}

If (fdefinition @emph{function-name}) is an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :lambda-list argument, and the new value is not
congruent with the @uref{glo_l.html#lambda_list,@emph{lambda list}} of
any existing @uref{glo_m.html#method,@emph{method}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If @emph{function-name} specifies a
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :generic-function-class argument and if the new
generic function class not is compatible with the old, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-LOAD-FORM-SAVING-SLOTS
@subsubsection CLHS: Function MAKE-LOAD-FORM-SAVING-SLOTS
@anchor{#clhs-function-make-load-form-saving-slots}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_make-load-form.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-accessors.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-LOAD-FORM-SAVING-SLOTS}

@strong{Syntax:}

@strong{make-load-form-saving-slots} @emph{object &key slot-names
environment}

=> @emph{creation-form, initialization-form}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{slot-names}---a @uref{glo_l.html#list,@emph{list}}.

@emph{environment}---an
@uref{glo_e.html#environment_object,@emph{environment object}}.

@emph{creation-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{initialization-form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

Returns @uref{glo_f.html#form,@emph{forms}} that, when @emph{evaluated},
will construct an @uref{glo_o.html#object,@emph{object}} equivalent to
@emph{object}, without @emph{executing}
@uref{glo_i.html#initialization_form,@emph{initialization forms}}. The
@uref{glo_s.html#slot,@emph{slots}} in the new
@uref{glo_o.html#object,@emph{object}} that correspond to initialized
@uref{glo_s.html#slot,@emph{slots}} in @emph{object} are initialized
using the values from @emph{object}. Uninitialized
@uref{glo_s.html#slot,@emph{slots}} in @emph{object} are not initialized
in the new @uref{glo_o.html#object,@emph{object}}.
@ref{#make-load-form-saving-slots,@strong{make-load-form-saving-slots}}
works for any @uref{glo_i.html#instance,@emph{instance}} of
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
or
@uref{cla_structure-object.html#structure-object,@strong{structure-object}}.

@emph{Slot-names} is a @uref{glo_l.html#list,@emph{list}} of the names
of the @uref{glo_s.html#slot,@emph{slots}} to preserve. If
@emph{slot-names} is not supplied, its value is all of the
@uref{glo_l.html#local_slot,@emph{local slots}}.

@ref{#make-load-form-saving-slots,@strong{make-load-form-saving-slots}}
returns two values, thus it can deal with circular structures. Whether
the result is useful in an application depends on whether the
@emph{object}'s @uref{glo_t.html#type,@emph{type}} and slot contents
fully capture the application's idea of the @emph{object}'s state.

@emph{Environment} is the environment in which the forms will be
processed.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}},
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{fun_slot-value.html#slot-value,@strong{slot-value}},
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}}

@strong{Notes:}

@ref{#make-load-form-saving-slots,@strong{make-load-form-saving-slots}}
can be useful in user-written
@uref{stagenfun_make-load-form.html#make-load-form,@strong{make-load-form}}
methods.

When the @uref{glo_o.html#object,@emph{object}} is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@ref{#make-load-form-saving-slots,@strong{make-load-form-saving-slots}}
could return a creation form that @uref{glo_c.html#call,@emph{calls}}
@uref{stagenfun_all_ate-instance.html#allocate-instance,@strong{allocate-instance}}
and an initialization form that contains
@uref{glo_c.html#call,@emph{calls}} to
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} of
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} and
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
though other @uref{glo_f.html#function,@emph{functions}} of similar
effect might actually be used.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss237.html,MAKE-LOAD-FORM-SAVING-SLOTS:NO-INITFORMS}
@item
@uref{../Issues/iss215.html,LOAD-OBJECTS:MAKE-LOAD-FORM}
@item
@uref{../Issues/iss236.html,MAKE-LOAD-FORM-CONFUSION:REWRITE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SLOT-BOUNDP
@subsubsection CLHS: Function SLOT-BOUNDP
@anchor{#clhs-function-slot-boundp}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_change-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_slot-exists-p.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SLOT-BOUNDP}

@strong{Syntax:}

@strong{slot-boundp} @emph{instance slot-name} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{slot-name}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_s.html#slot,@emph{slot}} of @emph{instance}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if the
@uref{glo_s.html#slot,@emph{slot}} named @emph{slot-name} in
@emph{instance} is bound; otherwise, returns
@uref{glo_f.html#false,@emph{false}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If no @uref{glo_s.html#slot,@emph{slot}} of the
@uref{glo_n.html#name,@emph{name}} @emph{slot-name} exists in the
@emph{instance},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
called as follows:

@verbatim
 (slot-missing (class-of instance)
               instance
               slot-name
               'slot-boundp)
@end verbatim

(If
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
invoked and returns a value, a
@uref{glo_b.html#boolean_equivalent,@emph{boolean equivalent}} to its
@uref{glo_p.html#primary_value,@emph{primary value}} is returned by
@ref{#slot-boundp,@strong{slot-boundp}}.)

The specific behavior depends on @emph{instance}'s
@uref{glo_m.html#metaclass,@emph{metaclass}}. An error is never signaled
if @emph{instance} has @uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.
An error is always signaled if @emph{instance} has
@uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}.
The consequences are undefined if @emph{instance} has any other
@uref{glo_m.html#metaclass,@emph{metaclass}}--an error might or might
not be signaled in this situation. Note in particular that the behavior
for @uref{glo_c.html#condition,@emph{conditions}} and
@uref{glo_s.html#structure,@emph{structures}} is not specified.

@strong{See Also:}

@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}}

@strong{Notes:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#slot-boundp,@strong{slot-boundp}} allows for writing
@uref{glo_a.html#after_method,@emph{after methods}} on
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}}
in order to initialize only those @uref{glo_s.html#slot,@emph{slots}}
that have not already been bound.

Although no @uref{glo_i.html#implementation,@emph{implementation}} is
required to do so, implementors are strongly encouraged to implement the
@uref{glo_f.html#function,@emph{function}}
@ref{#slot-boundp,@strong{slot-boundp}} using the
@uref{glo_f.html#function,@emph{function}} slot-boundp-using-class
described in the @uref{glo_m.html#metaobject_protocol,@emph{Metaobject
Protocol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss320.html,SLOT-VALUE-METACLASSES:LESS-MINIMAL}
@item
@uref{../Issues/iss319.html,SLOT-MISSING-VALUES:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SLOT-EXISTS-P
@subsubsection CLHS: Function SLOT-EXISTS-P
@anchor{#clhs-function-slot-exists-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_slot-boundp.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_slot-makunbound.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SLOT-EXISTS-P}

@strong{Syntax:}

@strong{slot-exists-p} @emph{object slot-name} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{slot-name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

Returns @uref{glo_t.html#true,@emph{true}} if the @emph{object} has a
@uref{glo_s.html#slot,@emph{slot}} named @emph{slot-name}.

@strong{Examples:} None.

@strong{Affected By:}

@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{mac_defstruct.html#defstruct,@strong{defstruct}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}}

@strong{Notes:}

Although no @uref{glo_i.html#implementation,@emph{implementation}} is
required to do so, implementors are strongly encouraged to implement the
@uref{glo_f.html#function,@emph{function}}
@ref{#slot-exists-p,@strong{slot-exists-p}} using the
@uref{glo_f.html#function,@emph{function}} slot-exists-p-using-class
described in the @uref{glo_m.html#metaobject_protocol,@emph{Metaobject
Protocol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss320.html,SLOT-VALUE-METACLASSES:LESS-MINIMAL}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SLOT-MAKUNBOUND
@subsubsection CLHS: Function SLOT-MAKUNBOUND
@anchor{#clhs-function-slot-makunbound}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_slot-exists-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_slot-missing.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SLOT-MAKUNBOUND}

@strong{Syntax:}

@strong{slot-makunbound} @emph{instance slot-name} => @emph{instance}

@strong{Arguments and Values:}

@emph{instance} -- instance.

@emph{Slot-name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#slot-makunbound,@strong{slot-makunbound}} restores a
@uref{glo_s.html#slot,@emph{slot}} of the name @emph{slot-name} in an
@emph{instance} to the unbound state.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If no @uref{glo_s.html#slot,@emph{slot}} of the name @emph{slot-name}
exists in the @emph{instance},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
called as follows:

@verbatim
(slot-missing (class-of instance)
              instance
              slot-name
              'slot-makunbound)
@end verbatim

(Any values returned by
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} in
this case are ignored by
@ref{#slot-makunbound,@strong{slot-makunbound}}.)

The specific behavior depends on @emph{instance}'s
@uref{glo_m.html#metaclass,@emph{metaclass}}. An error is never signaled
if @emph{instance} has @uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.
An error is always signaled if @emph{instance} has
@uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}.
The consequences are undefined if @emph{instance} has any other
@uref{glo_m.html#metaclass,@emph{metaclass}}--an error might or might
not be signaled in this situation. Note in particular that the behavior
for @uref{glo_c.html#condition,@emph{conditions}} and
@uref{glo_s.html#structure,@emph{structures}} is not specified.

@strong{See Also:}

@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}}

@strong{Notes:}

Although no @uref{glo_i.html#implementation,@emph{implementation}} is
required to do so, implementors are strongly encouraged to implement the
@uref{glo_f.html#function,@emph{function}}
@ref{#slot-makunbound,@strong{slot-makunbound}} using the
@uref{glo_f.html#function,@emph{function}} slot-makunbound-using-class
described in the @uref{glo_m.html#metaobject_protocol,@emph{Metaobject
Protocol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss320.html,SLOT-VALUE-METACLASSES:LESS-MINIMAL}
@item
@uref{../Issues/iss319.html,SLOT-MISSING-VALUES:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SLOT-VALUE
@subsubsection CLHS: Function SLOT-VALUE
@anchor{#clhs-function-slot-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_slot-unbound.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_met_d-qualifiers.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SLOT-VALUE}

@strong{Syntax:}

@strong{slot-value} @emph{object slot-name} => @emph{value}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#slot-value,@strong{slot-value}} returns the
@uref{glo_v.html#value,@emph{value}} of the
@uref{glo_s.html#slot,@emph{slot}} named @emph{slot-name} in the
@emph{object}. If there is no @uref{glo_s.html#slot,@emph{slot}} named
@emph{slot-name},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
called. If the @uref{glo_s.html#slot,@emph{slot}} is unbound,
@uref{stagenfun_slot-unbound.html#slot-unbound,@strong{slot-unbound}} is
called.

The macro @uref{mac_setfcm_psetf.html#setf,@strong{setf}} can be used
with @ref{#slot-value,@strong{slot-value}} to change the value of a
@uref{glo_s.html#slot,@emph{slot}}.

@strong{Examples:}

@verbatim
 (defclass foo () 
   ((a :accessor foo-a :initarg :a :initform 1)
    (b :accessor foo-b :initarg :b)
    (c :accessor foo-c :initform 3)))
=>  #<STANDARD-CLASS FOO 244020371>
 (setq foo1 (make-instance 'foo :a 'one :b 'two))
=>  #<FOO 36325624>
 (slot-value foo1 'a) =>  ONE
 (slot-value foo1 'b) =>  TWO
 (slot-value foo1 'c) =>  3
 (setf (slot-value foo1 'a) 'uno) =>  UNO
 (slot-value foo1 'a) =>  UNO
 (defmethod foo-method ((x foo))
   (slot-value x 'a))
=>  #<STANDARD-METHOD FOO-METHOD (FOO) 42720573>
 (foo-method foo1) =>  UNO
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If an attempt is made to read a @uref{glo_s.html#slot,@emph{slot}} and
no @uref{glo_s.html#slot,@emph{slot}} of the name @emph{slot-name}
exists in the @emph{object},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
called as follows:

@verbatim
 (slot-missing (class-of instance)
               instance
               slot-name
               'slot-value)
@end verbatim

(If
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
invoked, its @uref{glo_p.html#primary_value,@emph{primary value}} is
returned by @ref{#slot-value,@strong{slot-value}}.)

If an attempt is made to write a @uref{glo_s.html#slot,@emph{slot}} and
no @uref{glo_s.html#slot,@emph{slot}} of the name @emph{slot-name}
exists in the @emph{object},
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}} is
called as follows:

@verbatim
 (slot-missing (class-of instance)
               instance
               slot-name
               'setf
               new-value)
@end verbatim

(If
@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}}
returns in this case, any @uref{glo_v.html#value,@emph{values}} are
ignored.)

The specific behavior depends on @emph{object}'s
@uref{glo_m.html#metaclass,@emph{metaclass}}. An error is never signaled
if @emph{object} has @uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.
An error is always signaled if @emph{object} has
@uref{glo_m.html#metaclass,@emph{metaclass}}
@uref{syscla_built-in-class.html#built-in-class,@strong{built-in-class}}.
The consequences are unspecified if @emph{object} has any other
@uref{glo_m.html#metaclass,@emph{metaclass}}--an error might or might
not be signaled in this situation. Note in particular that the behavior
for @uref{glo_c.html#condition,@emph{conditions}} and
@uref{glo_s.html#structure,@emph{structures}} is not specified.

@strong{See Also:}

@uref{stagenfun_slot-missing.html#slot-missing,@strong{slot-missing}},
@uref{stagenfun_slot-unbound.html#slot-unbound,@strong{slot-unbound}},
@uref{mac_with-slots.html#with-slots,@strong{with-slots}}

@strong{Notes:}

Although no @uref{glo_i.html#implementation,@emph{implementation}} is
required to do so, implementors are strongly encouraged to implement the
@uref{glo_f.html#function,@emph{function}}
@ref{#slot-value,@strong{slot-value}} using the
@uref{glo_f.html#function,@emph{function}} slot-value-using-class
described in the @uref{glo_m.html#metaobject_protocol,@emph{Metaobject
Protocol}}.

Implementations may optimize @ref{#slot-value,@strong{slot-value}} by
compiling it inline.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss320.html,SLOT-VALUE-METACLASSES:LESS-MINIMAL}
@item
@uref{../Issues/iss319.html,SLOT-MISSING-VALUES:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function UNBOUND-SLOT-INSTANCE
@subsubsection CLHS: Function UNBOUND-SLOT-INSTANCE
@anchor{#clhs-function-unbound-slot-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_unbound-slot.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-8.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{UNBOUND-SLOT-INSTANCE}

@strong{Syntax:}

@strong{unbound-slot-instance} @emph{condition} => @emph{instance}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}.

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns the instance which had the unbound slot in the
@uref{glo_s.html#situation,@emph{situation}} represented by the
@emph{condition}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}},
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss355.html,UNDEFINED-VARIABLES-AND-FUNCTIONS:COMPROMISE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Local Function CALL-NEXT-METHOD
@subsubsection CLHS: Local Function CALL-NEXT-METHOD
@anchor{#clhs-local-function-call-next-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locmac_call-m__make-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_com_able-methods.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Function} @strong{CALL-NEXT-METHOD}

@strong{Syntax:}

@strong{call-next-method} @emph{&rest args} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{arg}---an @uref{glo_o.html#object,@emph{object}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_m.html#method,@emph{method}} it calls.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#call-next-method,@strong{call-next-method}} can be used within the
body @uref{glo_f.html#form,@emph{forms}} (but not the
@uref{glo_l.html#lambda_list,@emph{lambda list}}) of a
@uref{glo_m.html#method,@emph{method}} defined by a
@uref{glo_m.html#method-defining_form,@emph{method-defining form}} to
call the @uref{glo_n.html#next_method,@emph{next method}}.

If there is no next @uref{glo_m.html#method,@emph{method}}, the generic
function
@uref{stagenfun_no-next-method.html#no-next-method,@strong{no-next-method}}
is called.

The type of method combination used determines which
@uref{glo_m.html#method,@emph{methods}} can invoke
@ref{#call-next-method,@strong{call-next-method}}. The standard
@uref{glo_m.html#method_combination,@emph{method combination}} type
allows @ref{#call-next-method,@strong{call-next-method}} to be used
within primary @uref{glo_m.html#method,@emph{methods}} and
@uref{glo_a.html#around_method,@emph{around methods}}. For generic
functions using a type of method combination defined by the short form
of
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}},
@ref{#call-next-method,@strong{call-next-method}} can be used in
@uref{glo_a.html#around_method,@emph{around methods}} only.

When @ref{#call-next-method,@strong{call-next-method}} is called with no
arguments, it passes the current
@uref{glo_m.html#method,@emph{method}}'s original arguments to the next
@uref{glo_m.html#method,@emph{method}}. Neither argument defaulting, nor
using @uref{spefor_setq.html#setq,@strong{setq}}, nor rebinding
variables with the same @uref{glo_n.html#name,@emph{names}} as
parameters of the @uref{glo_m.html#method,@emph{method}} affects the
values @ref{#call-next-method,@strong{call-next-method}} passes to the
@uref{glo_m.html#method,@emph{method}} it calls.

When @ref{#call-next-method,@strong{call-next-method}} is called with
arguments, the @uref{glo_n.html#next_method,@emph{next method}} is
called with those arguments.

If @ref{#call-next-method,@strong{call-next-method}} is called with
arguments but omits optional arguments, the
@uref{glo_n.html#next_method,@emph{next method}} called defaults those
arguments.

The @uref{glo_f.html#function,@emph{function}}
@ref{#call-next-method,@strong{call-next-method}} returns any
@uref{glo_v.html#value,@emph{values}} that are returned by the
@uref{glo_n.html#next_method,@emph{next method}}.

The @uref{glo_f.html#function,@emph{function}}
@ref{#call-next-method,@strong{call-next-method}} has
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} and
@uref{glo_i.html#indefinite_extent,@emph{indefinite extent}} and can
only be used within the body of a @uref{glo_m.html#method,@emph{method}}
defined by a @uref{glo_m.html#method-defining_form,@emph{method-defining
form}}.

Whether or not @ref{#call-next-method,@strong{call-next-method}} is
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#call-next-method,@strong{call-next-method}} are the same as for
@uref{glo_s.html#symbol,@emph{symbols}} in the COMMON-LISP package which
are @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use
@ref{#call-next-method,@strong{call-next-method}} outside of a
@uref{glo_m.html#method-defining_form,@emph{method-defining form}} are
undefined.

@strong{Examples:} None.

@strong{Affected By:}

@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}},
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}.

@strong{Exceptional Situations:}

When providing arguments to
@ref{#call-next-method,@strong{call-next-method}}, the following rule
must be satisfied or an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} should be signaled: the
ordered set of @uref{glo_a.html#applicable_method,@emph{applicable
methods}} for a changed set of arguments for
@ref{#call-next-method,@strong{call-next-method}} must be the same as
the ordered set of @uref{glo_a.html#applicable_method,@emph{applicable
methods}} for the original arguments to the
@uref{glo_g.html#generic_function,@emph{generic function}}.
Optimizations of the error checking are possible, but they must not
change the semantics of
@ref{#call-next-method,@strong{call-next-method}}.

@strong{See Also:}

@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}},
@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}},
@uref{stagenfun_no-next-method.html#no-next-method,@strong{no-next-method}},
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}},
@uref{sec_7-6-6.html,Section 7.6.6 (Method Selection and Combination)},
@uref{sec_7-6-6-2.html,Section 7.6.6.2 (Standard Method Combination)},
@uref{sec_7-6-6-4.html,Section 7.6.6.4 (Built-in Method Combination
Types)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@item
@uref{../Issues/iss243.html,METHOD-INITFORM:FORBID-CALL-NEXT-METHOD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Local Function NEXT-METHOD-P
@subsubsection CLHS: Local Function NEXT-METHOD-P
@anchor{#clhs-local-function-next-method-p}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{acc_find-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locmac_call-m__make-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Function} @strong{NEXT-METHOD-P}

@strong{Syntax:}

@strong{next-method-p} @emph{@emph{<no arguments>}} =>
@emph{generalized-boolean}

@strong{Arguments and Values:}

@emph{generalized-boolean}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

The locally defined function @ref{#next-method-p,@strong{next-method-p}}
can be used within the body @uref{glo_f.html#form,@emph{forms}} (but not
the @uref{glo_l.html#lambda_list,@emph{lambda list}}) defined by a
@uref{glo_m.html#method-defining_form,@emph{method-defining form}} to
determine whether a next @uref{glo_m.html#method,@emph{method}} exists.

The @uref{glo_f.html#function,@emph{function}}
@ref{#next-method-p,@strong{next-method-p}} has
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} and
@uref{glo_i.html#indefinite_extent,@emph{indefinite extent}}.

Whether or not @ref{#next-method-p,@strong{next-method-p}} is
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#next-method-p,@strong{next-method-p}} are the same as for
@uref{glo_s.html#symbol,@emph{symbols}} in the COMMON-LISP package which
are @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use
@ref{#next-method-p,@strong{next-method-p}} outside of a
@uref{glo_m.html#method-defining_form,@emph{method-defining form}} are
undefined.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}},
@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@item
@uref{../Issues/iss243.html,METHOD-INITFORM:FORBID-CALL-NEXT-METHOD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Local Macro CALL-METHOD MAKE-METHOD
@subsubsection CLHS: Local Macro CALL-METHOD, MAKE-METHOD
@anchor{#clhs-local-macro-call-method-make-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locfun_next-method-p.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{locfun_call-next-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Local Macro} @strong{CALL-METHOD, MAKE-METHOD}

@strong{Syntax:}

@strong{call-method} @emph{method &optional next-method-list} =>
@emph{@emph{result}@strong{*}}

@strong{make-method} @emph{form} => @emph{method-object}

@strong{Arguments and Values:}

@emph{method}---a @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}, or a
@uref{glo_l.html#list,@emph{list}} (see below); not evaluated.

@emph{method-object}---a @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}.

@emph{next-method-list}---a @uref{glo_l.html#list,@emph{list}} of
@emph{method} @uref{glo_o.html#object,@emph{objects}}; not evaluated.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_m.html#method,@emph{method}} invocation.

@strong{Description:}

The macro @ref{#call-method,@strong{call-method}} is used in method
combination. It hides the
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
details of how @uref{glo_m.html#method,@emph{methods}} are called. The
macro @ref{#call-method,@strong{call-method}} has
@uref{glo_l.html#lexical_scope,@emph{lexical scope}} and can only be
used within an @uref{glo_e.html#effective_method,@emph{effective
method}} @uref{glo_f.html#form,@emph{form}}.

Whether or not @ref{#call-method,@strong{call-method}} is
@uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}};
however, the restrictions on redefinition and @emph{shadowing} of
@ref{#call-method,@strong{call-method}} are the same as for
@uref{glo_s.html#symbol,@emph{symbols}} in the COMMON-LISP package which
are @uref{glo_f.html#fbound,@emph{fbound}} in the
@uref{glo_g.html#global_environment,@emph{global environment}}. The
consequences of attempting to use
@ref{#call-method,@strong{call-method}} outside of an
@uref{glo_e.html#effective_method,@emph{effective method}}
@uref{glo_f.html#form,@emph{form}} are undefined.

The macro @ref{#call-method,@strong{call-method}} invokes the specified
@uref{glo_m.html#method,@emph{method}}, supplying it with arguments and
with definitions for
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
and for
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}.
If the invocation of @ref{#call-method,@strong{call-method}} is
lexically inside of a @ref{#make-method,@strong{make-method}}, the
arguments are those that were supplied to that method. Otherwise the
arguments are those that were supplied to the generic function. The
definitions of
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
and
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
rely on the specified @emph{next-method-list}.

If @emph{method} is a @uref{glo_l.html#list,@emph{list}}, the first
element of the @uref{glo_l.html#list,@emph{list}} must be the symbol
@ref{#make-method,@strong{make-method}} and the second element must be a
@uref{glo_f.html#form,@emph{form}}. Such a
@uref{glo_l.html#list,@emph{list}} specifies a
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} whose
@uref{glo_m.html#method,@emph{method}} function has a body that is the
given @uref{glo_f.html#form,@emph{form}}.

@emph{Next-method-list} can contain
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{objects}} or
@uref{glo_l.html#list,@emph{lists}}, the first element of which must be
the symbol @ref{#make-method,@strong{make-method}} and the second
element of which must be a @uref{glo_f.html#form,@emph{form}}.

Those are the only two places where
@ref{#make-method,@strong{make-method}} can be used. The
@uref{glo_f.html#form,@emph{form}} used with
@ref{#make-method,@strong{make-method}} is evaluated in the
@uref{glo_n.html#null_lexical_environment,@emph{null lexical
environment}} augmented with a local macro definition for
@ref{#call-method,@strong{call-method}} and with bindings named by
symbols not @uref{glo_a.html#accessible,@emph{accessible}} from the
COMMON-LISP-USER package.

The
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
function available to @emph{method} will call the first
@uref{glo_m.html#method,@emph{method}} in @emph{next-method-list}. The
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
function available in that @uref{glo_m.html#method,@emph{method}}, in
turn, will call the second @uref{glo_m.html#method,@emph{method}} in
@emph{next-method-list}, and so on, until the list of next
@uref{glo_m.html#method,@emph{methods}} is exhausted.

If @emph{next-method-list} is not supplied, the
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
function available to @emph{method} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}}
and the
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
function available to @emph{method} returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}},
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}},
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss211.html,LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFCLASS
@subsubsection CLHS: Macro DEFCLASS
@anchor{#clhs-macro-defclass}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-slots.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defgeneric.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFCLASS}

@strong{Syntax:}

@strong{defclass} @emph{@emph{class-name} (@{@emph{superclass-name}@}*)
(@{@emph{slot-specifier}@}*) [[@emph{class-option}]]}

=> @emph{new-class}

@verbatim
slot-specifier::= slot-name | (slot-name [[slot-option]])
slot-name::= symbol
slot-option::= {:reader reader-function-name}* | 
               {:writer writer-function-name}* | 
               {:accessor reader-function-name}* | 
               {:allocation allocation-type} | 
               {:initarg initarg-name}* | 
               {:initform form} | 
               {:type type-specifier} | 
               {:documentation string} 
function-name::= {symbol | (setf symbol)}
class-option::= (:default-initargs . initarg-list) | 
                (:documentation string) | 
                (:metaclass class-name) 
@end verbatim

@strong{Arguments and Values:}

@emph{Class-name}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@emph{Superclass-name}--a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}.

@emph{Slot-name}--a @uref{glo_s.html#symbol,@emph{symbol}}. The
@emph{slot-name} argument is a @uref{glo_s.html#symbol,@emph{symbol}}
that is syntactically valid for use as a variable name.

@emph{Reader-function-name}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}. :reader can be supplied more
than once for a given @uref{glo_s.html#slot,@emph{slot}}.

@emph{Writer-function-name}---a
@uref{glo_g.html#generic_function,@emph{generic function}} name. :writer
can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}}.

@emph{Reader-function-name}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}. :accessor can be supplied more
than once for a given @uref{glo_s.html#slot,@emph{slot}}.

@emph{Allocation-type}---(member :instance :class). :allocation can be
supplied once at most for a given @uref{glo_s.html#slot,@emph{slot}}.

@emph{Initarg-name}---a @uref{glo_s.html#symbol,@emph{symbol}}. :initarg
can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}}.

@emph{Form}---a @uref{glo_f.html#form,@emph{form}}. :init-form can be
supplied once at most for a given @uref{glo_s.html#slot,@emph{slot}}.

@emph{Type-specifier}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}. :type can be supplied once at most for a given
@uref{glo_s.html#slot,@emph{slot}}.

@emph{Class-option}--- refers to the
@uref{glo_c.html#class,@emph{class}} as a whole or to all class
@uref{glo_s.html#slot,@emph{slots}}.

@emph{Initarg-list}---a @uref{glo_l.html#list,@emph{list}} of
alternating initialization argument @uref{glo_n.html#name,@emph{names}}
and default initial value @uref{glo_f.html#form,@emph{forms}}.
:default-initargs can be supplied at most once.

@emph{Class-name}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}. :metaclass can be supplied once
at most.

@emph{new-class}---the new @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The macro @ref{#defclass,@strong{defclass}} defines a new named
@uref{glo_c.html#class,@emph{class}}. It returns the new
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} as its result.

The syntax of @ref{#defclass,@strong{defclass}} provides options for
specifying initialization arguments for
@uref{glo_s.html#slot,@emph{slots}}, for specifying default
initialization values for @uref{glo_s.html#slot,@emph{slots}}, and for
requesting that @uref{glo_m.html#method,@emph{methods}} on specified
@uref{glo_g.html#generic_function,@emph{generic functions}} be
automatically generated for reading and writing the values of
@uref{glo_s.html#slot,@emph{slots}}. No reader or writer functions are
defined by default; their generation must be explicitly requested.
However, @uref{glo_s.html#slot,@emph{slots}} can always be
@emph{accessed} using
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

Defining a new @uref{glo_c.html#class,@emph{class}} also causes a
@uref{glo_t.html#type,@emph{type}} of the same name to be defined. The
predicate (typep @emph{object} @emph{class-name}) returns true if the
@uref{glo_c.html#class,@emph{class}} of the given @emph{object} is the
@uref{glo_c.html#class,@emph{class}} named by @emph{class-name} itself
or a subclass of the class @emph{class-name}. A
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} can be used as a
@uref{glo_t.html#type_specifier,@emph{type specifier}}. Thus (typep
@emph{object} @emph{class}) returns @uref{glo_t.html#true,@emph{true}}
if the @uref{glo_c.html#class,@emph{class}} of the @emph{object} is
@emph{class} itself or a subclass of @emph{class}.

The @emph{class-name} argument specifies the
@uref{glo_p.html#proper_name,@emph{proper name}} of the new
@uref{glo_c.html#class,@emph{class}}. If a
@uref{glo_c.html#class,@emph{class}} with the same
@uref{glo_p.html#proper_name,@emph{proper name}} already exists and that
@uref{glo_c.html#class,@emph{class}} is an
@uref{glo_i.html#instance,@emph{instance}} of
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
and if the @ref{#defclass,@strong{defclass}} form for the definition of
the new @uref{glo_c.html#class,@emph{class}} specifies a
@uref{glo_c.html#class,@emph{class}} of
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}},
the existing @uref{glo_c.html#class,@emph{class}} is redefined, and
instances of it (and its @uref{glo_s.html#subclass,@emph{subclasses}})
are updated to the new definition at the time that they are next
@emph{accessed}. For details, see @uref{sec_4-3-6.html,Section 4.3.6
(Redefining Classes)}.

Each @emph{superclass-name} argument specifies a direct
@uref{glo_s.html#superclass,@emph{superclass}} of the new
@uref{glo_c.html#class,@emph{class}}. If the
@uref{glo_s.html#superclass,@emph{superclass}} list is empty, then the
@uref{glo_s.html#superclass,@emph{superclass}} defaults depending on the
@uref{glo_m.html#metaclass,@emph{metaclass}}, with
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}
being the default for
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.

The new @uref{glo_c.html#class,@emph{class}} will inherit
@uref{glo_s.html#slot,@emph{slots}} and
@uref{glo_m.html#method,@emph{methods}} from each of its direct
@uref{glo_s.html#superclass,@emph{superclasses}}, from their direct
@uref{glo_s.html#superclass,@emph{superclasses}}, and so on. For a
discussion of how @uref{glo_s.html#slot,@emph{slots}} and
@uref{glo_m.html#method,@emph{methods}} are inherited, see
@uref{sec_4-3-4.html,Section 4.3.4 (Inheritance)}.

The following slot options are available:

@itemize
@item
The :reader slot option specifies that an
@uref{glo_u.html#unqualified_method,@emph{unqualified method}} is to be
defined on the @uref{glo_g.html#generic_function,@emph{generic
function}} named @emph{reader-function-name} to read the value of the
given @uref{glo_s.html#slot,@emph{slot}}.
@item
The :writer slot option specifies that an
@uref{glo_u.html#unqualified_method,@emph{unqualified method}} is to be
defined on the @uref{glo_g.html#generic_function,@emph{generic
function}} named @emph{writer-function-name} to write the value of the
@uref{glo_s.html#slot,@emph{slot}}.
@item
The :accessor slot option specifies that an
@uref{glo_u.html#unqualified_method,@emph{unqualified method}} is to be
defined on the generic function named @emph{reader-function-name} to
read the value of the given @uref{glo_s.html#slot,@emph{slot}} and that
an @uref{glo_u.html#unqualified_method,@emph{unqualified method}} is to
be defined on the @uref{glo_g.html#generic_function,@emph{generic
function}} named (setf @emph{reader-function-name}) to be used with
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} to modify the value of
the @uref{glo_s.html#slot,@emph{slot}}.
@item
The :allocation slot option is used to specify where storage is to be
allocated for the given @uref{glo_s.html#slot,@emph{slot}}. Storage for
a @uref{glo_s.html#slot,@emph{slot}} can be located in each instance or
in the @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} itself. The value of the
@emph{allocation-type} argument can be either the keyword :instance or
the keyword :class. If the :allocation slot option is not specified, the
effect is the same as specifying :allocation :instance.
@itemize
@item
If @emph{allocation-type} is :instance, a
@uref{glo_l.html#local_slot,@emph{local slot}} of the name
@emph{slot-name} is allocated in each instance of the
@uref{glo_c.html#class,@emph{class}}.
@item
If @emph{allocation-type} is :class, a shared
@uref{glo_s.html#slot,@emph{slot}} of the given name is allocated in the
@uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}} created by this
@ref{#defclass,@strong{defclass}} form. The value of the
@uref{glo_s.html#slot,@emph{slot}} is shared by all
@uref{glo_i.html#instance,@emph{instances}} of the
@uref{glo_c.html#class,@emph{class}}. If a class C1 defines such a
@uref{glo_s.html#shared_slot,@emph{shared slot}}, any subclass C2 of C1
will share this single @uref{glo_s.html#slot,@emph{slot}} unless the
@ref{#defclass,@strong{defclass}} form for C2 specifies a
@uref{glo_s.html#slot,@emph{slot}} of the same
@uref{glo_n.html#name,@emph{name}} or there is a superclass of C2 that
precedes C1 in the class precedence list of C2 and that defines a
@uref{glo_s.html#slot,@emph{slot}} of the same
@uref{glo_n.html#name,@emph{name}}.
@end itemize

@item
The :initform slot option is used to provide a default initial value
form to be used in the initialization of the
@uref{glo_s.html#slot,@emph{slot}}. This
@uref{glo_f.html#form,@emph{form}} is evaluated every time it is used to
initialize the @uref{glo_s.html#slot,@emph{slot}}. The lexical
environment in which this @uref{glo_f.html#form,@emph{form}} is
evaluated is the lexical environment in which the
@ref{#defclass,@strong{defclass}} form was evaluated. Note that the
lexical environment refers both to variables and to functions. For
@uref{glo_l.html#local_slot,@emph{local slots}}, the dynamic environment
is the dynamic environment in which
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
is called; for shared @uref{glo_s.html#slot,@emph{slots}}, the dynamic
environment is the dynamic environment in which the
@ref{#defclass,@strong{defclass}} form was evaluated. See
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)}.

No implementation is permitted to extend the syntax of
@ref{#defclass,@strong{defclass}} to allow (@emph{slot-name}
@emph{form}) as an abbreviation for (@emph{slot-name} :initform
@emph{form}).

@item
The :initarg slot option declares an initialization argument named
@emph{initarg-name} and specifies that this initialization argument
initializes the given @uref{glo_s.html#slot,@emph{slot}}. If the
initialization argument has a value in the call to
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
the value will be stored into the given
@uref{glo_s.html#slot,@emph{slot}}, and the slot's :initform slot
option, if any, is not evaluated. If none of the initialization
arguments specified for a given @uref{glo_s.html#slot,@emph{slot}} has a
value, the @uref{glo_s.html#slot,@emph{slot}} is initialized according
to the :initform slot option, if specified.
@item
The :type slot option specifies that the contents of the
@uref{glo_s.html#slot,@emph{slot}} will always be of the specified data
type. It effectively declares the result type of the reader generic
function when applied to an @uref{glo_o.html#object,@emph{object}} of
this @uref{glo_c.html#class,@emph{class}}. The consequences of
attempting to store in a @uref{glo_s.html#slot,@emph{slot}} a value that
does not satisfy the type of the @uref{glo_s.html#slot,@emph{slot}} are
undefined. The :type slot option is further discussed in
@uref{sec_7-5-3.html,Section 7.5.3 (Inheritance of Slots and Slot
Options)}.
@item
The :documentation slot option provides a
@uref{glo_d.html#documentation_string,@emph{documentation string}} for
the @uref{glo_s.html#slot,@emph{slot}}. :documentation can be supplied
once at most for a given @uref{glo_s.html#slot,@emph{slot}}.
@end itemize

Each class option is an option that refers to the
@uref{glo_c.html#class,@emph{class}} as a whole. The following class
options are available:

@itemize
@item
The :default-initargs class option is followed by a list of alternating
initialization argument @uref{glo_n.html#name,@emph{names}} and default
initial value forms. If any of these initialization arguments does not
appear in the initialization argument list supplied to
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
the corresponding default initial value form is evaluated, and the
initialization argument @uref{glo_n.html#name,@emph{name}} and the
@uref{glo_f.html#form,@emph{form}}'s value are added to the end of the
initialization argument list before the instance is created; see
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)}.
The default initial value form is evaluated each time it is used. The
lexical environment in which this @uref{glo_f.html#form,@emph{form}} is
evaluated is the lexical environment in which the
@ref{#defclass,@strong{defclass}} form was evaluated. The dynamic
environment is the dynamic environment in which
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
was called. If an initialization argument
@uref{glo_n.html#name,@emph{name}} appears more than once in a
:default-initargs class option, an error is signaled.
@item
The :documentation class option causes a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to be
attached with the @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}, and attached with kind
@uref{any_type.html#type,@strong{type}} to the @emph{class-name}.
:documentation can be supplied once at most.
@item
The :metaclass class option is used to specify that instances of the
@uref{glo_c.html#class,@emph{class}} being defined are to have a
different metaclass than the default provided by the system (the
@uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}).
@end itemize

Note the following rules of @ref{#defclass,@strong{defclass}} for
@uref{glo_s.html#standard_class,@emph{standard classes}}:

@itemize
@item
It is not required that the
@uref{glo_s.html#superclass,@emph{superclasses}} of a
@uref{glo_c.html#class,@emph{class}} be defined before the
@ref{#defclass,@strong{defclass}} form for that
@uref{glo_c.html#class,@emph{class}} is evaluated.
@item
All the @uref{glo_s.html#superclass,@emph{superclasses}} of a
@uref{glo_c.html#class,@emph{class}} must be defined before an
@uref{glo_i.html#instance,@emph{instance}} of the
@uref{glo_c.html#class,@emph{class}} can be made.
@item
A @uref{glo_c.html#class,@emph{class}} must be defined before it can be
used as a parameter specializer in a
@uref{mac_defmethod.html#defmethod,@strong{defmethod}} form.
@end itemize

The object system can be extended to cover situations where these rules
are not obeyed.

Some slot options are inherited by a
@uref{glo_c.html#class,@emph{class}} from its
@uref{glo_s.html#superclass,@emph{superclasses}}, and some can be
shadowed or altered by providing a local slot description. No class
options except :default-initargs are inherited. For a detailed
description of how @uref{glo_s.html#slot,@emph{slots}} and slot options
are inherited, see @uref{sec_7-5-3.html,Section 7.5.3 (Inheritance of
Slots and Slot Options)}.

The options to @ref{#defclass,@strong{defclass}} can be extended. It is
required that all implementations signal an error if they observe a
class option or a slot option that is not implemented locally.

It is valid to specify more than one reader, writer, accessor, or
initialization argument for a @uref{glo_s.html#slot,@emph{slot}}. No
other slot option can appear more than once in a single slot
description, or an error is signaled.

If no reader, writer, or accessor is specified for a
@uref{glo_s.html#slot,@emph{slot}}, the
@uref{glo_s.html#slot,@emph{slot}} can only be @emph{accessed} by the
@uref{glo_f.html#function,@emph{function}}
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

If a @ref{#defclass,@strong{defclass}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must make the
@uref{glo_c.html#class,@emph{class}} @uref{glo_n.html#name,@emph{name}}
be recognized as a valid @uref{glo_t.html#type,@emph{type}}
@uref{glo_n.html#name,@emph{name}} in subsequent declarations (as for
@uref{mac_deftype.html#deftype,@strong{deftype}}) and be recognized as a
valid @uref{glo_c.html#class,@emph{class}}
@uref{glo_n.html#name,@emph{name}} for
@uref{mac_defmethod.html#defmethod,@strong{defmethod}}
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
and for use as the :metaclass option of a subsequent
@ref{#defclass,@strong{defclass}}. The
@uref{glo_c.html#compiler,@emph{compiler}} must make the
@uref{glo_c.html#class,@emph{class}} definition available to be returned
by @uref{acc_find-class.html#find-class,@strong{find-class}} when its
@emph{environment} @uref{glo_a.html#argument,@emph{argument}} is a value
received as the @uref{glo_e.html#environment_parameter,@emph{environment
parameter}} of a @uref{glo_m.html#macro,@emph{macro}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If there are any duplicate slot names, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

If an initialization argument @uref{glo_n.html#name,@emph{name}} appears
more than once in :default-initargs class option, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

If any of the following slot options appears more than once in a single
slot description, an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled: :allocation, :initform, :type, :documentation.

It is required that all implementations signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} if
they observe a class option or a slot option that is not implemented
locally.

@strong{See Also:}

@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
@uref{fun_slot-value.html#slot-value,@strong{slot-value}},
@uref{sec_4-3.html,Section 4.3 (Classes)}, @uref{sec_4-3-4.html,Section
4.3.4 (Inheritance)}, @uref{sec_4-3-6.html,Section 4.3.6 (Redefining
Classes)}, @uref{sec_4-3-5.html,Section 4.3.5 (Determining the Class
Precedence List)}, @uref{sec_7-1.html,Section 7.1 (Object Creation and
Initialization)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFGENERIC
@subsubsection CLHS: Macro DEFGENERIC
@anchor{#clhs-macro-defgeneric}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defclass.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defmethod.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFGENERIC}

@strong{Syntax:}

@strong{defgeneric} @emph{function-name gf-lambda-list [[@emph{option} |
@{@emph{method-description}@}@strong{*}]]}

=> @emph{new-generic}

@verbatim
option::= (:argument-precedence-order parameter-name+) | 
          (declare gf-declaration+) | 
          (:documentation gf-documentation) | 
          (:method-combination method-combination method-combination-argument*) | 
          (:generic-function-class generic-function-class) | 
          (:method-class method-class) 
@end verbatim

@verbatim
method-description::= (:method method-qualifier* specialized-lambda-list [[declaration* | documentation]] form*) 
@end verbatim

@strong{Arguments and Values:}

@emph{function-name}---a @uref{glo_f.html#function_name,@emph{function
name}}.

@emph{generic-function-class}---a
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_c.html#class,@emph{class}}.

@emph{gf-declaration}---an
@uref{dec_optimize.html#optimize,@strong{optimize}}
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}};
other @uref{glo_d.html#declaration_specifier,@emph{declaration
specifiers}} are not permitted.

@emph{gf-documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{gf-lambda-list}---a
@uref{glo_g.html#generic_function_lambda_list,@emph{generic function
lambda list}}.

@emph{method-class}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_c.html#class,@emph{class}}.

@emph{method-combination-argument}---an @emph{object.}

@emph{method-combination-name}---a
@uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_t.html#type,@emph{type}}.

@emph{method-qualifiers}, @emph{specialized-lambda-list},
@emph{declarations}, @emph{documentation}, @emph{forms}---as per
@uref{mac_defmethod.html#defmethod,@strong{defmethod}}.

@emph{new-generic}---the @uref{glo_g.html#generic_function,@emph{generic
function}} @uref{glo_o.html#object,@emph{object}}.

@emph{parameter-name}---a @uref{glo_s.html#symbol,@emph{symbol}} that
names a @uref{glo_r.html#required_parameter,@emph{required parameter}}
in the @emph{lambda-list}. (If the :argument-precedence-order option is
specified, each @uref{glo_r.html#required_parameter,@emph{required
parameter}} in the @emph{lambda-list} must be used exactly once as a
@emph{parameter-name}.)

@strong{Description:}

The macro @ref{#defgeneric,@strong{defgeneric}} is used to define a
@uref{glo_g.html#generic_function,@emph{generic function}} or to specify
options and declarations that pertain to a
@uref{glo_g.html#generic_function,@emph{generic function}} as a whole.

If @emph{function-name} is a @uref{glo_l.html#list,@emph{list}} it must
be of the form (setf @emph{symbol}). If (fboundp @emph{function-name})
is @uref{glo_f.html#false,@emph{false}}, a new
@uref{glo_g.html#generic_function,@emph{generic function}} is created.
If (fdefinition @emph{function-name}) is a
@uref{glo_g.html#generic_function,@emph{generic function}}, that
@uref{glo_g.html#generic_function,@emph{generic function}} is modified.
If @emph{function-name} names an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error is
signaled.

The effect of the @ref{#defgeneric,@strong{defgeneric}} macro is as if
the following three steps were performed: first,
@uref{glo_m.html#method,@emph{methods}} defined by previous
@ref{#defgeneric,@strong{defgeneric}}
@uref{glo_f.html#form,@emph{forms}} are removed; second,
@uref{fun_ensure-ge_ric-function.html#ensure-generic-function,@strong{ensure-generic-function}}
is called; and finally, @uref{glo_m.html#method,@emph{methods}}
specified by the current @ref{#defgeneric,@strong{defgeneric}}
@uref{glo_f.html#form,@emph{form}} are added to the
@uref{glo_g.html#generic_function,@emph{generic function}}.

Each @emph{method-description} defines a
@uref{glo_m.html#method,@emph{method}} on the
@uref{glo_g.html#generic_function,@emph{generic function}}. The
@uref{glo_l.html#lambda_list,@emph{lambda list}} of each
@uref{glo_m.html#method,@emph{method}} must be congruent with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} specified by the
@emph{gf-lambda-list} option. If no
@uref{glo_m.html#method,@emph{method}} descriptions are specified and a
@uref{glo_g.html#generic_function,@emph{generic function}} of the same
name does not already exist, a
@uref{glo_g.html#generic_function,@emph{generic function}} with no
@uref{glo_m.html#method,@emph{methods}} is created.

The @emph{gf-lambda-list} argument of
@ref{#defgeneric,@strong{defgeneric}} specifies the shape of
@uref{glo_l.html#lambda_list,@emph{lambda lists}} for the
@uref{glo_m.html#method,@emph{methods}} on this
@uref{glo_g.html#generic_function,@emph{generic function}}. All
@uref{glo_m.html#method,@emph{methods}} on the resulting
@uref{glo_g.html#generic_function,@emph{generic function}} must have
@uref{glo_l.html#lambda_list,@emph{lambda lists}} that are congruent
with this shape. If a @ref{#defgeneric,@strong{defgeneric}} form is
evaluated and some @uref{glo_m.html#method,@emph{methods}} for that
@uref{glo_g.html#generic_function,@emph{generic function}} have
@uref{glo_l.html#lambda_list,@emph{lambda lists}} that are not congruent
with that given in the @ref{#defgeneric,@strong{defgeneric}} form, an
error is signaled. For further details on method congruence, see
@uref{sec_7-6-4.html,Section 7.6.4 (Congruent Lambda-lists for all
Methods of a Generic Function)}.

The @uref{glo_g.html#generic_function,@emph{generic function}} passes to
the @uref{glo_m.html#method,@emph{method}} all the argument values
passed to it, and only those; default values are not supported. Note
that optional and keyword arguments in method definitions, however, can
have default initial value forms and can use supplied-p parameters.

The following options are provided. Except as otherwise noted, a given
option may occur only once.

@itemize
@item
The :argument-precedence-order option is used to specify the order in
which the required arguments in a call to the
@uref{glo_g.html#generic_function,@emph{generic function}} are tested
for specificity when selecting a particular
@uref{glo_m.html#method,@emph{method}}. Each required argument, as
specified in the @emph{gf-lambda-list} argument, must be included
exactly once as a @emph{parameter-name} so that the full and unambiguous
precedence order is supplied. If this condition is not met, an error is
signaled.
@item
The @uref{sym_declare.html#declare,@strong{declare}} option is used to
specify declarations that pertain to the
@uref{glo_g.html#generic_function,@emph{generic function}}.

An @uref{dec_optimize.html#optimize,@strong{optimize}}
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}} is
allowed. It specifies whether method selection should be optimized for
speed or space, but it has no effect on
@uref{glo_m.html#method,@emph{methods}}. To control how a
@uref{glo_m.html#method,@emph{method}} is optimized, an
@uref{dec_optimize.html#optimize,@strong{optimize}} declaration must be
placed directly in the
@uref{mac_defmethod.html#defmethod,@strong{defmethod}}
@uref{glo_f.html#form,@emph{form}} or method description. The
optimization qualities @uref{dec_optimize.html#speed,@strong{speed}} and
@uref{dec_optimize.html#space,@strong{space}} are the only qualities
this standard requires, but an implementation can extend the object
system to recognize other qualities. A simple implementation that has
only one method selection technique and ignores
@uref{dec_optimize.html#optimize,@strong{optimize}}
@uref{glo_d.html#declaration_specifier,@emph{declaration specifiers}} is
valid.

The @uref{dec_special.html#special,@strong{special}},
@uref{dec_ftype.html#ftype,@strong{ftype}}, @strong{function},
@uref{dec_inlinecm_notinline.html#inline,@strong{inline}},
@uref{dec_inlinecm_notinline.html#notinline,@strong{notinline}}, and
@uref{dec_declaration.html#declaration,@strong{declaration}}
declarations are not permitted. Individual implementations can extend
the @uref{sym_declare.html#declare,@strong{declare}} option to support
additional declarations. If an implementation notices a
@uref{glo_d.html#declaration_specifier,@emph{declaration specifier}}
that it does not support and that has not been proclaimed as a
non-standard @uref{glo_d.html#declaration_identifier,@emph{declaration
identifier}} name in a
@uref{dec_declaration.html#declaration,@strong{declaration}}
@uref{glo_p.html#proclamation,@emph{proclamation}}, it should issue a
warning.

The @uref{sym_declare.html#declare,@strong{declare}} option may be
specified more than once. The effect is the same as if the lists of
@uref{glo_d.html#declaration_specifier,@emph{declaration specifiers}}
had been appended together into a single list and specified as a single
@uref{sym_declare.html#declare,@strong{declare}} option.

@item
The :documentation argument is a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to be
attached to the @uref{glo_g.html#generic_function,@emph{generic
function}} @uref{glo_o.html#object,@emph{object}}, and to be attached
with kind @uref{any_function.html#function,@strong{function}} to the
@emph{function-name}.
@item
The :generic-function-class option may be used to specify that the
@uref{glo_g.html#generic_function,@emph{generic function}} is to have a
different @uref{glo_c.html#class,@emph{class}} than the default provided
by the system (the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_standa_ric-function.html#standard-generic-function,@strong{standard-generic-function}}).
The @emph{class-name} argument is the name of a
@uref{glo_c.html#class,@emph{class}} that can be the
@uref{glo_c.html#class,@emph{class}} of a
@uref{glo_g.html#generic_function,@emph{generic function}}. If
@emph{function-name} specifies an existing
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :generic-function-class argument and the new
generic function @uref{glo_c.html#class,@emph{class}} is compatible with
the old,
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
called to change the @uref{glo_c.html#class,@emph{class}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}; otherwise an
error is signaled.
@item
The :method-class option is used to specify that all
@uref{glo_m.html#method,@emph{methods}} on this
@uref{glo_g.html#generic_function,@emph{generic function}} are to have a
different @uref{glo_c.html#class,@emph{class}} from the default provided
by the system (the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-method.html#standard-method,@strong{standard-method}}).
The @emph{class-name} argument is the name of a
@uref{glo_c.html#class,@emph{class}} that is capable of being the
@uref{glo_c.html#class,@emph{class}} of a
@uref{glo_m.html#method,@emph{method}}.
@item
The :method-combination option is followed by a symbol that names a type
of method combination. The arguments (if any) that follow that symbol
depend on the type of method combination. Note that the standard method
combination type does not support any arguments. However, all types of
method combination defined by the short form of
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}
accept an optional argument named @emph{order}, defaulting to
:most-specific-first, where a value of :most-specific-last reverses the
order of the primary @uref{glo_m.html#method,@emph{methods}} without
affecting the order of the auxiliary
@uref{glo_m.html#method,@emph{methods}}.
@end itemize

The @emph{method-description} arguments define
@uref{glo_m.html#method,@emph{methods}} that will be associated with the
@uref{glo_g.html#generic_function,@emph{generic function}}. The
@emph{method-qualifier} and @emph{specialized-lambda-list} arguments in
a method description are the same as for
@uref{mac_defmethod.html#defmethod,@strong{defmethod}}.

The @emph{form} arguments specify the method body. The body of the
@uref{glo_m.html#method,@emph{method}} is enclosed in an
@uref{glo_i.html#implicit_block,@emph{implicit block}}. If
@emph{function-name} is a @uref{glo_s.html#symbol,@emph{symbol}}, this
block bears the same name as the
@uref{glo_g.html#generic_function,@emph{generic function}}. If
@emph{function-name} is a @uref{glo_l.html#list,@emph{list}} of the form
(setf @emph{symbol}), the name of the block is @emph{symbol}.

Implementations can extend @ref{#defgeneric,@strong{defgeneric}} to
include other options. It is required that an implementation signal an
error if it observes an option that is not implemented locally.

@ref{#defgeneric,@strong{defgeneric}} is not required to perform any
compile-time side effects. In particular, the
@uref{glo_m.html#method,@emph{methods}} are not installed for invocation
during compilation. An
@uref{glo_i.html#implementation,@emph{implementation}} may choose to
store information about the
@uref{glo_g.html#generic_function,@emph{generic function}} for the
purposes of compile-time error-checking (such as checking the number of
arguments on calls, or noting that a definition for the function name
has been seen).

@strong{Examples:}

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If @emph{function-name} names an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

Each required argument, as specified in the @emph{gf-lambda-list}
argument, must be included exactly once as a @emph{parameter-name}, or
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

The @uref{glo_l.html#lambda_list,@emph{lambda list}} of each
@uref{glo_m.html#method,@emph{method}} specified by a
@emph{method-description} must be congruent with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} specified by the
@emph{gf-lambda-list} option, or an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If a @ref{#defgeneric,@strong{defgeneric}} form is evaluated and some
@uref{glo_m.html#method,@emph{methods}} for that
@uref{glo_g.html#generic_function,@emph{generic function}} have
@uref{glo_l.html#lambda_list,@emph{lambda lists}} that are not congruent
with that given in the @ref{#defgeneric,@strong{defgeneric}} form, an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

A given @emph{option} may occur only once, or an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} is
signaled.

If @emph{function-name} specifies an existing
@uref{glo_g.html#generic_function,@emph{generic function}} that has a
different value for the :generic-function-class argument and the new
generic function @uref{glo_c.html#class,@emph{class}} is compatible with
the old,
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
called to change the @uref{glo_c.html#class,@emph{class}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}; otherwise an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

Implementations can extend @ref{#defgeneric,@strong{defgeneric}} to
include other options. It is required that an implementation signal an
error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_program-error.html#program-error,@strong{program-error}} if
it observes an option that is not implemented locally.

@strong{See Also:}

@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{fun_ensure-ge_ric-function.html#ensure-generic-function,@strong{ensure-generic-function}},
@uref{syscla_generic-function.html#generic-function,@strong{generic-function}},
@uref{sec_7-6-4.html,Section 7.6.4 (Congruent Lambda-lists for all
Methods of a Generic Function)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss181.html,GENERIC-FLET-POORLY-DESIGNED:DELETE}
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss100.html,DEFGENERIC-DECLARE:ALLOW-MULTIPLE}
@item
@uref{../Issues/iss174.html,FUNCTION-NAME:LARGE}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-METHOD-COMBINATION
@subsubsection CLHS: Macro DEFINE-METHOD-COMBINATION
@anchor{#clhs-macro-define-method-combination}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_com_able-methods.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_find-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-METHOD-COMBINATION}

@strong{Syntax:}

@strong{define-method-combination} @emph{name
[[@emph{short-form-option}]]}

=> @emph{name}

@strong{define-method-combination} @emph{name lambda-list
(@emph{method-group-specifier}@strong{*}) [(:arguments .
args-lambda-list)] [(:generic-function generic-function-symbol)]
[[@emph{declaration}@strong{*} | @emph{documentation}]]
@emph{form}@strong{*}}

=> @emph{name}

@verbatim
short-form-option::= :documentation documentation |  
                     :identity-with-one-argument identity-with-one-argument | 
                     :operator operator 
@end verbatim

@verbatim
method-group-specifier::= (name {qualifier-pattern+ | predicate} [[long-form-option]]) 
@end verbatim

@verbatim
long-form-option::= :description description | 
                    :order order | 
                    :required required-p 
@end verbatim

@strong{Arguments and Values:}

@emph{args-lambda-list}---a
@uref{glo_d.html#define-method-combination_arguments_lambda_list,@emph{define-method-combination
arguments lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{description}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit progn}}
that must compute and return the @uref{glo_f.html#form,@emph{form}} that
specifies how the @uref{glo_m.html#method,@emph{methods}} are combined,
that is, the @uref{glo_e.html#effective_method,@emph{effective method}}.

@emph{generic-function-symbol}---a
@uref{glo_s.html#symbol,@emph{symbol}}.

@emph{identity-with-one-argument}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{lambda-list}---@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary
lambda list}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.
Non-@uref{glo_k.html#keyword,@emph{keyword}},
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbols}} are usually used.

@emph{operator}---an @uref{glo_o.html#operator,@emph{operator}}.
@emph{Name} and @emph{operator} are often the
@uref{glo_s.html#same,@emph{same}}
@uref{glo_s.html#symbol,@emph{symbol}}. This is the default, but it is
not required.

@emph{order}---:most-specific-first or :most-specific-last; evaluated.

@emph{predicate}---a @uref{glo_s.html#symbol,@emph{symbol}} that names a
@uref{glo_f.html#function,@emph{function}} of one argument that returns
a @uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@emph{qualifier-pattern}---a @uref{glo_l.html#list,@emph{list}}, or the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_st.html#ST,@strong{*}}.

@emph{required-p}---a
@uref{glo_g.html#generalized_boolean,@emph{generalized boolean}}.

@strong{Description:}

The macro
@ref{#define-method-combination,@strong{define-method-combination}} is
used to define new types of method combination.

There are two forms of
@ref{#define-method-combination,@strong{define-method-combination}}. The
short form is a simple facility for the cases that are expected to be
most commonly needed. The long form is more powerful but more verbose.
It resembles @uref{mac_defmacro.html#defmacro,@strong{defmacro}} in that
the body is an expression, usually using backquote, that computes a
@uref{glo_f.html#form,@emph{form}}. Thus arbitrary control structures
can be implemented. The long form also allows arbitrary processing of
method @uref{glo_q.html#qualifier,@emph{qualifiers}}.

@strong{Short Form}

The short form syntax of
@ref{#define-method-combination,@strong{define-method-combination}} is
recognized when the second @uref{glo_s.html#subform,@emph{subform}} is a
@uref{glo_n.html#non-nil,@emph{non-nil}} symbol or is not present. When
the short form is used, @emph{name} is defined as a type of method
combination that produces a Lisp form (@emph{operator}
@emph{method-call} @emph{method-call} ...). The @emph{operator} is a
@uref{glo_s.html#symbol,@emph{symbol}} that can be the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_f.html#function,@emph{function}},
@uref{glo_m.html#macro,@emph{macro}}, or
@uref{glo_s.html#special_operator,@emph{special operator}}. The
@emph{operator} can be supplied by a keyword option; it defaults to
@emph{name}.

Keyword options for the short form are the following:

@itemize
@item
The :documentation option is used to document the method-combination
type; see description of long form below.
@item
The :identity-with-one-argument option enables an optimization when its
value is @uref{glo_t.html#true,@emph{true}} (the default is
@uref{glo_f.html#false,@emph{false}}). If there is exactly one
applicable method and it is a primary method, that method serves as the
effective method and @emph{operator} is not called. This optimization
avoids the need to create a new effective method and avoids the overhead
of a @uref{glo_f.html#function,@emph{function}} call. This option is
designed to be used with operators such as
@uref{speope_progn.html#progn,@strong{progn}},
@uref{mac_and.html#and,@strong{and}}, @uref{fun_pl.html#PL,@strong{+}},
and @uref{fun_maxcm_min.html#max,@strong{max}}.
@item
The :operator option specifies the @uref{glo_n.html#name,@emph{name}} of
the operator. The @emph{operator} argument is a
@uref{glo_s.html#symbol,@emph{symbol}} that can be the
@uref{glo_n.html#name,@emph{name}} of a
@uref{glo_f.html#function,@emph{function}},
@uref{glo_m.html#macro,@emph{macro}}, or
@uref{glo_s.html#special_form,@emph{special form}}.
@end itemize

These types of method combination require exactly one
@uref{glo_q.html#qualifier,@emph{qualifier}} per method. An error is
signaled if there are applicable methods with no
@uref{glo_q.html#qualifier,@emph{qualifiers}} or with
@uref{glo_q.html#qualifier,@emph{qualifiers}} that are not supported by
the method combination type.

A method combination procedure defined in this way recognizes two roles
for methods. A method whose one
@uref{glo_q.html#qualifier,@emph{qualifier}} is the symbol naming this
type of method combination is defined to be a primary method. At least
one primary method must be applicable or an error is signaled. A method
with :around as its one @uref{glo_q.html#qualifier,@emph{qualifier}} is
an auxiliary method that behaves the same as an
@uref{glo_a.html#around_method,@emph{around method}} in standard method
combination. The @uref{glo_f.html#function,@emph{function}}
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
can only be used in @uref{glo_a.html#around_method,@emph{around
methods}}; it cannot be used in primary methods defined by the short
form of the
@ref{#define-method-combination,@strong{define-method-combination}}
macro.

A method combination procedure defined in this way accepts an optional
argument named @emph{order}, which defaults to :most-specific-first. A
value of :most-specific-last reverses the order of the primary methods
without affecting the order of the auxiliary methods.

The short form automatically includes error checking and support for
@uref{glo_a.html#around_method,@emph{around methods}}.

For a discussion of built-in method combination types, see
@uref{sec_7-6-6-4.html,Section 7.6.6.4 (Built-in Method Combination
Types)}.

@strong{Long Form}

The long form syntax of
@ref{#define-method-combination,@strong{define-method-combination}} is
recognized when the second @uref{glo_s.html#subform,@emph{subform}} is a
list.

The @emph{lambda-list} receives any arguments provided after the
@uref{glo_n.html#name,@emph{name}} of the method combination type in the
:method-combination option to
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}.

A list of method group specifiers follows. Each specifier selects a
subset of the applicable methods to play a particular role, either by
matching their @uref{glo_q.html#qualifier,@emph{qualifiers}} against
some patterns or by testing their
@uref{glo_q.html#qualifier,@emph{qualifiers}} with a @emph{predicate}.
These method group specifiers define all method
@uref{glo_q.html#qualifier,@emph{qualifiers}} that can be used with this
type of method combination.

The @uref{glo_c.html#car,@emph{car}} of each
@emph{method-group-specifier} is a
@uref{glo_s.html#symbol,@emph{symbol}} which
@uref{glo_n.html#name,@emph{names}} a
@uref{glo_v.html#variable,@emph{variable}}. During the execution of the
@uref{glo_f.html#form,@emph{forms}} in the body of
@ref{#define-method-combination,@strong{define-method-combination}},
this @uref{glo_v.html#variable,@emph{variable}} is bound to a list of
the @uref{glo_m.html#method,@emph{methods}} in the method group. The
@uref{glo_m.html#method,@emph{methods}} in this list occur in the order
specified by the :order option.

If @emph{qualifier-pattern} is a @uref{glo_s.html#symbol,@emph{symbol}}
it must be @uref{any_st.html#ST,@strong{*}}. A method matches a
@emph{qualifier-pattern} if the method's list of
@uref{glo_q.html#qualifier,@emph{qualifiers}} is
@uref{fun_equal.html#equal,@strong{equal}} to the
@emph{qualifier-pattern} (except that the symbol
@uref{any_st.html#ST,@strong{*}} in a @emph{qualifier-pattern} matches
anything). Thus a @emph{qualifier-pattern} can be one of the following:
the @uref{glo_e.html#empty_list,@emph{empty list}}, which matches
@uref{glo_u.html#unqualified_method,@emph{unqualified methods}}; the
symbol @uref{any_st.html#ST,@strong{*}}, which matches all methods; a
true list, which matches methods with the same number of
@uref{glo_q.html#qualifier,@emph{qualifiers}} as the length of the list
when each @uref{glo_q.html#qualifier,@emph{qualifier}} matches the
corresponding list element; or a dotted list that ends in the symbol
@uref{any_st.html#ST,@strong{*}} (the @uref{any_st.html#ST,@strong{*}}
matches any number of additional
@uref{glo_q.html#qualifier,@emph{qualifiers}}).

Each applicable method is tested against the @emph{qualifier-patterns}
and @emph{predicates} in left-to-right order. As soon as a
@emph{qualifier-pattern} matches or a @emph{predicate} returns true, the
method becomes a member of the corresponding method group and no further
tests are made. Thus if a method could be a member of more than one
method group, it joins only the first such group. If a method group has
more than one @emph{qualifier-pattern}, a method need only satisfy one
of the @emph{qualifier-patterns} to be a member of the group.

The @uref{glo_n.html#name,@emph{name}} of a @emph{predicate} function
can appear instead of @emph{qualifier-patterns} in a method group
specifier. The @emph{predicate} is called for each method that has not
been assigned to an earlier method group; it is called with one
argument, the method's @uref{glo_q.html#qualifier,@emph{qualifier}}
@uref{glo_l.html#list,@emph{list}}. The @emph{predicate} should return
true if the method is to be a member of the method group. A
@emph{predicate} can be distinguished from a @emph{qualifier-pattern}
because it is a @uref{glo_s.html#symbol,@emph{symbol}} other than
@uref{any_nil.html#nil,@strong{nil}} or
@uref{any_st.html#ST,@strong{*}}.

If there is an applicable method that does not fall into any method
group, the @uref{glo_f.html#function,@emph{function}}
@uref{fun_invalid-method-error.html#invalid-method-error,@strong{invalid-method-error}}
is called.

Method group specifiers can have keyword options following the
@uref{glo_q.html#qualifier,@emph{qualifier}} patterns or predicate.
Keyword options can be distinguished from additional
@uref{glo_q.html#qualifier,@emph{qualifier}} patterns because they are
neither lists nor the symbol @uref{any_st.html#ST,@strong{*}}. The
keyword options are as follows:

@itemize
@item
The :description option is used to provide a description of the role of
methods in the method group. Programming environment tools use (apply
#'format stream @emph{format-control} (method-qualifiers @emph{method}))
to print this description, which is expected to be concise. This keyword
option allows the description of a method
@uref{glo_q.html#qualifier,@emph{qualifier}} to be defined in the same
module that defines the meaning of the method
@uref{glo_q.html#qualifier,@emph{qualifier}}. In most cases,
@emph{format-control} will not contain any
@uref{fun_format.html#format,@strong{format}} directives, but they are
available for generality. If :description is not supplied, a default
description is generated based on the variable name and the
@uref{glo_q.html#qualifier,@emph{qualifier}} patterns and on whether
this method group includes the
@uref{glo_u.html#unqualified_method,@emph{unqualified methods}}.
@item
The :order option specifies the order of methods. The @emph{order}
argument is a @uref{glo_f.html#form,@emph{form}} that evaluates to
:most-specific-first or :most-specific-last. If it evaluates to any
other value, an error is signaled. If :order is not supplied, it
defaults to :most-specific-first.
@item
The :required option specifies whether at least one method in this
method group is required. If its value is
@uref{glo_t.html#true,@emph{true}} and the method group is empty (that
is, no applicable methods match the
@uref{glo_q.html#qualifier,@emph{qualifier}} patterns or satisfy the
predicate), an error is signaled. If :required is not supplied, it
defaults to @uref{any_nil.html#nil,@strong{nil}}.
@end itemize

The use of method group specifiers provides a convenient syntax to
select methods, to divide them among the possible roles, and to perform
the necessary error checking. It is possible to perform further
filtering of methods in the body @uref{glo_f.html#form,@emph{forms}} by
using normal list-processing operations and the functions
@uref{stagenfun_met_d-qualifiers.html#method-qualifiers,@strong{method-qualifiers}}
and
@uref{fun_invalid-method-error.html#invalid-method-error,@strong{invalid-method-error}}.
It is permissible to use @uref{spefor_setq.html#setq,@strong{setq}} on
the variables named in the method group specifiers and to bind
additional variables. It is also possible to bypass the method group
specifier mechanism and do everything in the body
@uref{glo_f.html#form,@emph{forms}}. This is accomplished by writing a
single method group with @uref{any_st.html#ST,@strong{*}} as its only
@emph{qualifier-pattern}; the variable is then bound to a
@uref{glo_l.html#list,@emph{list}} of all of the
@uref{glo_a.html#applicable_method,@emph{applicable methods}}, in
most-specific-first order.

The body @emph{forms} compute and return the
@uref{glo_f.html#form,@emph{form}} that specifies how the methods are
combined, that is, the effective method. The effective method is
evaluated in the @uref{glo_n.html#null_lexical_environment,@emph{null
lexical environment}} augmented with a local macro definition for
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}}
and with bindings named by symbols not
@uref{glo_a.html#accessible,@emph{accessible}} from the COMMON-LISP-USER
package. Given a method object in one of the
@uref{glo_l.html#list,@emph{lists}} produced by the method group
specifiers and a @uref{glo_l.html#list,@emph{list}} of next methods,
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}}
will invoke the method such that
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
has available the next methods.

When an effective method has no effect other than to call a single
method, some implementations employ an optimization that uses the single
method directly as the effective method, thus avoiding the need to
create a new effective method. This optimization is active when the
effective method form consists entirely of an invocation of the
@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}}
macro whose first @uref{glo_s.html#subform,@emph{subform}} is a method
object and whose second @uref{glo_s.html#subform,@emph{subform}} is
@uref{any_nil.html#nil,@strong{nil}} or unsupplied. Each
@ref{#define-method-combination,@strong{define-method-combination}} body
is responsible for stripping off redundant invocations of
@uref{speope_progn.html#progn,@strong{progn}},
@uref{mac_and.html#and,@strong{and}},
@uref{speope_multip_-value-prog1.html#multiple-value-prog1,@strong{multiple-value-prog1}},
and the like, if this optimization is desired.

The list (:arguments . @emph{lambda-list}) can appear before any
declarations or
@uref{glo_d.html#documentation_string,@emph{documentation string}}. This
form is useful when the method combination type performs some specific
behavior as part of the combined method and that behavior needs access
to the arguments to the @uref{glo_g.html#generic_function,@emph{generic
function}}. Each parameter variable defined by @emph{lambda-list} is
bound to a @uref{glo_f.html#form,@emph{form}} that can be inserted into
the effective method. When this @uref{glo_f.html#form,@emph{form}} is
evaluated during execution of the effective method, its value is the
corresponding argument to the
@uref{glo_g.html#generic_function,@emph{generic function}}; the
consequences of using such a @uref{glo_f.html#form,@emph{form}} as the
@emph{place} in a @uref{mac_setfcm_psetf.html#setf,@strong{setf}}
@uref{glo_f.html#form,@emph{form}} are undefined. Argument
correspondence is computed by dividing the :arguments @emph{lambda-list}
and the @uref{glo_g.html#generic_function,@emph{generic function}}
@emph{lambda-list} into three sections: the
@uref{glo_r.html#required_parameter,@emph{required parameters}}, the
@uref{glo_o.html#optional_parameter,@emph{optional parameters}}, and the
@uref{glo_k.html#keyword,@emph{keyword}} and
@uref{glo_r.html#rest_parameter,@emph{rest parameters}}. The
@uref{glo_a.html#argument,@emph{arguments}} supplied to the
@uref{glo_g.html#generic_function,@emph{generic function}} for a
particular @uref{glo_c.html#call,@emph{call}} are also divided into
three sections; the required @uref{glo_a.html#argument,@emph{arguments}}
section contains as many @uref{glo_a.html#argument,@emph{arguments}} as
the @uref{glo_g.html#generic_function,@emph{generic function}} has
@uref{glo_r.html#required_parameter,@emph{required parameters}}, the
optional @uref{glo_a.html#argument,@emph{arguments}} section contains as
many arguments as the @uref{glo_g.html#generic_function,@emph{generic
function}} has @uref{glo_o.html#optional_parameter,@emph{optional
parameters}}, and the keyword/rest
@uref{glo_a.html#argument,@emph{arguments}} section contains the
remaining arguments. Each @uref{glo_p.html#parameter,@emph{parameter}}
in the required and optional sections of the :arguments
@emph{lambda-list} accesses the argument at the same position in the
corresponding section of the
@uref{glo_a.html#argument,@emph{arguments}}. If the section of the
:arguments @emph{lambda-list} is shorter, extra
@uref{glo_a.html#argument,@emph{arguments}} are ignored. If the section
of the :arguments @emph{lambda-list} is longer, excess
@uref{glo_r.html#required_parameter,@emph{required parameters}} are
bound to forms that evaluate to @uref{any_nil.html#nil,@strong{nil}} and
excess @uref{glo_o.html#optional_parameter,@emph{optional parameters}}
are @uref{glo_b.html#bound,@emph{bound}} to their initforms. The
@uref{glo_k.html#keyword_parameter,@emph{keyword parameters}} and
@uref{glo_r.html#rest_parameter,@emph{rest parameters}} in the
:arguments @emph{lambda-list} access the keyword/rest section of the
@uref{glo_a.html#argument,@emph{arguments}}. If the :arguments
@emph{lambda-list} contains &key, it behaves as if it also contained
&allow-other-keys.

In addition, &whole @emph{var} can be placed first in the :arguments
@emph{lambda-list}. It causes @emph{var} to be
@uref{glo_b.html#bound,@emph{bound}} to a
@uref{glo_f.html#form,@emph{form}} that
@uref{glo_e.html#evaluate,@emph{evaluates}} to a
@uref{glo_l.html#list,@emph{list}} of all of the
@uref{glo_a.html#argument,@emph{arguments}} supplied to the
@uref{glo_g.html#generic_function,@emph{generic function}}. This is
different from &rest because it accesses all of the arguments, not just
the keyword/rest @uref{glo_a.html#argument,@emph{arguments}}.

Erroneous conditions detected by the body should be reported with
@uref{fun_method-co_nation-error.html#method-combination-error,@strong{method-combination-error}}
or
@uref{fun_invalid-method-error.html#invalid-method-error,@strong{invalid-method-error}};
these @uref{glo_f.html#function,@emph{functions}} add any necessary
contextual information to the error message and will signal the
appropriate error.

The body @emph{forms} are evaluated inside of the
@uref{glo_b.html#binding,@emph{bindings}} created by the
@uref{glo_l.html#lambda_list,@emph{lambda list}} and method group
specifiers. Declarations at the head of the body are positioned directly
inside of @uref{glo_b.html#binding,@emph{bindings}} created by the
@uref{glo_l.html#lambda_list,@emph{lambda list}} and outside of the
@uref{glo_b.html#binding,@emph{bindings}} of the method group variables.
Thus method group variables cannot be declared in this way.
@uref{speope_locally.html#locally,@strong{locally}} may be used around
the body, however.

Within the body @emph{forms}, @emph{generic-function-symbol} is bound to
the @uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_o.html#object,@emph{object}}.

@emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
@emph{name} (as kind @strong{method-combination}) and to the
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_o.html#object,@emph{object}}.

Note that two methods with identical specializers, but with different
@uref{glo_q.html#qualifier,@emph{qualifiers}}, are not ordered by the
algorithm described in Step 2 of the method selection and combination
process described in @uref{sec_7-6-6.html,Section 7.6.6 (Method
Selection and Combination)}. Normally the two methods play different
roles in the effective method because they have different
@uref{glo_q.html#qualifier,@emph{qualifiers}}, and no matter how they
are ordered in the result of Step 2, the effective method is the same.
If the two methods play the same role and their order matters, an error
is signaled. This happens as part of the
@uref{glo_q.html#qualifier,@emph{qualifier}} pattern matching in
@ref{#define-method-combination,@strong{define-method-combination}}.

If a @ref{#define-method-combination,@strong{define-method-combination}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must make the
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_n.html#name,@emph{name}} be recognized as a valid
@uref{glo_m.html#method_combination,@emph{method combination}}
@uref{glo_n.html#name,@emph{name}} in subsequent
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}}
@uref{glo_f.html#form,@emph{forms}}. However, the
@uref{glo_m.html#method_combination,@emph{method combination}} is
executed no earlier than when the
@ref{#define-method-combination,@strong{define-method-combination}}
@uref{glo_f.html#form,@emph{form}} is executed, and possibly as late as
the time that @uref{glo_g.html#generic_function,@emph{generic
functions}} that use the
@uref{glo_m.html#method_combination,@emph{method combination}} are
executed.

@strong{Examples:}

Most examples of the long form of
@ref{#define-method-combination,@strong{define-method-combination}} also
illustrate the use of the related
@uref{glo_f.html#function,@emph{functions}} that are provided as part of
the declarative method combination facility.

@verbatim
;;; Examples of the short form of define-method-combination
 
 (define-method-combination and :identity-with-one-argument t) 
  
 (defmethod func and ((x class1) y) ...)
 
;;; The equivalent of this example in the long form is:
 
 (define-method-combination and 
         (&optional (order :most-specific-first))
         ((around (:around))
          (primary (and) :order order :required t))
   (let ((form (if (rest primary)
                   `(and ,@(mapcar #'(lambda (method)
                                       `(call-method ,method))
                                   primary))
                   `(call-method ,(first primary)))))
     (if around
         `(call-method ,(first around)
                       (,@(rest around)
                        (make-method ,form)))
         form)))
  
;;; Examples of the long form of define-method-combination
 
;The default method-combination technique
 (define-method-combination standard ()
         ((around (:around))
          (before (:before))
          (primary () :required t)
          (after (:after)))
   (flet ((call-methods (methods)
            (mapcar #'(lambda (method)
                        `(call-method ,method))
                    methods)))
     (let ((form (if (or before after (rest primary))
                     `(multiple-value-prog1
                        (progn ,@(call-methods before)
                               (call-method ,(first primary)
                                            ,(rest primary)))
                        ,@(call-methods (reverse after)))
                     `(call-method ,(first primary)))))
       (if around
           `(call-method ,(first around)
                         (,@(rest around)
                          (make-method ,form)))
           form))))
  
;A simple way to try several methods until one returns non-nil
 (define-method-combination or ()
         ((methods (or)))
   `(or ,@(mapcar #'(lambda (method)
                      `(call-method ,method))
                  methods)))
  
;A more complete version of the preceding
 (define-method-combination or 
         (&optional (order ':most-specific-first))
         ((around (:around))
          (primary (or)))
   ;; Process the order argument
   (case order
     (:most-specific-first)
     (:most-specific-last (setq primary (reverse primary)))
     (otherwise (method-combination-error "~S is an invalid order.~@
     :most-specific-first and :most-specific-last are the possible values."
                                          order)))
   ;; Must have a primary method
   (unless primary
     (method-combination-error "A primary method is required."))
   ;; Construct the form that calls the primary methods
   (let ((form (if (rest primary)
                   `(or ,@(mapcar #'(lambda (method)
                                      `(call-method ,method))
                                  primary))
                   `(call-method ,(first primary)))))
     ;; Wrap the around methods around that form
     (if around
         `(call-method ,(first around)
                       (,@(rest around)
                        (make-method ,form)))
         form)))
  
;The same thing, using the :order and :required keyword options
 (define-method-combination or 
         (&optional (order ':most-specific-first))
         ((around (:around))
          (primary (or) :order order :required t))
   (let ((form (if (rest primary)
                   `(or ,@(mapcar #'(lambda (method)
                                      `(call-method ,method))
                                  primary))
                   `(call-method ,(first primary)))))
     (if around
         `(call-method ,(first around)
                       (,@(rest around)
                        (make-method ,form)))
         form)))
  
;This short-form call is behaviorally identical to the preceding
 (define-method-combination or :identity-with-one-argument t)
 
;Order methods by positive integer qualifiers
;:around methods are disallowed to keep the example small
 (define-method-combination example-method-combination ()
         ((methods positive-integer-qualifier-p))
   `(progn ,@(mapcar #'(lambda (method)
                         `(call-method ,method))
                     (stable-sort methods #'<
                       :key #'(lambda (method)
                                (first (method-qualifiers method)))))))
 
 (defun positive-integer-qualifier-p (method-qualifiers)
   (and (= (length method-qualifiers) 1)
        (typep (first method-qualifiers) '(integer 0 *))))
  
;;; Example of the use of :arguments
 (define-method-combination progn-with-lock ()
         ((methods ()))
   (:arguments object)
   `(unwind-protect
        (progn (lock (object-lock ,object))
               ,@(mapcar #'(lambda (method)
                             `(call-method ,method))
                         methods))
      (unlock (object-lock ,object))))
  
@end verbatim

@strong{Affected By:} None.

@strong{Side Effects:}

The @uref{glo_c.html#compiler,@emph{compiler}} is not required to
perform any compile-time side-effects.

@strong{Exceptional Situations:}

Method combination types defined with the short form require exactly one
@uref{glo_q.html#qualifier,@emph{qualifier}} per method. An error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled if there are
applicable methods with no @uref{glo_q.html#qualifier,@emph{qualifiers}}
or with @uref{glo_q.html#qualifier,@emph{qualifiers}} that are not
supported by the method combination type. At least one primary method
must be applicable or an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If an applicable method does not fall into any method group, the system
signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} indicating that the method
is invalid for the kind of method combination in use.

If the value of the :required option is
@uref{glo_t.html#true,@emph{true}} and the method group is empty (that
is, no applicable methods match the
@uref{glo_q.html#qualifier,@emph{qualifier}} patterns or satisfy the
predicate), an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If the :order option evaluates to a value other than
:most-specific-first or :most-specific-last, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{locmac_call-m__make-method.html#call-method,@strong{call-method}},
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{stagenfun_met_d-qualifiers.html#method-qualifiers,@strong{method-qualifiers}},
@uref{fun_method-co_nation-error.html#method-combination-error,@strong{method-combination-error}},
@uref{fun_invalid-method-error.html#invalid-method-error,@strong{invalid-method-error}},
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}},
@uref{sec_7-6-6.html,Section 7.6.6 (Method Selection and Combination)},
@uref{sec_7-6-6-4.html,Section 7.6.6.4 (Built-in Method Combination
Types)}, @uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:}

The :method-combination option of
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}} is used to
specify that a @uref{glo_g.html#generic_function,@emph{generic
function}} should use a particular method combination type. The first
argument to the :method-combination option is the
@uref{glo_n.html#name,@emph{name}} of a method combination type and the
remaining arguments are options for that type.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss103.html,DEFINE-METHOD-COMBINATION-BEHAVIOR:CLARIFY}
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss242.html,METHOD-COMBINATION-ARGUMENTS:CLARIFY}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFMETHOD
@subsubsection CLHS: Macro DEFMETHOD
@anchor{#clhs-macro-defmethod}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_defgeneric.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{acc_find-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFMETHOD}

@strong{Syntax:}

@strong{defmethod} @emph{@emph{function-name}
@{@emph{method-qualifier}@}* @emph{specialized-lambda-list}
[[@emph{declaration}@strong{*} | @emph{documentation}]]
@emph{form}@strong{*}}

=> @emph{new-method}

@emph{function-name}::= @{@uref{glo_s.html#symbol,@emph{symbol}} | (setf
@uref{glo_s.html#symbol,@emph{symbol}})@}

@emph{method-qualifier}::= @uref{glo_n.html#non-list,@emph{non-list}}

@verbatim
specialized-lambda-list::= ({var | (var parameter-specializer-name)}* 
                            [&optional {var | (var [initform [supplied-p-parameter] ])}*] 
                            [&rest var] 
                            [&key{var | ({var | (keywordvar)} [initform [supplied-p-parameter] ])}*
                                 [&allow-other-keys] ] 
                            [&aux {var | (var [initform] )}*] ) 
parameter-specializer-name::= symbol | (eql eql-specializer-form)
@end verbatim

@strong{Arguments and Values:}

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{documentation}---a @uref{glo_s.html#string,@emph{string}}; not
evaluated.

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{eql-specializer-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{Form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{Initform}---a @uref{glo_f.html#form,@emph{form}}.

@emph{Supplied-p-parameter}---variable name.

@emph{new-method}---the new @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The macro @ref{#defmethod,@strong{defmethod}} defines a
@uref{glo_m.html#method,@emph{method}} on a
@uref{glo_g.html#generic_function,@emph{generic function}}.

If (fboundp @emph{function-name}) is
@uref{any_nil.html#nil,@strong{nil}}, a
@uref{glo_g.html#generic_function,@emph{generic function}} is created
with default values for the argument precedence order (each argument is
more specific than the arguments to its right in the argument list), for
the generic function class (the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_standa_ric-function.html#standard-generic-function,@strong{standard-generic-function}}),
for the method class (the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_standard-method.html#standard-method,@strong{standard-method}}),
and for the method combination type (the standard method combination
type). The @uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} is congruent
with the @uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_m.html#method,@emph{method}} being defined; if the
@ref{#defmethod,@strong{defmethod}} form mentions keyword arguments, the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}} will mention
..... key (but no keyword arguments). If @emph{function-name} names an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error is
signaled.

If a @uref{glo_g.html#generic_function,@emph{generic function}} is
currently named by @emph{function-name}, the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_m.html#method,@emph{method}} must be congruent with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}. If this
condition does not hold, an error is signaled. For a definition of
congruence in this context, see @uref{sec_7-6-4.html,Section 7.6.4
(Congruent Lambda-lists for all Methods of a Generic Function)}.

Each @emph{method-qualifier} argument is an
@uref{glo_o.html#object,@emph{object}} that is used by method
combination to identify the given
@uref{glo_m.html#method,@emph{method}}. The method combination type
might further restrict what a method
@uref{glo_q.html#qualifier,@emph{qualifier}} can be. The standard method
combination type allows for
@uref{glo_u.html#unqualified_method,@emph{unqualified methods}} and
@uref{glo_m.html#method,@emph{methods}} whose sole
@uref{glo_q.html#qualifier,@emph{qualifier}} is one of the keywords
:before, :after, or :around.

The @emph{specialized-lambda-list} argument is like an ordinary
@uref{glo_l.html#lambda_list,@emph{lambda list}} except that the
@uref{glo_n.html#name,@emph{names}} of required parameters can be
replaced by specialized parameters. A specialized parameter is a list of
the form (@emph{var} @emph{parameter-specializer-name}). Only required
parameters can be specialized. If @emph{parameter-specializer-name} is a
@uref{glo_s.html#symbol,@emph{symbol}} it names a
@uref{glo_c.html#class,@emph{class}}; if it is a
@uref{glo_l.html#list,@emph{list}}, it is of the form (eql
@emph{eql-specializer-form}). The parameter specializer name (eql
@emph{eql-specializer-form}) indicates that the corresponding argument
must be @uref{fun_eql.html#eql,@strong{eql}} to the
@uref{glo_o.html#object,@emph{object}} that is the value of
@emph{eql-specializer-form} for the
@uref{glo_m.html#method,@emph{method}} to be applicable. The
@emph{eql-specializer-form} is evaluated at the time that the expansion
of the @ref{#defmethod,@strong{defmethod}} macro is evaluated. If no
@uref{glo_p.html#parameter_specializer_name,@emph{parameter specializer
name}} is specified for a given required parameter, the
@uref{glo_p.html#parameter_specializer,@emph{parameter specializer}}
defaults to the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}}. For further discussion, see
@uref{sec_7-6-2.html,Section 7.6.2 (Introduction to Methods)}.

The @emph{form} arguments specify the method body. The body of the
@uref{glo_m.html#method,@emph{method}} is enclosed in an
@uref{glo_i.html#implicit_block,@emph{implicit block}}. If
@emph{function-name} is a @uref{glo_s.html#symbol,@emph{symbol}}, this
block bears the same @uref{glo_n.html#name,@emph{name}} as the
@uref{glo_g.html#generic_function,@emph{generic function}}. If
@emph{function-name} is a @uref{glo_l.html#list,@emph{list}} of the form
(setf @emph{symbol}), the @uref{glo_n.html#name,@emph{name}} of the
block is @emph{symbol}.

The @uref{glo_c.html#class,@emph{class}} of the
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} that is created is that given by
the method class option of the
@uref{glo_g.html#generic_function,@emph{generic function}} on which the
@uref{glo_m.html#method,@emph{method}} is defined.

If the @uref{glo_g.html#generic_function,@emph{generic function}}
already has a @uref{glo_m.html#method,@emph{method}} that agrees with
the @uref{glo_m.html#method,@emph{method}} being defined on
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
and @uref{glo_q.html#qualifier,@emph{qualifiers}},
@ref{#defmethod,@strong{defmethod}} replaces the existing
@uref{glo_m.html#method,@emph{method}} with the one now being defined.
For a definition of agreement in this context. see
@uref{sec_7-6-3.html,Section 7.6.3 (Agreement on Parameter Specializers
and Qualifiers)}.

The @uref{glo_p.html#parameter_specializer,@emph{parameter
specializers}} are derived from the
@uref{glo_p.html#parameter_specializer_name,@emph{parameter specializer
names}} as described in @uref{sec_7-6-2.html,Section 7.6.2 (Introduction
to Methods)}.

The expansion of the @ref{#defmethod,@strong{defmethod}} macro ``refers
to'' each specialized parameter (see the description of
@uref{dec_ignorecm_ignorable.html#ignore,@strong{ignore}} within the
description of @uref{sym_declare.html#declare,@strong{declare}}). This
includes parameters that have an explicit
@uref{glo_p.html#parameter_specializer_name,@emph{parameter specializer
name}} of @uref{any_t.html#t,@strong{t}}. This means that a compiler
warning does not occur if the body of the
@uref{glo_m.html#method,@emph{method}} does not refer to a specialized
parameter, while a warning might occur if the body of the
@uref{glo_m.html#method,@emph{method}} does not refer to an
unspecialized parameter. For this reason, a parameter that specializes
on @uref{any_t.html#t,@strong{t}} is not quite synonymous with an
unspecialized parameter in this context.

Declarations at the head of the method body that apply to the method's
@uref{glo_l.html#lambda_variable,@emph{lambda variables}} are treated as
@uref{glo_b.html#bound_declaration,@emph{bound declarations}} whose
@uref{glo_s.html#scope,@emph{scope}} is the same as the corresponding
@uref{glo_b.html#binding,@emph{bindings}}.

Declarations at the head of the method body that apply to the functional
bindings of
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
or @uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}}
apply to references to those functions within the method body
@emph{forms}. Any outer @uref{glo_b.html#binding,@emph{bindings}} of the
@uref{glo_f.html#function_name,@emph{function names}}
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
and
@uref{locfun_next-method-p.html#next-method-p,@strong{next-method-p}},
and declarations associated with such
@uref{glo_b.html#binding,@emph{bindings}} are @emph{shadowed}[2] within
the method body @emph{forms}.

The @uref{glo_s.html#scope,@emph{scope}} of
@uref{glo_f.html#free_declaration,@emph{free declarations}} at the head
of the method body is the entire method body, which includes any
implicit local function definitions but excludes
@uref{glo_i.html#initialization_form,@emph{initialization forms}} for
the @uref{glo_l.html#lambda_variable,@emph{lambda variables}}.

@ref{#defmethod,@strong{defmethod}} is not required to perform any
compile-time side effects. In particular, the
@uref{glo_m.html#method,@emph{methods}} are not installed for invocation
during compilation. An
@uref{glo_i.html#implementation,@emph{implementation}} may choose to
store information about the
@uref{glo_g.html#generic_function,@emph{generic function}} for the
purposes of compile-time error-checking (such as checking the number of
arguments on calls, or noting that a definition for the function name
has been seen).

@emph{Documentation} is attached as a
@uref{glo_d.html#documentation_string,@emph{documentation string}} to
the @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Examples:} None.

@strong{Affected By:}

The definition of the referenced
@uref{glo_g.html#generic_function,@emph{generic function}}.

@strong{Exceptional Situations:}

If @emph{function-name} names an
@uref{glo_o.html#ordinary_function,@emph{ordinary function}}, a
@uref{glo_m.html#macro,@emph{macro}}, or a
@uref{glo_s.html#special_operator,@emph{special operator}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If a @uref{glo_g.html#generic_function,@emph{generic function}} is
currently named by @emph{function-name}, the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_m.html#method,@emph{method}} must be congruent with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of the
@uref{glo_g.html#generic_function,@emph{generic function}}, or an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}},
@uref{stagenfun_doc_umentationcp.html#documentation,@strong{documentation}},
@uref{sec_7-6-2.html,Section 7.6.2 (Introduction to Methods)},
@uref{sec_7-6-4.html,Section 7.6.4 (Congruent Lambda-lists for all
Methods of a Generic Function)}, @uref{sec_7-6-3.html,Section 7.6.3
(Agreement on Parameter Specializers and Qualifiers)},
@uref{sec_3-4-11.html,Section 3.4.11 (Syntactic Interaction of
Documentation Strings and Declarations)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss135.html,DOCUMENTATION-FUNCTION-BUGS:FIX}
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss107.html,DEFMETHOD-DECLARATION-SCOPE:CORRESPONDS-TO-BINDINGS}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-ACCESSORS
@subsubsection CLHS: Macro WITH-ACCESSORS
@anchor{#clhs-macro-with-accessors}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-load_saving-slots.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-slots.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-ACCESSORS}

@strong{Syntax:}

@strong{with-accessors} @emph{(@emph{slot-entry}@strong{*})
instance-form @emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@verbatim
slot-entry::= (variable-name accessor-name) 
@end verbatim

@strong{Arguments and Values:}

@emph{variable-name}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}; not evaluated.

@emph{accessor-name}---a @uref{glo_f.html#function_name,@emph{function
name}}; not evaluated.

@emph{instance-form}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

Creates a lexical environment in which the slots specified by
@emph{slot-entry} are lexically available through their accessors as if
they were variables. The macro
@ref{#with-accessors,@strong{with-accessors}} invokes the appropriate
accessors to @emph{access} the @uref{glo_s.html#slot,@emph{slots}}
specified by @emph{slot-entry}. Both
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} and
@uref{spefor_setq.html#setq,@strong{setq}} can be used to set the value
of the @uref{glo_s.html#slot,@emph{slot}}.

@strong{Examples:}

@verbatim
 (defclass thing ()
           ((x :initarg :x :accessor thing-x)
            (y :initarg :y :accessor thing-y)))
=>  #<STANDARD-CLASS THING 250020173>
 (defmethod (setf thing-x) :before (new-x (thing thing))
   (format t "~&Changing X from ~D to ~D in ~S.~%"
           (thing-x thing) new-x thing))
 (setq thing1 (make-instance 'thing :x 1 :y 2)) =>  #<THING 43135676>
 (setq thing2 (make-instance 'thing :x 7 :y 8)) =>  #<THING 43147374>
 (with-accessors ((x1 thing-x) (y1 thing-y))
                 thing1
   (with-accessors ((x2 thing-x) (y2 thing-y))
                   thing2
     (list (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setq x1 (+ y1 x2))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setf (thing-x thing2) (list x1))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2)))))
>>  Changing X from 1 to 9 in #<THING 43135676>.
>>  Changing X from 7 to (9) in #<THING 43147374>.
=>  ((1 1 2 2 7 7 8 8)
     9
     (9 9 2 2 7 7 8 8) 
     (9)
     (9 9 2 2 (9) (9) 8 8))
@end verbatim

@strong{Affected By:}

@uref{mac_defclass.html#defclass,@strong{defclass}}

@strong{Exceptional Situations:}

The consequences are undefined if any @emph{accessor-name} is not the
name of an accessor for the @emph{instance}.

@strong{See Also:}

@uref{mac_with-slots.html#with-slots,@strong{with-slots}},
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}

@strong{Notes:}

A @ref{#with-accessors,@strong{with-accessors}} expression of the form:

@verbatim
(with-accessors (slot-entry1 ... slot-entryn) instance-form form1 ... formk)
@end verbatim

expands into the equivalent of

@verbatim
(let ((in instance-form))
  (symbol-macrolet (Q1 ... Qn) form1 ... formk))
@end verbatim

where @emph{Q}i is

@verbatim
 (variable-namei () (accessor-namei in))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-SLOTS
@subsubsection CLHS: Macro WITH-SLOTS
@anchor{#clhs-macro-with-slots}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-accessors.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_defclass.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-SLOTS}

@strong{Syntax:}

@strong{with-slots} @emph{(@emph{slot-entry}@strong{*}) instance-form
@emph{declaration}@strong{*} @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@verbatim
slot-entry::= slot-name | (variable-name slot-name) 
@end verbatim

@strong{Arguments and Values:}

@emph{slot-name}---a @uref{glo_s.html#slot,@emph{slot}}
@uref{glo_n.html#name,@emph{name}}; not evaluated.

@emph{variable-name}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}; not evaluated.

@emph{instance-form}---a @uref{glo_f.html#form,@emph{form}}; evaluted to
produce @emph{instance}.

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @emph{forms}.

@strong{Description:}

The macro @ref{#with-slots,@strong{with-slots}}
@uref{glo_e.html#establish,@emph{establishes}} a
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} for
referring to the @uref{glo_s.html#slot,@emph{slots}} in the
@emph{instance} named by the given @emph{slot-names} as though they were
@uref{glo_v.html#variable,@emph{variables}}. Within such a context the
value of the @uref{glo_s.html#slot,@emph{slot}} can be specified by
using its slot name, as if it were a lexically bound variable. Both
@uref{mac_setfcm_psetf.html#setf,@strong{setf}} and
@uref{spefor_setq.html#setq,@strong{setq}} can be used to set the value
of the @uref{glo_s.html#slot,@emph{slot}}.

The macro @ref{#with-slots,@strong{with-slots}} translates an appearance
of the slot name as a @uref{glo_v.html#variable,@emph{variable}} into a
call to @uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

@strong{Examples:}

@verbatim
 (defclass thing ()
           ((x :initarg :x :accessor thing-x)
            (y :initarg :y :accessor thing-y)))
=>  #<STANDARD-CLASS THING 250020173>
 (defmethod (setf thing-x) :before (new-x (thing thing))
   (format t "~&Changing X from ~D to ~D in ~S.~%"
           (thing-x thing) new-x thing))
 (setq thing (make-instance 'thing :x 0 :y 1)) =>  #<THING 62310540>
 (with-slots (x y) thing (incf x) (incf y)) =>  2
 (values (thing-x thing) (thing-y thing)) =>  1, 2
 (setq thing1 (make-instance 'thing :x 1 :y 2)) =>  #<THING 43135676>
 (setq thing2 (make-instance 'thing :x 7 :y 8)) =>  #<THING 43147374>
 (with-slots ((x1 x) (y1 y))
             thing1
   (with-slots ((x2 x) (y2 y))
               thing2
     (list (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setq x1 (+ y1 x2))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setf (thing-x thing2) (list x1))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2)))))
>>  Changing X from 7 to (9) in #<THING 43147374>.
=>  ((1 1 2 2 7 7 8 8)
     9
     (9 9 2 2 7 7 8 8) 
     (9)
     (9 9 2 2 (9) (9) 8 8))
@end verbatim

@strong{Affected By:}

@uref{mac_defclass.html#defclass,@strong{defclass}}

@strong{Exceptional Situations:}

The consequences are undefined if any @emph{slot-name} is not the name
of a @uref{glo_s.html#slot,@emph{slot}} in the @emph{instance}.

@strong{See Also:}

@uref{mac_with-accessors.html#with-accessors,@strong{with-accessors}},
@uref{fun_slot-value.html#slot-value,@strong{slot-value}},
@uref{speope_symbol-macrolet.html#symbol-macrolet,@strong{symbol-macrolet}}

@strong{Notes:}

A @ref{#with-slots,@strong{with-slots}} expression of the form:

(with-slots (@emph{slot-entry}1@emph{} ... @emph{slot-entry}n@emph{})
@emph{instance-form} @emph{form}1@emph{} ... @emph{form}k@emph{})

expands into the equivalent of

@verbatim
(let ((in instance-form))
  (symbol-macrolet (Q1 ... Qn) form1 ... formk))
@end verbatim

where @emph{Q}i is

@verbatim
(slot-entryi () (slot-value in 'slot-entryi))
@end verbatim

if @emph{slot-entry}i is a @uref{glo_s.html#symbol,@emph{symbol}} and is

@verbatim
(variable-namei () (slot-value in 'slot-namei))
@end verbatim

if @emph{slot-entry}i is of the form

@verbatim
(variable-namei 'slot-namei))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function ADD-METHOD
@subsubsection CLHS: Standard Generic Function ADD-METHOD
@anchor{#clhs-standard-generic-function-add-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_find-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_ini_ize-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{ADD-METHOD}

@strong{Syntax:}

@strong{add-method} @emph{generic-function method} =>
@emph{generic-function}

@strong{Method Signatures:}

@strong{add-method} @emph{(@emph{generic-function}
@strong{@uref{syscla_standa_ric-function.html#standard-generic-function,standard-generic-function}})
(@emph{method} @strong{@uref{syscla_method.html#method,method}})}

@strong{Arguments and Values:}

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_o.html#object,@emph{object}}.

@emph{method}---a @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The generic function @ref{#add-method,@strong{add-method}} adds a
@uref{glo_m.html#method,@emph{method}} to a
@uref{glo_g.html#generic_function,@emph{generic function}}.

If @emph{method} agrees with an existing
@uref{glo_m.html#method,@emph{method}} of @emph{generic-function} on
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
and @uref{glo_q.html#qualifier,@emph{qualifiers}}, the existing
@uref{glo_m.html#method,@emph{method}} is replaced.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The @uref{glo_l.html#lambda_list,@emph{lambda list}} of the method
function of @emph{method} must be congruent with the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of
@emph{generic-function}, or an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If @emph{method} is a @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} of another
@uref{glo_g.html#generic_function,@emph{generic function}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{mac_defmethod.html#defmethod,@strong{defmethod}},
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}},
@uref{stagenfun_find-method.html#find-method,@strong{find-method}},
@uref{stagenfun_remove-method.html#remove-method,@strong{remove-method}},
@uref{sec_7-6-3.html,Section 7.6.3 (Agreement on Parameter Specializers
and Qualifiers)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function ALLOCATE-INSTANCE
@subsubsection CLHS: Standard Generic Function ALLOCATE-INSTANCE
@anchor{#clhs-standard-generic-function-allocate-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_ensure-ge_ric-function.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_rei_ize-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{ALLOCATE-INSTANCE}

@strong{Syntax:}

@strong{allocate-instance} @emph{class &rest initargs &key
&allow-other-keys} => @emph{new-instance}

@strong{Method Signatures:}

@strong{allocate-instance} @emph{(@emph{class}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}})
&rest initargs}

@strong{allocate-instance} @emph{(@emph{class}
@strong{@uref{syscla_structure-class.html#structure-class,structure-class}})
&rest initargs}

@strong{Arguments and Values:}

@emph{class}---a @uref{glo_c.html#class,@emph{class}}.

@emph{initargs}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_k.html#keywordSLvalue_pair,@emph{keyword/value pairs}}
(initialization argument @uref{glo_n.html#name,@emph{names}} and
@uref{glo_v.html#value,@emph{values}}).

@emph{new-instance}---an @uref{glo_o.html#object,@emph{object}} whose
@uref{glo_c.html#class,@emph{class}} is @emph{class}.

@strong{Description:}

The generic function @ref{#allocate-instance,@strong{allocate-instance}}
creates and returns a new instance of the @emph{class}, without
initializing it. When the @emph{class} is a
@uref{glo_s.html#standard_class,@emph{standard class}}, this means that
the @uref{glo_s.html#slot,@emph{slots}} are
@uref{glo_u.html#unbound,@emph{unbound}}; when the
@uref{glo_c.html#class,@emph{class}} is a
@uref{glo_s.html#structure_class,@emph{structure class}}, this means the
@uref{glo_s.html#slot,@emph{slots}}'
@uref{glo_v.html#value,@emph{values}} are unspecified.

The caller of @ref{#allocate-instance,@strong{allocate-instance}} is
expected to have already checked the initialization arguments.

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#allocate-instance,@strong{allocate-instance}} is called by
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
as described in @uref{sec_7-1.html,Section 7.1 (Object Creation and
Initialization)}.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
@uref{fun_class-of.html#class-of,@strong{class-of}},
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)}

@strong{Notes:}

The consequences of adding @uref{glo_m.html#method,@emph{methods}} to
@ref{#allocate-instance,@strong{allocate-instance}} is unspecified. This
capability might be added by the
@uref{glo_m.html#metaobject_protocol,@emph{Metaobject Protocol}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@item
@uref{../Issues/iss006.html,ALLOCATE-INSTANCE:ADD}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function CHANGE-CLASS
@subsubsection CLHS: Standard Generic Function CHANGE-CLASS
@anchor{#clhs-standard-generic-function-change-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_upd_efined-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_slot-boundp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{CHANGE-CLASS}

@strong{Syntax:}

@strong{change-class} @emph{instance new-class &key &allow-other-keys}
=> @emph{instance}

@strong{Method Signatures:}

@strong{change-class} @emph{(@emph{instance}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
(@emph{new-class}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}})
&rest initargs}

@strong{change-class} @emph{(@emph{instance}
@strong{@uref{syscla_t.html#t,t}}) (@emph{new-class}
@strong{@uref{syscla_symbol.html#symbol,symbol}}) &rest initargs}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{new-class}---a @uref{glo_c.html#class_designator,@emph{class
designator}}.

@emph{initargs}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#change-class,@strong{change-class}} changes the
@uref{glo_c.html#class,@emph{class}} of an @emph{instance} to
@emph{new-class}. It destructively modifies and returns the
@emph{instance}.

If in the old @uref{glo_c.html#class,@emph{class}} there is any
@uref{glo_s.html#slot,@emph{slot}} of the same name as a local
@uref{glo_s.html#slot,@emph{slot}} in the @emph{new-class}, the value of
that @uref{glo_s.html#slot,@emph{slot}} is retained. This means that if
the @uref{glo_s.html#slot,@emph{slot}} has a value, the value returned
by @uref{fun_slot-value.html#slot-value,@strong{slot-value}} after
@ref{#change-class,@strong{change-class}} is invoked is
@uref{fun_eql.html#eql,@strong{eql}} to the value returned by
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} before
@ref{#change-class,@strong{change-class}} is invoked. Similarly, if the
@uref{glo_s.html#slot,@emph{slot}} was unbound, it remains unbound. The
other @uref{glo_s.html#slot,@emph{slots}} are initialized as described
in @uref{sec_7-2.html,Section 7.2 (Changing the Class of an Instance)}.

After completing all other actions,
@ref{#change-class,@strong{change-class}} invokes
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}.
The generic function
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}
can be used to assign values to slots in the transformed instance. See
@uref{sec_7-2-2.html,Section 7.2.2 (Initializing Newly Added Local
Slots)}.

If the second of the above @uref{glo_m.html#method,@emph{methods}} is
selected, that @uref{glo_m.html#method,@emph{method}} invokes
@ref{#change-class,@strong{change-class}} on @emph{instance},
(find-class @emph{new-class}), and the @emph{initargs}.

@strong{Examples:}

@verbatim
 
 (defclass position () ())
  
 (defclass x-y-position (position)
     ((x :initform 0 :initarg :x)
      (y :initform 0 :initarg :y)))
  
 (defclass rho-theta-position (position)
     ((rho :initform 0)
      (theta :initform 0)))
  
 (defmethod update-instance-for-different-class :before ((old x-y-position) 
                                                         (new rho-theta-position)
                                                         &key)
   ;; Copy the position information from old to new to make new
   ;; be a rho-theta-position at the same position as old.
   (let ((x (slot-value old 'x))
         (y (slot-value old 'y)))
     (setf (slot-value new 'rho) (sqrt (+ (* x x) (* y y)))
           (slot-value new 'theta) (atan y x))))
  
;;; At this point an instance of the class x-y-position can be
;;; changed to be an instance of the class rho-theta-position using
;;; change-class:
 
 (setq p1 (make-instance 'x-y-position :x 2 :y 0))
  
 (change-class p1 'rho-theta-position)
  
;;; The result is that the instance bound to p1 is now an instance of
;;; the class rho-theta-position.   The update-instance-for-different-class
;;; method performed the initialization of the rho and theta slots based
;;; on the value of the x and y slots, which were maintained by
;;; the old instance.
 
@end verbatim

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}},
@uref{sec_7-2.html,Section 7.2 (Changing the Class of an Instance)}

@strong{Notes:}

The generic function @ref{#change-class,@strong{change-class}} has
several semantic difficulties. First, it performs a destructive
operation that can be invoked within a
@uref{glo_m.html#method,@emph{method}} on an
@uref{glo_i.html#instance,@emph{instance}} that was used to select that
@uref{glo_m.html#method,@emph{method}}. When multiple
@uref{glo_m.html#method,@emph{methods}} are involved because
@uref{glo_m.html#method,@emph{methods}} are being combined, the
@uref{glo_m.html#method,@emph{methods}} currently executing or about to
be executed may no longer be applicable. Second, some implementations
might use compiler optimizations of slot
@uref{glo_a.html#access,@emph{access}}, and when the
@uref{glo_c.html#class,@emph{class}} of an
@uref{glo_i.html#instance,@emph{instance}} is changed the assumptions
the compiler made might be violated. This implies that a programmer must
not use @ref{#change-class,@strong{change-class}} inside a
@uref{glo_m.html#method,@emph{method}} if any
@uref{glo_m.html#method,@emph{methods}} for that
@uref{glo_g.html#generic_function,@emph{generic function}}
@uref{glo_a.html#access,@emph{access}} any
@uref{glo_s.html#slot,@emph{slots}}, or the results are undefined.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss023.html,CHANGE-CLASS-INITARGS:PERMIT}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function CLASS-NAME
@subsubsection CLHS: Standard Generic Function CLASS-NAME
@anchor{#clhs-standard-generic-function-class-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_ini_ize-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_ops_class-namecp.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{CLASS-NAME}

@strong{Syntax:}

@strong{class-name} @emph{class} => @emph{name}

@strong{Method Signatures:}

@strong{class-name} @emph{(@emph{class}
@strong{@uref{syscla_class.html#class,class}})}

@strong{Arguments and Values:}

@emph{class}---a @uref{glo_c.html#class,@emph{class}}
@uref{glo_o.html#object,@emph{object}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

Returns the @uref{glo_n.html#name,@emph{name}} of the given
@emph{class}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_find-class.html#find-class,@strong{find-class}},
@uref{sec_4-3.html,Section 4.3 (Classes)}

@strong{Notes:}

If S is a @uref{glo_s.html#symbol,@emph{symbol}} such that S
=(class-name C) and C =(find-class S), then S is the proper name of C.
For further discussion, see @uref{sec_4-3.html,Section 4.3 (Classes)}.

The name of an anonymous @uref{glo_c.html#class,@emph{class}} is
@uref{any_nil.html#nil,@strong{nil}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function COMPUTE-APPLICABLE-METHODS
@subsubsection CLHS: Standard Generic Function
COMPUTE-APPLICABLE-METHODS
@anchor{#clhs-standard-generic-function-compute-applicable-methods}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{locfun_call-next-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-me_-combination.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{COMPUTE-APPLICABLE-METHODS}

@strong{Syntax:}

@strong{compute-applicable-methods} @emph{generic-function
function-arguments} => @emph{methods}

@strong{Method Signatures:}

@strong{compute-applicable-methods} @emph{(@emph{generic-function}
@strong{@uref{syscla_standa_ric-function.html#standard-generic-function,standard-generic-function}})}

@strong{Arguments and Values:}

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}}.

@emph{function-arguments}---a @uref{glo_l.html#list,@emph{list}} of
arguments for the @emph{generic-function}.

@emph{methods}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{objects}}.

@strong{Description:}

Given a @emph{generic-function} and a set of @emph{function-arguments},
the function
@ref{#compute-applicable-methods,@strong{compute-applicable-methods}}
returns the set of @uref{glo_m.html#method,@emph{methods}} that are
applicable for those arguments sorted according to precedence order. See
@uref{sec_7-6-6.html,Section 7.6.6 (Method Selection and Combination)}.

@strong{Affected By:}

@uref{mac_defmethod.html#defmethod,@strong{defmethod}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_7-6-6.html,Section 7.6.6 (Method Selection and Combination)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss072.html,COMPUTE-APPLICABLE-METHODS:GENERIC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function FIND-METHOD
@subsubsection CLHS: Standard Generic Function FIND-METHOD
@anchor{#clhs-standard-generic-function-find-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-me_-combination.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_add-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{FIND-METHOD}

@strong{Syntax:}

@strong{find-method} @emph{generic-function method-qualifiers
specializers &optional errorp}

=> @emph{method}

@strong{Method Signatures:}

@strong{find-method} @emph{(@emph{generic-function}
@strong{@uref{syscla_standa_ric-function.html#standard-generic-function,standard-generic-function}})
method-qualifiers specializers &optional errorp}

@strong{Arguments and Values:}

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}}.

@emph{method-qualifiers}---a @uref{glo_l.html#list,@emph{list}}.

@emph{specializers}---a @uref{glo_l.html#list,@emph{list}}.

@emph{errorp}---a @uref{glo_g.html#generalized_boolean,@emph{generalized
boolean}}. The default is @uref{glo_t.html#true,@emph{true}}.

@emph{method}---a @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#find-method,@strong{find-method}} takes a
@uref{glo_g.html#generic_function,@emph{generic function}} and returns
the @uref{glo_m.html#method,@emph{method}}
@uref{glo_o.html#object,@emph{object}} that agrees on
@uref{glo_q.html#qualifier,@emph{qualifiers}} and
@uref{glo_p.html#parameter_specializer,@emph{parameter specializers}}
with the @emph{method-qualifiers} and @emph{specializers} arguments of
@ref{#find-method,@strong{find-method}}. @emph{Method-qualifiers}
contains the method @uref{glo_q.html#qualifier,@emph{qualifiers}} for
the @uref{glo_m.html#method,@emph{method}}. The order of the method
@uref{glo_q.html#qualifier,@emph{qualifiers}} is significant. For a
definition of agreement in this context, see
@uref{sec_7-6-3.html,Section 7.6.3 (Agreement on Parameter Specializers
and Qualifiers)}.

The @emph{specializers} argument contains the parameter specializers for
the @uref{glo_m.html#method,@emph{method}}. It must correspond in length
to the number of required arguments of the
@uref{glo_g.html#generic_function,@emph{generic function}}, or an error
is signaled. This means that to obtain the default
@uref{glo_m.html#method,@emph{method}} on a given
@emph{generic-function}, a @uref{glo_l.html#list,@emph{list}} whose
elements are the @uref{glo_c.html#class,@emph{class}}
@uref{syscla_t.html#t,@strong{t}} must be given.

If there is no such @uref{glo_m.html#method,@emph{method}} and
@emph{errorp} is @uref{glo_t.html#true,@emph{true}},
@ref{#find-method,@strong{find-method}} signals an error. If there is no
such @uref{glo_m.html#method,@emph{method}} and @emph{errorp} is
@uref{glo_f.html#false,@emph{false}},
@ref{#find-method,@strong{find-method}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (defmethod some-operation ((a integer) (b float)) (list a b))
=>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>
 (find-method #'some-operation '() (mapcar #'find-class '(integer float)))
=>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>
 (find-method #'some-operation '() (mapcar #'find-class '(integer integer)))
>>  Error: No matching method
 (find-method #'some-operation '() (mapcar #'find-class '(integer integer)) nil)
=>  NIL
@end verbatim

@strong{Affected By:}

@uref{stagenfun_add-method.html#add-method,@strong{add-method}},
@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{mac_defgeneric.html#defgeneric,@strong{defgeneric}},
@uref{mac_defmethod.html#defmethod,@strong{defmethod}}

@strong{Exceptional Situations:}

If the @emph{specializers} argument does not correspond in length to the
number of required arguments of the @emph{generic-function}, an an error
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

If there is no such @uref{glo_m.html#method,@emph{method}} and
@emph{errorp} is @uref{glo_t.html#true,@emph{true}},
@ref{#find-method,@strong{find-method}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@uref{sec_7-6-3.html,Section 7.6.3 (Agreement on Parameter Specializers
and Qualifiers)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function INITIALIZE-INSTANCE
@subsubsection CLHS: Standard Generic Function INITIALIZE-INSTANCE
@anchor{#clhs-standard-generic-function-initialize-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_add-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_class-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{INITIALIZE-INSTANCE}

@strong{Syntax:}

@strong{initialize-instance} @emph{instance &rest initargs &key
&allow-other-keys} => @emph{instance}

@strong{Method Signatures:}

@strong{initialize-instance} @emph{(@emph{instance}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
&rest initargs}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{initargs}---a
@uref{glo_d.html#defaulted_initialization_argument_list,@emph{defaulted
initialization argument list}}.

@strong{Description:}

Called by
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}}
to initialize a newly created
@uref{glo_i.html#instance,@emph{instance}}. The generic function is
called with the new @emph{instance} and the
@uref{glo_d.html#defaulted_initialization_argument_list,@emph{defaulted
initialization argument list}}.

The system-supplied primary @uref{glo_m.html#method,@emph{method}} on
@ref{#initialize-instance,@strong{initialize-instance}} initializes the
@uref{glo_s.html#slot,@emph{slots}} of the @emph{instance} with values
according to the @emph{initargs} and the :initform forms of the
@uref{glo_s.html#slot,@emph{slots}}. It does this by calling the generic
function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the @emph{instance},
@uref{any_t.html#t,@strong{t}} (this indicates that all
@uref{glo_s.html#slot,@emph{slots}} for which no initialization
arguments are provided should be initialized according to their
:initform forms), and the @emph{initargs}.

Programmers can define @uref{glo_m.html#method,@emph{methods}} for
@ref{#initialize-instance,@strong{initialize-instance}} to specify
actions to be taken when an instance is initialized. If only
@uref{glo_a.html#after_method,@emph{after methods}} are defined, they
will be run after the system-supplied primary
@uref{glo_m.html#method,@emph{method}} for initialization and therefore
will not interfere with the default behavior of
@ref{#initialize-instance,@strong{initialize-instance}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}},
@uref{stagenfun_make-instance.html#make-instance,@strong{make-instance}},
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}},
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)},
@uref{sec_7-1-4.html,Section 7.1.4 (Rules for Initialization
Arguments)}, @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the Validity
of Initialization Arguments)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function MAKE-INSTANCES-OBSOLETE
@subsubsection CLHS: Standard Generic Function MAKE-INSTANCES-OBSOLETE
@anchor{#clhs-standard-generic-function-make-instances-obsolete}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_make-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_make-load-form.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{MAKE-INSTANCES-OBSOLETE}

@strong{Syntax:}

@strong{make-instances-obsolete} @emph{class} => @emph{class}

@strong{Method Signatures:}

@strong{make-instances-obsolete} @emph{(@emph{class}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}})}

@strong{make-instances-obsolete} @emph{(@emph{class}
@strong{@uref{syscla_symbol.html#symbol,symbol}})}

@strong{Arguments and Values:}

@emph{class}---a @uref{glo_c.html#class_designator,@emph{class
designator}}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#make-instances-obsolete,@strong{make-instances-obsolete}} has the
effect of initiating the process of updating the instances of the
@uref{glo_c.html#class,@emph{class}}. During updating, the generic
function
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
will be invoked.

The generic function
@ref{#make-instances-obsolete,@strong{make-instances-obsolete}} is
invoked automatically by the system when
@uref{mac_defclass.html#defclass,@strong{defclass}} has been used to
redefine an existing standard class and the set of local
@uref{glo_s.html#slot,@emph{slots}}
@uref{glo_a.html#accessible,@emph{accessible}} in an instance is changed
or the order of @uref{glo_s.html#slot,@emph{slots}} in storage is
changed. It can also be explicitly invoked by the user.

If the second of the above @uref{glo_m.html#method,@emph{methods}} is
selected, that @uref{glo_m.html#method,@emph{method}} invokes
@ref{#make-instances-obsolete,@strong{make-instances-obsolete}} on
(find-class @emph{class}).

@strong{Examples:}

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}},
@uref{sec_4-3-6.html,Section 4.3.6 (Redefining Classes)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function MAKE-INSTANCE
@subsubsection CLHS: Standard Generic Function MAKE-INSTANCE
@anchor{#clhs-standard-generic-function-make-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_remove-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_mak_ces-obsolete.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{MAKE-INSTANCE}

@strong{Syntax:}

@strong{make-instance} @emph{class &rest initargs &key
&allow-other-keys} => @emph{instance}

@strong{Method Signatures:}

@strong{make-instance} @emph{(@emph{class}
@strong{@uref{syscla_standard-class.html#standard-class,standard-class}})
&rest initargs}

@strong{make-instance} @emph{(@emph{class}
@strong{@uref{syscla_symbol.html#symbol,symbol}}) &rest initargs}

@strong{Arguments and Values:}

@emph{class}---a @uref{glo_c.html#class,@emph{class}}, or a
@uref{glo_s.html#symbol,@emph{symbol}} that names a
@uref{glo_c.html#class,@emph{class}}.

@emph{initargs}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@emph{instance}---a @uref{glo_f.html#fresh,@emph{fresh}}
@uref{glo_i.html#instance,@emph{instance}} of
@uref{glo_c.html#class,@emph{class}} @emph{class}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#make-instance,@strong{make-instance}} creates and returns a new
@uref{glo_i.html#instance,@emph{instance}} of the given @emph{class}.

If the second of the above @uref{glo_m.html#method,@emph{methods}} is
selected, that @uref{glo_m.html#method,@emph{method}} invokes
@ref{#make-instance,@strong{make-instance}} on the arguments (find-class
@emph{class}) and @emph{initargs}.

The initialization arguments are checked within
@ref{#make-instance,@strong{make-instance}}.

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#make-instance,@strong{make-instance}} may be used as described in
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

If any of the initialization arguments has not been declared as valid,
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

@strong{See Also:}

@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{fun_class-of.html#class-of,@strong{class-of}},
@uref{stagenfun_all_ate-instance.html#allocate-instance,@strong{allocate-instance}},
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function MAKE-LOAD-FORM
@subsubsection CLHS: Standard Generic Function MAKE-LOAD-FORM
@anchor{#clhs-standard-generic-function-make-load-form}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_mak_ces-obsolete.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-load_saving-slots.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{MAKE-LOAD-FORM}

@strong{Syntax:}

@strong{make-load-form} @emph{object &optional environment} =>
@emph{creation-form[, initialization-form]}

@strong{Method Signatures:}

@strong{make-load-form} @emph{(@emph{object}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
&optional environment}

@strong{make-load-form} @emph{(@emph{object}
@strong{@uref{cla_structure-object.html#structure-object,structure-object}})
&optional environment}

@strong{make-load-form} @emph{(@emph{object}
@strong{@uref{contyp_condition.html#condition,condition}}) &optional
environment}

@strong{make-load-form} @emph{(@emph{object}
@strong{@uref{syscla_class.html#class,class}}) &optional environment}

@strong{Arguments and Values:}

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{environment}---an
@uref{glo_e.html#environment_object,@emph{environment object}}.

@emph{creation-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{initialization-form}---a @uref{glo_f.html#form,@emph{form}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#make-load-form,@strong{make-load-form}} creates and returns one or
two @uref{glo_f.html#form,@emph{forms}}, a @emph{creation-form} and an
@emph{initialization-form}, that enable
@uref{fun_load.html#load,@strong{load}} to construct an
@uref{glo_o.html#object,@emph{object}} equivalent to @emph{object}.
@emph{Environment} is an
@uref{glo_e.html#environment_object,@emph{environment object}}
corresponding to the @uref{glo_l.html#lexical_environment,@emph{lexical
environment}} in which the @uref{glo_f.html#form,@emph{forms}} will be
processed.

The @uref{glo_f.html#file_compiler,@emph{file compiler}} calls
@ref{#make-load-form,@strong{make-load-form}} to process certain
@uref{glo_c.html#class,@emph{classes}} of
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}}; see
@uref{sec_3-2-4-4.html,Section 3.2.4.4 (Additional Constraints on
Externalizable Objects)}.

@uref{glo_c.html#conforming_program,@emph{Conforming programs}} may call
@ref{#make-load-form,@strong{make-load-form}} directly, providing
@emph{object} is a
@uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{cla_structure-object.html#structure-object,@strong{structure-object}},
or @uref{contyp_condition.html#condition,@strong{condition}}.

The creation form is a @uref{glo_f.html#form,@emph{form}} that, when
evaluated at @uref{fun_load.html#load,@strong{load}} time, should return
an @uref{glo_o.html#object,@emph{object}} that is equivalent to
@emph{object}. The exact meaning of equivalent depends on the
@uref{glo_t.html#type,@emph{type}} of
@uref{glo_o.html#object,@emph{object}} and is up to the programmer who
defines a @uref{glo_m.html#method,@emph{method}} for
@ref{#make-load-form,@strong{make-load-form}}; see
@uref{sec_3-2-4.html,Section 3.2.4 (Literal Objects in Compiled Files)}.

The initialization form is a @uref{glo_f.html#form,@emph{form}} that,
when evaluated at @uref{fun_load.html#load,@strong{load}} time, should
perform further initialization of the
@uref{glo_o.html#object,@emph{object}}. The value returned by the
initialization form is ignored. If
@ref{#make-load-form,@strong{make-load-form}} returns only one value,
the initialization form is @uref{any_nil.html#nil,@strong{nil}}, which
has no effect. If @emph{object} appears as a constant in the
initialization form, at @uref{fun_load.html#load,@strong{load}} time it
will be replaced by the equivalent
@uref{glo_o.html#object,@emph{object}} constructed by the creation form;
this is how the further initialization gains access to the
@uref{glo_o.html#object,@emph{object}}.

Both the @emph{creation-form} and the @emph{initialization-form} may
contain references to any
@uref{glo_e.html#externalizable_object,@emph{externalizable object}}.
However, there must not be any circular dependencies in creation forms.
An example of a circular dependency is when the creation form for the
object X contains a reference to the object Y, and the creation form for
the object Y contains a reference to the object X. Initialization forms
are not subject to any restriction against circular dependencies, which
is the reason that initialization forms exist; see the example of
circular data structures below.

The creation form for an @uref{glo_o.html#object,@emph{object}} is
always @emph{evaluated} before the initialization form for that
@uref{glo_o.html#object,@emph{object}}. When either the creation form or
the initialization form references other
@uref{glo_o.html#object,@emph{objects}} that have not been referenced
earlier in the @uref{glo_f.html#file,@emph{file}} being @emph{compiled},
the @uref{glo_c.html#compiler,@emph{compiler}} ensures that all of the
referenced @uref{glo_o.html#object,@emph{objects}} have been created
before @emph{evaluating} the referencing
@uref{glo_f.html#form,@emph{form}}. When the referenced
@uref{glo_o.html#object,@emph{object}} is of a
@uref{glo_t.html#type,@emph{type}} which the
@uref{glo_f.html#file_compiler,@emph{file compiler}} processes using
@ref{#make-load-form,@strong{make-load-form}}, this involves
@emph{evaluating} the creation form returned for it. (This is the reason
for the prohibition against circular references among creation forms).

Each initialization form is @emph{evaluated} as soon as possible after
its associated creation form, as determined by data flow. If the
initialization form for an @uref{glo_o.html#object,@emph{object}} does
not reference any other @uref{glo_o.html#object,@emph{objects}} not
referenced earlier in the @uref{glo_f.html#file,@emph{file}} and
processed by the @uref{glo_f.html#file_compiler,@emph{file compiler}}
using @ref{#make-load-form,@strong{make-load-form}}, the initialization
form is evaluated immediately after the creation form. If a creation or
initialization form F does contain references to such
@uref{glo_o.html#object,@emph{objects}}, the creation forms for those
other objects are evaluated before F, and the initialization forms for
those other @uref{glo_o.html#object,@emph{objects}} are also evaluated
before F whenever they do not depend on the
@uref{glo_o.html#object,@emph{object}} created or initialized by F.
Where these rules do not uniquely determine an order of
@uref{glo_e.html#evaluation,@emph{evaluation}} between two
creation/initialization forms, the order of
@uref{glo_e.html#evaluation,@emph{evaluation}} is unspecified.

While these creation and initialization forms are being evaluated, the
@uref{glo_o.html#object,@emph{objects}} are possibly in an uninitialized
state, analogous to the state of an
@uref{glo_o.html#object,@emph{object}} between the time it has been
created by
@uref{stagenfun_all_ate-instance.html#allocate-instance,@strong{allocate-instance}}
and it has been processed fully by
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}}.
Programmers writing @uref{glo_m.html#method,@emph{methods}} for
@ref{#make-load-form,@strong{make-load-form}} must take care in
manipulating @uref{glo_o.html#object,@emph{objects}} not to depend on
@uref{glo_s.html#slot,@emph{slots}} that have not yet been initialized.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @uref{fun_load.html#load,@strong{load}} calls
@uref{fun_eval.html#eval,@strong{eval}} on the
@uref{glo_f.html#form,@emph{forms}} or does some other operation that
has an equivalent effect. For example, the
@uref{glo_f.html#form,@emph{forms}} might be translated into different
but equivalent @uref{glo_f.html#form,@emph{forms}} and then evaluated,
they might be compiled and the resulting functions called by
@uref{fun_load.html#load,@strong{load}}, or they might be interpreted by
a special-purpose function different from
@uref{fun_eval.html#eval,@strong{eval}}. All that is required is that
the effect be equivalent to evaluating the
@uref{glo_f.html#form,@emph{forms}}.

The @uref{glo_m.html#method,@emph{method}}
@uref{glo_s.html#specialized,@emph{specialized}} on
@uref{syscla_class.html#class,@strong{class}} returns a creation
@uref{glo_f.html#form,@emph{form}} using the
@uref{glo_n.html#name,@emph{name}} of the
@uref{glo_c.html#class,@emph{class}} if the
@uref{glo_c.html#class,@emph{class}} has a
@uref{glo_p.html#proper_name,@emph{proper name}} in @emph{environment},
signaling an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} if it does not have a
@uref{glo_p.html#proper_name,@emph{proper name}}.
@uref{glo_e.html#evaluation,@emph{Evaluation}} of the creation
@uref{glo_f.html#form,@emph{form}} uses the
@uref{glo_n.html#name,@emph{name}} to find the
@uref{glo_c.html#class,@emph{class}} with that
@uref{glo_n.html#name,@emph{name}}, as if by @emph{calling}
@uref{acc_find-class.html#find-class,@strong{find-class}}. If a
@uref{glo_c.html#class,@emph{class}} with that
@uref{glo_n.html#name,@emph{name}} has not been defined, then a
@uref{glo_c.html#class,@emph{class}} may be computed in an
@uref{glo_i.html#implementation-defined,@emph{implementation-defined}}
manner. If a @uref{glo_c.html#class,@emph{class}} cannot be returned as
the result of @emph{evaluating} the creation
@uref{glo_f.html#form,@emph{form}}, then an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} is signaled.

Both @uref{glo_c.html#conforming_implementation,@emph{conforming
implementations}} and
@uref{glo_c.html#conforming_program,@emph{conforming programs}} may
further @uref{glo_s.html#specialize,@emph{specialize}}
@ref{#make-load-form,@strong{make-load-form}}.

@strong{Examples:}

@verbatim
 (defclass obj ()
    ((x :initarg :x :reader obj-x)
     (y :initarg :y :reader obj-y)
     (dist :accessor obj-dist)))
=>  #<STANDARD-CLASS OBJ 250020030>
 (defmethod shared-initialize :after ((self obj) slot-names &rest keys)
   (declare (ignore slot-names keys))
   (unless (slot-boundp self 'dist)
     (setf (obj-dist self)
           (sqrt (+ (expt (obj-x self) 2) (expt (obj-y self) 2))))))
=>  #<STANDARD-METHOD SHARED-INITIALIZE (:AFTER) (OBJ T) 26266714>
 (defmethod make-load-form ((self obj) &optional environment)
   (declare (ignore environment))
   ;; Note that this definition only works because X and Y do not
   ;; contain information which refers back to the object itself.
   ;; For a more general solution to this problem, see revised example below.
   `(make-instance ',(class-of self)
                   :x ',(obj-x self) :y ',(obj-y self)))
=>  #<STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 26267532>
 (setq obj1 (make-instance 'obj :x 3.0 :y 4.0)) =>  #<OBJ 26274136>
 (obj-dist obj1) =>  5.0
 (make-load-form obj1) =>  (MAKE-INSTANCE 'OBJ :X '3.0 :Y '4.0)
@end verbatim

In the above example, an equivalent
@uref{glo_i.html#instance,@emph{instance}} of obj is reconstructed by
using the values of two of its @uref{glo_s.html#slot,@emph{slots}}. The
value of the third @uref{glo_s.html#slot,@emph{slot}} is derived from
those two values.

Another way to write the @ref{#make-load-form,@strong{make-load-form}}
@uref{glo_m.html#method,@emph{method}} in that example is to use
@uref{fun_make-load_saving-slots.html#make-load-form-saving-slots,@strong{make-load-form-saving-slots}}.
The code it generates might yield a slightly different result from the
@ref{#make-load-form,@strong{make-load-form}}
@uref{glo_m.html#method,@emph{method}} shown above, but the operational
effect will be the same. For example:

@verbatim
 ;; Redefine method defined above.
 (defmethod make-load-form ((self obj) &optional environment)
    (make-load-form-saving-slots self
                                 :slot-names '(x y)
                                 :environment environment))
=>  #<STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 42755655>
 ;; Try MAKE-LOAD-FORM on object created above.
 (make-load-form obj1)
=>  (ALLOCATE-INSTANCE '#<STANDARD-CLASS OBJ 250020030>),
    (PROGN
      (SETF (SLOT-VALUE '#<OBJ 26274136> 'X) '3.0)
      (SETF (SLOT-VALUE '#<OBJ 26274136> 'Y) '4.0)
      (INITIALIZE-INSTANCE '#<OBJ 26274136>))
@end verbatim

In the following example, @uref{glo_i.html#instance,@emph{instances}} of
my-frob are ``interned'' in some way. An equivalent
@uref{glo_i.html#instance,@emph{instance}} is reconstructed by using the
value of the name slot as a key for searching existing
@uref{glo_o.html#object,@emph{objects}}. In this case the programmer has
chosen to create a new @uref{glo_o.html#object,@emph{object}} if no
existing @uref{glo_o.html#object,@emph{object}} is found; alternatively
an error could have been signaled in that case.

@verbatim
 (defclass my-frob ()
    ((name :initarg :name :reader my-name)))
 (defmethod make-load-form ((self my-frob) &optional environment)
   (declare (ignore environment))
   `(find-my-frob ',(my-name self) :if-does-not-exist :create))
@end verbatim

In the following example, the data structure to be dumped is circular,
because each parent has a list of its children and each child has a
reference back to its parent. If
@ref{#make-load-form,@strong{make-load-form}} is called on one
@uref{glo_o.html#object,@emph{object}} in such a structure, the creation
form creates an equivalent @uref{glo_o.html#object,@emph{object}} and
fills in the children slot, which forces creation of equivalent
@uref{glo_o.html#object,@emph{objects}} for all of its children,
grandchildren, etc. At this point none of the parent
@uref{glo_s.html#slot,@emph{slots}} have been filled in. The
initialization form fills in the parent
@uref{glo_s.html#slot,@emph{slot}}, which forces creation of an
equivalent @uref{glo_o.html#object,@emph{object}} for the parent if it
was not already created. Thus the entire tree is recreated at
@uref{fun_load.html#load,@strong{load}} time. At compile time,
@ref{#make-load-form,@strong{make-load-form}} is called once for each
@uref{glo_o.html#object,@emph{object}} in the tree. All of the creation
forms are evaluated, in
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
order, and then all of the initialization forms are evaluated, also in
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
order.

@verbatim
 (defclass tree-with-parent () ((parent :accessor tree-parent)
                                (children :initarg :children)))
 (defmethod make-load-form ((x tree-with-parent) &optional environment)
   (declare (ignore environment))
   (values
     ;; creation form
     `(make-instance ',(class-of x) :children ',(slot-value x 'children))
     ;; initialization form
     `(setf (tree-parent ',x) ',(slot-value x 'parent))))
@end verbatim

In the following example, the data structure to be dumped has no special
properties and an equivalent structure can be reconstructed simply by
reconstructing the @uref{glo_s.html#slot,@emph{slots}}' contents.

@verbatim
 (defstruct my-struct a b c)
 (defmethod make-load-form ((s my-struct) &optional environment)
    (make-load-form-saving-slots s :environment environment))
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The @uref{glo_m.html#method,@emph{methods}}
@uref{glo_s.html#specialized,@emph{specialized}} on
@uref{cla_standard-object.html#standard-object,@strong{standard-object}},
@uref{cla_structure-object.html#structure-object,@strong{structure-object}},
and @uref{contyp_condition.html#condition,@strong{condition}} all signal
an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

It is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
whether @emph{calling} @ref{#make-load-form,@strong{make-load-form}} on
a @uref{glo_g.html#generalized_instance,@emph{generalized instance}} of
a @uref{glo_s.html#system_class,@emph{system class}} signals an error or
returns creation and initialization @uref{glo_f.html#form,@emph{forms}}.

@strong{See Also:}

@uref{fun_compile-file.html#compile-file,@strong{compile-file}},
@uref{fun_make-load_saving-slots.html#make-load-form-saving-slots,@strong{make-load-form-saving-slots}},
@uref{sec_3-2-4-4.html,Section 3.2.4.4 (Additional Constraints on
Externalizable Objects)} @uref{sec_3-1.html,Section 3.1 (Evaluation)},
@uref{sec_3-2.html,Section 3.2 (Compilation)}

@strong{Notes:}

The @uref{glo_f.html#file_compiler,@emph{file compiler}} calls
@ref{#make-load-form,@strong{make-load-form}} in specific circumstances
detailed in @uref{sec_3-2-4-4.html,Section 3.2.4.4 (Additional
Constraints on Externalizable Objects)}.

Some @uref{glo_i.html#implementation,@emph{implementations}} may provide
facilities for defining new @uref{glo_s.html#subclass,@emph{subclasses}}
of @uref{glo_c.html#class,@emph{classes}} which are specified as
@uref{glo_s.html#system_class,@emph{system classes}}. (Some likely
candidates include
@uref{syscla_generic-function.html#generic-function,@strong{generic-function}},
@uref{syscla_method.html#method,@strong{method}}, and
@uref{syscla_stream.html#stream,@strong{stream}}). Such
@uref{glo_i.html#implementation,@emph{implementations}} should document
how the @uref{glo_f.html#file_compiler,@emph{file compiler}} processes
@uref{glo_i.html#instance,@emph{instances}} of such
@uref{glo_c.html#class,@emph{classes}} when encountered as
@uref{glo_l.html#literal,@emph{literal}}
@uref{glo_o.html#object,@emph{objects}}, and should document any
relevant @uref{glo_m.html#method,@emph{methods}} for
@ref{#make-load-form,@strong{make-load-form}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss215.html,LOAD-OBJECTS:MAKE-LOAD-FORM}
@item
@uref{../Issues/iss236.html,MAKE-LOAD-FORM-CONFUSION:REWRITE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function METHOD-QUALIFIERS
@subsubsection CLHS: Standard Generic Function METHOD-QUALIFIERS
@anchor{#clhs-standard-generic-function-method-qualifiers}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_slot-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_no-_cable-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{METHOD-QUALIFIERS}

@strong{Syntax:}

@strong{method-qualifiers} @emph{method} => @emph{qualifiers}

@strong{Method Signatures:}

@strong{method-qualifiers} @emph{(@emph{method}
@strong{@uref{syscla_standard-method.html#standard-method,standard-method}})}

@strong{Arguments and Values:}

@emph{method}---a @uref{glo_m.html#method,@emph{method}}.

@emph{qualifiers}---a @uref{glo_p.html#proper_list,@emph{proper list}}.

@strong{Description:}

Returns a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_q.html#qualifier,@emph{qualifiers}} of the @emph{method}.

@strong{Examples:}

@verbatim
 (defmethod some-gf :before ((a integer)) a)
=>  #<STANDARD-METHOD SOME-GF (:BEFORE) (INTEGER) 42736540>
 (method-qualifiers *) =>  (:BEFORE)
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function NO-APPLICABLE-METHOD
@subsubsection CLHS: Standard Generic Function NO-APPLICABLE-METHOD
@anchor{#clhs-standard-generic-function-no-applicable-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_met_d-qualifiers.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_no-next-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{NO-APPLICABLE-METHOD}

@strong{Syntax:}

@strong{no-applicable-method} @emph{generic-function &rest
function-arguments} => @emph{@emph{result}@strong{*}}

@strong{Method Signatures:}

@strong{no-applicable-method} @emph{(@emph{generic-function}
@strong{@uref{syscla_t.html#t,t}}) &rest function-arguments}

@strong{Arguments and Values:}

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}} on which no
@uref{glo_a.html#applicable_method,@emph{applicable method}} was found.

@emph{function-arguments}---@uref{glo_a.html#argument,@emph{arguments}}
to the @emph{generic-function}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The generic function
@ref{#no-applicable-method,@strong{no-applicable-method}} is called when
a @uref{glo_g.html#generic_function,@emph{generic function}} is invoked
and no @uref{glo_m.html#method,@emph{method}} on that
@uref{glo_g.html#generic_function,@emph{generic function}} is
applicable. The @uref{glo_d.html#default_method,@emph{default method}}
signals an error.

The generic function
@ref{#no-applicable-method,@strong{no-applicable-method}} is not
intended to be called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The default @uref{glo_m.html#method,@emph{method}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function NO-NEXT-METHOD
@subsubsection CLHS: Standard Generic Function NO-NEXT-METHOD
@anchor{#clhs-standard-generic-function-no-next-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_no-_cable-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_remove-method.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{NO-NEXT-METHOD}

@strong{Syntax:}

@strong{no-next-method} @emph{generic-function method &rest args} =>
@emph{@emph{result}@strong{*}}

@strong{Method Signatures:}

@strong{no-next-method} @emph{(@emph{generic-function}
@strong{@uref{syscla_standa_ric-function.html#standard-generic-function,standard-generic-function}})
(@emph{method}
@strong{@uref{syscla_standard-method.html#standard-method,standard-method}})
&rest args}

@strong{Arguments and Values:}

@emph{generic-function} --
@uref{glo_g.html#generic_function,@emph{generic function}} to which
@emph{method} belongs.

@emph{method} -- @uref{glo_m.html#method,@emph{method}} that contained
the call to
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
for which there is no next @uref{glo_m.html#method,@emph{method}}.

@emph{args} -- arguments to
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#no-next-method,@strong{no-next-method}} is called by
@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}
when there is no @uref{glo_n.html#next_method,@emph{next method}}.

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#no-next-method,@strong{no-next-method}} is not intended to be
called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The system-supplied @uref{glo_m.html#method,@emph{method}} on
@ref{#no-next-method,@strong{no-next-method}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@uref{locfun_call-next-method.html#call-next-method,@strong{call-next-method}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function SETF CLASS-NAME
@subsubsection CLHS: Standard Generic Function (SETF CLASS-NAME)
@anchor{#clhs-standard-generic-function-setf-class-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_class-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_class-of.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{(SETF CLASS-NAME)}

@strong{Syntax:}

@strong{(setf class-name)} @emph{new-value class} => @emph{new-value}

@strong{Method Signatures:}

@strong{(setf class-name)} @emph{new-value (@emph{class}
@strong{@uref{syscla_class.html#class,class}})}

@strong{Arguments and Values:}

@emph{new-value}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{class}---a @uref{glo_c.html#class,@emph{class}}.

@strong{Description:}

The generic function (setf class-name) sets the name of a @emph{class}
object.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{acc_find-class.html#find-class,@strong{find-class}},
@uref{glo_p.html#proper_name,@emph{proper name}},
@uref{sec_4-3.html,Section 4.3 (Classes)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function REINITIALIZE-INSTANCE
@subsubsection CLHS: Standard Generic Function REINITIALIZE-INSTANCE
@anchor{#clhs-standard-generic-function-reinitialize-instance}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_all_ate-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_sha_d-initialize.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{REINITIALIZE-INSTANCE}

@strong{Syntax:}

@strong{reinitialize-instance} @emph{instance &rest initargs &key
&allow-other-keys} => @emph{instance}

@strong{Method Signatures:}

@strong{reinitialize-instance} @emph{(@emph{instance}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
&rest initargs}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{initargs}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#reinitialize-instance,@strong{reinitialize-instance}} can be used
to change the values of @uref{glo_l.html#local_slot,@emph{local slots}}
of an @emph{instance} according to @emph{initargs}. This
@uref{glo_g.html#generic_function,@emph{generic function}} can be called
by users.

The system-supplied primary @uref{glo_m.html#method,@emph{method}} for
@ref{#reinitialize-instance,@strong{reinitialize-instance}} checks the
validity of @emph{initargs} and signals an error if an @emph{initarg} is
supplied that is not declared as valid. The
@uref{glo_m.html#method,@emph{method}} then calls the generic function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the @emph{instance},
@uref{any_nil.html#nil,@strong{nil}} (which means no
@uref{glo_s.html#slot,@emph{slots}} should be initialized according to
their initforms), and the @emph{initargs} it received.

@strong{Examples:} None.

@strong{Side Effects:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#reinitialize-instance,@strong{reinitialize-instance}} changes the
values of @uref{glo_l.html#local_slot,@emph{local slots}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The system-supplied primary @uref{glo_m.html#method,@emph{method}} for
@ref{#reinitialize-instance,@strong{reinitialize-instance}} signals an
error if an @emph{initarg} is supplied that is not declared as valid.

@strong{See Also:}

@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}},
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}},
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}},
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}},
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
@uref{sec_7-3.html,Section 7.3 (Reinitializing an Instance)},
@uref{sec_7-1-4.html,Section 7.1.4 (Rules for Initialization
Arguments)}, @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the Validity
of Initialization Arguments)}

@strong{Notes:}

@emph{Initargs} are declared as valid by using the :initarg option to
@uref{mac_defclass.html#defclass,@strong{defclass}}, or by defining
@uref{glo_m.html#method,@emph{methods}} for
@ref{#reinitialize-instance,@strong{reinitialize-instance}} or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}.
The keyword name of each keyword parameter specifier in the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of any
@uref{glo_m.html#method,@emph{method}} defined on
@ref{#reinitialize-instance,@strong{reinitialize-instance}} or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
is declared as a valid initialization argument name for all
@uref{glo_c.html#class,@emph{classes}} for which that
@uref{glo_m.html#method,@emph{method}} is applicable.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function REMOVE-METHOD
@subsubsection CLHS: Standard Generic Function REMOVE-METHOD
@anchor{#clhs-standard-generic-function-remove-method}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_no-next-method.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_make-instance.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{REMOVE-METHOD}

@strong{Syntax:}

@strong{remove-method} @emph{generic-function method} =>
@emph{generic-function}

@strong{Method Signatures:}

@strong{remove-method} @emph{(@emph{generic-function}
@strong{@uref{syscla_standa_ric-function.html#standard-generic-function,standard-generic-function}})
method}

@strong{Arguments and Values:}

@emph{generic-function}---a
@uref{glo_g.html#generic_function,@emph{generic function}}.

@emph{method}---a @uref{glo_m.html#method,@emph{method}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#remove-method,@strong{remove-method}} removes a
@uref{glo_m.html#method,@emph{method}} from @emph{generic-function} by
modifying the @emph{generic-function} (if necessary).

@ref{#remove-method,@strong{remove-method}} must not signal an error if
the @uref{glo_m.html#method,@emph{method}} is not one of the
@uref{glo_m.html#method,@emph{methods}} on the @emph{generic-function}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_find-method.html#find-method,@strong{find-method}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function SHARED-INITIALIZE
@subsubsection CLHS: Standard Generic Function SHARED-INITIALIZE
@anchor{#clhs-standard-generic-function-shared-initialize}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_rei_ize-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_upd_ferent-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{SHARED-INITIALIZE}

@strong{Syntax:}

@strong{shared-initialize} @emph{instance slot-names &rest initargs &key
&allow-other-keys} => @emph{instance}

@strong{Method Signatures:}

@strong{shared-initialize} @emph{(@emph{instance}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
slot-names &rest initargs}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{slot-names}---a @uref{glo_l.html#list,@emph{list}} or
@uref{any_t.html#t,@strong{t}}.

@emph{initargs}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_k.html#keywordSLvalue_pair,@emph{keyword/value pairs}} (of
initialization argument @uref{glo_n.html#name,@emph{names}} and
@uref{glo_v.html#value,@emph{values}}).

@strong{Description:}

The generic function @ref{#shared-initialize,@strong{shared-initialize}}
is used to fill the @uref{glo_s.html#slot,@emph{slots}} of an
@emph{instance} using @emph{initargs} and :initform forms. It is called
when an instance is created, when an instance is re-initialized, when an
instance is updated to conform to a redefined
@uref{glo_c.html#class,@emph{class}}, and when an instance is updated to
conform to a different @uref{glo_c.html#class,@emph{class}}. The generic
function @ref{#shared-initialize,@strong{shared-initialize}} is called
by the system-supplied primary @uref{glo_m.html#method,@emph{method}}
for
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}},
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}},
and
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}}.

The generic function @ref{#shared-initialize,@strong{shared-initialize}}
takes the following arguments: the @emph{instance} to be initialized, a
specification of a set of @emph{slot-names}
@uref{glo_a.html#accessible,@emph{accessible}} in that @emph{instance},
and any number of @emph{initargs}. The arguments after the first two
must form an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}. The system-supplied primary
@uref{glo_m.html#method,@emph{method}} on
@ref{#shared-initialize,@strong{shared-initialize}} initializes the
@uref{glo_s.html#slot,@emph{slots}} with values according to the
@emph{initargs} and supplied :initform forms. @emph{Slot-names}
indicates which @uref{glo_s.html#slot,@emph{slots}} should be
initialized according to their :initform forms if no @emph{initargs} are
provided for those @uref{glo_s.html#slot,@emph{slots}}.

The system-supplied primary @uref{glo_m.html#method,@emph{method}}
behaves as follows, regardless of whether the
@uref{glo_s.html#slot,@emph{slots}} are local or shared:

@itemize
@item
If an @emph{initarg} in the
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}} specifies a value for that
@uref{glo_s.html#slot,@emph{slot}}, that value is stored into the
@uref{glo_s.html#slot,@emph{slot}}, even if a value has already been
stored in the @uref{glo_s.html#slot,@emph{slot}} before the
@uref{glo_m.html#method,@emph{method}} is run.
@item
Any @uref{glo_s.html#slot,@emph{slots}} indicated by @emph{slot-names}
that are still unbound at this point are initialized according to their
:initform forms. For any such @uref{glo_s.html#slot,@emph{slot}} that
has an :initform form, that @uref{glo_f.html#form,@emph{form}} is
evaluated in the lexical environment of its defining
@uref{mac_defclass.html#defclass,@strong{defclass}}
@uref{glo_f.html#form,@emph{form}} and the result is stored into the
@uref{glo_s.html#slot,@emph{slot}}. For example, if a
@uref{glo_b.html#before_method,@emph{before method}} stores a value in
the @uref{glo_s.html#slot,@emph{slot}}, the :initform form will not be
used to supply a value for the @uref{glo_s.html#slot,@emph{slot}}.
@item
The rules mentioned in @uref{sec_7-1-4.html,Section 7.1.4 (Rules for
Initialization Arguments)} are obeyed.
@end itemize

The @emph{slots-names} argument specifies the
@uref{glo_s.html#slot,@emph{slots}} that are to be initialized according
to their :initform forms if no initialization arguments apply. It can be
a @uref{glo_l.html#list,@emph{list}} of slot
@uref{glo_n.html#name,@emph{names}}, which specifies the set of those
slot @uref{glo_n.html#name,@emph{names}}; or it can be the
@uref{glo_s.html#symbol,@emph{symbol}} @uref{any_t.html#t,@strong{t}},
which specifies the set of all of the
@uref{glo_s.html#slot,@emph{slots}}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
@uref{stagenfun_rei_ize-instance.html#reinitialize-instance,@strong{reinitialize-instance}},
@uref{stagenfun_upd_efined-class.html#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}},
@uref{stagenfun_upd_ferent-class.html#update-instance-for-different-class,@strong{update-instance-for-different-class}},
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}},
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
@uref{sec_7-1.html,Section 7.1 (Object Creation and Initialization)},
@uref{sec_7-1-4.html,Section 7.1.4 (Rules for Initialization
Arguments)}, @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the Validity
of Initialization Arguments)}

@strong{Notes:}

@emph{Initargs} are declared as valid by using the :initarg option to
@uref{mac_defclass.html#defclass,@strong{defclass}}, or by defining
@uref{glo_m.html#method,@emph{methods}} for
@ref{#shared-initialize,@strong{shared-initialize}}. The keyword name of
each keyword parameter specifier in the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of any
@uref{glo_m.html#method,@emph{method}} defined on
@ref{#shared-initialize,@strong{shared-initialize}} is declared as a
valid @emph{initarg} name for all @uref{glo_c.html#class,@emph{classes}}
for which that @uref{glo_m.html#method,@emph{method}} is applicable.

Implementations are permitted to optimize :initform forms that neither
produce nor depend on side effects, by evaluating these
@uref{glo_f.html#form,@emph{forms}} and storing them into slots before
running any
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}}
methods, rather than by handling them in the primary
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}}
method. (This optimization might be implemented by having the
@uref{stagenfun_all_ate-instance.html#allocate-instance,@strong{allocate-instance}}
method copy a prototype instance.)

Implementations are permitted to optimize default initial value forms
for @emph{initargs} associated with slots by not actually creating the
complete initialization argument @uref{glo_l.html#list,@emph{list}} when
the only @uref{glo_m.html#method,@emph{method}} that would receive the
complete @uref{glo_l.html#list,@emph{list}} is the
@uref{glo_m.html#method,@emph{method}} on
@uref{cla_standard-object.html#standard-object,@strong{standard-object}}.
In this case default initial value forms can be treated like :initform
forms. This optimization has no visible effects other than a performance
improvement.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function SLOT-MISSING
@subsubsection CLHS: Standard Generic Function SLOT-MISSING
@anchor{#clhs-standard-generic-function-slot-missing}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_slot-makunbound.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_slot-unbound.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{SLOT-MISSING}

@strong{Syntax:}

@strong{slot-missing} @emph{class object slot-name operation &optional
new-value} => @emph{@emph{result}@strong{*}}

@strong{Method Signatures:}

@strong{slot-missing} @emph{(@emph{class}
@strong{@uref{syscla_t.html#t,t}}) object slot-name operation &optional
new-value}

@strong{Arguments and Values:}

@emph{class}---the @uref{glo_c.html#class,@emph{class}} of
@emph{object}.

@emph{object}---an @uref{glo_o.html#object,@emph{object}}.

@emph{slot-name}---a @uref{glo_s.html#symbol,@emph{symbol}} (the
@uref{glo_n.html#name,@emph{name}} of a would-be
@uref{glo_s.html#slot,@emph{slot}}).

@emph{operation}---one of the @uref{glo_s.html#symbol,@emph{symbols}}
@uref{mac_setfcm_psetf.html#setf,@strong{setf}},
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}},
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
or @uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

@emph{new-value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The generic function @ref{#slot-missing,@strong{slot-missing}} is
invoked when an attempt is made to
@uref{glo_a.html#access,@emph{access}} a
@uref{glo_s.html#slot,@emph{slot}} in an @emph{object} whose
@uref{glo_m.html#metaclass,@emph{metaclass}} is
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}
and the @uref{glo_s.html#slot,@emph{slot}} of the name @emph{slot-name}
is not a @uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#slot,@emph{slot}} in that
@uref{glo_c.html#class,@emph{class}}. The default
@uref{glo_m.html#method,@emph{method}} signals an error.

The generic function @ref{#slot-missing,@strong{slot-missing}} is not
intended to be called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it.

The generic function @ref{#slot-missing,@strong{slot-missing}} may be
called during evaluation of
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}, (setf
slot-value),
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}}, and
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}}.
For each of these operations the corresponding
@uref{glo_s.html#symbol,@emph{symbol}} for the @emph{operation} argument
is @uref{fun_slot-value.html#slot-value,@strong{slot-value}},
@uref{any_setf.html#setf,@strong{setf}},
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}}, and
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}}
respectively.

The optional @emph{new-value} argument to
@ref{#slot-missing,@strong{slot-missing}} is used when the operation is
attempting to set the value of the @uref{glo_s.html#slot,@emph{slot}}.

If @ref{#slot-missing,@strong{slot-missing}} returns, its values will be
treated as follows:

@itemize
@item
If the @emph{operation} is @uref{any_setf.html#setf,@strong{setf}} or
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}},
any @uref{glo_v.html#value,@emph{values}} will be ignored by the caller.
@item
If the @emph{operation} is
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}, only the
@uref{glo_p.html#primary_value,@emph{primary value}} will be used by the
caller, and all other values will be ignored.
@item
If the @emph{operation} is
@uref{fun_slot-boundp.html#slot-boundp,@strong{slot-boundp}}, any
@uref{glo_b.html#boolean_equivalent,@emph{boolean equivalent}} of the
@uref{glo_p.html#primary_value,@emph{primary value}} of the
@uref{glo_m.html#method,@emph{method}} might be is used, and all other
values will be ignored.
@end itemize

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The default @uref{glo_m.html#method,@emph{method}} on
@ref{#slot-missing,@strong{slot-missing}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@strong{See Also:}

@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{fun_slot-exists-p.html#slot-exists-p,@strong{slot-exists-p}},
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}

@strong{Notes:}

The set of arguments (including the @uref{glo_c.html#class,@emph{class}}
of the instance) facilitates defining methods on the metaclass for
@ref{#slot-missing,@strong{slot-missing}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss319.html,SLOT-MISSING-VALUES:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function SLOT-UNBOUND
@subsubsection CLHS: Standard Generic Function SLOT-UNBOUND
@anchor{#clhs-standard-generic-function-slot-unbound}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_slot-missing.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_slot-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function} @strong{SLOT-UNBOUND}

@strong{Syntax:}

@strong{slot-unbound} @emph{class instance slot-name} =>
@emph{@emph{result}@strong{*}}

@strong{Method Signatures:}

@strong{slot-unbound} @emph{(@emph{class}
@strong{@uref{syscla_t.html#t,t}}) instance slot-name}

@strong{Arguments and Values:}

@emph{class}---the @uref{glo_c.html#class,@emph{class}} of the
@emph{instance}.

@emph{instance}---the @emph{instance} in which an attempt was made to
@uref{glo_r.html#read,@emph{read}} the
@uref{glo_u.html#unbound,@emph{unbound}}
@uref{glo_s.html#slot,@emph{slot}}.

@emph{slot-name}---the @uref{glo_n.html#name,@emph{name}} of the
@uref{glo_u.html#unbound,@emph{unbound}}
@uref{glo_s.html#slot,@emph{slot}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The generic function @ref{#slot-unbound,@strong{slot-unbound}} is called
when an unbound @uref{glo_s.html#slot,@emph{slot}} is read in an
@emph{instance} whose metaclass is
@uref{syscla_standard-class.html#standard-class,@strong{standard-class}}.
The default @uref{glo_m.html#method,@emph{method}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}. The
name slot of the
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}
@uref{glo_c.html#condition,@emph{condition}} is initialized to the name
of the offending variable, and the instance slot of the
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}
@uref{glo_c.html#condition,@emph{condition}} is initialized to the
offending instance.

The generic function @ref{#slot-unbound,@strong{slot-unbound}} is not
intended to be called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it. The
@uref{glo_f.html#function,@emph{function}}
@ref{#slot-unbound,@strong{slot-unbound}} is called only indirectly by
@uref{fun_slot-value.html#slot-value,@strong{slot-value}}.

If @ref{#slot-unbound,@strong{slot-unbound}} returns, only the
@uref{glo_p.html#primary_value,@emph{primary value}} will be used by the
caller, and all other values will be ignored.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The default @uref{glo_m.html#method,@emph{method}} on
@ref{#slot-unbound,@strong{slot-unbound}} signals an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}.

@strong{See Also:}

@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}}

@strong{Notes:}

An unbound @uref{glo_s.html#slot,@emph{slot}} may occur if no :initform
form was specified for the @uref{glo_s.html#slot,@emph{slot}} and the
@uref{glo_s.html#slot,@emph{slot}} value has not been set, or if
@uref{fun_slot-makunbound.html#slot-makunbound,@strong{slot-makunbound}}
has been called on the @uref{glo_s.html#slot,@emph{slot}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss319.html,SLOT-MISSING-VALUES:SPECIFY}
@item
@uref{../Issues/iss355.html,UNDEFINED-VARIABLES-AND-FUNCTIONS:COMPROMISE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function UPDATE-INSTANCE-FOR-REDEFINED-CLASS
@subsubsection CLHS: Standard Generic Function
UPDATE-INSTANCE-FOR-REDEFINED-CLASS
@anchor{#clhs-standard-generic-function-update-instance-for-redefined-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_upd_ferent-class.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_change-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function}
@strong{UPDATE-INSTANCE-FOR-REDEFINED-CLASS}

@strong{Syntax:}

@strong{update-instance-for-redefined-class} @emph{instance added-slots
discarded-slots property-list &rest initargs &key &allow-other-keys}

=> @emph{@emph{result}@strong{*}}

@strong{Method Signatures:}

@strong{update-instance-for-redefined-class} @emph{(@emph{instance}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
added-slots discarded-slots property-list &rest initargs}

@strong{Arguments and Values:}

@emph{instance}---an @uref{glo_o.html#object,@emph{object}}.

@emph{added-slots}---a @uref{glo_l.html#list,@emph{list}}.

@emph{discarded-slots}---a @uref{glo_l.html#list,@emph{list}}.

@emph{property-list}---a @uref{glo_l.html#list,@emph{list}}.

@emph{initargs}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@emph{result}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

The @uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
is not intended to be called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it. The
@uref{glo_g.html#generic_function,@emph{generic function}}
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
is called by the mechanism activated by
@uref{stagenfun_mak_ces-obsolete.html#make-instances-obsolete,@strong{make-instances-obsolete}}.

The system-supplied primary @uref{glo_m.html#method,@emph{method}} on
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
checks the validity of @emph{initargs} and signals an error if an
@emph{initarg} is supplied that is not declared as valid. This
@uref{glo_m.html#method,@emph{method}} then initializes
@uref{glo_s.html#slot,@emph{slots}} with values according to the
@emph{initargs}, and initializes the newly @emph{added-slots} with
values according to their :initform forms. It does this by calling the
generic function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the @emph{instance}, a list of names of
the newly @emph{added-slots} to @emph{instance}, and the @emph{initargs}
it received. Newly @emph{added-slots} are those
@uref{glo_l.html#local_slot,@emph{local slots}} for which no
@uref{glo_s.html#slot,@emph{slot}} of the same name exists in the old
version of the @uref{glo_c.html#class,@emph{class}}.

When
@uref{stagenfun_mak_ces-obsolete.html#make-instances-obsolete,@strong{make-instances-obsolete}}
is invoked or when a @uref{glo_c.html#class,@emph{class}} has been
redefined and an @uref{glo_i.html#instance,@emph{instance}} is being
updated, a @emph{property-list} is created that captures the slot names
and values of all the @emph{discarded-slots} with values in the original
@emph{instance}. The structure of the @emph{instance} is transformed so
that it conforms to the current class definition. The arguments to
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
are this transformed @emph{instance}, a list of @emph{added-slots} to
the @emph{instance}, a list @emph{discarded-slots} from the
@emph{instance}, and the @emph{property-list} containing the slot names
and values for @uref{glo_s.html#slot,@emph{slots}} that were discarded
and had values. Included in this list of discarded
@uref{glo_s.html#slot,@emph{slots}} are
@uref{glo_s.html#slot,@emph{slots}} that were local in the old
@uref{glo_c.html#class,@emph{class}} and are shared in the new
@uref{glo_c.html#class,@emph{class}}.

The value returned by
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
is ignored.

@strong{Examples:}

@verbatim
  
 (defclass position () ())
 
 (defclass x-y-position (position)
     ((x :initform 0 :accessor position-x)
      (y :initform 0 :accessor position-y)))
 
;;; It turns out polar coordinates are used more than Cartesian 
;;; coordinates, so the representation is altered and some new
;;; accessor methods are added.
 
 (defmethod update-instance-for-redefined-class :before
    ((pos x-y-position) added deleted plist &key)
   ;; Transform the x-y coordinates to polar coordinates
   ;; and store into the new slots.
   (let ((x (getf plist 'x))
         (y (getf plist 'y)))
     (setf (position-rho pos) (sqrt (+ (* x x) (* y y)))
           (position-theta pos) (atan y x))))
  
 (defclass x-y-position (position)
     ((rho :initform 0 :accessor position-rho)
      (theta :initform 0 :accessor position-theta)))
  
;;; All instances of the old x-y-position class will be updated
;;; automatically.
 
;;; The new representation is given the look and feel of the old one.
 
 (defmethod position-x ((pos x-y-position))  
    (with-slots (rho theta) pos (* rho (cos theta))))
 
 (defmethod (setf position-x) (new-x (pos x-y-position))
    (with-slots (rho theta) pos
      (let ((y (position-y pos)))
        (setq rho (sqrt (+ (* new-x new-x) (* y y)))
              theta (atan y new-x))
        new-x)))
 
 (defmethod position-y ((pos x-y-position))
    (with-slots (rho theta) pos (* rho (sin theta))))
 
 (defmethod (setf position-y) (new-y (pos x-y-position))
    (with-slots (rho theta) pos
      (let ((x (position-x pos)))
        (setq rho (sqrt (+ (* x x) (* new-y new-y)))
              theta (atan new-y x))
        new-y)))
 
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The system-supplied primary @uref{glo_m.html#method,@emph{method}} on
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
signals an error if an @emph{initarg} is supplied that is not declared
as valid.

@strong{See Also:}

@uref{stagenfun_mak_ces-obsolete.html#make-instances-obsolete,@strong{make-instances-obsolete}},
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}},
@uref{sec_4-3-6.html,Section 4.3.6 (Redefining Classes)},
@uref{sec_7-1-4.html,Section 7.1.4 (Rules for Initialization
Arguments)}, @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the Validity
of Initialization Arguments)}

@strong{Notes:}

@emph{Initargs} are declared as valid by using the :initarg option to
@uref{mac_defclass.html#defclass,@strong{defclass}}, or by defining
@uref{glo_m.html#method,@emph{methods}} for
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}.
The keyword name of each keyword parameter specifier in the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of any
@uref{glo_m.html#method,@emph{method}} defined on
@ref{#update-instance-for-redefined-class,@strong{update-instance-for-redefined-class}}
or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
is declared as a valid @emph{initarg} name for all
@uref{glo_c.html#class,@emph{classes}} for which that
@uref{glo_m.html#method,@emph{method}} is applicable.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Standard Generic Function UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
@subsubsection CLHS: Standard Generic Function
UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
@anchor{#clhs-standard-generic-function-update-instance-for-different-class}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{stagenfun_sha_d-initialize.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_objects_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{stagenfun_upd_efined-class.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Standard Generic Function}
@strong{UPDATE-INSTANCE-FOR-DIFFERENT-CLASS}

@strong{Syntax:}

@strong{update-instance-for-different-class} @emph{previous current
&rest initargs &key &allow-other-keys} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Method Signatures:}

@strong{update-instance-for-different-class} @emph{(@emph{previous}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
(@emph{current}
@strong{@uref{cla_standard-object.html#standard-object,standard-object}})
&rest initargs}

@strong{Arguments and Values:}

@emph{previous}---a copy of the original
@uref{glo_i.html#instance,@emph{instance}}.

@emph{current}---the original @uref{glo_i.html#instance,@emph{instance}}
(altered).

@emph{initargs}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@strong{Description:}

The generic function
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
is not intended to be called by programmers. Programmers may write
@uref{glo_m.html#method,@emph{methods}} for it. The
@uref{glo_f.html#function,@emph{function}}
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
is called only by the @uref{glo_f.html#function,@emph{function}}
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.

The system-supplied primary @uref{glo_m.html#method,@emph{method}} on
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
checks the validity of @emph{initargs} and signals an error if an
@emph{initarg} is supplied that is not declared as valid. This
@uref{glo_m.html#method,@emph{method}} then initializes
@uref{glo_s.html#slot,@emph{slots}} with values according to the
@emph{initargs}, and initializes the newly added
@uref{glo_s.html#slot,@emph{slots}} with values according to their
:initform forms. It does this by calling the generic function
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
with the following arguments: the instance (@emph{current}), a list of
@uref{glo_n.html#name,@emph{names}} of the newly added
@uref{glo_s.html#slot,@emph{slots}}, and the @emph{initargs} it
received. Newly added @uref{glo_s.html#slot,@emph{slots}} are those
@uref{glo_l.html#local_slot,@emph{local slots}} for which no
@uref{glo_s.html#slot,@emph{slot}} of the same name exists in the
@emph{previous} class.

@uref{glo_m.html#method,@emph{Methods}} for
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
can be defined to specify actions to be taken when an
@uref{glo_i.html#instance,@emph{instance}} is updated. If only
@uref{glo_a.html#after_method,@emph{after methods}} for
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
are defined, they will be run after the system-supplied primary
@uref{glo_m.html#method,@emph{method}} for initialization and therefore
will not interfere with the default behavior of
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}.

@uref{glo_m.html#method,@emph{Methods}} on
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
can be defined to initialize @uref{glo_s.html#slot,@emph{slots}}
differently from
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.
The default behavior of
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
described in @uref{sec_7-2.html,Section 7.2 (Changing the Class of an
Instance)}.

The arguments to
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
are computed by
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.
When
@uref{stagenfun_change-class.html#change-class,@strong{change-class}} is
invoked on an @uref{glo_i.html#instance,@emph{instance}}, a copy of that
@uref{glo_i.html#instance,@emph{instance}} is made;
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}
then destructively alters the original
@uref{glo_i.html#instance,@emph{instance}}. The first argument to
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}},
@emph{previous}, is that copy; it holds the old
@uref{glo_s.html#slot,@emph{slot}} values temporarily. This argument has
dynamic extent within
@uref{stagenfun_change-class.html#change-class,@strong{change-class}};
if it is referenced in any way once
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
returns, the results are undefined. The second argument to
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}},
@emph{current}, is the altered original
@uref{glo_i.html#instance,@emph{instance}}. The intended use of
@emph{previous} is to extract old @uref{glo_s.html#slot,@emph{slot}}
values by using
@uref{fun_slot-value.html#slot-value,@strong{slot-value}} or
@uref{mac_with-slots.html#with-slots,@strong{with-slots}} or by invoking
a reader generic function, or to run other
@uref{glo_m.html#method,@emph{methods}} that were applicable to
@uref{glo_i.html#instance,@emph{instances}} of the original
@uref{glo_c.html#class,@emph{class}}.

@strong{Examples:}

See the example for the @uref{glo_f.html#function,@emph{function}}
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.

@strong{Affected By:} None.

@strong{Exceptional Situations:}

The system-supplied primary @uref{glo_m.html#method,@emph{method}} on
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
signals an error if an initialization argument is supplied that is not
declared as valid.

@strong{See Also:}

@uref{stagenfun_change-class.html#change-class,@strong{change-class}},
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}},
@uref{sec_7-2.html,Section 7.2 (Changing the Class of an Instance)},
@uref{sec_7-1-4.html,Section 7.1.4 (Rules for Initialization
Arguments)}, @uref{sec_7-1-2.html,Section 7.1.2 (Declaring the Validity
of Initialization Arguments)}

@strong{Notes:}

@emph{Initargs} are declared as valid by using the :initarg option to
@uref{mac_defclass.html#defclass,@strong{defclass}}, or by defining
@uref{glo_m.html#method,@emph{methods}} for
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}.
The keyword name of each keyword parameter specifier in the
@uref{glo_l.html#lambda_list,@emph{lambda list}} of any
@uref{glo_m.html#method,@emph{method}} defined on
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
or
@uref{stagenfun_sha_d-initialize.html#shared-initialize,@strong{shared-initialize}}
is declared as a valid @emph{initarg} name for all
@uref{glo_c.html#class,@emph{classes}} for which that
@uref{glo_m.html#method,@emph{method}} is applicable.

The value returned by
@ref{#update-instance-for-different-class,@strong{update-instance-for-different-class}}
is ignored by
@uref{stagenfun_change-class.html#change-class,@strong{change-class}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss197.html,INITIALIZATION-FUNCTION-KEYWORD-CHECKING}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 8
@section CLHS: Chapter 8
@anchor{#clhs-chapter-8}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_unbound-slot-instance.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_the_struc_s_dictionary.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
8. Structures

@uref{sec_the_struc_s_dictionary.html,}

8.1 The Structures Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Chapter 9
@section CLHS: Chapter 9
@anchor{#clhs-chapter-9}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_copy-structure.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_9-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
9. Conditions

@uref{sec_9-1.html,}

9.1 Condition System Concepts

@uref{sec_the_condi_s_dictionary.html,}

9.2 The Conditions Dictionary

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Section The Conditions Dictionary::
@end menu

@node CLHS Section The Conditions Dictionary
@subsection CLHS: Section The Conditions Dictionary
@anchor{#clhs-section-the-conditions-dictionary}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{sec_9-1-6.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{chap-9.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
9.2 The Conditions Dictionary

@uref{contyp_condition.html,@emph{Condition Type} @strong{CONDITION}}

@uref{contyp_warning.html,@emph{Condition Type} @strong{WARNING}}

@uref{contyp_style-warning.html,@emph{Condition Type}
@strong{STYLE-WARNING}}

@uref{contyp_serious-condition.html,@emph{Condition Type}
@strong{SERIOUS-CONDITION}}

@uref{contyp_error.html,@emph{Condition Type} @strong{ERROR}}

@uref{contyp_cell-error.html,@emph{Condition Type} @strong{CELL-ERROR}}

@uref{fun_cell-error-name.html,@emph{Function} @strong{CELL-ERROR-NAME}}

@uref{contyp_parse-error.html,@emph{Condition Type}
@strong{PARSE-ERROR}}

@uref{contyp_storage-condition.html,@emph{Condition Type}
@strong{STORAGE-CONDITION}}

@uref{mac_assert.html,@emph{Macro} @strong{ASSERT}}

@uref{fun_error.html,@emph{Function} @strong{ERROR}}

@uref{fun_cerror.html,@emph{Function} @strong{CERROR}}

@uref{mac_check-type.html,@emph{Macro} @strong{CHECK-TYPE}}

@uref{contyp_simple-error.html,@emph{Condition Type}
@strong{SIMPLE-ERROR}}

@uref{fun_invalid-method-error.html,@emph{Function}
@strong{INVALID-METHOD-ERROR}}

@uref{fun_method-co_nation-error.html,@emph{Function}
@strong{METHOD-COMBINATION-ERROR}}

@uref{fun_signal.html,@emph{Function} @strong{SIGNAL}}

@uref{contyp_simple-condition.html,@emph{Condition Type}
@strong{SIMPLE-CONDITION}}

@uref{fun_simple-co_at-arguments.html,@emph{Function}
@strong{SIMPLE-CONDITION-FORMAT-CONTROL,
SIMPLE-CONDITION-FORMAT-ARGUMENTS}}

@uref{fun_warn.html,@emph{Function} @strong{WARN}}

@uref{contyp_simple-warning.html,@emph{Condition Type}
@strong{SIMPLE-WARNING}}

@uref{fun_invoke-debugger.html,@emph{Function} @strong{INVOKE-DEBUGGER}}

@uref{fun_break.html,@emph{Function} @strong{BREAK}}

@uref{var_stdebugger-hookst.html,@emph{Variable}
@strong{*DEBUGGER-HOOK*}}

@uref{var_stbreak-on-signalsst.html,@emph{Variable}
@strong{*BREAK-ON-SIGNALS*}}

@uref{mac_handler-bind.html,@emph{Macro} @strong{HANDLER-BIND}}

@uref{mac_handler-case.html,@emph{Macro} @strong{HANDLER-CASE}}

@uref{mac_ignore-errors.html,@emph{Macro} @strong{IGNORE-ERRORS}}

@uref{mac_define-condition.html,@emph{Macro} @strong{DEFINE-CONDITION}}

@uref{fun_make-condition.html,@emph{Function} @strong{MAKE-CONDITION}}

@uref{syscla_restart.html,@emph{System Class} @strong{RESTART}}

@uref{fun_compute-restarts.html,@emph{Function}
@strong{COMPUTE-RESTARTS}}

@uref{fun_find-restart.html,@emph{Function} @strong{FIND-RESTART}}

@uref{fun_invoke-restart.html,@emph{Function} @strong{INVOKE-RESTART}}

@uref{fun_invoke-re_nteractively.html,@emph{Function}
@strong{INVOKE-RESTART-INTERACTIVELY}}

@uref{mac_restart-bind.html,@emph{Macro} @strong{RESTART-BIND}}

@uref{mac_restart-case.html,@emph{Macro} @strong{RESTART-CASE}}

@uref{fun_restart-name.html,@emph{Function} @strong{RESTART-NAME}}

@uref{mac_with-cond_ion-restarts.html,@emph{Macro}
@strong{WITH-CONDITION-RESTARTS}}

@uref{mac_with-simple-restart.html,@emph{Macro}
@strong{WITH-SIMPLE-RESTART}}

@uref{res_abort.html,@emph{Restart} @strong{ABORT}}

@uref{res_continue.html,@emph{Restart} @strong{CONTINUE}}

@uref{res_muffle-warning.html,@emph{Restart} @strong{MUFFLE-WARNING}}

@uref{res_store-value.html,@emph{Restart} @strong{STORE-VALUE}}

@uref{res_use-value.html,@emph{Restart} @strong{USE-VALUE}}

@uref{fun_abortcm_c_cm_use-value.html,@emph{Function} @strong{ABORT,
CONTINUE, MUFFLE-WARNING, STORE-VALUE, USE-VALUE}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss065.html,COMPILER-DIAGNOSTICS:USE-HANDLER}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@menu
* CLHS Condition Type CELL-ERROR::
* CLHS Condition Type ERROR::
* CLHS Condition Type PARSE-ERROR::
* CLHS Condition Type SERIOUS-CONDITION::
* CLHS Condition Type SIMPLE-CONDITION::
* CLHS Condition Type SIMPLE-ERROR::
* CLHS Condition Type SIMPLE-WARNING::
* CLHS Condition Type STORAGE-CONDITION::
* CLHS Condition Type STYLE-WARNING::
* CLHS Condition Type WARNING::
* CLHS Function ABORT CONTINUE MUFFLE-WARNING::
* CLHS Function BREAK::
* CLHS Function CELL-ERROR-NAME::
* CLHS Function CERROR::
* CLHS Function COMPUTE-RESTARTS::
* CLHS Function ERROR::
* CLHS Function FIND-RESTART::
* CLHS Function INVALID-METHOD-ERROR::
* CLHS Function INVOKE-DEBUGGER::
* CLHS Function INVOKE-RESTART-INTERACTIVELY::
* CLHS Function INVOKE-RESTART::
* CLHS Function MAKE-CONDITION::
* CLHS Function METHOD-COMBINATION-ERROR::
* CLHS Function RESTART-NAME::
* CLHS Function SIGNAL::
* CLHS Function SIMPLE-CONDITION-FORMAT-CONTROL::
* CLHS Function WARN::
* CLHS Macro ASSERT::
* CLHS Macro CHECK-TYPE::
* CLHS Macro DEFINE-CONDITION::
* CLHS Macro HANDLER-BIND::
* CLHS Macro HANDLER-CASE::
* CLHS Macro IGNORE-ERRORS::
* CLHS Macro RESTART-BIND::
* CLHS Macro RESTART-CASE::
* CLHS Macro WITH-CONDITION-RESTARTS::
* CLHS Macro WITH-SIMPLE-RESTART::
* CLHS Restart ABORT::
* CLHS Restart CONTINUE::
* CLHS Restart MUFFLE-WARNING::
* CLHS Restart STORE-VALUE::
* CLHS Restart USE-VALUE::
* CLHS System Class RESTART::
* CLHS Variable *BREAK-ON-SIGNALS*::
* CLHS Variable *DEBUGGER-HOOK*::
@end menu

@node CLHS Condition Type CELL-ERROR
@subsubsection CLHS: Condition Type CELL-ERROR
@anchor{#clhs-condition-type-cell-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_cell-error-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{CELL-ERROR}

@strong{Class Precedence List:}

@ref{#cell-error,@strong{cell-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#cell-error,@strong{cell-error}} consists of error conditions that
occur during a location @uref{glo_a.html#access,@emph{access}}. The name
of the offending cell is initialized by the :nameinitialization argument
to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and is @emph{accessed} by the @uref{glo_f.html#function,@emph{function}}
@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}}.

@strong{See Also:}

@uref{fun_cell-error-name.html#cell-error-name,@strong{cell-error-name}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type ERROR
@subsubsection CLHS: Condition Type ERROR
@anchor{#clhs-condition-type-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_serious-condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_cell-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{ERROR}

@strong{Class Precedence List:}

@ref{#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#error,@strong{error}}
consists of all @uref{glo_c.html#condition,@emph{conditions}} that
represent @uref{glo_e.html#error,@emph{errors}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type PARSE-ERROR
@subsubsection CLHS: Condition Type PARSE-ERROR
@anchor{#clhs-condition-type-parse-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_cell-error-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_storage-condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{PARSE-ERROR}

@strong{Class Precedence List:}

@ref{#parse-error,@strong{parse-error}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#parse-error,@strong{parse-error}} consists of error conditions
that are related to parsing.

@strong{See Also:}

@uref{fun_parse-namestring.html#parse-namestring,@strong{parse-namestring}},
@strong{reader-error}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss289.html,READER-ERROR:NEW-TYPE}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@item
@uref{../Issues/iss255.html,PARSE-ERROR-STREAM:SPLIT-TYPES}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type SERIOUS-CONDITION
@subsubsection CLHS: Condition Type SERIOUS-CONDITION
@anchor{#clhs-condition-type-serious-condition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_style-warning.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{SERIOUS-CONDITION}

@strong{Class Precedence List:}

@ref{#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

All @uref{glo_c.html#condition,@emph{conditions}} serious enough to
require interactive intervention if not handled should inherit from the
@uref{glo_t.html#type,@emph{type}}
@ref{#serious-condition,@strong{serious-condition}}. This condition type
is provided primarily so that it may be included as a
@uref{glo_s.html#superclass,@emph{superclass}} of other
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{types}}; it is not intended to be signaled
directly.

@strong{Notes:}

Signaling a @uref{glo_s.html#serious_condition,@emph{serious condition}}
does not itself force entry into the debugger. However, except in the
unusual situation where the programmer can assure that no harm will come
from failing to @uref{glo_h.html#handle,@emph{handle}} a
@uref{glo_s.html#serious_condition,@emph{serious condition}}, such a
@uref{glo_c.html#condition,@emph{condition}} is usually signaled with
@uref{fun_error.html#error,@strong{error}} rather than
@uref{fun_signal.html#signal,@strong{signal}} in order to assure that
the program does not continue without @emph{handling} the
@uref{glo_c.html#condition,@emph{condition}}. (And conversely, it is
conventional to use @uref{fun_signal.html#signal,@strong{signal}} rather
than @uref{fun_error.html#error,@strong{error}} to signal conditions
which are not @uref{glo_s.html#serious_condition,@emph{serious
conditions}}, since normally the failure to handle a non-serious
condition is not reason enough for the debugger to be entered.)

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type SIMPLE-CONDITION
@subsubsection CLHS: Condition Type SIMPLE-CONDITION
@anchor{#clhs-condition-type-simple-condition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_signal.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_simple-co_at-arguments.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{SIMPLE-CONDITION}

@strong{Class Precedence List:}

@ref{#simple-condition,@strong{simple-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#simple-condition,@strong{simple-condition}} represents
@uref{glo_c.html#condition,@emph{conditions}} that are signaled by
@uref{fun_signal.html#signal,@strong{signal}} whenever a
@emph{format-control} is supplied as the function's first argument. The
@uref{glo_f.html#format_control,@emph{format control}} and
@uref{glo_f.html#format_argument,@emph{format arguments}} are
initialized with the initialization arguments named :format-control and
:format-arguments to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
and are @emph{accessed} by the
@uref{glo_f.html#function,@emph{functions}}
@uref{fun_simple-co_at-arguments.html#simple-condition-format-control,@strong{simple-condition-format-control}}
and
@uref{fun_simple-co_at-arguments.html#simple-condition-format-arguments,@strong{simple-condition-format-arguments}}.
If format arguments are not supplied to
@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
@uref{any_nil.html#nil,@strong{nil}} is used as a default.

@strong{See Also:}

@uref{fun_simple-co_at-arguments.html#simple-condition-format-control,@strong{simple-condition-format-control}},
@uref{fun_simple-co_at-arguments.html#simple-condition-format-arguments,@strong{simple-condition-format-arguments}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type SIMPLE-ERROR
@subsubsection CLHS: Condition Type SIMPLE-ERROR
@anchor{#clhs-condition-type-simple-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_check-type.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_invalid-method-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{SIMPLE-ERROR}

@strong{Class Precedence List:}

@ref{#simple-error,@strong{simple-error}},
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}},
@uref{contyp_error.html#error,@strong{error}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#simple-error,@strong{simple-error}} consists of
@uref{glo_c.html#condition,@emph{conditions}} that are signaled by
@uref{fun_error.html#error,@strong{error}} or
@uref{fun_cerror.html#cerror,@strong{cerror}} when a
@uref{glo_f.html#format_control,@emph{format control}} is supplied as
the function's first argument.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type SIMPLE-WARNING
@subsubsection CLHS: Condition Type SIMPLE-WARNING
@anchor{#clhs-condition-type-simple-warning}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_warn.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_invoke-debugger.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{SIMPLE-WARNING}

@strong{Class Precedence List:}

@ref{#simple-warning,@strong{simple-warning}},
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}},
@uref{contyp_warning.html#warning,@strong{warning}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#simple-warning,@strong{simple-warning}} represents
@uref{glo_c.html#condition,@emph{conditions}} that are signaled by
@uref{fun_warn.html#warn,@strong{warn}} whenever a
@uref{glo_f.html#format_control,@emph{format control}} is supplied as
the function's first argument.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@item
@uref{../Issues/iss352.html,TYPE-OF-AND-PREDEFINED-CLASSES:UNIFY-AND-EXTEND}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type STORAGE-CONDITION
@subsubsection CLHS: Condition Type STORAGE-CONDITION
@anchor{#clhs-condition-type-storage-condition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_parse-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_assert.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{STORAGE-CONDITION}

@strong{Class Precedence List:}

@ref{#storage-condition,@strong{storage-condition}},
@uref{contyp_serious-condition.html#serious-condition,@strong{serious-condition}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#storage-condition,@strong{storage-condition}} consists of serious
conditions that relate to problems with memory management that are
potentially due to
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
limits rather than semantic errors in
@uref{glo_c.html#conforming_program,@emph{conforming programs}}, and
that typically warrant entry to the debugger if not handled. Depending
on the details of the
@uref{glo_i.html#implementation,@emph{implementation}}, these might
include such problems as stack overflow, memory region overflow, and
storage exhausted.

@strong{Notes:}

While some Common Lisp operations might signal
@ref{#storage-condition,@emph{storage-condition}} because they are
defined to create @uref{glo_o.html#object,@emph{objects}}, it is
unspecified whether operations that are not defined to create
@uref{glo_o.html#object,@emph{objects}} create them anyway and so might
also signal @ref{#storage-condition,@strong{storage-condition}}.
Likewise, the evaluator itself might create
@uref{glo_o.html#object,@emph{objects}} and so might signal
@ref{#storage-condition,@strong{storage-condition}}. (The natural
assumption might be that such @uref{glo_o.html#object,@emph{object}}
creation is naturally inefficient, but even that is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.)
In general, the entire question of how storage allocation is done is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}},
and so any operation might signal
@ref{#storage-condition,@strong{storage-condition}} at any time. Because
such a @uref{glo_c.html#condition,@emph{condition}} is indicative of a
limitation of the @uref{glo_i.html#implementation,@emph{implementation}}
or of the @emph{image} rather than an error in a
@uref{glo_p.html#program,@emph{program}},
@uref{glo_o.html#object,@emph{objects}} of
@uref{glo_t.html#type,@emph{type}}
@ref{#storage-condition,@strong{storage-condition}} are not of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type STYLE-WARNING
@subsubsection CLHS: Condition Type STYLE-WARNING
@anchor{#clhs-condition-type-style-warning}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_warning.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_serious-condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{STYLE-WARNING}

@strong{Class Precedence List:}

@ref{#style-warning,@strong{style-warning}},
@uref{contyp_warning.html#warning,@strong{warning}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}}
@ref{#style-warning,@strong{style-warning}} includes those
@uref{glo_c.html#condition,@emph{conditions}} that represent
@uref{glo_s.html#situation,@emph{situations}} involving
@uref{glo_c.html#code,@emph{code}} that is
@uref{glo_c.html#conforming_code,@emph{conforming code}} but that is
nevertheless considered to be faulty or substandard.

@strong{See Also:}

@uref{fun_abortcm_c_cm_use-value.html#muffle-warning,@strong{muffle-warning}}

@strong{Notes:}

An @uref{glo_i.html#implementation,@emph{implementation}} might signal
such a @uref{glo_c.html#condition,@emph{condition}} if it encounters
@uref{glo_c.html#code,@emph{code}} that uses deprecated features or that
appears unaesthetic or inefficient.

An `unused variable' warning must be of
@uref{glo_t.html#type,@emph{type}}
@ref{#style-warning,@strong{style-warning}}.

In general, the question of whether @uref{glo_c.html#code,@emph{code}}
is faulty or substandard is a subjective decision to be made by the
facility processing that @uref{glo_c.html#code,@emph{code}}. The intent
is that whenever such a facility wishes to complain about
@uref{glo_c.html#code,@emph{code}} on such subjective grounds, it should
use this @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}} so that any clients who wish to
redirect or muffle superfluous warnings can do so without risking that
they will be redirecting or muffling other, more serious warnings.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Condition Type WARNING
@subsubsection CLHS: Condition Type WARNING
@anchor{#clhs-condition-type-warning}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_style-warning.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Condition Type} @strong{WARNING}

@strong{Class Precedence List:}

@ref{#warning,@strong{warning}},
@uref{contyp_condition.html#condition,@strong{condition}},
@uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

The @uref{glo_t.html#type,@emph{type}} @ref{#warning,@strong{warning}}
consists of all types of warnings.

@strong{See Also:}

@uref{contyp_style-warning.html#style-warning,@strong{style-warning}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ABORT CONTINUE MUFFLE-WARNING
@subsubsection CLHS: Function ABORT, CONTINUE, MUFFLE-WARNING...
@anchor{#clhs-function-abort-continue-muffle-warning...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{res_use-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{chap-10.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ABORT, CONTINUE, MUFFLE-WARNING, STORE-VALUE,
USE-VALUE}

@strong{Syntax:}

@strong{abort} @emph{&optional condition} =>|

@strong{continue} @emph{&optional condition} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{muffle-warning} @emph{&optional condition} =>|

@strong{store-value} @emph{value &optional condition} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{use-value} @emph{value &optional condition} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{value}---an @uref{glo_o.html#object,@emph{object}}.

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_o.html#object,@emph{object}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

Transfers control to the most recently established
@uref{glo_a.html#applicable_restart,@emph{applicable restart}} having
the same name as the function. That is, the
@uref{glo_f.html#function,@emph{function}} @ref{#abort,@strong{abort}}
searches for an @uref{glo_a.html#applicable,@emph{applicable}}
@uref{any_abort.html#abort,@strong{abort}}
@uref{glo_r.html#restart,@emph{restart}}, the
@uref{glo_f.html#function,@emph{function}}
@ref{#continue,@strong{continue}} searches for an
@uref{glo_a.html#applicable,@emph{applicable}}
@uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}}, and so on.

If no such @uref{glo_r.html#restart,@emph{restart}} exists, the
functions @ref{#continue,@strong{continue}},
@ref{#store-value,@strong{store-value}}, and
@ref{#use-value,@strong{use-value}} return
@uref{any_nil.html#nil,@strong{nil}}, and the functions
@ref{#abort,@strong{abort}} and
@ref{#muffle-warning,@strong{muffle-warning}} signal an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}}.

When @emph{condition} is @uref{glo_n.html#non-nil,@emph{non-nil}}, only
those @uref{glo_r.html#restart,@emph{restarts}} are considered that are
either explicitly associated with that @emph{condition}, or not
associated with any @uref{glo_c.html#condition,@emph{condition}}; that
is, the excluded @uref{glo_r.html#restart,@emph{restarts}} are those
that are associated with a non-empty set of
@uref{glo_c.html#condition,@emph{conditions}} of which the given
@emph{condition} is not an @uref{glo_e.html#element,@emph{element}}. If
@emph{condition} is @uref{any_nil.html#nil,@strong{nil}}, all
@uref{glo_r.html#restart,@emph{restarts}} are considered.

@strong{Examples:}

@verbatim
;;; Example of the ABORT retart

 (defmacro abort-on-error (&body forms)
   `(handler-bind ((error #'abort))
      ,@forms)) =>  ABORT-ON-ERROR
 (abort-on-error (+ 3 5)) =>  8
 (abort-on-error (error "You lose."))
>>  Returned to Lisp Top Level.

;;; Example of the CONTINUE restart

 (defun real-sqrt (n)
   (when (minusp n)
     (setq n (- n))
     (cerror "Return sqrt(~D) instead." "Tried to take sqrt(-~D)." n))
   (sqrt n))

 (real-sqrt 4) =>  2
 (real-sqrt -9)
>>  Error: Tried to take sqrt(-9).
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return sqrt(9) instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> (continue)
>>  Return sqrt(9) instead.
=>  3
 
 (handler-bind ((error #'(lambda (c) (continue))))
   (real-sqrt -9)) =>  3

;;; Example of the MUFFLE-WARNING restart

 (defun count-down (x)
   (do ((counter x (1- counter)))
       ((= counter 0) 'done)
     (when (= counter 1)
       (warn "Almost done"))
     (format t "~&~D~%" counter)))
=>  COUNT-DOWN
 (count-down 3)
>>  3
>>  2
>>  Warning: Almost done
>>  1
=>  DONE
 (defun ignore-warnings-while-counting (x)
   (handler-bind ((warning #'ignore-warning))
     (count-down x)))
=>  IGNORE-WARNINGS-WHILE-COUNTING
 (defun ignore-warning (condition)
   (declare (ignore condition))
   (muffle-warning))
=>  IGNORE-WARNING
 (ignore-warnings-while-counting 3)
>>  3
>>  2
>>  1
=>  DONE

;;; Example of the STORE-VALUE and USE-VALUE restarts

 (defun careful-symbol-value (symbol)
   (check-type symbol symbol)
   (restart-case (if (boundp symbol)
                     (return-from careful-symbol-value 
                                  (symbol-value symbol))
                     (error 'unbound-variable
                            :name symbol))
     (use-value (value)
       :report "Specify a value to use this time."
       value)
     (store-value (value)
       :report "Specify a value to store and use in the future."
       (setf (symbol-value symbol) value))))
 (setq a 1234) =>  1234
 (careful-symbol-value 'a) =>  1234
 (makunbound 'a) =>  A
 (careful-symbol-value 'a)
>>  Error: A is not bound.
>>  To continue, type :CONTINUE followed by an option number.
>>   1: Specify a value to use this time.
>>   2: Specify a value to store and use in the future.
>>   3: Return to Lisp Toplevel.
>>  Debug> (use-value 12)
=>  12
 (careful-symbol-value 'a)
>>  Error: A is not bound.
>>  To continue, type :CONTINUE followed by an option number.
>>    1: Specify a value to use this time.
>>    2: Specify a value to store and use in the future.
>>    3: Return to Lisp Toplevel.
>>  Debug> (store-value 24)
=>  24
 (careful-symbol-value 'a)
=>  24

;;; Example of the USE-VALUE restart

 (defun add-symbols-with-default (default &rest symbols)
   (handler-bind ((sys:unbound-symbol
                    #'(lambda (c)
                        (declare (ignore c)) 
                        (use-value default))))
     (apply #'+ (mapcar #'careful-symbol-value symbols))))
=>  ADD-SYMBOLS-WITH-DEFAULT
 (setq x 1 y 2) =>  2
 (add-symbols-with-default 3 'x 'y 'z) =>  6
@end verbatim

@strong{Side Effects:}

A transfer of control may occur if an appropriate
@uref{glo_r.html#restart,@emph{restart}} is available, or (in the case
of the @uref{glo_f.html#function,@emph{function}}
@ref{#abort,@strong{abort}} or the
@uref{glo_f.html#function,@emph{function}}
@ref{#muffle-warning,@strong{muffle-warning}}) execution may be stopped.

@strong{Affected By:}

Each of these functions can be affected by the presence of a
@uref{glo_r.html#restart,@emph{restart}} having the same name.

@strong{Exceptional Situations:}

If an appropriate @uref{any_abort.html#abort,@strong{abort}}
@uref{glo_r.html#restart,@emph{restart}} is not available for the
@uref{glo_f.html#function,@emph{function}} @ref{#abort,@strong{abort}},
or an appropriate
@uref{any_muffle-warning.html#muffle-warning,@strong{muffle-warning}}
@uref{glo_r.html#restart,@emph{restart}} is not available for the
@uref{glo_f.html#function,@emph{function}}
@ref{#muffle-warning,@strong{muffle-warning}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}} is
signaled.

@strong{See Also:}

@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{mac_assert.html#assert,@strong{assert}},
@uref{mac_casecm_ccasecm_ecase.html#ccase,@strong{ccase}},
@uref{fun_cerror.html#cerror,@strong{cerror}},
@uref{mac_check-type.html#check-type,@strong{check-type}},
@uref{mac_typecasec_cm_etypecase.html#ctypecase,@strong{ctypecase}},
@ref{#use-value,@strong{use-value}},
@uref{fun_warn.html#warn,@strong{warn}}

@strong{Notes:}

@verbatim
 (abort condition) ==  (invoke-restart 'abort)
 (muffle-warning)  ==  (invoke-restart 'muffle-warning)
 (continue)        ==  (let ((r (find-restart 'continue))) (if r (invoke-restart r)))
 (use-value x) ==  (let ((r (find-restart 'use-value))) (if r (invoke-restart r x)))
 (store-value x) ==  (let ((r (find-restart 'store-value))) (if r (invoke-restart r x)))
@end verbatim

No functions defined in this specification are required to provide a
@uref{any_use-value.html#use-value,@strong{use-value}}
@uref{glo_r.html#restart,@emph{restart}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss244.html,MUFFLE-WARNING-CONDITION-ARGUMENT}
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function BREAK
@subsubsection CLHS: Function BREAK
@anchor{#clhs-function-break}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_invoke-debugger.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stdebugger-hookst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{BREAK}

@strong{Syntax:}

@strong{break} @emph{&optional format-control &rest format-arguments} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{format-control}---a @uref{glo_f.html#format_control,@emph{format
control}}. The default is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@emph{format-arguments}---@uref{glo_f.html#format_argument,@emph{format
arguments}} for the @emph{format-control}.

@strong{Description:}

@ref{#break,@strong{break}} @uref{glo_f.html#format,@emph{formats}}
@emph{format-control} and @emph{format-arguments} and then goes directly
into the debugger without allowing any possibility of interception by
programmed error-handling facilities.

If the @uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}} is used while in the debugger,
@ref{#break,@strong{break}} immediately returns
@uref{any_nil.html#nil,@strong{nil}} without taking any unusual recovery
action.

@ref{#break,@strong{break}} binds
@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}
to @uref{any_nil.html#nil,@strong{nil}} before attempting to enter the
debugger.

@strong{Examples:}

@verbatim
 (break "You got here with arguments: ~:S." '(FOO 37 A))
>>  BREAK: You got here with these arguments: FOO, 37, A.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return from BREAK.
>>   2: Top level.
>>  Debug> :CONTINUE 1
>>  Return from BREAK.
=>  NIL
 
@end verbatim

@strong{Side Effects:}

The debugger is entered.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STdebug-ioST,@strong{*debug-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_error.html#error,@strong{error}},
@uref{fun_invoke-debugger.html#invoke-debugger,@strong{invoke-debugger}}.

@strong{Notes:}

@ref{#break,@strong{break}} is used as a way of inserting temporary
debugging ``breakpoints'' in a program, not as a way of signaling
errors. For this reason, @ref{#break,@strong{break}} does not take the
@emph{continue-format-control}
@uref{glo_a.html#argument,@emph{argument}} that
@uref{fun_cerror.html#cerror,@strong{cerror}} takes. This and the lack
of any possibility of interception by
@uref{glo_c.html#condition,@emph{condition}} @emph{handling} are the
only program-visible differences between @ref{#break,@strong{break}} and
@uref{fun_cerror.html#cerror,@strong{cerror}}.

The user interface aspects of @ref{#break,@strong{break}} and
@uref{fun_cerror.html#cerror,@strong{cerror}} are permitted to vary more
widely, in order to accomodate the interface needs of the
@uref{glo_i.html#implementation,@emph{implementation}}. For example, it
is permissible for a
@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}} to be entered by @ref{#break,@strong{break}} rather than the
conventional debugger.

@ref{#break,@strong{break}} could be defined by:

@verbatim
 (defun break (&optional (format-control "Break") &rest format-arguments)
   (with-simple-restart (continue "Return from BREAK.")
     (let ((*debugger-hook* nil))
       (invoke-debugger
           (make-condition 'simple-condition
                           :format-control format-control
                           :format-arguments format-arguments))))
   nil)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss091.html,DEBUGGER-HOOK-VS-BREAK:CLARIFY}
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CELL-ERROR-NAME
@subsubsection CLHS: Function CELL-ERROR-NAME
@anchor{#clhs-function-cell-error-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_cell-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_parse-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CELL-ERROR-NAME}

@strong{Syntax:}

@strong{cell-error-name} @emph{condition} => @emph{name}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}}.

@emph{name}---an @uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

Returns the @uref{glo_n.html#name,@emph{name}} of the offending cell
involved in the @uref{glo_s.html#situation,@emph{situation}} represented
by @emph{condition}.

The nature of the result depends on the specific
@uref{glo_t.html#type,@emph{type}} of @emph{condition}. For example, if
the @emph{condition} is of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_unbound-variable.html#unbound-variable,@strong{unbound-variable}},
the result is the @uref{glo_n.html#name,@emph{name}} of the
@uref{glo_u.html#unbound_variable,@emph{unbound variable}} which was
being @emph{accessed}, if the @emph{condition} is of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_undefined-function.html#undefined-function,@strong{undefined-function}},
this is the @uref{glo_n.html#name,@emph{name}} of the
@uref{glo_u.html#undefined_function,@emph{undefined function}} which was
being @emph{accessed}, and if the @emph{condition} is of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}}, this
is the @uref{glo_n.html#name,@emph{name}} of the
@uref{glo_s.html#slot,@emph{slot}} which was being @emph{accessed}.

@strong{Examples:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{contyp_cell-error.html#cell-error,@strong{cell-error}},
@uref{contyp_unbound-slot.html#unbound-slot,@strong{unbound-slot}},
@uref{contyp_unbound-variable.html#unbound-variable,@strong{unbound-variable}},
@uref{contyp_undefined-function.html#undefined-function,@strong{undefined-function}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss002.html,ACCESS-ERROR-NAME}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function CERROR
@subsubsection CLHS: Function CERROR
@anchor{#clhs-function-cerror}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_check-type.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{CERROR}

@strong{Syntax:}

@strong{cerror} @emph{continue-format-control datum &rest arguments} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{Continue-format-control}---a
@uref{glo_f.html#format_control,@emph{format control}}.

@emph{datum},
@emph{arguments}---@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}} of default type
@uref{contyp_simple-error.html#simple-error,@strong{simple-error}}.

@strong{Description:}

@ref{#cerror,@strong{cerror}} effectively invokes
@uref{fun_error.html#error,@strong{error}} on the
@uref{glo_c.html#condition,@emph{condition}} named by @emph{datum}. As
with any function that implicitly calls
@uref{fun_error.html#error,@strong{error}}, if the
@uref{glo_c.html#condition,@emph{condition}} is not handled,
(invoke-debugger @emph{condition}) is executed. While signaling is going
on, and while in the debugger if it is reached, it is possible to
continue code execution (i.e., to return from
@ref{#cerror,@strong{cerror}}) using the
@uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}}.

If @emph{datum} is a @uref{glo_c.html#condition,@emph{condition}},
@emph{arguments} can be supplied, but are used only in conjunction with
the @emph{continue-format-control}.

@strong{Examples:}

@verbatim
 (defun real-sqrt (n)
   (when (minusp n)
     (setq n (- n))
     (cerror "Return sqrt(~D) instead." "Tried to take sqrt(-~D)." n))
   (sqrt n))

 (real-sqrt 4)
=>  2.0

 (real-sqrt -9)
>>  Correctable error in REAL-SQRT: Tried to take sqrt(-9).
>>  Restart options:
>>   1: Return sqrt(9) instead.
>>   2: Top level.
>>  Debug> :continue 1
=>  3.0
 
 (define-condition not-a-number (error)
   ((argument :reader not-a-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a number." 
                      (not-a-number-argument condition)))))
 
 (defun assure-number (n)
   (loop (when (numberp n) (return n))
         (cerror "Enter a number."
                 'not-a-number :argument n)
         (format t "~&Type a number: ")
         (setq n (read))
         (fresh-line)))

 (assure-number 'a)
>>  Correctable error in ASSURE-NUMBER: A is not a number.
>>  Restart options:
>>   1: Enter a number.
>>   2: Top level.
>>  Debug> :continue 1
>>  Type a number: 1/2
=>  1/2

 (defun assure-large-number (n)
   (loop (when (and (numberp n) (> n 73)) (return n))
         (cerror "Enter a number~:[~; a bit larger than ~D~]."
                 "~*~A is not a large number." 
                 (numberp n) n)
         (format t "~&Type a large number: ")
         (setq n (read))
         (fresh-line)))
 
 (assure-large-number 10000)
=>  10000

 (assure-large-number 'a)
>>  Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
>>  Restart options:
>>   1: Enter a number.
>>   2: Top level.
>>  Debug> :continue 1
>>  Type a large number: 88
=>  88

 (assure-large-number 37)
>>  Correctable error in ASSURE-LARGE-NUMBER: 37 is not a large number.
>>  Restart options:
>>   1: Enter a number a bit larger than 37.
>>   2: Top level.
>>  Debug> :continue 1
>>  Type a large number: 259
=>  259
 
 (define-condition not-a-large-number (error)
   ((argument :reader not-a-large-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a large number." 
                      (not-a-large-number-argument condition)))))
 
 (defun assure-large-number (n)
   (loop (when (and (numberp n) (> n 73)) (return n))
         (cerror "Enter a number~3*~:[~; a bit larger than ~*~D~]."
                 'not-a-large-number
                 :argument n 
                 :ignore (numberp n)
                 :ignore n
                 :allow-other-keys t)
         (format t "~&Type a large number: ")
         (setq n (read))
         (fresh-line)))
 

 (assure-large-number 'a)
>>  Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
>>  Restart options:
>>   1: Enter a number.
>>   2: Top level.
>>  Debug> :continue 1
>>  Type a large number: 88
=>  88
 
 (assure-large-number 37)
>>  Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
>>  Restart options:
>>   1: Enter a number a bit larger than 37.
>>   2: Top level.
>>  Debug> :continue 1
>>  Type a large number: 259
=>  259
@end verbatim

@strong{Affected By:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}.

Existing handler bindings.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_error.html#error,@strong{error}},
@uref{fun_format.html#format,@strong{format}},
@uref{mac_handler-bind.html#handler-bind,@strong{handler-bind}},
@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}},
@uref{contyp_simple-type-error.html#simple-type-error,@strong{simple-type-error}}

@strong{Notes:}

If @emph{datum} is a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}} rather than a
@uref{glo_s.html#string,@emph{string}}, the
@uref{fun_format.html#format,@strong{format}} directive ~* may be
especially useful in the @emph{continue-format-control} in order to
ignore the @uref{glo_k.html#keyword,@emph{keywords}} in the
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}. For example:

@verbatim
(cerror "enter a new value to replace ~*~s" 
        'not-a-number
        :argument a)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function COMPUTE-RESTARTS
@subsubsection CLHS: Function COMPUTE-RESTARTS
@anchor{#clhs-function-compute-restarts}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{syscla_restart.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_find-restart.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{COMPUTE-RESTARTS}

@strong{Syntax:}

@strong{compute-restarts} @emph{&optional condition} => @emph{restarts}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_o.html#object,@emph{object}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{restarts}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_r.html#restart,@emph{restarts}}.

@strong{Description:}

@ref{#compute-restarts,@strong{compute-restarts}} uses the dynamic state
of the program to compute a @uref{glo_l.html#list,@emph{list}} of the
@uref{glo_r.html#restart,@emph{restarts}} which are currently active.

The resulting @uref{glo_l.html#list,@emph{list}} is ordered so that the
innermost (more-recently established) restarts are nearer the head of
the @uref{glo_l.html#list,@emph{list}}.

When @emph{condition} is @uref{glo_n.html#non-nil,@emph{non-nil}}, only
those @uref{glo_r.html#restart,@emph{restarts}} are considered that are
either explicitly associated with that @emph{condition}, or not
associated with any @uref{glo_c.html#condition,@emph{condition}}; that
is, the excluded @uref{glo_r.html#restart,@emph{restarts}} are those
that are associated with a non-empty set of
@uref{glo_c.html#condition,@emph{conditions}} of which the given
@emph{condition} is not an @uref{glo_e.html#element,@emph{element}}. If
@emph{condition} is @uref{any_nil.html#nil,@strong{nil}}, all
@uref{glo_r.html#restart,@emph{restarts}} are considered.

@ref{#compute-restarts,@strong{compute-restarts}} returns all
@uref{glo_a.html#applicable_restart,@emph{applicable restarts}},
including anonymous ones, even if some of them have the same name as
others and would therefore not be found by
@uref{fun_find-restart.html#find-restart,@strong{find-restart}} when
given a @uref{glo_s.html#symbol,@emph{symbol}} argument.

Implementations are permitted, but not required, to return
@uref{glo_d.html#distinct,@emph{distinct}}
@uref{glo_l.html#list,@emph{lists}} from repeated calls to
@ref{#compute-restarts,@strong{compute-restarts}} while in the same
dynamic environment. The consequences are undefined if the
@uref{glo_l.html#list,@emph{list}} returned by
@ref{#compute-restarts,@strong{compute-restarts}} is every modified.

@strong{Examples:}

@verbatim
 ;; One possible way in which an interactive debugger might present
 ;; restarts to the user.
 (defun invoke-a-restart ()
   (let ((restarts (compute-restarts)))
     (do ((i 0 (+ i 1)) (r restarts (cdr r))) ((null r))
       (format t "~&~D: ~A~%" i (car r)))
     (let ((n nil) (k (length restarts)))
       (loop (when (and (typep n 'integer) (>= n 0) (< n k))
               (return t))
             (format t "~&Option: ")
             (setq n (read))
             (fresh-line))
       (invoke-restart-interactively (nth n restarts)))))

 (restart-case (invoke-a-restart)
   (one () 1)
   (two () 2)
   (nil () :report "Who knows?" 'anonymous)
   (one () 'I)
   (two () 'II))
>>  0: ONE
>>  1: TWO
>>  2: Who knows?
>>  3: ONE
>>  4: TWO
>>  5: Return to Lisp Toplevel.
>>  Option: 4
=>  II
 
 ;; Note that in addition to user-defined restart points, COMPUTE-RESTARTS
 ;; also returns information about any system-supplied restarts, such as
 ;; the "Return to Lisp Toplevel" restart offered above.
 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

Existing restarts.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_find-restart.html#find-restart,@strong{find-restart}},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function ERROR
@subsubsection CLHS: Function ERROR
@anchor{#clhs-function-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_assert.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_cerror.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{ERROR}

@strong{Syntax:}

@strong{error} @emph{datum &rest arguments} =>|

@strong{Arguments and Values:}

@emph{datum},
@emph{arguments}---@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}} of default type
@uref{contyp_simple-error.html#simple-error,@strong{simple-error}}.

@strong{Description:}

@ref{#error,@strong{error}} effectively invokes
@uref{fun_signal.html#signal,@strong{signal}} on the denoted
@uref{glo_c.html#condition,@emph{condition}}.

If the @uref{glo_c.html#condition,@emph{condition}} is not handled,
(invoke-debugger @emph{condition}) is done. As a consequence of calling
@uref{fun_invoke-debugger.html#invoke-debugger,@strong{invoke-debugger}},
@ref{#error,@strong{error}} cannot directly return; the only exit from
@ref{#error,@strong{error}} can come by non-local transfer of control in
a handler or by use of an interactive debugging command.

@strong{Examples:}

@verbatim
 (defun factorial (x)
   (cond ((or (not (typep x 'integer)) (minusp x))
          (error "~S is not a valid argument to FACTORIAL." x))
         ((zerop x) 1)
         (t (* x (factorial (- x 1))))))
=>  FACTORIAL
(factorial 20)
=>  2432902008176640000
(factorial -1)
>>  Error: -1 is not a valid argument to FACTORIAL.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return to Lisp Toplevel.
>>  Debug> 
@end verbatim

@verbatim
 (setq a 'fred)
=>  FRED
 (if (numberp a) (1+ a) (error "~S is not a number." A))
>>  Error: FRED is not a number.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return to Lisp Toplevel.
>>  Debug> :Continue 1
>>  Return to Lisp Toplevel.
 
 (define-condition not-a-number (error) 
                   ((argument :reader not-a-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a number."
                      (not-a-number-argument condition)))))
=>  NOT-A-NUMBER
 
 (if (numberp a) (1+ a) (error 'not-a-number :argument a))
>>  Error: FRED is not a number.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return to Lisp Toplevel.
>>  Debug> :Continue 1
>>  Return to Lisp Toplevel.
@end verbatim

@strong{Side Effects:}

@uref{glo_h.html#handler,@emph{Handlers}} for the specified condition,
if any, are invoked and might have side effects. Program execution might
stop, and the debugger might be entered.

@strong{Affected By:}

Existing handler bindings.

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

@strong{Exceptional Situations:} None.

Signals an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if
@emph{datum} and @emph{arguments} are not
@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}}.

@strong{See Also:}

@uref{fun_cerror.html#cerror,@strong{cerror}},
@uref{fun_signal.html#signal,@strong{signal}},
@uref{fun_format.html#format,@strong{format}},
@uref{mac_ignore-errors.html#ignore-errors,@strong{ignore-errors}},
@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}},
@uref{mac_handler-bind.html#handler-bind,@strong{handler-bind}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:}

Some implementations may provide debugger commands for interactively
returning from individual stack frames. However, it should be possible
for the programmer to feel confident about writing code like:

@verbatim
 (defun wargames:no-win-scenario ()
   (if (error "pushing the button would be stupid."))
   (push-the-button))
@end verbatim

In this scenario, there should be no chance that
@ref{#error,@strong{error}} will return and the button will get pushed.

While the meaning of this program is clear and it might be proven `safe'
by a formal theorem prover, such a proof is no guarantee that the
program is safe to execute. Compilers have been known to have bugs,
computers to have signal glitches, and human beings to manually
intervene in ways that are not always possible to predict. Those kinds
of errors, while beyond the scope of the condition system to formally
model, are not beyond the scope of things that should seriously be
considered when writing code that could have the kinds of sweeping
effects hinted at by this example.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function FIND-RESTART
@subsubsection CLHS: Function FIND-RESTART
@anchor{#clhs-function-find-restart}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_compute-restarts.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_invoke-restart.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{FIND-RESTART}

@strong{Syntax:}

@strong{find-restart} @emph{identifier &optional condition}

restart

@strong{Arguments and Values:}

@emph{identifier}---a @uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}, or a
@uref{glo_r.html#restart,@emph{restart}}.

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_o.html#object,@emph{object}}, or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{restart}---a @uref{glo_r.html#restart,@emph{restart}} or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#find-restart,@strong{find-restart}} searches for a particular
@uref{glo_r.html#restart,@emph{restart}} in the current
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}}.

When @emph{condition} is @uref{glo_n.html#non-nil,@emph{non-nil}}, only
those @uref{glo_r.html#restart,@emph{restarts}} are considered that are
either explicitly associated with that @emph{condition}, or not
associated with any @uref{glo_c.html#condition,@emph{condition}}; that
is, the excluded @uref{glo_r.html#restart,@emph{restarts}} are those
that are associated with a non-empty set of
@uref{glo_c.html#condition,@emph{conditions}} of which the given
@emph{condition} is not an @uref{glo_e.html#element,@emph{element}}. If
@emph{condition} is @uref{any_nil.html#nil,@strong{nil}}, all
@uref{glo_r.html#restart,@emph{restarts}} are considered.

If @emph{identifier} is a @uref{glo_s.html#symbol,@emph{symbol}}, then
the innermost (most recently established)
@uref{glo_a.html#applicable_restart,@emph{applicable restart}} with that
@uref{glo_n.html#name,@emph{name}} is returned.
@uref{any_nil.html#nil,@strong{nil}} is returned if no such restart is
found.

If @emph{identifier} is a currently active restart, then it is returned.
Otherwise, @uref{any_nil.html#nil,@strong{nil}} is returned.

@strong{Examples:}

@verbatim
 (restart-case
     (let ((r (find-restart 'my-restart)))
       (format t "~S is named ~S" r (restart-name r)))
   (my-restart () nil))
>>  #<RESTART 32307325> is named MY-RESTART
=>  NIL
 (find-restart 'my-restart)
=>  NIL
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

Existing restarts.

@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}},
@uref{mac_with-cond_ion-restarts.html#with-condition-restarts,@strong{with-condition-restarts}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compute-restarts.html#compute-restarts,@strong{compute-restarts}}

@strong{Notes:}

@verbatim
 (find-restart identifier)
 ==  (find identifier (compute-restarts) :key :restart-name)
@end verbatim

Although anonymous restarts have a name of
@uref{any_nil.html#nil,@strong{nil}}, the consequences are unspecified
if @uref{any_nil.html#nil,@strong{nil}} is given as an
@emph{identifier}. Occasionally, programmers lament that
@uref{any_nil.html#nil,@strong{nil}} is not permissible as an
@emph{identifier} argument. In most such cases,
@uref{fun_compute-restarts.html#compute-restarts,@strong{compute-restarts}}
can probably be used to simulate the desired effect.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INVALID-METHOD-ERROR
@subsubsection CLHS: Function INVALID-METHOD-ERROR
@anchor{#clhs-function-invalid-method-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_simple-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_method-co_nation-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INVALID-METHOD-ERROR}

@strong{Syntax:}

@strong{invalid-method-error} @emph{method format-control &rest args} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{method}---a @uref{glo_m.html#method,@emph{method}}.

@emph{format-control}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{args}---@uref{glo_f.html#format_argument,@emph{format arguments}}
for the @emph{format-control}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#invalid-method-error,@strong{invalid-method-error}} is used to
signal an error of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} when there is an
applicable @uref{glo_m.html#method,@emph{method}} whose
@uref{glo_q.html#qualifier,@emph{qualifiers}} are not valid for the
method combination type. The error message is constructed by using the
@emph{format-control} suitable for
@uref{fun_format.html#format,@strong{format}} and any @emph{args} to it.
Because an implementation may need to add additional contextual
information to the error message,
@ref{#invalid-method-error,@strong{invalid-method-error}} should be
called only within the dynamic extent of a method combination function.

The @uref{glo_f.html#function,@emph{function}}
@ref{#invalid-method-error,@strong{invalid-method-error}} is called
automatically when a @uref{glo_m.html#method,@emph{method}} fails to
satisfy every @uref{glo_q.html#qualifier,@emph{qualifier}} pattern and
predicate in a
@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}
@uref{glo_f.html#form,@emph{form}}. A method combination function that
imposes additional restrictions should call
@ref{#invalid-method-error,@strong{invalid-method-error}} explicitly if
it encounters a @uref{glo_m.html#method,@emph{method}} it cannot accept.

Whether @ref{#invalid-method-error,@strong{invalid-method-error}}
returns to its caller or exits via
@uref{speope_throw.html#throw,@strong{throw}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Examples:} None.

@strong{Side Effects:}

The debugger might be entered.

@strong{Affected By:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INVOKE-DEBUGGER
@subsubsection CLHS: Function INVOKE-DEBUGGER
@anchor{#clhs-function-invoke-debugger}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_simple-warning.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_break.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INVOKE-DEBUGGER}

@strong{Syntax:}

@strong{invoke-debugger} @emph{condition} =>|

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_o.html#object,@emph{object}}.

@strong{Description:}

@ref{#invoke-debugger,@strong{invoke-debugger}} attempts to enter the
debugger with @emph{condition}.

If
@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}
is not @uref{any_nil.html#nil,@strong{nil}}, it should be a
@uref{glo_f.html#function,@emph{function}} (or the name of a
@uref{glo_f.html#function,@emph{function}}) to be called prior to entry
to the standard debugger. The @uref{glo_f.html#function,@emph{function}}
is called with
@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}
bound to @uref{any_nil.html#nil,@strong{nil}}, and the
@uref{glo_f.html#function,@emph{function}} must accept two arguments:
the @emph{condition} and the @uref{glo_v.html#value,@emph{value}} of
@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}
prior to binding it to @uref{any_nil.html#nil,@strong{nil}}. If the
@uref{glo_f.html#function,@emph{function}} returns normally, the
standard debugger is entered.

The standard debugger never directly returns. Return can occur only by a
non-local transfer of control, such as the use of a restart function.

@strong{Examples:}

@verbatim
 (ignore-errors ;Normally, this would suppress debugger entry
   (handler-bind ((error #'invoke-debugger)) ;But this forces debugger entry
     (error "Foo.")))
Debug: Foo.
To continue, type :CONTINUE followed by an option number:
 1: Return to Lisp Toplevel.
Debug>
@end verbatim

@strong{Side Effects:}

@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}
is bound to @uref{any_nil.html#nil,@strong{nil}}, program execution is
discontinued, and the debugger is entered.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STdebug-ioST,@strong{*debug-io*}}
and
@uref{var_stdebugger-hookst.html#STdebugger-hookST,@strong{*debugger-hook*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_error.html#error,@strong{error}},
@uref{fun_break.html#break,@strong{break}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INVOKE-RESTART-INTERACTIVELY
@subsubsection CLHS: Function INVOKE-RESTART-INTERACTIVELY
@anchor{#clhs-function-invoke-restart-interactively}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_invoke-restart.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_restart-bind.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INVOKE-RESTART-INTERACTIVELY}

@strong{Syntax:}

@strong{invoke-restart-interactively} @emph{restart} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{restart}---a @uref{glo_r.html#restart_designator,@emph{restart
designator}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#function,@emph{function}} associated with
@emph{restart}, if that @uref{glo_f.html#function,@emph{function}}
returns.

@strong{Description:}

@ref{#invoke-restart-interactively,@strong{invoke-restart-interactively}}
calls the @uref{glo_f.html#function,@emph{function}} associated with
@emph{restart}, prompting for any necessary arguments. If @emph{restart}
is a name, it must be valid in the current
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}}.

@ref{#invoke-restart-interactively,@strong{invoke-restart-interactively}}
prompts for arguments by executing the code provided in the :interactive
keyword to
@uref{mac_restart-case.html#restart-case,@strong{restart-case}} or
:interactive-function keyword to
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}}.

If no such options have been supplied in the corresponding
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}} or
@uref{mac_restart-case.html#restart-case,@strong{restart-case}}, then
the consequences are undefined if the @emph{restart} takes required
arguments. If the arguments are optional, an argument list of
@uref{any_nil.html#nil,@strong{nil}} is used.

Once the arguments have been determined,
@ref{#invoke-restart-interactively,@strong{invoke-restart-interactively}}
executes the following:

@verbatim
 (apply #'invoke-restart restart arguments)
@end verbatim

@strong{Examples:}

@verbatim
 (defun add3 (x) (check-type x number) (+ x 3))
 
 (add3 'seven)
>>  Error: The value SEVEN was not of type NUMBER.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a different value to use.
>>   2: Return to Lisp Toplevel.
>>  Debug> (invoke-restart-interactively 'store-value)
>>  Type a form to evaluate and use: 7
=>  10
@end verbatim

@strong{Side Effects:}

If prompting for arguments is necesary, some typeout may occur (on
@uref{glo_q.html#query_iSLo,@emph{query I/O}}).

A non-local transfer of control might be done by the restart.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STquery-ioST,@strong{*query-io*}},
active @uref{glo_r.html#restart,@emph{restarts}}

@strong{Exceptional Situations:}

If @emph{restart} is not valid, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}} is
signaled.

@strong{See Also:}

@uref{fun_find-restart.html#find-restart,@strong{find-restart}},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}}

@strong{Notes:}

@ref{#invoke-restart-interactively,@strong{invoke-restart-interactively}}
is used internally by the debugger and may also be useful in
implementing other portable, interactive debugging tools.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function INVOKE-RESTART
@subsubsection CLHS: Function INVOKE-RESTART
@anchor{#clhs-function-invoke-restart}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_find-restart.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_invoke-re_nteractively.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{INVOKE-RESTART}

@strong{Syntax:}

@strong{invoke-restart} @emph{restart &rest arguments} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{restart}---a @uref{glo_r.html#restart_designator,@emph{restart
designator}}.

@emph{argument}---an @uref{glo_o.html#object,@emph{object}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#function,@emph{function}} associated with
@emph{restart}, if that @uref{glo_f.html#function,@emph{function}}
returns.

@strong{Description:}

Calls the @uref{glo_f.html#function,@emph{function}} associated with
@emph{restart}, passing @emph{arguments} to it. @emph{Restart} must be
valid in the current @uref{glo_d.html#dynamic_environment,@emph{dynamic
environment}}.

@strong{Examples:}

@verbatim
 (defun add3 (x) (check-type x number) (+ x 3))
 
 (foo 'seven)
>>  Error: The value SEVEN was not of type NUMBER.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a different value to use.
>>   2: Return to Lisp Toplevel.
>>  Debug> (invoke-restart 'store-value 7)
=>  10
@end verbatim

@strong{Side Effects:}

A non-local transfer of control might be done by the restart.

@strong{Affected By:}

Existing restarts.

@strong{Exceptional Situations:}

If @emph{restart} is not valid, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_control-error.html#control-error,@strong{control-error}} is
signaled.

@strong{See Also:}

@uref{fun_find-restart.html#find-restart,@strong{find-restart}},
@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}},
@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}

@strong{Notes:}

The most common use for @ref{#invoke-restart,@strong{invoke-restart}} is
in a @uref{glo_h.html#handler,@emph{handler}}. It might be used
explicitly, or implicitly through
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
or a @uref{glo_r.html#restart_function,@emph{restart function}}.

@uref{glo_r.html#restart_function,@emph{Restart functions}} call
@ref{#invoke-restart,@strong{invoke-restart}}, not vice versa. That is,
@ref{#invoke-restart,@emph{invoke-restart}} provides primitive
functionality, and @uref{glo_r.html#restart_function,@emph{restart
functions}} are non-essential ``syntactic sugar.''

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function MAKE-CONDITION
@subsubsection CLHS: Function MAKE-CONDITION
@anchor{#clhs-function-make-condition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_define-condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{syscla_restart.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{MAKE-CONDITION}

@strong{Syntax:}

@strong{make-condition} @emph{type &rest slot-initializations} =>
@emph{condition}

@strong{Arguments and Values:}

@emph{type}---a @uref{glo_t.html#type_specifier,@emph{type specifier}}
(for a @uref{glo_s.html#subtype,@emph{subtype}} of
@uref{contyp_condition.html#condition,@strong{condition}}).

@emph{slot-initializations}---an
@uref{glo_i.html#initialization_argument_list,@emph{initialization
argument list}}.

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}.

@strong{Description:}

Constructs and returns a @uref{glo_c.html#condition,@emph{condition}} of
type @emph{type} using @emph{slot-initializations} for the initial
values of the slots. The newly created
@uref{glo_c.html#condition,@emph{condition}} is returned.

@strong{Examples:}

@verbatim
 (defvar *oops-count* 0)

 (setq a (make-condition 'simple-error
                         :format-control "This is your ~:R error."
                         :format-arguments (list (incf *oops-count*))))
=>  #<SIMPLE-ERROR 32245104>
 
 (format t "~&~A~%" a)
>>  This is your first error.
=>  NIL
 
 (error a)
>>  Error: This is your first error.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return to Lisp Toplevel.
>>  Debug> 
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:}

The set of defined @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{types}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-condition.html#define-condition,@strong{define-condition}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function METHOD-COMBINATION-ERROR
@subsubsection CLHS: Function METHOD-COMBINATION-ERROR
@anchor{#clhs-function-method-combination-error}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_invalid-method-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_signal.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{METHOD-COMBINATION-ERROR}

@strong{Syntax:}

@strong{method-combination-error} @emph{format-control &rest args} =>
@emph{@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}}

@strong{Arguments and Values:}

@emph{format-control}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{args}---@uref{glo_f.html#format_argument,@emph{format arguments}}
for @emph{format-control}.

@strong{Description:}

The @uref{glo_f.html#function,@emph{function}}
@ref{#method-combination-error,@strong{method-combination-error}} is
used to signal an error in method combination.

The error message is constructed by using a @emph{format-control}
suitable for @uref{fun_format.html#format,@strong{format}} and any
@emph{args} to it. Because an implementation may need to add additional
contextual information to the error message,
@ref{#method-combination-error,@strong{method-combination-error}} should
be called only within the dynamic extent of a method combination
function.

Whether
@ref{#method-combination-error,@strong{method-combination-error}}
returns to its caller or exits via
@uref{speope_throw.html#throw,@strong{throw}} is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

@strong{Examples:} None.

@strong{Side Effects:}

The debugger might be entered.

@strong{Affected By:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_define-me_-combination.html#define-method-combination,@strong{define-method-combination}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function RESTART-NAME
@subsubsection CLHS: Function RESTART-NAME
@anchor{#clhs-function-restart-name}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_restart-case.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-cond_ion-restarts.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{RESTART-NAME}

@strong{Syntax:}

@strong{restart-name} @emph{restart} => @emph{name}

@strong{Arguments and Values:}

@emph{restart}---a @uref{glo_r.html#restart,@emph{restart}}.

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@strong{Description:}

Returns the name of the @emph{restart}, or
@uref{any_nil.html#nil,@strong{nil}} if the @emph{restart} is not named.

@strong{Examples:}

@verbatim
 (restart-case 
     (loop for restart in (compute-restarts)
               collect (restart-name restart))
   (case1 () :report "Return 1." 1)
   (nil   () :report "Return 2." 2)
   (case3 () :report "Return 3." 3)
   (case1 () :report "Return 4." 4))
=>  (CASE1 NIL CASE3 CASE1 ABORT)
 ;; In the example above the restart named ABORT was not created
 ;; explicitly, but was implicitly supplied by the system.
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_compute-restarts.html#compute-restarts,@strong{compute-restarts}}
@uref{fun_find-restart.html#find-restart,@strong{find-restart}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIGNAL
@subsubsection CLHS: Function SIGNAL
@anchor{#clhs-function-signal}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_method-co_nation-error.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_simple-condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIGNAL}

@strong{Syntax:}

@strong{signal} @emph{datum &rest arguments} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{datum},
@emph{arguments}---@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}} of default type
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}}.

@strong{Description:}

@uref{glo_s.html#signal,@emph{Signals}} the
@uref{glo_c.html#condition,@emph{condition}} denoted by the given
@emph{datum} and @emph{arguments}. If the
@uref{glo_c.html#condition,@emph{condition}} is not handled,
@ref{#signal,@strong{signal}} returns
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (defun handle-division-conditions (condition)
   (format t "Considering condition for division condition handling~%")
   (when (and (typep condition 'arithmetic-error)
              (eq '/ (arithmetic-error-operation condition)))
     (invoke-debugger condition)))
HANDLE-DIVISION-CONDITIONS
 (defun handle-other-arithmetic-errors (condition)
   (format t "Considering condition for arithmetic condition handling~%")
   (when (typep condition 'arithmetic-error)
     (abort)))
HANDLE-OTHER-ARITHMETIC-ERRORS
 (define-condition a-condition-with-no-handler (condition) ())
A-CONDITION-WITH-NO-HANDLER
 (signal 'a-condition-with-no-handler)
NIL
 (handler-bind ((condition #'handle-division-conditions)
                  (condition #'handle-other-arithmetic-errors))
   (signal 'a-condition-with-no-handler))
Considering condition for division condition handling
Considering condition for arithmetic condition handling
NIL
 (handler-bind ((arithmetic-error #'handle-division-conditions)
                  (arithmetic-error #'handle-other-arithmetic-errors))
   (signal 'arithmetic-error :operation '* :operands '(1.2 b)))
Considering condition for division condition handling
Considering condition for arithmetic condition handling
Back to Lisp Toplevel
@end verbatim

@strong{Side Effects:}

The debugger might be entered due to
@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}.

Handlers for the condition being signaled might transfer control.

@strong{Affected By:}

Existing handler bindings.

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}},
@uref{fun_error.html#error,@strong{error}},
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}},
@uref{sec_9-1-4.html,Section 9.1.4 (Signaling and Handling Conditions)}

@strong{Notes:}

If (typep @emph{datum} *break-on-signals*)
@uref{glo_y.html#yield,@emph{yields}}
@uref{glo_t.html#true,@emph{true}}, the debugger is entered prior to
beginning the signaling process. The
@uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}} can be used to continue with
the signaling process. This is also true for all other
@uref{glo_f.html#function,@emph{functions}} and
@uref{glo_m.html#macro,@emph{macros}} that should, might, or must
@uref{glo_s.html#signal,@emph{signal}}
@uref{glo_c.html#condition,@emph{conditions}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function SIMPLE-CONDITION-FORMAT-CONTROL
@subsubsection CLHS: Function SIMPLE-CONDITION-FORMAT-CONTROL...
@anchor{#clhs-function-simple-condition-format-control...}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_simple-condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_warn.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{SIMPLE-CONDITION-FORMAT-CONTROL,
SIMPLE-CONDITION-FORMAT-ARGUMENTS}

@strong{Syntax:}

@strong{simple-condition-format-control} @emph{condition} =>
@emph{format-control}

@strong{simple-condition-format-arguments} @emph{condition} =>
@emph{format-arguments}

@strong{Arguments and Values:}

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_simple-condition.html#simple-condition,@strong{simple-condition}}.

@emph{format-control}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{format-arguments}---a @uref{glo_l.html#list,@emph{list}}.

@strong{Description:}

@ref{#simple-condition-format-control,@strong{simple-condition-format-control}}
returns the @uref{glo_f.html#format_control,@emph{format control}}
needed to process the @emph{condition}'s
@uref{glo_f.html#format_argument,@emph{format arguments}}.

@ref{#simple-condition-format-arguments,@strong{simple-condition-format-arguments}}
returns a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_f.html#format_argument,@emph{format arguments}} needed to
process the @emph{condition}'s
@uref{glo_f.html#format_control,@emph{format control}}.

@strong{Examples:}

@verbatim
 (setq foo (make-condition 'simple-condition
                          :format-control "Hi ~S"
                          :format-arguments '(ho)))
=>  #<SIMPLE-CONDITION 26223553>
 (apply #'format nil (simple-condition-format-control foo)
                     (simple-condition-format-arguments foo))
=>  "Hi HO"
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@strong{simple-condition}, @uref{sec_9-1.html,Section 9.1 (Condition
System Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Function WARN
@subsubsection CLHS: Function WARN
@anchor{#clhs-function-warn}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_simple-co_at-arguments.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_simple-warning.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Function} @strong{WARN}

@strong{Syntax:}

@strong{warn} @emph{datum &rest arguments} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{datum},
@emph{arguments}---@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}} of default type
@uref{contyp_simple-warning.html#simple-warning,@strong{simple-warning}}.

@strong{Description:}

@uref{glo_s.html#signal,@emph{Signals}} a
@uref{glo_c.html#condition,@emph{condition}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_warning.html#warning,@strong{warning}}. If the
@uref{glo_c.html#condition,@emph{condition}} is not @emph{handled},
reports the @uref{glo_c.html#condition,@emph{condition}} to
@uref{glo_e.html#error_output,@emph{error output}}.

The precise mechanism for warning is as follows:

@strong{The warning condition is signaled}

While the @uref{contyp_warning.html#warning,@strong{warning}}
@uref{glo_c.html#condition,@emph{condition}} is being signaled, the
@uref{any_muffle-warning.html#muffle-warning,@strong{muffle-warning}}
@uref{glo_r.html#restart,@emph{restart}} is established for use by a
@uref{glo_h.html#handler,@emph{handler}}. If invoked, this
@uref{glo_r.html#restart,@emph{restart}} bypasses further action by
@ref{#warn,@strong{warn}}, which in turn causes
@ref{#warn,@strong{warn}} to immediately return
@uref{any_nil.html#nil,@strong{nil}}.

@strong{If no handler for the warning condition is found}

If no handlers for the warning condition are found, or if all such
handlers decline, then the @uref{glo_c.html#condition,@emph{condition}}
is reported to @uref{glo_e.html#error_output,@emph{error output}} by
@ref{#warn,@strong{warn}} in an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
format.

@strong{@uref{any_nil.html#nil,nil} is returned}

The value returned by @ref{#warn,@strong{warn}} if it returns is
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
  (defun foo (x)
    (let ((result (* x 2)))
      (if (not (typep result 'fixnum))
          (warn "You're using very big numbers."))
      result))
=>  FOO
 
  (foo 3)
=>  6
 
  (foo most-positive-fixnum)
>>  Warning: You're using very big numbers.
=>  4294967294
 
  (setq *break-on-signals* t)
=>  T
 
  (foo most-positive-fixnum)
>>  Break: Caveat emptor.
>>  To continue, type :CONTINUE followed by an option number.
>>   1: Return from Break.
>>   2: Abort to Lisp Toplevel.
>>  Debug> :continue 1
>>  Warning: You're using very big numbers.
=>  4294967294
@end verbatim

@strong{Side Effects:}

A warning is issued. The debugger might be entered.

@strong{Affected By:}

Existing handler bindings.

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}},
@uref{var_stdebug-i_ace-outputst.html#STerror-outputST,@strong{*error-output*}}.

@strong{Exceptional Situations:}

If @emph{datum} is a @uref{glo_c.html#condition,@emph{condition}} and if
the @uref{glo_c.html#condition,@emph{condition}} is not of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_warning.html#warning,@strong{warning}}, or @emph{arguments}
is @uref{glo_n.html#non-nil,@emph{non-nil}}, an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

If @emph{datum} is a condition type, the result of (apply
#'make-condition datum arguments) must be of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_warning.html#warning,@strong{warning}} or an error of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} is
signaled.

@strong{See Also:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}},
@uref{fun_abortcm_c_cm_use-value.html#muffle-warning,@strong{muffle-warning}},
@uref{fun_signal.html#signal,@strong{signal}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss020.html,BREAK-ON-WARNINGS-OBSOLETE:REMOVE}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro ASSERT
@subsubsection CLHS: Macro ASSERT
@anchor{#clhs-macro-assert}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{contyp_storage-condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{ASSERT}

@strong{Syntax:}

@strong{assert} @emph{test-form [(@emph{place}@strong{*}) [datum-form
@emph{argument-form}@strong{*}]]}

=> @emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{test-form}---a @uref{glo_f.html#form,@emph{form}}; always
evaluated.

@emph{place}---a @uref{glo_p.html#place,@emph{place}}; evaluated if an
error is signaled.

@emph{datum-form}---a @uref{glo_f.html#form,@emph{form}} that evaluates
to a @emph{datum}. Evaluated each time an error is to be signaled, or
not at all if no error is to be signaled.

@emph{argument-form}---a @uref{glo_f.html#form,@emph{form}} that
evaluates to an @emph{argument}. Evaluated each time an error is to be
signaled, or not at all if no error is to be signaled.

@emph{datum},
@emph{arguments}---@uref{glo_d.html#designator,@emph{designators}} for a
@uref{glo_c.html#condition,@emph{condition}} of default type
@uref{contyp_error.html#error,@strong{error}}. (These
@uref{glo_d.html#designator,@emph{designators}} are the result of
evaluating @emph{datum-form} and each of the @emph{argument-forms}.)

@strong{Description:}

@ref{#assert,@strong{assert}} assures that @emph{test-form} evaluates to
@uref{glo_t.html#true,@emph{true}}. If @emph{test-form} evaluates to
@uref{glo_f.html#false,@emph{false}}, @ref{#assert,@strong{assert}}
signals a @uref{glo_c.html#correctable,@emph{correctable}}
@uref{glo_e.html#error,@emph{error}} (denoted by @emph{datum} and
@emph{arguments}). Continuing from this error using the
@uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}} makes it possible for the user
to alter the values of the @emph{places} before
@ref{#assert,@strong{assert}} evaluates @emph{test-form} again. If the
value of @emph{test-form} is @uref{glo_n.html#non-nil,@emph{non-nil}},
@ref{#assert,@strong{assert}} returns
@uref{any_nil.html#nil,@strong{nil}}.

The @emph{places} are
@uref{glo_g.html#generalized_reference,@emph{generalized references}} to
data upon which @emph{test-form} depends, whose values can be changed by
the user in attempting to correct the error.
@uref{glo_s.html#subform,@emph{Subforms}} of each @emph{place} are only
evaluated if an error is signaled, and might be re-evaluated if the
error is re-signaled (after continuing without actually fixing the
problem). The order of evaluation of the @emph{places} is not specified;
see @uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}. If a @emph{place} @uref{glo_f.html#form,@emph{form}} is
supplied that produces more values than there are store variables, the
extra values are ignored. If the supplied
@uref{glo_f.html#form,@emph{form}} produces fewer values than there are
store variables, the missing values are set to
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Examples:}

@verbatim
 (setq x (make-array '(3 5) :initial-element 3))
=>  #2A((3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3))
 (setq y (make-array '(3 5) :initial-element 7))
=>  #2A((7 7 7 7 7) (7 7 7 7 7) (7 7 7 7 7))
 (defun matrix-multiply (a b)
   (let ((*print-array* nil))
     (assert (and (= (array-rank a) (array-rank b) 2)
                  (= (array-dimension a 1) (array-dimension b 0)))
             (a b)
             "Cannot multiply ~S by ~S." a b)
            (really-matrix-multiply a b))) =>  MATRIX-MULTIPLY
 (matrix-multiply x y)
>>  Correctable error in MATRIX-MULTIPLY: 
>>  Cannot multiply #<ARRAY ...> by #<ARRAY ...>.
>>  Restart options:
>>   1: You will be prompted for one or more new values.
>>   2: Top level.
>>  Debug> :continue 1
>>  Value for A: x
>>  Value for B: (make-array '(5 3) :initial-element 6)
=>  #2A((54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54))
@end verbatim

@verbatim
 (defun double-safely (x) (assert (numberp x) (x)) (+ x x))
 (double-safely 4) 
=>  8
 
 (double-safely t)
>>  Correctable error in DOUBLE-SAFELY: The value of (NUMBERP X) must be non-NIL.
>>  Restart options:
>>   1: You will be prompted for one or more new values.
>>   2: Top level.
>>  Debug> :continue 1
>>  Value for X: 7
=>  14
@end verbatim

@strong{Affected By:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

The set of active @uref{glo_c.html#condition_handler,@emph{condition
handlers}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_check-type.html#check-type,@strong{check-type}},
@uref{fun_error.html#error,@strong{error}}, @uref{sec_5-1.html,Section
5.1 (Generalized Reference)}

@strong{Notes:}

The debugger need not include the @emph{test-form} in the error message,
and the @emph{places} should not be included in the message, but they
should be made available for the user's perusal. If the user gives the
``continue'' command, the values of any of the references can be
altered. The details of this depend on the implementation's style of
user interface.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss309.html,SETF-MULTIPLE-STORE-VARIABLES:ALLOW}
@item
@uref{../Issues/iss279.html,PUSH-EVALUATION-ORDER:FIRST-ITEM}
@item
@uref{../Issues/iss016.html,ASSERT-ERROR-TYPE:ERROR}
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro CHECK-TYPE
@subsubsection CLHS: Macro CHECK-TYPE
@anchor{#clhs-macro-check-type}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_cerror.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{contyp_simple-error.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{CHECK-TYPE}

@strong{Syntax:}

@strong{check-type} @emph{place typespec [@emph{string}]} =>
@emph{@uref{any_nil.html#nil,@strong{nil}}}

@strong{Arguments and Values:}

@emph{place}---a @uref{glo_p.html#place,@emph{place}}.

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{string}---a @uref{glo_s.html#string,@emph{string}}; evaluated.

@strong{Description:}

@ref{#check-type,@strong{check-type}} signals a
@uref{glo_c.html#correctable,@emph{correctable}}
@uref{glo_e.html#error,@emph{error}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_type-error.html#type-error,@strong{type-error}} if the
contents of @emph{place} are not of the type @emph{typespec}.

@ref{#check-type,@strong{check-type}} can return only if the
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked, either explicitly
from a handler or implicitly as one of the options offered by the
debugger. If the
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is invoked,
@ref{#check-type,@strong{check-type}} stores the new value that is the
argument to the @uref{glo_r.html#restart,@emph{restart}} invocation (or
that is prompted for interactively by the debugger) in @emph{place} and
starts over, checking the type of the new value and signaling another
error if it is still not of the desired
@uref{glo_t.html#type,@emph{type}}.

The first time @emph{place} is @emph{evaluated}, it is @emph{evaluated}
by normal evaluation rules. It is later @emph{evaluated} as a
@uref{glo_p.html#place,@emph{place}} if the type check fails and the
@uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is used; see
@uref{sec_5-1-1-1.html,Section 5.1.1.1 (Evaluation of Subforms to
Places)}.

@uref{glo_s.html#string,@emph{string}} should be an English description
of the type, starting with an indefinite article (``a'' or ``an''). If
@uref{glo_s.html#string,@emph{string}} is not supplied, it is computed
automatically from @emph{typespec}. The automatically generated message
mentions @emph{place}, its contents, and the desired type. An
implementation may choose to generate a somewhat differently worded
error message if it recognizes that @emph{place} is of a particular
form, such as one of the arguments to the function that called
@ref{#check-type,@strong{check-type}}.
@uref{glo_s.html#string,@emph{string}} is allowed because some
applications of @ref{#check-type,@strong{check-type}} may require a more
specific description of what is wanted than can be generated
automatically from @emph{typespec}.

@strong{Examples:}

@verbatim
 (setq aardvarks '(sam harry fred))
=>  (SAM HARRY FRED)
 (check-type aardvarks (array * (3)))
>>  Error: The value of AARDVARKS, (SAM HARRY FRED),
>>         is not a 3-long array.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> :CONTINUE 1
>>  Use Value: #(SAM FRED HARRY)
=>  NIL
 aardvarks
=>  #<ARRAY-T-3 13571>
 (map 'list #'identity aardvarks)
=>  (SAM FRED HARRY)
 (setq aardvark-count 'foo)
=>  FOO
 (check-type aardvark-count (integer 0 *) "A positive integer")
>>  Error: The value of AARDVARK-COUNT, FOO, is not a positive integer.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Top level.
>>  Debug> :CONTINUE 2
@end verbatim

@verbatim
 (defmacro define-adder (name amount)
   (check-type name (and symbol (not null)) "a name for an adder function")
   (check-type amount integer)
   `(defun ,name (x) (+ x ,amount)))
  
 (macroexpand '(define-adder add3 3))
=>  (defun add3 (x) (+ x 3))
 
 (macroexpand '(define-adder 7 7))
>>  Error: The value of NAME, 7, is not a name for an adder function.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Top level.
>>  Debug> :Continue 1
>>  Specify a value to use instead.
>>  Type a form to be evaluated and used instead: 'ADD7
=>  (defun add7 (x) (+ x 7))
 
 (macroexpand '(define-adder add5 something))
>>  Error: The value of AMOUNT, SOMETHING, is not an integer.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use instead.
>>   2: Top level.
>>  Debug> :Continue 1
>>  Type a form to be evaluated and used instead: 5
=>  (defun add5 (x) (+ x 5))
 
@end verbatim

Control is transferred to a handler.

@strong{Side Effects:}

The debugger might be entered.

@strong{Affected By:}

@uref{var_stbreak-on-signalsst.html#STbreak-on-signalsST,@strong{*break-on-signals*}}

The implementation.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:}

@verbatim
 (check-type place typespec)
 ==  (assert (typep place 'typespec) (place)
            'type-error :datum place :expected-type 'typespec)
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro DEFINE-CONDITION
@subsubsection CLHS: Macro DEFINE-CONDITION
@anchor{#clhs-macro-define-condition}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_ignore-errors.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_make-condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{DEFINE-CONDITION}

@strong{Syntax:}

@strong{define-condition} @emph{name (@emph{parent-type}@strong{*})
(@{@emph{slot-spec}@}@strong{*}) @emph{option}@strong{*}}

=> @emph{name}

@verbatim
slot-spec::= slot-name | (slot-name slot-option) 
@end verbatim

@verbatim
slot-option::= [[{:reader symbol}* |  
               {:writer function-name}* |  
               {:accessor symbol}* |  
               {:allocation allocation-type} |  
               {:initarg symbol}* |  
               {:initform form} |  
               {:type type-specifier} ]] 
@end verbatim

@verbatim
option::= [[(:default-initargs . initarg-list) |  
          (:documentation string) |  
          (:report report-name) ]] 
@end verbatim

@verbatim
function-name::= {symbol | (setf symbol)} 
@end verbatim

@verbatim
allocation-type::= :instance | :class 
@end verbatim

@verbatim
report-name::= string | symbol | lambda expression 
@end verbatim

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{parent-type}---a @uref{glo_s.html#symbol,@emph{symbol}} naming a
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}}. If no @emph{parent-types} are
supplied, the @emph{parent-types} default to (condition).

@emph{default-initargs}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_k.html#keywordSLvalue_pair,@emph{keyword/value pairs}}.

@emph{Slot-spec} -- the @uref{glo_n.html#name,@emph{name}} of a
@uref{glo_s.html#slot,@emph{slot}} or a
@uref{glo_l.html#list,@emph{list}} consisting of the @emph{slot-name}
followed by zero or more @emph{slot-options}.

@emph{Slot-name} -- a slot name (a
@uref{glo_s.html#symbol,@emph{symbol}}), the
@uref{glo_l.html#list,@emph{list}} of a slot name, or the
@uref{glo_l.html#list,@emph{list}} of slot name/slot form pairs.

@emph{Option} -- Any of the following:

:reader

:reader can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}} and cannot be
@uref{any_nil.html#nil,@strong{nil}}.

:writer

:writer can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}} and must name a
@uref{glo_g.html#generic_function,@emph{generic function}}.

:accessor

:accessor can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}} and cannot be
@uref{any_nil.html#nil,@strong{nil}}.

:allocation

:allocation can be supplied once at most for a given
@uref{glo_s.html#slot,@emph{slot}}. The default if :allocation is not
supplied is :instance.

:initarg

:initarg can be supplied more than once for a given
@uref{glo_s.html#slot,@emph{slot}}.

:initform

:initform can be supplied once at most for a given
@uref{glo_s.html#slot,@emph{slot}}.

:type

:type can be supplied once at most for a given
@uref{glo_s.html#slot,@emph{slot}}.

:documentation

:documentation can be supplied once at most for a given
@uref{glo_s.html#slot,@emph{slot}}.

:report

:report can be supplied once at most.

@strong{Description:}

@ref{#define-condition,@strong{define-condition}} defines a new
condition type called @emph{name}, which is a
@uref{glo_s.html#subtype,@emph{subtype}} of the
@uref{glo_t.html#type,@emph{type}} or
@uref{glo_t.html#type,@emph{types}} named by @emph{parent-type}. Each
@emph{parent-type} argument specifies a direct
@uref{glo_s.html#supertype,@emph{supertype}} of the new
@uref{glo_c.html#condition,@emph{condition}}. The new
@uref{glo_c.html#condition,@emph{condition}} inherits
@uref{glo_s.html#slot,@emph{slots}} and
@uref{glo_m.html#method,@emph{methods}} from each of its direct
@uref{glo_s.html#supertype,@emph{supertypes}}, and so on.

If a slot name/slot form pair is supplied, the slot form is a
@uref{glo_f.html#form,@emph{form}} that can be evaluated by
@uref{fun_make-condition.html#make-condition,@strong{make-condition}} to
produce a default value when an explicit value is not provided. If no
slot form is supplied, the contents of the @emph{slot} is initialized in
an
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}
way.

If the @uref{glo_t.html#type,@emph{type}} being defined and some other
@uref{glo_t.html#type,@emph{type}} from which it inherits have a slot by
the same name, only one slot is allocated in the
@uref{glo_c.html#condition,@emph{condition}}, but the supplied slot form
overrides any slot form that might otherwise have been inherited from a
@emph{parent-type}. If no slot form is supplied, the inherited slot form
(if any) is still visible.

Accessors are created according to the same rules as used by
@uref{mac_defclass.html#defclass,@strong{defclass}}.

A description of @emph{slot-options} follows:

:reader

The :reader slot option specifies that an
@uref{glo_u.html#unqualified_method,@emph{unqualified method}} is to be
defined on the @uref{glo_g.html#generic_function,@emph{generic
function}} named by the argument to :reader to read the value of the
given @uref{glo_s.html#slot,@emph{slot}}.

* The :initform slot option is used to provide a default initial value
form to be used in the initialization of the
@uref{glo_s.html#slot,@emph{slot}}. This
@uref{glo_f.html#form,@emph{form}} is evaluated every time it is used to
initialize the @uref{glo_s.html#slot,@emph{slot}}. The
@uref{glo_l.html#lexical_environment,@emph{lexical environment}} in
which this @uref{glo_f.html#form,@emph{form}} is evaluated is the
lexical @uref{glo_e.html#environment,@emph{environment}} in which the
@ref{#define-condition,@strong{define-condition}} form was evaluated.
Note that the @uref{glo_l.html#lexical_environment,@emph{lexical
environment}} refers both to variables and to
@uref{glo_f.html#function,@emph{functions}}. For
@uref{glo_l.html#local_slot,@emph{local slots}}, the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} is the
dynamic @uref{glo_e.html#environment,@emph{environment}} in which
@uref{fun_make-condition.html#make-condition,@strong{make-condition}}
was called; for @uref{glo_s.html#shared_slot,@emph{shared slots}}, the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} is the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} in
which the @ref{#define-condition,@strong{define-condition}} form was
evaluated.

No implementation is permitted to extend the syntax of
@ref{#define-condition,@strong{define-condition}} to allow
(@emph{slot-name} @emph{form}) as an abbreviation for (@emph{slot-name}
:initform @emph{form}).

:initarg

The :initarg slot option declares an initialization argument named by
its @uref{glo_s.html#symbol,@emph{symbol}} argument and specifies that
this initialization argument initializes the given
@uref{glo_s.html#slot,@emph{slot}}. If the initialization argument has a
value in the call to
@uref{stagenfun_ini_ize-instance.html#initialize-instance,@strong{initialize-instance}},
the value is stored into the given @uref{glo_s.html#slot,@emph{slot}},
and the slot's :initform slot option, if any, is not evaluated. If none
of the initialization arguments specified for a given
@uref{glo_s.html#slot,@emph{slot}} has a value, the
@uref{glo_s.html#slot,@emph{slot}} is initialized according to the
:initform slot option, if specified.

:type

The :type slot option specifies that the contents of the
@uref{glo_s.html#slot,@emph{slot}} is always of the specified
@uref{glo_t.html#type,@emph{type}}. It effectively declares the result
type of the reader generic function when applied to an
@uref{glo_o.html#object,@emph{object}} of this
@uref{glo_c.html#condition,@emph{condition}} type. The consequences of
attempting to store in a @uref{glo_s.html#slot,@emph{slot}} a value that
does not satisfy the type of the @uref{glo_s.html#slot,@emph{slot}} is
undefined.

:default-initargs

This option is treated the same as it would be
@uref{mac_defclass.html#defclass,@strong{defclass}}.

:documentation

The :documentation slot option provides a
@uref{glo_d.html#documentation_string,@emph{documentation string}} for
the @uref{glo_s.html#slot,@emph{slot}}.

:report

@uref{glo_c.html#condition,@emph{Condition}} reporting is mediated
through the
@uref{stagenfun_print-object.html#print-object,@strong{print-object}}
method for the @uref{glo_c.html#condition,@emph{condition}} type in
question, with
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
always being @uref{any_nil.html#nil,@strong{nil}}. Specifying (:report
@emph{report-name}) in the definition of a condition type C is
equivalent to:

@verbatim
 (defmethod print-object ((x c) stream)
   (if *print-escape* (call-next-method) (report-name x stream)))
@end verbatim

If the value supplied by the argument to :report (@emph{report-name}) is
a @uref{glo_s.html#symbol,@emph{symbol}} or a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}, it must be
acceptable to @uref{speope_function.html#function,@strong{function}}.
(function @emph{report-name}) is evaluated in the current
@uref{glo_l.html#lexical_environment,@emph{lexical environment}}. It
should return a @uref{glo_f.html#function,@emph{function}} of two
arguments, a @uref{glo_c.html#condition,@emph{condition}} and a
@uref{glo_s.html#stream,@emph{stream}}, that prints on the
@uref{glo_s.html#stream,@emph{stream}} a description of the
@uref{glo_c.html#condition,@emph{condition}}. This
@uref{glo_f.html#function,@emph{function}} is called whenever the
@uref{glo_c.html#condition,@emph{condition}} is printed while
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{any_nil.html#nil,@strong{nil}}.

If @emph{report-name} is a @uref{glo_s.html#string,@emph{string}}, it is
a shorthand for

@verbatim
 (lambda (condition stream)
   (declare (ignore condition))
   (write-string report-name stream))
@end verbatim

This option is processed after the new
@uref{glo_c.html#condition,@emph{condition}} type has been defined, so
use of the @emph{slot} accessors within the :report function is
permitted. If this option is not supplied, information about how to
report this type of @uref{glo_c.html#condition,@emph{condition}} is
inherited from the @emph{parent-type}.

The consequences are unspecifed if an attempt is made to
@uref{glo_r.html#read,@emph{read}} a @emph{slot} that has not been
explicitly initialized and that has not been given a default value.

The consequences are unspecified if an attempt is made to assign the
@emph{slots} by using @uref{mac_setfcm_psetf.html#setf,@strong{setf}}.

If a @ref{#define-condition,@strong{define-condition}}
@uref{glo_f.html#form,@emph{form}} appears as a
@uref{glo_t.html#top_level_form,@emph{top level form}}, the
@uref{glo_c.html#compiler,@emph{compiler}} must make @emph{name}
recognizable as a valid @uref{glo_t.html#type,@emph{type}} name, and it
must be possible to reference the
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}} as the @emph{parent-type} of another
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}} in a subsequent
@ref{#define-condition,@strong{define-condition}}
@uref{glo_f.html#form,@emph{form}} in the
@uref{glo_f.html#file,@emph{file}} being compiled.

@strong{Examples:}

The following form defines a condition of
@uref{glo_t.html#type,@emph{type}} peg/hole-mismatch which inherits from
a condition type called blocks-world-error:

@verbatim
(define-condition peg/hole-mismatch 
                  (blocks-world-error)
                  ((peg-shape  :initarg :peg-shape
                               :reader peg/hole-mismatch-peg-shape)
                   (hole-shape :initarg :hole-shape
                               :reader peg/hole-mismatch-hole-shape))
  (:report (lambda (condition stream)
             (format stream "A ~A peg cannot go in a ~A hole."
                     (peg/hole-mismatch-peg-shape  condition)
                     (peg/hole-mismatch-hole-shape condition)))))
@end verbatim

The new type has slots peg-shape and hole-shape, so
@uref{fun_make-condition.html#make-condition,@strong{make-condition}}
accepts :peg-shape and :hole-shape keywords. The
@uref{glo_r.html#reader,@emph{readers}} peg/hole-mismatch-peg-shape and
peg/hole-mismatch-hole-shape apply to objects of this type, as
illustrated in the :report information.

The following form defines a
@uref{glo_c.html#condition,@emph{condition}}
@uref{glo_t.html#type,@emph{type}} named machine-error which inherits
from @uref{contyp_error.html#error,@strong{error}}:

@verbatim
(define-condition machine-error 
                  (error)
                  ((machine-name :initarg :machine-name
                                 :reader machine-error-machine-name))
  (:report (lambda (condition stream)
             (format stream "There is a problem with ~A."
                     (machine-error-machine-name condition)))))
@end verbatim

Building on this definition, a new error condition can be defined which
is a subtype of machine-error for use when machines are not available:

@verbatim
(define-condition machine-not-available-error (machine-error) ()
  (:report (lambda (condition stream)
             (format stream "The machine ~A is not available."
                     (machine-error-machine-name condition)))))
@end verbatim

This defines a still more specific condition, built upon
machine-not-available-error, which provides a slot initialization form
for machine-name but which does not provide any new slots or report
information. It just gives the machine-name slot a default
initialization:

@verbatim
(define-condition my-favorite-machine-not-available-error
                  (machine-not-available-error)
  ((machine-name :initform "mc.lcs.mit.edu")))
@end verbatim

Note that since no :report clause was given, the information inherited
from machine-not-available-error is used to report this type of
condition.

@verbatim
 (define-condition ate-too-much (error) 
     ((person :initarg :person :reader ate-too-much-person)
      (weight :initarg :weight :reader ate-too-much-weight)
      (kind-of-food :initarg :kind-of-food
                    :reader :ate-too-much-kind-of-food)))
=>  ATE-TOO-MUCH
 (define-condition ate-too-much-ice-cream (ate-too-much)
   ((kind-of-food :initform 'ice-cream)
    (flavor       :initarg :flavor
                  :reader ate-too-much-ice-cream-flavor
                  :initform 'vanilla ))
   (:report (lambda (condition stream)
              (format stream "~A ate too much ~A ice-cream"
                      (ate-too-much-person condition)
                      (ate-too-much-ice-cream-flavor condition)))))
=>  ATE-TOO-MUCH-ICE-CREAM
 (make-condition 'ate-too-much-ice-cream
                 :person 'fred
                 :weight 300
                 :flavor 'chocolate)
=>  #<ATE-TOO-MUCH-ICE-CREAM 32236101>
 (format t "~A" *)
>>  FRED ate too much CHOCOLATE ice-cream
=>  NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{fun_make-condition.html#make-condition,@strong{make-condition}},
@uref{mac_defclass.html#defclass,@strong{defclass}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss059.html,COMPILE-FILE-HANDLING-OF-TOP-LEVEL-FORMS:CLARIFY}
@item
@uref{../Issues/iss049.html,CLOS-CONDITIONS:INTEGRATE}
@item
@uref{../Issues/iss102.html,DEFINE-CONDITION-SYNTAX:INCOMPATIBLY-MORE-LIKE-DEFCLASS+EMPHASIZE-READ-ONLY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro HANDLER-BIND
@subsubsection CLHS: Macro HANDLER-BIND
@anchor{#clhs-macro-handler-bind}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stbreak-on-signalsst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_handler-case.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{HANDLER-BIND}

@strong{Syntax:}

@strong{handler-bind} @emph{(@{@emph{binding}@}@strong{*})
@emph{form}@strong{*}} => @emph{@emph{result}@strong{*}}

@verbatim
binding::= (type handler) 
@end verbatim

@strong{Arguments and Values:}

@emph{type}---a @uref{glo_t.html#type_specifier,@emph{type specifier}}.

@emph{handler}---a @uref{glo_f.html#form,@emph{form}}; evaluated to
produce a @emph{handler-function}.

@emph{handler-function}---a
@uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

Executes @emph{forms} in a
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} where
the indicated @emph{handler} @uref{glo_b.html#binding,@emph{bindings}}
are in effect.

Each @emph{handler} should evaluate to a @emph{handler-function}, which
is used to handle @uref{glo_c.html#condition,@emph{conditions}} of the
given @emph{type} during execution of the @emph{forms}. This
@uref{glo_f.html#function,@emph{function}} should take a single
argument, the @uref{glo_c.html#condition,@emph{condition}} being
signaled.

If more than one @emph{handler} @uref{glo_b.html#binding,@emph{binding}}
is supplied, the @emph{handler}
@uref{glo_b.html#binding,@emph{bindings}} are searched sequentially from
top to bottom in search of a match (by visual analogy with
@uref{mac_typecasec_cm_etypecase.html#typecase,@strong{typecase}}). If
an appropriate @uref{glo_t.html#type,@emph{type}} is found, the
associated handler is run in a
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} where
none of these @emph{handler} bindings are visible (to avoid recursive
errors). If the @uref{glo_h.html#handler,@emph{handler}}
@uref{glo_d.html#decline,@emph{declines}}, the search continues for
another @uref{glo_h.html#handler,@emph{handler}}.

If no appropriate @uref{glo_h.html#handler,@emph{handler}} is found,
other @uref{glo_h.html#handler,@emph{handlers}} are sought from
dynamically enclosing contours. If no
@uref{glo_h.html#handler,@emph{handler}} is found outside, then
@uref{fun_signal.html#signal,@strong{signal}} returns or
@uref{fun_error.html#error,@strong{error}} enters the debugger.

@strong{Examples:}

In the following code, if an unbound variable error is signaled in the
body (and not handled by an intervening handler), the first function is
called.

@verbatim
 (handler-bind ((unbound-variable #'(lambda ...))
                (error #'(lambda ...)))
   ...)
@end verbatim

If any other kind of error is signaled, the second function is called.
In either case, neither handler is active while executing the code in
the associated function.

@verbatim
 (defun trap-error-handler (condition)
   (format *error-output* "~&~A~&" condition)
   (throw 'trap-errors nil))

 (defmacro trap-errors (&rest forms)
   `(catch 'trap-errors
      (handler-bind ((error #'trap-error-handler))
        ,@forms)))
 
 (list (trap-errors (signal "Foo.") 1)
       (trap-errors (error  "Bar.") 2)
       (+ 1 2))
>>  Bar.
=>  (1 NIL 3)
@end verbatim

Note that ``Foo.'' is not printed because the condition made by
@uref{fun_signal.html#signal,@strong{signal}} is a
@uref{glo_s.html#simple_condition,@emph{simple condition}}, which is not
of @uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}}, so it doesn't trigger the
handler for @uref{contyp_error.html#error,@strong{error}} set up by
trap-errors.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_handler-case.html#handler-case,@strong{handler-case}}

@strong{Notes:} None.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro HANDLER-CASE
@subsubsection CLHS: Macro HANDLER-CASE
@anchor{#clhs-macro-handler-case}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_handler-bind.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_ignore-errors.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{HANDLER-CASE}

@strong{Syntax:}

@strong{handler-case} @emph{@emph{expression}
[[@{@emph{error-clause}@}@strong{*} | @emph{no-error-clause}]]} =>
@emph{@emph{result}@strong{*}}

@verbatim
clause::= error-clause | no-error-clause 
@end verbatim

@verbatim
error-clause::= (typespec ([var]) declaration* form*) 
@end verbatim

@verbatim
no-error-clause::= (:no-error lambda-list declaration* form*) 
@end verbatim

@strong{Arguments and Values:}

@emph{expression}---a @uref{glo_f.html#form,@emph{form}}.

@emph{typespec}---a @uref{glo_t.html#type_specifier,@emph{type
specifier}}.

@emph{var}---a @uref{glo_v.html#variable,@emph{variable}}
@uref{glo_n.html#name,@emph{name}}.

@emph{lambda-list}---an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---In the normal situation, the values returned are those
that result from the evaluation of @emph{expression}; in the exceptional
situation when control is transferred to a @emph{clause}, the value of
the last @emph{form} in that @emph{clause} is returned.

@strong{Description:}

@ref{#handler-case,@strong{handler-case}} executes @emph{expression} in
a @uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} where
various handlers are active. Each @emph{error-clause} specifies how to
handle a @uref{glo_c.html#condition,@emph{condition}} matching the
indicated @emph{typespec}. A @emph{no-error-clause} allows the
specification of a particular action if control returns normally.

If a @uref{glo_c.html#condition,@emph{condition}} is signaled for which
there is an appropriate @emph{error-clause} during the execution of
@emph{expression} (i.e., one for which (typep
@uref{glo_c.html#condition,@emph{condition}} '@emph{typespec}) returns
@uref{glo_t.html#true,@emph{true}}) and if there is no intervening
handler for a @uref{glo_c.html#condition,@emph{condition}} of that
@uref{glo_t.html#type,@emph{type}}, then control is transferred to the
body of the relevant @emph{error-clause}. In this case, the dynamic
state is unwound appropriately (so that the handlers established around
the @emph{expression} are no longer active), and @emph{var} is bound to
the @uref{glo_c.html#condition,@emph{condition}} that had been signaled.
If more than one case is provided, those cases are made accessible in
parallel. That is, in

@verbatim
  (handler-case form
    (typespec1 (var1) form1)
    (typespec2 (var2) form2))
@end verbatim

if the first @emph{clause} (containing @emph{form1}) has been selected,
the handler for the second is no longer visible (or vice versa).

The @emph{clauses} are searched sequentially from top to bottom. If
there is @uref{glo_t.html#type,@emph{type}} overlap between
@emph{typespecs}, the earlier of the @emph{clauses} is selected.

If @emph{var} is not needed, it can be omitted. That is, a @emph{clause}
such as:

@verbatim
  (typespec (var) (declare (ignore var)) form)
@end verbatim

can be written (@emph{typespec} () @emph{form}).

If there are no @emph{forms} in a selected @emph{clause}, the case, and
therefore @ref{#handler-case,@strong{handler-case}}, returns
@uref{any_nil.html#nil,@strong{nil}}. If execution of @emph{expression}
returns normally and no @emph{no-error-clause} exists, the values
returned by @emph{expression} are returned by
@ref{#handler-case,@strong{handler-case}}. If execution of
@emph{expression} returns normally and a @emph{no-error-clause} does
exist, the values returned are used as arguments to the function
described by constructing (lambda @emph{lambda-list}
@emph{form}@strong{*}) from the @emph{no-error-clause}, and the
@uref{glo_v.html#value,@emph{values}} of that function call are returned
by @ref{#handler-case,@strong{handler-case}}. The handlers which were
established around the @emph{expression} are no longer active at the
time of this call.

@strong{Examples:}

@verbatim
 (defun assess-condition (condition)
   (handler-case (signal condition)
     (warning () "Lots of smoke, but no fire.")
     ((or arithmetic-error control-error cell-error stream-error)
        (condition)
       (format nil "~S looks especially bad." condition))
     (serious-condition (condition)
       (format nil "~S looks serious." condition))
     (condition () "Hardly worth mentioning.")))
=>  ASSESS-CONDITION
 (assess-condition (make-condition 'stream-error :stream *terminal-io*))
=>  "#<STREAM-ERROR 12352256> looks especially bad."
 (define-condition random-condition (condition) () 
   (:report (lambda (condition stream)
              (declare (ignore condition))
              (princ "Yow" stream))))
=>  RANDOM-CONDITION
 (assess-condition (make-condition 'random-condition))
=>  "Hardly worth mentioning."
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_handler-bind.html#handler-bind,@strong{handler-bind}},
@uref{mac_ignore-errors.html#ignore-errors,@strong{ignore-errors}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:}

@verbatim
 (handler-case form
   (type1 (var1) . body1)
   (type2 (var2) . body2) ...)
@end verbatim

is approximately equivalent to:

@verbatim
 (block #1=#:g0001
   (let ((#2=#:g0002 nil))
     (tagbody
       (handler-bind ((type1 #'(lambda (temp)
                                       (setq #1# temp)
                                       (go #3=#:g0003)))
                      (type2 #'(lambda (temp)
                                       (setq #2# temp)
                                       (go #4=#:g0004))) ...)
       (return-from #1# form))
         #3# (return-from #1# (let ((var1 #2#)) . body1))
         #4# (return-from #1# (let ((var2 #2#)) . body2)) ...)))
@end verbatim

@verbatim
 (handler-case form
   (type1 (var1) . body1)
   ...
   (:no-error (varN-1 varN-2 ...) . bodyN))
@end verbatim

is approximately equivalent to:

@verbatim

 (block #1=#:error-return
  (multiple-value-call #'(lambda (varN-1 varN-2 ...) . bodyN)
     (block #2=#:normal-return
       (return-from #1#
         (handler-case (return-from #2# form)
           (type1 (var1) . body1) ...)))))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro IGNORE-ERRORS
@subsubsection CLHS: Macro IGNORE-ERRORS
@anchor{#clhs-macro-ignore-errors}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_handler-case.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_define-condition.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{IGNORE-ERRORS}

@strong{Syntax:}

@strong{ignore-errors} @emph{@emph{form}@strong{*}} =>
@emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---In the normal situation, the
@uref{glo_v.html#value,@emph{values}} of the
@uref{glo_f.html#form,@emph{forms}} are returned; in the exceptional
situation, two values are returned: @uref{any_nil.html#nil,@strong{nil}}
and the @uref{glo_c.html#condition,@emph{condition}}.

@strong{Description:}

@ref{#ignore-errors,@strong{ignore-errors}} is used to prevent
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} from causing entry into
the debugger.

Specifically, @ref{#ignore-errors,@strong{ignore-errors}}
@uref{glo_e.html#execute,@emph{executes}}
@uref{glo_f.html#form,@emph{forms}} in a
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} where a
@uref{glo_h.html#handler,@emph{handler}} for
@uref{glo_c.html#condition,@emph{conditions}} of
@uref{glo_t.html#type,@emph{type}}
@uref{contyp_error.html#error,@strong{error}} has been established; if
invoked, it @uref{glo_h.html#handle,@emph{handles}} such
@uref{glo_c.html#condition,@emph{conditions}} by returning two
@uref{glo_v.html#value,@emph{values}},
@uref{any_nil.html#nil,@strong{nil}} and the
@uref{glo_c.html#condition,@emph{condition}} that was @emph{signaled},
from the @ref{#ignore-errors,@strong{ignore-errors}}
@uref{glo_f.html#form,@emph{form}}.

If a @uref{glo_n.html#normal_return,@emph{normal return}} from the
@uref{glo_f.html#form,@emph{forms}} occurs, any
@uref{glo_v.html#value,@emph{values}} returned are returned by
@ref{#ignore-errors,@strong{ignore-errors}}.

@strong{Examples:}

@verbatim
 (defun load-init-file (program)
   (let ((win nil))
     (ignore-errors ;if this fails, don't enter debugger
       (load (merge-pathnames (make-pathname :name program :type :lisp)
                              (user-homedir-pathname)))
       (setq win t))
     (unless win (format t "~&Init file failed to load.~%"))
     win))
 
 (load-init-file "no-such-program")
>>  Init file failed to load.
NIL
@end verbatim

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_handler-case.html#handler-case,@strong{handler-case}},
@uref{sec_9-1.html,Section 9.1 (Condition System Concepts)}

@strong{Notes:}

@verbatim
 (ignore-errors . forms)
@end verbatim

is equivalent to:

@verbatim
 (handler-case (progn . forms)
   (error (condition) (values nil condition)))
@end verbatim

Because the second return value is a
@uref{glo_c.html#condition,@emph{condition}} in the exceptional case, it
is common (but not required) to arrange for the second return value in
the normal case to be missing or @uref{any_nil.html#nil,@strong{nil}} so
that the two situations can be distinguished.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro RESTART-BIND
@subsubsection CLHS: Macro RESTART-BIND
@anchor{#clhs-macro-restart-bind}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_invoke-re_nteractively.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_restart-case.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{RESTART-BIND}

@strong{Syntax:}

@strong{restart-bind} @emph{(@{(name function
@{@emph{key-val-pair}@}@strong{*})@}) @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@verbatim
key-val-pair::= :interactive-function interactive-function |  
                :report-function report-function |  
                :test-function test-function 
@end verbatim

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}; not evaluated.

@emph{function}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{interactive-function}---a @uref{glo_f.html#form,@emph{form}};
evaluated.

@emph{report-function}---a @uref{glo_f.html#form,@emph{form}};
evaluated.

@emph{test-function}---a @uref{glo_f.html#form,@emph{form}}; evaluated.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
the @uref{glo_f.html#form,@emph{forms}}.

@strong{Description:}

@ref{#restart-bind,@strong{restart-bind}} executes the body of
@emph{forms} in a @uref{glo_d.html#dynamic_environment,@emph{dynamic
environment}} where @uref{glo_r.html#restart,@emph{restarts}} with the
given @emph{names} are in effect.

If a @emph{name} is @uref{any_nil.html#nil,@strong{nil}}, it indicates
an anonymous restart; if a @emph{name} is a
@uref{glo_n.html#non-nil,@emph{non-nil}}
@uref{glo_s.html#symbol,@emph{symbol}}, it indicates a named restart.

The @emph{function}, @emph{interactive-function}, and
@emph{report-function} are unconditionally evaluated in the current
lexical and dynamic environment prior to evaluation of the body. Each of
these @uref{glo_f.html#form,@emph{forms}} must evaluate to a
@uref{glo_f.html#function,@emph{function}}.

If @uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}}
is done on that restart, the @uref{glo_f.html#function,@emph{function}}
which resulted from evaluating @emph{function} is called, in the
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} of the
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
with the @uref{glo_a.html#argument,@emph{arguments}} given to
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}}.
The @uref{glo_f.html#function,@emph{function}} may either perform a
non-local transfer of control or may return normally.

If the restart is invoked interactively from the debugger (using
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}),
the arguments are defaulted by calling the
@uref{glo_f.html#function,@emph{function}} which resulted from
evaluating @emph{interactive-function}. That
@uref{glo_f.html#function,@emph{function}} may optionally prompt
interactively on @uref{glo_q.html#query_iSLo,@emph{query I/O}}, and
should return a @uref{glo_l.html#list,@emph{list}} of arguments to be
used by
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
when invoking the restart.

If a restart is invoked interactively but no @emph{interactive-function}
is used, then an argument list of @uref{any_nil.html#nil,@strong{nil}}
is used. In that case, the @uref{glo_f.html#function,@emph{function}}
must be compatible with an empty argument list.

If the restart is presented interactively (e.g., by the debugger), the
presentation is done by calling the
@uref{glo_f.html#function,@emph{function}} which resulted from
evaluating @emph{report-function}. This
@uref{glo_f.html#function,@emph{function}} must be a
@uref{glo_f.html#function,@emph{function}} of one argument, a
@uref{glo_s.html#stream,@emph{stream}}. It is expected to print a
description of the action that the restart takes to that
@uref{glo_s.html#stream,@emph{stream}}. This
@uref{glo_f.html#function,@emph{function}} is called any time the
restart is printed while
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{any_nil.html#nil,@strong{nil}}.

In the case of interactive invocation, the result is dependent on the
value of :interactive-function as follows.

:interactive-function

@emph{Value} is evaluated in the current lexical environment and should
return a @uref{glo_f.html#function,@emph{function}} of no arguments
which constructs a @uref{glo_l.html#list,@emph{list}} of arguments to be
used by
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
when invoking this restart. The
@uref{glo_f.html#function,@emph{function}} may prompt interactively
using @uref{glo_q.html#query_iSLo,@emph{query I/O}} if necessary.

:report-function

@emph{Value} is evaluated in the current lexical environment and should
return a @uref{glo_f.html#function,@emph{function}} of one argument, a
@uref{glo_s.html#stream,@emph{stream}}, which prints on the
@uref{glo_s.html#stream,@emph{stream}} a summary of the action that this
restart takes. This @uref{glo_f.html#function,@emph{function}} is called
whenever the restart is reported (printed while
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{any_nil.html#nil,@strong{nil}}). If no :report-function option
is provided, the manner in which the
@uref{glo_r.html#restart,@emph{restart}} is reported is
@uref{glo_i.html#implementation-dependent,@emph{implementation-dependent}}.

:test-function

@emph{Value} is evaluated in the current lexical environment and should
return a @uref{glo_f.html#function,@emph{function}} of one argument, a
@uref{glo_c.html#condition,@emph{condition}}, which returns
@uref{glo_t.html#true,@emph{true}} if the restart is to be considered
visible.

@strong{Side Effects:} None.

@strong{Affected By:}

@uref{var_stdebug-i_ace-outputst.html#STquery-ioST,@strong{*query-io*}}.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_restart-case.html#restart-case,@strong{restart-case}},
@uref{mac_with-simple-restart.html#with-simple-restart,@strong{with-simple-restart}}

@strong{Notes:}

@ref{#restart-bind,@strong{restart-bind}} is primarily intended to be
used to implement
@uref{mac_restart-case.html#restart-case,@strong{restart-case}} and
might be useful in implementing other macros. Programmers who are
uncertain about whether to use
@uref{mac_restart-case.html#restart-case,@strong{restart-case}} or
@ref{#restart-bind,@strong{restart-bind}} should prefer
@uref{mac_restart-case.html#restart-case,@strong{restart-case}} for the
cases where it is powerful enough, using
@ref{#restart-bind,@strong{restart-bind}} only in cases where its full
generality is really needed.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro RESTART-CASE
@subsubsection CLHS: Macro RESTART-CASE
@anchor{#clhs-macro-restart-case}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_restart-bind.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_restart-name.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{RESTART-CASE}

@strong{Syntax:}

@strong{restart-case} @emph{restartable-form @{@emph{clause}@}} =>
@emph{@emph{result}@strong{*}}

@verbatim
clause::= (case-name lambda-list  
           [[:interactive interactive-expression | :report report-expression | :test test-expression]]  
           declaration* form*) 
@end verbatim

@strong{Arguments and Values:}

@emph{restartable-form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{case-name}---a @uref{glo_s.html#symbol,@emph{symbol}} or
@uref{any_nil.html#nil,@strong{nil}}.

@emph{lambda-list}---an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}}.

@emph{interactive-expression}---a @uref{glo_s.html#symbol,@emph{symbol}}
or a @uref{glo_l.html#lambda_expression,@emph{lambda expression}}.

@emph{report-expression}---a @uref{glo_s.html#string,@emph{string}}, a
@uref{glo_s.html#symbol,@emph{symbol}}, or a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}.

@emph{test-expression}---a @uref{glo_s.html#symbol,@emph{symbol}} or a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}}.

@emph{declaration}---a @uref{sym_declare.html#declare,@strong{declare}}
@uref{glo_e.html#expression,@emph{expression}}; not evaluated.

@emph{form}---a @uref{glo_f.html#form,@emph{form}}.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} resulting
from the @uref{glo_e.html#evaluation,@emph{evaluation}} of
@emph{restartable-form}, or the @uref{glo_v.html#value,@emph{values}}
returned by the last @emph{form} executed in a chosen @emph{clause}, or
@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

@ref{#restart-case,@strong{restart-case}} evaluates
@emph{restartable-form} in a
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} where
the clauses have special meanings as points to which control may be
transferred. If @emph{restartable-form} finishes executing and returns
any values, all values returned are returned by
@ref{#restart-case,@strong{restart-case}} and processing has completed.
While @emph{restartable-form} is executing, any code may transfer
control to one of the clauses (see
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}}).
If a transfer occurs, the forms in the body of that clause is evaluated
and any values returned by the last such form are returned by
@ref{#restart-case,@strong{restart-case}}. In this case, the dynamic
state is unwound appropriately (so that the restarts established around
the @emph{restartable-form} are no longer active) prior to execution of
the clause.

If there are no @emph{forms} in a selected clause,
@ref{#restart-case,@strong{restart-case}} returns
@uref{any_nil.html#nil,@strong{nil}}.

If @emph{case-name} is a @uref{glo_s.html#symbol,@emph{symbol}}, it
names this restart.

It is possible to have more than one clause use the same
@emph{case-name}. In this case, the first clause with that name is found
by @uref{fun_find-restart.html#find-restart,@strong{find-restart}}. The
other clauses are accessible using
@uref{fun_compute-restarts.html#compute-restarts,@strong{compute-restarts}}.

Each @emph{arglist} is an
@uref{glo_o.html#ordinary_lambda_list,@emph{ordinary lambda list}} to be
bound during the execution of its corresponding @emph{forms}. These
parameters are used by the @ref{#restart-case,@strong{restart-case}}
clause to receive any necessary data from a call to
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}}.

By default,
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
passes no arguments and all arguments must be optional in order to
accomodate interactive restarting. However, the arguments need not be
optional if the :interactive keyword has been used to inform
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
about how to compute a proper argument list.

@emph{Keyword} options have the following meaning.

:interactive

The @emph{value} supplied by :interactive @emph{value} must be a
suitable argument to
@uref{speope_function.html#function,@strong{function}}. (function
@emph{value}) is evaluated in the current lexical environment. It should
return a @uref{glo_f.html#function,@emph{function}} of no arguments
which returns arguments to be used by
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
when it is invoked.
@uref{fun_invoke-re_nteractively.html#invoke-restart-interactively,@strong{invoke-restart-interactively}}
is called in the dynamic environment available prior to any restart
attempt, and uses @uref{glo_q.html#query_iSLo,@emph{query I/O}} for user
interaction.

If a restart is invoked interactively but no :interactive option was
supplied, the argument list used in the invocation is the empty list.

:report

If the @emph{value} supplied by :report @emph{value} is a
@uref{glo_l.html#lambda_expression,@emph{lambda expression}} or a
@uref{glo_s.html#symbol,@emph{symbol}}, it must be acceptable to
@uref{speope_function.html#function,@strong{function}}. (function
@emph{value}) is evaluated in the current lexical environment. It should
return a @uref{glo_f.html#function,@emph{function}} of one argument, a
@uref{glo_s.html#stream,@emph{stream}}, which prints on the
@uref{glo_s.html#stream,@emph{stream}} a description of the restart.
This @uref{glo_f.html#function,@emph{function}} is called whenever the
restart is printed while
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{any_nil.html#nil,@strong{nil}}.

If @emph{value} is a @uref{glo_s.html#string,@emph{string}}, it is a
shorthand for

@verbatim
 (lambda (stream) (write-string value stream))
@end verbatim

If a named restart is asked to report but no report information has been
supplied, the name of the restart is used in generating default report
text.

When
@uref{var_stprint-escapest.html#STprint-escapeST,@strong{*print-escape*}}
is @uref{any_nil.html#nil,@strong{nil}}, the printer uses the report
information for a restart. For example, a debugger might announce the
action of typing a ``continue'' command by:

@verbatim
 (format t "~&~S -- ~A~%" ':continue some-restart)
@end verbatim

which might then display as something like:

@verbatim
 :CONTINUE -- Return to command level
@end verbatim

The consequences are unspecified if an unnamed restart is specified but
no :report option is provided.

:test

The @emph{value} supplied by :test @emph{value} must be a suitable
argument to @uref{speope_function.html#function,@strong{function}}.
(function @emph{value}) is evaluated in the current lexical environment.
It should return a @uref{glo_f.html#function,@emph{function}} of one
@uref{glo_a.html#argument,@emph{argument}}, the
@uref{glo_c.html#condition,@emph{condition}}, that returns
@uref{glo_t.html#true,@emph{true}} if the restart is to be considered
visible.

The default for this option is equivalent to (lambda (c) (declare
(ignore c)) t).

If the @emph{restartable-form} is a @uref{glo_l.html#list,@emph{list}}
whose @uref{glo_c.html#car,@emph{car}} is any of the
@uref{glo_s.html#symbol,@emph{symbols}}
@uref{fun_signal.html#signal,@strong{signal}},
@uref{fun_error.html#error,@strong{error}},
@uref{fun_cerror.html#cerror,@strong{cerror}}, or
@uref{fun_warn.html#warn,@strong{warn}} (or is a
@uref{glo_m.html#macro_form,@emph{macro form}} which macroexpands into
such a @uref{glo_l.html#list,@emph{list}}), then
@uref{mac_with-cond_ion-restarts.html#with-condition-restarts,@strong{with-condition-restarts}}
is used implicitly to associate the indicated
@uref{glo_r.html#restart,@emph{restarts}} with the
@uref{glo_c.html#condition,@emph{condition}} to be signaled.

@strong{Examples:}

@verbatim
 (restart-case
     (handler-bind ((error #'(lambda (c)
                             (declare (ignore condition))
                             (invoke-restart 'my-restart 7))))
       (error "Foo."))
   (my-restart (&optional v) v))
=>  7

 (define-condition food-error (error) ())
=>  FOOD-ERROR
 (define-condition bad-tasting-sundae (food-error) 
   ((ice-cream :initarg :ice-cream :reader bad-tasting-sundae-ice-cream)
    (sauce :initarg :sauce :reader bad-tasting-sundae-sauce)
    (topping :initarg :topping :reader bad-tasting-sundae-topping))
   (:report (lambda (condition stream)
              (format stream "Bad tasting sundae with ~S, ~S, and ~S"
                      (bad-tasting-sundae-ice-cream condition)
                      (bad-tasting-sundae-sauce condition)
                      (bad-tasting-sundae-topping condition)))))
=>  BAD-TASTING-SUNDAE
 (defun all-start-with-same-letter (symbol1 symbol2 symbol3)
   (let ((first-letter (char (symbol-name symbol1) 0)))
     (and (eql first-letter (char (symbol-name symbol2) 0))
          (eql first-letter (char (symbol-name symbol3) 0)))))
=>  ALL-START-WITH-SAME-LETTER
 (defun read-new-value ()
   (format t "Enter a new value: ")
   (multiple-value-list (eval (read))))
=>  READ-NEW-VALUE
 (defun verify-or-fix-perfect-sundae (ice-cream sauce topping)
   (do ()
      ((all-start-with-same-letter ice-cream sauce topping))
     (restart-case
       (error 'bad-tasting-sundae
              :ice-cream ice-cream
              :sauce sauce
              :topping topping)
       (use-new-ice-cream (new-ice-cream)
         :report "Use a new ice cream."
         :interactive read-new-value  
         (setq ice-cream new-ice-cream))
       (use-new-sauce (new-sauce)
         :report "Use a new sauce."
         :interactive read-new-value
         (setq sauce new-sauce))
       (use-new-topping (new-topping)
         :report "Use a new topping."
         :interactive read-new-value
         (setq topping new-topping))))
   (values ice-cream sauce topping))
=>  VERIFY-OR-FIX-PERFECT-SUNDAE
 (verify-or-fix-perfect-sundae 'vanilla 'caramel 'cherry)
>>  Error: Bad tasting sundae with VANILLA, CARAMEL, and CHERRY.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Use a new ice cream.
>>   2: Use a new sauce.
>>   3: Use a new topping.
>>   4: Return to Lisp Toplevel.
>>  Debug> :continue 1
>>  Use a new ice cream.
>>  Enter a new ice cream: 'chocolate
=>  CHOCOLATE, CARAMEL, CHERRY
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_restart-bind.html#restart-bind,@strong{restart-bind}},
@uref{mac_with-simple-restart.html#with-simple-restart,@strong{with-simple-restart}}.

@strong{Notes:}

@verbatim
 (restart-case expression
    (name1 arglist1 ...options1... . body1)
    (name2 arglist2 ...options2... . body2))
@end verbatim

is essentially equivalent to

@verbatim
 (block #1=#:g0001
   (let ((#2=#:g0002 nil))
        (tagbody
        (restart-bind ((name1 #'(lambda (&rest temp)
                                (setq #2# temp)
                                (go #3=#:g0003))
                          ...slightly-transformed-options1...)
                       (name2 #'(lambda (&rest temp)
                                (setq #2# temp)
                                (go #4=#:g0004))
                          ...slightly-transformed-options2...))
        (return-from #1# expression))
          #3# (return-from #1#
                  (apply #'(lambda arglist1 . body1) #2#))
          #4# (return-from #1#
                  (apply #'(lambda arglist2 . body2) #2#)))))
@end verbatim

Unnamed restarts are generally only useful interactively and an
interactive option which has no description is of little value.
Implementations are encouraged to warn if an unnamed restart is used and
no report information is provided at compilation time. At runtime, this
error might be noticed when entering the debugger. Since signaling an
error would probably cause recursive entry into the debugger (causing
yet another recursive error, etc.) it is suggested that the debugger
print some indication of such problems when they occur but not actually
signal errors.

@verbatim
 (restart-case (signal fred)
   (a ...)
   (b ...))
 == 
 (restart-case
     (with-condition-restarts fred 
                              (list (find-restart 'a) 
                                    (find-restart 'b))
       (signal fred))
   (a ...)
   (b ...))
@end verbatim

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@item
@uref{../Issues/iss097.html,DECLS-AND-DOC}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-CONDITION-RESTARTS
@subsubsection CLHS: Macro WITH-CONDITION-RESTARTS
@anchor{#clhs-macro-with-condition-restarts}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_restart-name.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_with-simple-restart.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-CONDITION-RESTARTS}

@strong{Syntax:}

@strong{with-condition-restarts} @emph{condition-form restarts-form
@emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{condition-form}---a @uref{glo_f.html#form,@emph{form}};
@emph{evaluated} to produce a @emph{condition}.

@emph{condition}---a @uref{glo_c.html#condition,@emph{condition}}
@uref{glo_o.html#object,@emph{object}} resulting from the
@uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{condition-form}.

@emph{restart-form}---a @uref{glo_f.html#form,@emph{form}};
@emph{evaluated} to produce a @emph{restart-list}.

@emph{restart-list}---a @uref{glo_l.html#list,@emph{list}} of
@uref{glo_r.html#restart,@emph{restart}}
@uref{glo_o.html#object,@emph{objects}} resulting from the
@uref{glo_e.html#evaluation,@emph{evaluation}} of @emph{restart-form}.

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}; evaluated.

@emph{results}---the @uref{glo_v.html#value,@emph{values}} returned by
@emph{forms}.

@strong{Description:}

First, the @emph{condition-form} and @emph{restarts-form} are
@emph{evaluated} in normal left-to-right order; the
@uref{glo_p.html#primary_value,@emph{primary values}} yielded by these
@uref{glo_e.html#evaluation,@emph{evaluations}} are respectively called
the @emph{condition} and the @emph{restart-list}.

Next, the @emph{forms} are @emph{evaluated} in a
@uref{glo_d.html#dynamic_environment,@emph{dynamic environment}} in
which each @uref{glo_r.html#restart,@emph{restart}} in
@emph{restart-list} is associated with the @emph{condition}. See
@uref{sec_9-1-4-2-4.html,Section 9.1.4.2.4 (Associating a Restart with a
Condition)}.

@strong{Examples:} None.

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_restart-case.html#restart-case,@strong{restart-case}}

@strong{Notes:}

Usually this @uref{glo_m.html#macro,@emph{macro}} is not used explicitly
in code, since
@uref{mac_restart-case.html#restart-case,@strong{restart-case}} handles
most of the common cases in a way that is syntactically more concise.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss076.html,CONDITION-RESTARTS:PERMIT-ASSOCIATION}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Macro WITH-SIMPLE-RESTART
@subsubsection CLHS: Macro WITH-SIMPLE-RESTART
@anchor{#clhs-macro-with-simple-restart}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-cond_ion-restarts.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{res_abort.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Macro} @strong{WITH-SIMPLE-RESTART}

@strong{Syntax:}

@strong{with-simple-restart} @emph{(name format-control
@emph{format-argument}@strong{*}) @emph{form}@strong{*}}

=> @emph{@emph{result}@strong{*}}

@strong{Arguments and Values:}

@emph{name}---a @uref{glo_s.html#symbol,@emph{symbol}}.

@emph{format-control}---a @uref{glo_f.html#format_control,@emph{format
control}}.

@emph{format-argument}---an @uref{glo_o.html#object,@emph{object}}
(i.e., a @uref{glo_f.html#format_argument,@emph{format argument}}).

@emph{forms}---an @uref{glo_i.html#implicit_progn,@emph{implicit
progn}}.

@emph{results}---in the normal situation, the
@uref{glo_v.html#value,@emph{values}} returned by the @emph{forms}; in
the exceptional situation where the
@uref{glo_r.html#restart,@emph{restart}} named @emph{name} is invoked,
two values---@uref{any_nil.html#nil,@strong{nil}} and
@uref{any_t.html#t,@strong{t}}.

@strong{Description:}

@ref{#with-simple-restart,@strong{with-simple-restart}} establishes a
restart.

If the restart designated by @emph{name} is not invoked while executing
@emph{forms}, all values returned by the last of @emph{forms} are
returned. If the restart designated by @emph{name} is invoked, control
is transferred to
@ref{#with-simple-restart,@strong{with-simple-restart}}, which returns
two values, @uref{any_nil.html#nil,@strong{nil}} and
@uref{any_t.html#t,@strong{t}}.

If @emph{name} is @uref{any_nil.html#nil,@strong{nil}}, an anonymous
restart is established.

The @emph{format-control} and @emph{format-arguments} are used report
the @uref{glo_r.html#restart,@emph{restart}}.

@strong{Examples:}

@verbatim
 (defun read-eval-print-loop (level)
   (with-simple-restart (abort "Exit command level ~D." level)
     (loop
       (with-simple-restart (abort "Return to command level ~D." level)
         (let ((form (prog2 (fresh-line) (read) (fresh-line))))
           (prin1 (eval form)))))))
=>  READ-EVAL-PRINT-LOOP
 (read-eval-print-loop 1)
 (+ 'a 3)
>>  Error: The argument, A, to the function + was of the wrong type.
>>         The function expected a number.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Specify a value to use this time.
>>   2: Return to command level 1.
>>   3: Exit command level 1.
>>   4: Return to Lisp Toplevel.
@end verbatim

@verbatim
 (defun compute-fixnum-power-of-2 (x)
   (with-simple-restart (nil "Give up on computing 2^~D." x)
     (let ((result 1))
       (dotimes (i x result)
         (setq result (* 2 result))
         (unless (fixnump result)
           (error "Power of 2 is too large."))))))
COMPUTE-FIXNUM-POWER-OF-2
 (defun compute-power-of-2 (x)
   (or (compute-fixnum-power-of-2 x) 'something big))
COMPUTE-POWER-OF-2
 (compute-power-of-2 10)
1024
 (compute-power-of-2 10000)
>>  Error: Power of 2 is too large.
>>  To continue, type :CONTINUE followed by an option number.
>>   1: Give up on computing 2^10000.
>>   2: Return to Lisp Toplevel
>>  Debug> :continue 1
=>  SOMETHING-BIG
@end verbatim

@strong{Side Effects:} None.

@strong{Affected By:} None.

@strong{Exceptional Situations:} None.

@strong{See Also:}

@uref{mac_restart-case.html#restart-case,@strong{restart-case}}

@strong{Notes:}

@ref{#with-simple-restart,@strong{with-simple-restart}} is shorthand for
one of the most common uses of
@uref{mac_restart-case.html#restart-case,@strong{restart-case}}.

@ref{#with-simple-restart,@strong{with-simple-restart}} could be defined
by:

@verbatim
 (defmacro with-simple-restart ((restart-name format-control
                                              &rest format-arguments)
                                &body forms)
   `(restart-case (progn ,@forms)
      (,restart-name ()
          :report (lambda (stream)
                    (format stream ,format-control ,@format-arguments))
         (values nil t))))
@end verbatim

Because the second return value is @uref{any_t.html#t,@strong{t}} in the
exceptional case, it is common (but not required) to arrange for the
second return value in the normal case to be missing or
@uref{any_nil.html#nil,@strong{nil}} so that the two situations can be
distinguished.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issue}, @emph{not part of the specification}, applies to this section:

@itemize
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Restart ABORT
@subsubsection CLHS: Restart ABORT
@anchor{#clhs-restart-abort}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{mac_with-simple-restart.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{res_continue.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Restart} @strong{ABORT}

@strong{Data Arguments Required:}

None.

@strong{Description:}

The intent of the @uref{any_abort.html#abort,@strong{abort}} restart is
to allow return to the innermost ``command level.'' Implementors are
encouraged to make sure that there is always a restart named
@uref{fun_abortcm_c_cm_use-value.html#abort,@strong{abort}} around any
user code so that user code can call
@uref{fun_abortcm_c_cm_use-value.html#abort,@strong{abort}} at any time
and expect something reasonable to happen; exactly what the reasonable
thing is may vary somewhat. Typically, in an interactive listener, the
invocation of
@uref{fun_abortcm_c_cm_use-value.html#abort,@strong{abort}} returns to
the @uref{glo_l.html#lisp_reader,@emph{Lisp reader}} phase of the
@uref{glo_l.html#lisp_read-eval-print_loop,@emph{Lisp read-eval-print
loop}}, though in some batch or multi-processing situations there may be
situations in which having it kill the running process is more
appropriate.

@strong{See Also:}

@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{fun_abortcm_c_cm_use-value.html#abort,@strong{abort}}
(@uref{glo_f.html#function,@emph{function}})

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Restart CONTINUE
@subsubsection CLHS: Restart CONTINUE
@anchor{#clhs-restart-continue}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{res_abort.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{res_muffle-warning.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Restart} @strong{CONTINUE}

@strong{Data Arguments Required:}

None.

@strong{Description:}

The @uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}} is generally part of protocols
where there is a single ``obvious'' way to continue, such as in
@uref{fun_break.html#break,@strong{break}} and
@uref{fun_cerror.html#cerror,@strong{cerror}}. Some user-defined
protocols may also wish to incorporate it for similar reasons. In
general, however, it is more reliable to design a special purpose
restart with a name that more directly suits the particular application.

@strong{Examples:}

@verbatim
 (let ((x 3))
   (handler-bind ((error #'(lambda (c)
                             (let ((r (find-restart 'continue c)))
                               (when r (invoke-restart r))))))
     (cond ((not (floatp x))
            (cerror "Try floating it." "~D is not a float." x)
            (float x))
           (t x)))) =>  3.0
@end verbatim

@strong{See Also:}

@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{fun_abortcm_c_cm_use-value.html#continue,@strong{continue}}
(@uref{glo_f.html#function,@emph{function}}),
@uref{mac_assert.html#assert,@strong{assert}},
@uref{fun_cerror.html#cerror,@strong{cerror}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Restart MUFFLE-WARNING
@subsubsection CLHS: Restart MUFFLE-WARNING
@anchor{#clhs-restart-muffle-warning}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{res_continue.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{res_store-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Restart} @strong{MUFFLE-WARNING}

@strong{Data Arguments Required:}

None.

@strong{Description:}

This @uref{glo_r.html#restart,@emph{restart}} is established by
@uref{fun_warn.html#warn,@strong{warn}} so that
@uref{glo_h.html#handler,@emph{handlers}} of
@uref{contyp_warning.html#warning,@strong{warning}}
@uref{glo_c.html#condition,@emph{conditions}} have a way to tell
@uref{fun_warn.html#warn,@strong{warn}} that a warning has already been
dealt with and that no further action is warranted.

@strong{Examples:}

@verbatim
 (defvar *all-quiet* nil) =>  *ALL-QUIET*
 (defvar *saved-warnings* '()) =>  *SAVED-WARNINGS*
 (defun quiet-warning-handler (c)
   (when *all-quiet*
     (let ((r (find-restart 'muffle-warning c)))
       (when r 
         (push c *saved-warnings*)
         (invoke-restart r)))))
=>  CUSTOM-WARNING-HANDLER
 (defmacro with-quiet-warnings (&body forms)
   `(let ((*all-quiet* t)
          (*saved-warnings* '()))
      (handler-bind ((warning #'quiet-warning-handler))
        ,@forms
        *saved-warnings*)))
=>  WITH-QUIET-WARNINGS
 (setq saved
   (with-quiet-warnings
     (warn "Situation #1.")
     (let ((*all-quiet* nil))
       (warn "Situation #2."))
     (warn "Situation #3.")))
>>  Warning: Situation #2.
=>  (#<SIMPLE-WARNING 42744421> #<SIMPLE-WARNING 42744365>)
 (dolist (s saved) (format t "~&~A~%" s))
>>  Situation #3.
>>  Situation #1.
=>  NIL
@end verbatim

@strong{See Also:}

@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{fun_abortcm_c_cm_use-value.html#muffle-warning,@strong{muffle-warning}}
(@uref{glo_f.html#function,@emph{function}}),
@uref{fun_warn.html#warn,@strong{warn}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Restart STORE-VALUE
@subsubsection CLHS: Restart STORE-VALUE
@anchor{#clhs-restart-store-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{res_muffle-warning.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{res_use-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Restart} @strong{STORE-VALUE}

@strong{Data Arguments Required:}

a value to use instead (on an ongoing basis).

@strong{Description:}

The @uref{any_store-value.html#store-value,@strong{store-value}}
@uref{glo_r.html#restart,@emph{restart}} is generally used by
@uref{glo_h.html#handler,@emph{handlers}} trying to recover from errors
of @uref{glo_t.html#type,@emph{types}} such as
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}} or
@uref{contyp_type-error.html#type-error,@strong{type-error}}, which may
wish to supply a replacement datum to be stored permanently.

@strong{Examples:}

@verbatim
 (defun type-error-auto-coerce (c)
   (when (typep c 'type-error)
     (let ((r (find-restart 'store-value c)))
       (handler-case (let ((v (coerce (type-error-datum c)
                                      (type-error-expected-type c))))
                       (invoke-restart r v))
         (error ()))))) =>  TYPE-ERROR-AUTO-COERCE
 (let ((x 3))
   (handler-bind ((type-error #'type-error-auto-coerce))
     (check-type x float)
     x)) =>  3.0
@end verbatim

@strong{See Also:}

@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{fun_abortcm_c_cm_use-value.html#store-value,@strong{store-value}}
(@uref{glo_f.html#function,@emph{function}}),
@uref{mac_casecm_ccasecm_ecase.html#ccase,@strong{ccase}},
@uref{mac_check-type.html#check-type,@strong{check-type}},
@uref{mac_typecasec_cm_etypecase.html#ctypecase,@strong{ctypecase}},
@uref{fun_abortcm_c_cm_use-value.html#use-value,@strong{use-value}}
(@uref{glo_f.html#function,@emph{function}} and
@uref{glo_r.html#restart,@emph{restart}})

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Restart USE-VALUE
@subsubsection CLHS: Restart USE-VALUE
@anchor{#clhs-restart-use-value}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{res_store-value.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_abortcm_c_cm_use-value.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Restart} @strong{USE-VALUE}

@strong{Data Arguments Required:}

a value to use instead (once).

@strong{Description:}

The @uref{any_use-value.html#use-value,@strong{use-value}}
@uref{glo_r.html#restart,@emph{restart}} is generally used by
@uref{glo_h.html#handler,@emph{handlers}} trying to recover from errors
of @uref{glo_t.html#type,@emph{types}} such as
@uref{contyp_cell-error.html#cell-error,@strong{cell-error}}, where the
handler may wish to supply a replacement datum for one-time use.

@strong{See Also:}

@uref{sec_9-1-4-2.html,Section 9.1.4.2 (Restarts)},
@uref{sec_9-1-4-2-2.html,Section 9.1.4.2.2 (Interfaces to Restarts)},
@uref{fun_invoke-restart.html#invoke-restart,@strong{invoke-restart}},
@uref{fun_abortcm_c_cm_use-value.html#use-value,@strong{use-value}}
(@uref{glo_f.html#function,@emph{function}}),
@uref{fun_abortcm_c_cm_use-value.html#store-value,@strong{store-value}}
(@uref{glo_f.html#function,@emph{function}} and
@uref{glo_r.html#restart,@emph{restart}})

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS System Class RESTART
@subsubsection CLHS: System Class RESTART
@anchor{#clhs-system-class-restart}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_make-condition.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{fun_compute-restarts.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{System Class} @strong{RESTART}

@strong{Class Precedence List:}

@ref{#restart,@strong{restart}}, @uref{syscla_t.html#t,@strong{t}}

@strong{Description:}

An @uref{glo_o.html#object,@emph{object}} of
@uref{glo_t.html#type,@emph{type}} @ref{#restart,@strong{restart}}
represents a @uref{glo_f.html#function,@emph{function}} that can be
called to perform some form of recovery action, usually a transfer of
control to an outer point in the running program.

An @uref{glo_i.html#implementation,@emph{implementation}} is free to
implement a @uref{glo_r.html#restart,@emph{restart}} in whatever manner
is most convenient; a @uref{glo_r.html#restart,@emph{restart}} has only
@uref{glo_d.html#dynamic_extent,@emph{dynamic extent}} relative to the
scope of the binding @uref{glo_f.html#form,@emph{form}} which
@uref{glo_e.html#establish,@emph{establishes}} it.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *BREAK-ON-SIGNALS*
@subsubsection CLHS: Variable *BREAK-ON-SIGNALS*
@anchor{#clhs-variable-break-on-signals}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{var_stdebugger-hookst.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{mac_handler-bind.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*BREAK-ON-SIGNALS*}

@strong{Value Type:}

a @uref{glo_t.html#type_specifier,@emph{type specifier}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

When (typep @emph{condition} *break-on-signals*) returns
@uref{glo_t.html#true,@emph{true}}, calls to
@uref{fun_signal.html#signal,@strong{signal}}, and to other
@uref{glo_o.html#operator,@emph{operators}} such as
@uref{fun_error.html#error,@strong{error}} that implicitly call
@uref{fun_signal.html#signal,@strong{signal}}, enter the debugger prior
to @emph{signaling} the @uref{glo_c.html#condition,@emph{condition}}.

The @uref{any_continue.html#continue,@strong{continue}}
@uref{glo_r.html#restart,@emph{restart}} can be used to continue with
the normal @emph{signaling} process when a break occurs process due to
@ref{#STbreak-on-signalsST,@strong{*break-on-signals*}}.

@strong{Examples:}

@verbatim
 *break-on-signals* =>  NIL
 (ignore-errors (error 'simple-error :format-control "Fooey!"))
=>  NIL, #<SIMPLE-ERROR 32207172>

 (let ((*break-on-signals* 'error))
   (ignore-errors (error 'simple-error :format-control "Fooey!")))
>>  Break: Fooey!
>>  BREAK entered because of *BREAK-ON-SIGNALS*.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Continue to signal.
>>   2: Top level.
>>  Debug> :CONTINUE 1
>>  Continue to signal.
=>  NIL, #<SIMPLE-ERROR 32212257>

 (let ((*break-on-signals* 'error))
   (error 'simple-error :format-control "Fooey!"))
>>  Break: Fooey!
>>  BREAK entered because of *BREAK-ON-SIGNALS*.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Continue to signal.
>>   2: Top level.
>>  Debug> :CONTINUE 1
>>  Continue to signal.
>>  Error: Fooey!
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Top level.
>>  Debug> :CONTINUE 1
>>  Top level.
@end verbatim

@strong{Affected By:} None.

@strong{See Also:}

@uref{fun_break.html#break,@strong{break}},
@uref{fun_signal.html#signal,@strong{signal}},
@uref{fun_warn.html#warn,@strong{warn}},
@uref{fun_error.html#error,@strong{error}},
@uref{fun_typep.html#typep,@strong{typep}}, @uref{sec_9-1.html,Section
9.1 (Condition System Concepts)}

@strong{Notes:}

@ref{#STbreak-on-signalsST,@strong{*break-on-signals*}} is intended
primarily for use in debugging code that does signaling. When setting
@ref{#STbreak-on-signalsST,@strong{*break-on-signals*}}, the user is
encouraged to choose the most restrictive specification that suffices.
Setting @ref{#STbreak-on-signalsST,@strong{*break-on-signals*}}
effectively violates the modular handling of
@uref{glo_c.html#condition,@emph{condition}} signaling. In practice, the
complete effect of setting
@ref{#STbreak-on-signalsST,@strong{*break-on-signals*}} might be
unpredictable in some cases since the user might not be aware of the
variety or number of calls to
@uref{fun_signal.html#signal,@strong{signal}} that are used in code
called only incidentally.

@ref{#STbreak-on-signalsST,@strong{*break-on-signals*}} enables an early
entry to the debugger but such an entry does not preclude an additional
entry to the debugger in the case of operations such as
@uref{fun_error.html#error,@strong{error}} and
@uref{fun_cerror.html#cerror,@strong{cerror}}.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
The following @uref{../FrontMatter/X3J13-Issues.html,X3J13 cleanup
issues}, @emph{not part of the specification}, apply to this section:

@itemize
@item
@uref{../Issues/iss020.html,BREAK-ON-WARNINGS-OBSOLETE:REMOVE}
@item
@uref{../Issues/iss170.html,FORMAT-STRING-ARGUMENTS:SPECIFY}
@end itemize

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Variable *DEBUGGER-HOOK*
@subsubsection CLHS: Variable *DEBUGGER-HOOK*
@anchor{#clhs-variable-debugger-hook}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{fun_break.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{sec_the_condi_s_dictionary.html,@image{../Graphics/Up,,,[Up],gif}}@uref{var_stbreak-on-signalsst.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@emph{Variable} @strong{*DEBUGGER-HOOK*}

@strong{Value Type:}

a @uref{glo_d.html#designator,@emph{designator}} for a
@uref{glo_f.html#function,@emph{function}} of two
@uref{glo_a.html#argument,@emph{arguments}} (a
@uref{glo_c.html#condition,@emph{condition}} and the
@uref{glo_v.html#value,@emph{value}} of
@ref{#STdebugger-hookST,@strong{*debugger-hook*}} at the time the
debugger was entered), or @uref{any_nil.html#nil,@strong{nil}}.

@strong{Initial Value:}

@uref{any_nil.html#nil,@strong{nil}}.

@strong{Description:}

When the @uref{glo_v.html#value,@emph{value}} of
@ref{#STdebugger-hookST,@strong{*debugger-hook*}} is
@uref{glo_n.html#non-nil,@emph{non-nil}}, it is called prior to normal
entry into the debugger, either due to a call to
@uref{fun_invoke-debugger.html#invoke-debugger,@strong{invoke-debugger}}
or due to automatic entry into the debugger from a call to
@uref{fun_error.html#error,@strong{error}} or
@uref{fun_cerror.html#cerror,@strong{cerror}} with a condition that is
not handled. The @uref{glo_f.html#function,@emph{function}} may either
handle the @uref{glo_c.html#condition,@emph{condition}} (transfer
control) or return normally (allowing the standard debugger to run). To
minimize recursive errors while debugging,
@ref{#STdebugger-hookST,@strong{*debugger-hook*}} is bound to
@uref{any_nil.html#nil,@strong{nil}} by
@uref{fun_invoke-debugger.html#invoke-debugger,@strong{invoke-debugger}}
prior to calling the @uref{glo_f.html#function,@emph{function}}.

@strong{Examples:}

@verbatim
 (defun one-of (choices &optional (prompt "Choice"))
   (let ((n (length choices)) (i))
     (do ((c choices (cdr c)) (i 1 (+ i 1)))
         ((null c))
       (format t "~&[~D] ~A~%" i (car c)))
     (do () ((typep i `(integer 1 ,n)))
       (format t "~&~A: " prompt)
       (setq i (read))
       (fresh-line))
     (nth (- i 1) choices)))

 (defun my-debugger (condition me-or-my-encapsulation)
   (format t "~&Fooey: ~A" condition)
   (let ((restart (one-of (compute-restarts))))
     (if (not restart) (error "My debugger got an error."))
     (let ((*debugger-hook* me-or-my-encapsulation))
       (invoke-restart-interactively restart))))
 
 (let ((*debugger-hook* #'my-debugger))
   (+ 3 'a))
>>  Fooey: The argument to +, A, is not a number.
>>   [1] Supply a replacement for A.
>>   [2] Return to Cloe Toplevel.
>>  Choice: 1
>>   Form to evaluate and use: (+ 5 'b)
>>   Fooey: The argument to +, B, is not a number.
>>   [1] Supply a replacement for B.
>>   [2] Supply a replacement for A.
>>   [3] Return to Cloe Toplevel.
>>  Choice: 1
>>   Form to evaluate and use: 1
=>  9
@end verbatim

@strong{Affected By:}

@uref{fun_invoke-debugger.html#invoke-debugger,@strong{invoke-debugger}}

@strong{See Also:} None.

@strong{Notes:}

When evaluating code typed in by the user interactively, it is sometimes
useful to have the hook function bind
@ref{#STdebugger-hookST,@strong{*debugger-hook*}} to the
@uref{glo_f.html#function,@emph{function}} that was its second argument
so that recursive errors can be handled using the same interactive
facility.

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}

@node CLHS Appendix
@section CLHS: Appendix
@anchor{#clhs-appendix}
@uref{http://www.harlequin.com/,@image{../Graphics/Harlequin-Small,,,[HARLEQUIN],gif}}@uref{../FrontMatter/index.html,@image{../Graphics/HyperSpec-Small,,,[Common
Lisp HyperSpec (TM)],gif}}
@uref{glo_y.html,@image{../Graphics/Prev,,,[Previous],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Up,,,[Up],gif}}@uref{sec_a-1.html,@image{../Graphics/Next,,,[Next],gif}}

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
A. Appendix

@uref{sec_a-1.html,}

A.1 Removed Language Features

@iftex
@bigskip@hrule@bigskip
@end iftex
@ifnottex
------------------------------------------------------------------------
@end ifnottex
@uref{../FrontMatter/Starting-Points.html,@image{../Graphics/Starting-Points,,,[Starting
Points],gif}}@uref{../FrontMatter/Chapter-Index.html,@image{../Graphics/Contents,,,[Contents],gif}}@uref{../FrontMatter/Master-Index.html,@image{../Graphics/Index,,,[Index],gif}}@uref{../FrontMatter/Symbol-Index.html,@image{../Graphics/Symbols,,,[Symbols],gif}}@uref{../Body/sec_26-1.html,@image{../Graphics/Glossary,,,[Glossary],gif}}@uref{../Issues/Issues-Categorized.html,@image{../Graphics/Issues,,,[Issues],gif}}@*
@uref{../FrontMatter/About-HyperSpec.html#Legal,@emph{Copyright 1996,
The Harlequin Group Limited. All Rights Reserved.}}