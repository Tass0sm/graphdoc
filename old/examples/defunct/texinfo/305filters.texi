\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Filters
@end titlepage

@node Top
@top Filters

Vue.js allows you to define filters that can be used to apply common
text formatting. Filters are usable in two places: @strong{mustache
interpolations and @code{v-bind} expressions} (the latter supported in
2.1.0+). Filters should be appended to the end of the JavaScript
expression, denoted by the ``pipe'' symbol:

@verbatim
<!-- in mustaches -->
{{ message | capitalize }}

<!-- in v-bind -->
<div v-bind:id="rawId | formatId"></div>
@end verbatim

You can define local filters in a component's options:

@verbatim
filters: {
  capitalize: function (value) {
    if (!value) return ''
    value = value.toString()
    return value.charAt(0).toUpperCase() + value.slice(1)
  }
}
@end verbatim

or define a filter globally before creating the Vue instance:

@verbatim
Vue.filter('capitalize', function (value) {
  if (!value) return ''
  value = value.toString()
  return value.charAt(0).toUpperCase() + value.slice(1)
})

new Vue({
  // ...
})
@end verbatim

When the global filter has the same name as the local filter, the local
filter will be preferred.

Below is an example of our @code{capitalize} filter being used:

@{% raw %@}
@{@{ message | capitalize @}@}
@{% endraw %@}

The filter's function always receives the expression's value (the result
of the former chain) as its first argument. In the above example, the
@code{capitalize} filter function will receive the value of
@code{message} as its argument.

Filters can be chained:

@verbatim
{{ message | filterA | filterB }}
@end verbatim

In this case, @code{filterA}, defined with a single argument, will
receive the value of @code{message}, and then the @code{filterB}
function will be called with the result of @code{filterA} passed into
@code{filterB}'s single argument.

Filters are JavaScript functions, therefore they can take arguments:

@verbatim
{{ message | filterA('arg1', arg2) }}
@end verbatim

Here @code{filterA} is defined as a function taking three arguments. The
value of @code{message} will be passed into the first argument. The
plain string @code{'arg1'} will be passed into the @code{filterA} as its
second argument, and the value of expression @code{arg2} will be
evaluated and passed in as the third argument.

@bye
