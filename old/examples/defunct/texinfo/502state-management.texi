\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title State Management
@end titlepage

@node Top
@top State Management

@node Official Flux-Like Implementation
@section Official Flux-Like Implementation
@anchor{#official-flux-like-implementation}
Large applications can often grow in complexity, due to multiple pieces
of state scattered across many components and the interactions between
them. To solve this problem, Vue offers
@uref{https://github.com/vuejs/vuex,vuex}: our own Elm-inspired state
management library. It even integrates into
@uref{https://github.com/vuejs/vue-devtools,vue-devtools}, providing
zero-setup access to
@uref{https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif,time
travel debugging}.

Watch a video explanation on Vue Mastery

@menu
* Information for React Developers::
@end menu

@node Information for React Developers
@subsection Information for React Developers
@anchor{#information-for-react-developers}
If you're coming from React, you may be wondering how vuex compares to
@uref{https://github.com/reactjs/redux,redux}, the most popular Flux
implementation in that ecosystem. Redux is actually view-layer agnostic,
so it can easily be used with Vue via
@uref{https://classic.yarnpkg.com/en/packages?q=redux%20vue&p=1,simple
bindings}. Vuex is different in that it @emph{knows} it's in a Vue app.
This allows it to better integrate with Vue, offering a more intuitive
API and improved development experience.

@node Simple State Management from Scratch
@section Simple State Management from Scratch
@anchor{#simple-state-management-from-scratch}
It is often overlooked that the source of truth in Vue applications is
the raw @code{data} object - a Vue instance only proxies access to it.
Therefore, if you have a piece of state that should be shared by
multiple instances, you can share it by identity:

@verbatim
var sourceOfTruth = {}

var vmA = new Vue({
  data: sourceOfTruth
})

var vmB = new Vue({
  data: sourceOfTruth
})
@end verbatim

Now whenever @code{sourceOfTruth} is mutated, both @code{vmA} and
@code{vmB} will update their views automatically. Subcomponents within
each of these instances would also have access via
@code{this.$root.$data}. We have a single source of truth now, but
debugging would be a nightmare. Any piece of data could be changed by
any part of our app at any time, without leaving a trace.

To help solve this problem, we can adopt a @strong{store pattern}:

@verbatim
var store = {
  debug: true,
  state: {
    message: 'Hello!'
  },
  setMessageAction (newValue) {
    if (this.debug) console.log('setMessageAction triggered with', newValue)
    this.state.message = newValue
  },
  clearMessageAction () {
    if (this.debug) console.log('clearMessageAction triggered')
    this.state.message = ''
  }
}
@end verbatim

Notice all actions that mutate the store's state are put inside the
store itself. This type of centralized state management makes it easier
to understand what type of mutations could happen and how they are
triggered. Now when something goes wrong, we'll also have a log of what
happened leading up to the bug.

In addition, each instance/component can still own and manage its own
private state:

@verbatim
var vmA = new Vue({
  data: {
    privateState: {},
    sharedState: store.state
  }
})

var vmB = new Vue({
  data: {
    privateState: {},
    sharedState: store.state
  }
})
@end verbatim

@float
@image{/images/state,,,State Management,png}
@caption{State Management}
@end float

It's important to note that you should never replace the original state
object in your actions - the components and the store need to share
reference to the same object in order for mutations to be observed.
As we continue developing the convention where components are never
allowed to directly mutate state that belongs to a store, but should
instead dispatch events that notify the store to perform actions, we
eventually arrive at the @uref{https://facebook.github.io/flux/,Flux}
architecture. The benefit of this convention is we can record all state
mutations happening to the store and implement advanced debugging
helpers such as mutation logs, snapshots, and history re-rolls / time
travel.

This brings us full circle back to
@uref{https://github.com/vuejs/vuex,vuex}, so if you've read this far
it's probably time to try it out!

@bye
