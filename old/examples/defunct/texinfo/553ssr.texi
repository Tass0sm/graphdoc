\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Server-Side Rendering
@end titlepage

@node Top
@top Server-Side Rendering

@node The Complete SSR Guide
@section The Complete SSR Guide
@anchor{#the-complete-ssr-guide}
We have created a standalone guide for creating server-rendered Vue
applications. This is a very in-depth guide for those who are already
familiar with client-side Vue development, server-side Node.js
development and webpack. Check it out at
@uref{https://ssr.vuejs.org/,ssr.vuejs.org}.

@node Nuxtjs
@section Nuxt.js
@anchor{#nuxt.js}
Properly configuring all the discussed aspects of a production-ready
server-rendered app can be a daunting task. Luckily, there is an
excellent community project that aims to make all of this easier:
@uref{https://nuxtjs.org/,Nuxt.js}. Nuxt.js is a higher-level framework
built on top of the Vue ecosystem which provides an extremely
streamlined development experience for writing universal Vue
applications. Better yet, you can even use it as a static site generator
(with pages authored as single-file Vue components)! We highly recommend
giving it a try.

@node Quasar Framework SSR + PWA
@section Quasar Framework SSR + PWA
@anchor{#quasar-framework-ssr-pwa}
@uref{https://quasar.dev,Quasar Framework} will generate an SSR app
(with optional PWA handoff) that leverages its best-in-class build
system, sensible configuration and developer extensibility to make
designing and building your idea a breeze. With over one hundred
specific ``Material Design 2.0''-compliant components, you can decide
which ones to execute on the server, which are available in the browser
- and even manage the @code{<meta>} tags of your site. Quasar is a
node.js and webpack based development environment that supercharges and
streamlines rapid development of SPA, PWA, SSR, Electron, Capacitor and
Cordova apps - all from one codebase.

@bye
