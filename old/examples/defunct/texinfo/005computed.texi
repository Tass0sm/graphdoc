\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Computed Properties and Watchers
@end titlepage

@node Top
@top Computed Properties and Watchers

@node Computed Properties
@section Computed Properties
@anchor{#computed-properties}
Learn how computed properties work with a free lesson on Vue School
In-template expressions are very convenient, but they are meant for
simple operations. Putting too much logic in your templates can make
them bloated and hard to maintain. For example:

@verbatim
<div id="example">
  {{ message.split('').reverse().join('') }}
</div>
@end verbatim

At this point, the template is no longer simple and declarative. You
have to look at it for a second before realizing that it displays
@code{message} in reverse. The problem is made worse when you want to
include the reversed message in your template more than once.

That's why for any complex logic, you should use a @strong{computed
property}.

@menu
* Basic Example::
* Computed Caching vs Methods::
* Computed vs Watched Property::
* Computed Setter::
@end menu

@node Basic Example
@subsection Basic Example
@anchor{#basic-example}

@verbatim
<div id="example">
  <p>Original message: "{{ message }}"</p>
  <p>Computed reversed message: "{{ reversedMessage }}"</p>
</div>
@end verbatim

@verbatim
var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // a computed getter
    reversedMessage: function () {
      // `this` points to the vm instance
      return this.message.split('').reverse().join('')
    }
  }
})
@end verbatim

Result:

@{% raw %@}
Original message: ``@{@{ message @}@}''
Computed reversed message: ``@{@{ reversedMessage @}@}''
@{% endraw %@}

Here we have declared a computed property @code{reversedMessage}. The
function we provided will be used as the getter function for the
property @code{vm.reversedMessage}:

@verbatim
console.log(vm.reversedMessage) // => 'olleH'
vm.message = 'Goodbye'
console.log(vm.reversedMessage) // => 'eybdooG'
@end verbatim

You can open the console and play with the example vm yourself. The
value of @code{vm.reversedMessage} is always dependent on the value of
@code{vm.message}.

You can data-bind to computed properties in templates just like a normal
property. Vue is aware that @code{vm.reversedMessage} depends on
@code{vm.message}, so it will update any bindings that depend on
@code{vm.reversedMessage} when @code{vm.message} changes. And the best
part is that we've created this dependency relationship declaratively:
the computed getter function has no side effects, which makes it easier
to test and understand.

@node Computed Caching vs Methods
@subsection Computed Caching vs Methods
@anchor{#computed-caching-vs-methods}
You may have noticed we can achieve the same result by invoking a method
in the expression:

@verbatim
<p>Reversed message: "{{ reverseMessage() }}"</p>
@end verbatim

@verbatim
// in component
methods: {
  reverseMessage: function () {
    return this.message.split('').reverse().join('')
  }
}
@end verbatim

Instead of a computed property, we can define the same function as a
method. For the end result, the two approaches are indeed exactly the
same. However, the difference is that @strong{computed properties are
cached based on their reactive dependencies.} A computed property will
only re-evaluate when some of its reactive dependencies have changed.
This means as long as @code{message} has not changed, multiple access to
the @code{reversedMessage} computed property will immediately return the
previously computed result without having to run the function again.

This also means the following computed property will never update,
because @code{Date.now()} is not a reactive dependency:

@verbatim
computed: {
  now: function () {
    return Date.now()
  }
}
@end verbatim

In comparison, a method invocation will @strong{always} run the function
whenever a re-render happens.

Why do we need caching? Imagine we have an expensive computed property
@strong{A}, which requires looping through a huge Array and doing a lot
of computations. Then we may have other computed properties that in turn
depend on @strong{A}. Without caching, we would be executing
@strong{A}'s getter many more times than necessary! In cases where you
do not want caching, use a method instead.

@node Computed vs Watched Property
@subsection Computed vs Watched Property
@anchor{#computed-vs-watched-property}
Vue does provide a more generic way to observe and react to data changes
on a Vue instance: @strong{watch properties}. When you have some data
that needs to change based on some other data, it is tempting to overuse
@code{watch} - especially if you are coming from an AngularJS
background. However, it is often a better idea to use a computed
property rather than an imperative @code{watch} callback. Consider this
example:

@verbatim
<div id="demo">{{ fullName }}</div>
@end verbatim

@verbatim
var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar',
    fullName: 'Foo Bar'
  },
  watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
})
@end verbatim

The above code is imperative and repetitive. Compare it with a computed
property version:

@verbatim
var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar'
  },
  computed: {
    fullName: function () {
      return this.firstName + ' ' + this.lastName
    }
  }
})
@end verbatim

Much better, isn't it?

@node Computed Setter
@subsection Computed Setter
@anchor{#computed-setter}
Computed properties are by default getter-only, but you can also provide
a setter when you need it:

@verbatim
// ...
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}
// ...
@end verbatim

Now when you run @code{vm.fullName = 'John Doe'}, the setter will be
invoked and @code{vm.firstName} and @code{vm.lastName} will be updated
accordingly.

@node Watchers
@section Watchers
@anchor{#watchers}
While computed properties are more appropriate in most cases, there are
times when a custom watcher is necessary. That's why Vue provides a more
generic way to react to data changes through the @code{watch} option.
This is most useful when you want to perform asynchronous or expensive
operations in response to changing data.

For example:

@verbatim
<div id="watch-example">
  <p>
    Ask a yes/no question:
    <input v-model="question">
  </p>
  <p>{{ answer }}</p>
</div>
@end verbatim

@verbatim
<!-- Since there is already a rich ecosystem of ajax libraries    -->
<!-- and collections of general-purpose utility methods, Vue core -->
<!-- is able to remain small by not reinventing them. This also   -->
<!-- gives you the freedom to use what you're familiar with.      -->
<script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"></script>
<script>
var watchExampleVM = new Vue({
  el: '#watch-example',
  data: {
    question: '',
    answer: 'I cannot give you an answer until you ask a question!'
  },
  watch: {
    // whenever question changes, this function will run
    question: function (newQuestion, oldQuestion) {
      this.answer = 'Waiting for you to stop typing...'
      this.debouncedGetAnswer()
    }
  },
  created: function () {
    // _.debounce is a function provided by lodash to limit how
    // often a particularly expensive operation can be run.
    // In this case, we want to limit how often we access
    // yesno.wtf/api, waiting until the user has completely
    // finished typing before making the ajax request. To learn
    // more about the _.debounce function (and its cousin
    // _.throttle), visit: https://lodash.com/docs#debounce
    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
  },
  methods: {
    getAnswer: function () {
      if (this.question.indexOf('?') === -1) {
        this.answer = 'Questions usually contain a question mark. ;-)'
        return
      }
      this.answer = 'Thinking...'
      var vm = this
      axios.get('https://yesno.wtf/api')
        .then(function (response) {
          vm.answer = _.capitalize(response.data.answer)
        })
        .catch(function (error) {
          vm.answer = 'Error! Could not reach the API. ' + error
        })
    }
  }
})
</script>
@end verbatim

Result:

@{% raw %@}
Ask a yes/no question:
@{@{ answer @}@}
@{% endraw %@}

In this case, using the @code{watch} option allows us to perform an
asynchronous operation (accessing an API), limit how often we perform
that operation, and set intermediary states until we get a final answer.
None of that would be possible with a computed property.

In addition to the @code{watch} option, you can also use the imperative
@uref{../api/#vm-watch,vm.$watch API}.

@bye
