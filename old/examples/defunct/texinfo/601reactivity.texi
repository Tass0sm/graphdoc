\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Reactivity in Depth
@end titlepage

@node Top
@top Reactivity in Depth

Now it's time to take a deep dive! One of Vue's most distinct features
is the unobtrusive reactivity system. Models are just plain JavaScript
objects. When you modify them, the view updates. It makes state
management simple and intuitive, but it's also important to understand
how it works to avoid some common gotchas. In this section, we are going
to dig into some of the lower-level details of Vue's reactivity system.

Watch a video explanation on Vue Mastery

@node How Changes Are Tracked
@section How Changes Are Tracked
@anchor{#how-changes-are-tracked}
When you pass a plain JavaScript object to a Vue instance as its
@code{data} option, Vue will walk through all of its properties and
convert them to
@uref{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters,getter/setters}
using
@uref{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty,@code{Object.defineProperty}}.
This is an ES5-only and un-shimmable feature, which is why Vue doesn't
support IE8 and below.

The getter/setters are invisible to the user, but under the hood they
enable Vue to perform dependency-tracking and change-notification when
properties are accessed or modified. One caveat is that browser consoles
format getter/setters differently when converted data objects are
logged, so you may want to install
@uref{https://github.com/vuejs/vue-devtools,vue-devtools} for a more
inspection-friendly interface.

Every component instance has a corresponding @strong{watcher} instance,
which records any properties ``touched'' during the component's render
as dependencies. Later on when a dependency's setter is triggered, it
notifies the watcher, which in turn causes the component to re-render.

@float
@image{/images/data,,,Reactivity Cycle,png}
@caption{Reactivity Cycle}
@end float

@node Change Detection Caveats
@section Change Detection Caveats
@anchor{#change-detection-caveats}
Due to limitations in JavaScript, there are types of changes that Vue
@strong{cannot detect}. However, there are ways to circumvent them to
preserve reactivity.

@menu
* For Objects::
* For Arrays::
@end menu

@node For Objects
@subsection For Objects
@anchor{#for-objects}
Vue cannot detect property addition or deletion. Since Vue performs the
getter/setter conversion process during instance initialization, a
property must be present in the @code{data} object in order for Vue to
convert it and make it reactive. For example:

@verbatim
var vm = new Vue({
  data: {
    a: 1
  }
})
// `vm.a` is now reactive

vm.b = 2
// `vm.b` is NOT reactive
@end verbatim

Vue does not allow dynamically adding new root-level reactive properties
to an already created instance. However, it's possible to add reactive
properties to a nested object using the
@code{Vue.set(object, propertyName, value)} method:

@verbatim
Vue.set(vm.someObject, 'b', 2)
@end verbatim

You can also use the @code{vm.$set} instance method, which is an alias
to the global @code{Vue.set}:

@verbatim
this.$set(this.someObject, 'b', 2)
@end verbatim

Sometimes you may want to assign a number of properties to an existing
object, for example using @code{Object.assign()} or @code{_.extend()}.
However, new properties added to the object will not trigger changes. In
such cases, create a fresh object with properties from both the original
object and the mixin object:

@verbatim
// instead of `Object.assign(this.someObject, { a: 1, b: 2 })`
this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })
@end verbatim

@node For Arrays
@subsection For Arrays
@anchor{#for-arrays}
Vue cannot detect the following changes to an array:

@enumerate 
@item
When you directly set an item with the index,
e.g.@ @code{vm.items[indexOfItem] = newValue}
@item
When you modify the length of the array,
e.g.@ @code{vm.items.length = newLength}
@end enumerate

For example:

@verbatim
var vm = new Vue({
  data: {
    items: ['a', 'b', 'c']
  }
})
vm.items[1] = 'x' // is NOT reactive
vm.items.length = 2 // is NOT reactive
@end verbatim

To overcome caveat 1, both of the following will accomplish the same as
@code{vm.items[indexOfItem] = newValue}, but will also trigger state
updates in the reactivity system:

@verbatim
// Vue.set
Vue.set(vm.items, indexOfItem, newValue)
@end verbatim

@verbatim
// Array.prototype.splice
vm.items.splice(indexOfItem, 1, newValue)
@end verbatim

You can also use the
@uref{https://vuejs.org/v2/api/#vm-set,@code{vm.$set}} instance method,
which is an alias for the global @code{Vue.set}:

@verbatim
vm.$set(vm.items, indexOfItem, newValue)
@end verbatim

To deal with caveat 2, you can use @code{splice}:

@verbatim
vm.items.splice(newLength)
@end verbatim

@node Declaring Reactive Properties
@section Declaring Reactive Properties
@anchor{#declaring-reactive-properties}
Since Vue doesn't allow dynamically adding root-level reactive
properties, you have to initialize Vue instances by declaring all
root-level reactive data properties upfront, even with an empty value:

@verbatim
var vm = new Vue({
  data: {
    // declare message with an empty value
    message: ''
  },
  template: '<div>{{ message }}</div>'
})
// set `message` later
vm.message = 'Hello!'
@end verbatim

If you don't declare @code{message} in the data option, Vue will warn
you that the render function is trying to access a property that doesn't
exist.

There are technical reasons behind this restriction - it eliminates a
class of edge cases in the dependency tracking system, and also makes
Vue instances play nicer with type checking systems. But there is also
an important consideration in terms of code maintainability: the
@code{data} object is like the schema for your component's state.
Declaring all reactive properties upfront makes the component code
easier to understand when revisited later or read by another developer.

@node Async Update Queue
@section Async Update Queue
@anchor{#async-update-queue}
In case you haven't noticed yet, Vue performs DOM updates
@strong{asynchronously}. Whenever a data change is observed, it will
open a queue and buffer all the data changes that happen in the same
event loop. If the same watcher is triggered multiple times, it will be
pushed into the queue only once. This buffered de-duplication is
important in avoiding unnecessary calculations and DOM manipulations.
Then, in the next event loop ``tick'', Vue flushes the queue and
performs the actual (already de-duped) work. Internally Vue tries native
@code{Promise.then}, @code{MutationObserver}, and @code{setImmediate}
for the asynchronous queuing and falls back to @code{setTimeout(fn, 0)}.

For example, when you set @code{vm.someData = 'new value'}, the
component will not re-render immediately. It will update in the next
``tick'', when the queue is flushed. Most of the time we don't need to
care about this, but it can be tricky when you want to do something that
depends on the post-update DOM state. Although Vue.js generally
encourages developers to think in a ``data-driven'' fashion and avoid
touching the DOM directly, sometimes it might be necessary to get your
hands dirty. In order to wait until Vue.js has finished updating the DOM
after a data change, you can use @code{Vue.nextTick(callback)}
immediately after the data is changed. The callback will be called after
the DOM has been updated. For example:

@verbatim
<div id="example">{{ message }}</div>
@end verbatim

@verbatim
var vm = new Vue({
  el: '#example',
  data: {
    message: '123'
  }
})
vm.message = 'new message' // change data
vm.$el.textContent === 'new message' // false
Vue.nextTick(function () {
  vm.$el.textContent === 'new message' // true
})
@end verbatim

There is also the @code{vm.$nextTick()} instance method, which is
especially handy inside components, because it doesn't need global
@code{Vue} and its callback's @code{this} context will be automatically
bound to the current Vue instance:

@verbatim
Vue.component('example', {
  template: '<span>{{ message }}</span>',
  data: function () {
    return {
      message: 'not updated'
    }
  },
  methods: {
    updateMessage: function () {
      this.message = 'updated'
      console.log(this.$el.textContent) // => 'not updated'
      this.$nextTick(function () {
        console.log(this.$el.textContent) // => 'updated'
      })
    }
  }
})
@end verbatim

Since @code{$nextTick()} returns a promise, you can achieve the same as
the above using the new
@uref{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function,ES2017
async/await} syntax:

@verbatim
  methods: {
    updateMessage: async function () {
      this.message = 'updated'
      console.log(this.$el.textContent) // => 'not updated'
      await this.$nextTick()
      console.log(this.$el.textContent) // => 'updated'
    }
  }
@end verbatim

@bye
