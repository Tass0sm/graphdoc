\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Custom Directives
@end titlepage

@node Top
@top Custom Directives

@node Intro
@section Intro
@anchor{#intro}
Watch a free video lesson on Vue School
In addition to the default set of directives shipped in core
(@code{v-model} and @code{v-show}), Vue also allows you to register your
own custom directives. Note that in Vue 2.0, the primary form of code
reuse and abstraction is components - however there may be cases where
you need some low-level DOM access on plain elements, and this is where
custom directives would still be useful. An example would be focusing on
an input element, like this one:

@{% raw %@}
@{% endraw %@}

When the page loads, that element gains focus (note: @code{autofocus}
doesn't work on mobile Safari). In fact, if you haven't clicked on
anything else since visiting this page, the input above should be
focused now. Now let's build the directive that accomplishes this:

@verbatim
// Register a global custom directive called `v-focus`
Vue.directive('focus', {
  // When the bound element is inserted into the DOM...
  inserted: function (el) {
    // Focus the element
    el.focus()
  }
})
@end verbatim

If you want to register a directive locally instead, components also
accept a @code{directives} option:

@verbatim
directives: {
  focus: {
    // directive definition
    inserted: function (el) {
      el.focus()
    }
  }
}
@end verbatim

Then in a template, you can use the new @code{v-focus} attribute on any
element, like this:

@verbatim
<input v-focus>
@end verbatim

@node Hook Functions
@section Hook Functions
@anchor{#hook-functions}
A directive definition object can provide several hook functions (all
optional):

@itemize
@item
@code{bind}: called only once, when the directive is first bound to the
element. This is where you can do one-time setup work.

@item
@code{inserted}: called when the bound element has been inserted into
its parent node (this only guarantees parent node presence, not
necessarily in-document).

@item
@code{update}: called after the containing component's VNode has
updated, @strong{but possibly before its children have updated}. The
directive's value may or may not have changed, but you can skip
unnecessary updates by comparing the binding's current and old values
(see below on hook arguments).

@end itemize

We'll cover VNodes in more detail
@uref{./render-function.html#The-Virtual-DOM,later}, when we discuss
@uref{./render-function.html,render functions}.
@itemize
@item
@code{componentUpdated}: called after the containing component's VNode
@strong{and the VNodes of its children} have updated.

@item
@code{unbind}: called only once, when the directive is unbound from the
element.

@end itemize

We'll explore the arguments passed into these hooks (i.e.@ @code{el},
@code{binding}, @code{vnode}, and @code{oldVnode}) in the next section.

@node Directive Hook Arguments
@section Directive Hook Arguments
@anchor{#directive-hook-arguments}
Directive hooks are passed these arguments:

@itemize
@item
@code{el}: The element the directive is bound to. This can be used to
directly manipulate the DOM.
@item
@code{binding}: An object containing the following properties.
@itemize
@item
@code{name}: The name of the directive, without the @code{v-} prefix.
@item
@code{value}: The value passed to the directive. For example in
@code{v-my-directive="1 + 1"}, the value would be @code{2}.
@item
@code{oldValue}: The previous value, only available in @code{update} and
@code{componentUpdated}. It is available whether or not the value has
changed.
@item
@code{expression}: The expression of the binding as a string. For
example in @code{v-my-directive="1 + 1"}, the expression would be
@code{"1 + 1"}.
@item
@code{arg}: The argument passed to the directive, if any. For example in
@code{v-my-directive:foo}, the arg would be @code{"foo"}.
@item
@code{modifiers}: An object containing modifiers, if any. For example in
@code{v-my-directive.foo.bar}, the modifiers object would be
@code{@{ foo: true, bar: true @}}.
@end itemize

@item
@code{vnode}: The virtual node produced by Vue's compiler. See the
@uref{../api/#VNode-Interface,VNode API} for full details.
@item
@code{oldVnode}: The previous virtual node, only available in the
@code{update} and @code{componentUpdated} hooks.
@end itemize

Apart from @code{el}, you should treat these arguments as read-only and
never modify them. If you need to share information across hooks, it is
recommended to do so through element's
@uref{https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset,dataset}.
An example of a custom directive using some of these properties:

@verbatim
<div id="hook-arguments-example" v-demo:foo.a.b="message"></div>
@end verbatim

@verbatim
Vue.directive('demo', {
  bind: function (el, binding, vnode) {
    var s = JSON.stringify
    el.innerHTML =
      'name: '       + s(binding.name) + '<br>' +
      'value: '      + s(binding.value) + '<br>' +
      'expression: ' + s(binding.expression) + '<br>' +
      'argument: '   + s(binding.arg) + '<br>' +
      'modifiers: '  + s(binding.modifiers) + '<br>' +
      'vnode keys: ' + Object.keys(vnode).join(', ')
  }
})

new Vue({
  el: '#hook-arguments-example',
  data: {
    message: 'hello!'
  }
})
@end verbatim

@{% raw %@} <div id=``hook-arguments-example''
v-demo:foo.a.b=``message'' class=``demo''>
@{% endraw %@}

@menu
* Dynamic Directive Arguments::
@end menu

@node Dynamic Directive Arguments
@subsection Dynamic Directive Arguments
@anchor{#dynamic-directive-arguments}
Directive arguments can be dynamic. For example, in
@code{v-mydirective:[argument]="value"}, the @code{argument} can be
updated based on data properties in our component instance! This makes
our custom directives flexible for use throughout our application.

Let's say you want to make a custom directive that allows you to pin
elements to your page using fixed positioning. We could create a custom
directive where the value updates the vertical positioning in pixels,
like this:

@verbatim
<div id="baseexample">
  <p>Scroll down the page</p>
  <p v-pin="200">Stick me 200px from the top of the page</p>
</div>
@end verbatim

@verbatim
Vue.directive('pin', {
  bind: function (el, binding, vnode) {
    el.style.position = 'fixed'
    el.style.top = binding.value + 'px'
  }
})

new Vue({
  el: '#baseexample'
})
@end verbatim

This would pin the element 200px from the top of the page. But what
happens if we run into a scenario when we need to pin the element from
the left, instead of the top? Here's where a dynamic argument that can
be updated per component instance comes in very handy:

@verbatim
<div id="dynamicexample">
  <h3>Scroll down inside this section â†“</h3>
  <p v-pin:[direction]="200">I am pinned onto the page at 200px to the left.</p>
</div>
@end verbatim

@verbatim
Vue.directive('pin', {
  bind: function (el, binding, vnode) {
    el.style.position = 'fixed'
    var s = (binding.arg == 'left' ? 'left' : 'top')
    el.style[s] = binding.value + 'px'
  }
})

new Vue({
  el: '#dynamicexample',
  data: function () {
    return {
      direction: 'left'
    }
  }
})
@end verbatim

Result:

@{% raw %@} See the Pen Dynamic Directive Arguments by Vue (@@Vue) on
CodePen. @{% endraw %@}

Our custom directive is now flexible enough to support a few different
use cases.

@node Function Shorthand
@section Function Shorthand
@anchor{#function-shorthand}
In many cases, you may want the same behavior on @code{bind} and
@code{update}, but don't care about the other hooks. For example:

@verbatim
Vue.directive('color-swatch', function (el, binding) {
  el.style.backgroundColor = binding.value
})
@end verbatim

@node Object Literals
@section Object Literals
@anchor{#object-literals}
If your directive needs multiple values, you can also pass in a
JavaScript object literal. Remember, directives can take any valid
JavaScript expression.

@verbatim
<div v-demo="{ color: 'white', text: 'hello!' }"></div>
@end verbatim

@verbatim
Vue.directive('demo', function (el, binding) {
  console.log(binding.value.color) // => "white"
  console.log(binding.value.text)  // => "hello!"
})
@end verbatim

@bye
