* Purpose

Pandoc: Converts a markup file or set of markup files well.

Treedoc: Automatically reads markup files into an ordered tree (according to a
few formats), converts them with pandoc, and writes them into another ordered
format.

* Is This Useful?

Yes.

** Reason 1: Web Resources are Temporary

When people are completely willing to use web documentation, no copies are made
and the documentation is entirely centralized by the original distributor. If
some old library or topic becomes obsolete, the original owner may choose to
stop distributing it. Your only option then is to find the few copies that may
or may not exist.

Instead, if a portion of software users have documentation in a local copy, this
problem is mostly mitigated. Treedoc exists to enable acquiring the copy from a
website, and converting between any of the formats which the users may choose.

** Reason 2: Local Copies allow Better Usage

This is not an advantage dependent on format or editor. However, Emacs with
Texinfo can demonstrate the idea. Emacs users can lookup a symbol in info
documentation with the function ~info-lookup-symbol~. This simple facility lets
one directly find documentation corresponding to the functions, objects, types,
etc. in considerably less time, fewer keystrokes, and little aggravation.

* Usage

#+BEGIN_SRC shell
  treedoc [treedoc-options] [pandoc-options] input
#+END_SRC

Order of treedoc options and pandoc options is not restricted.

* My Usage

I want to have all my documentation in texinfo. Lots of projects write their
documentation in markdown (Ex: [[https://github.com/vuejs/vuejs.org/tree/master/src/v2][vuejs]]) or RST (Ex: [[https://github.com/hyperspy/hyperspy/tree/RELEASE_next_minor/doc][hyperspy]]). These are ordered
like trees. Usually, they require seperate tools to convert them to different
output formats. That's annoying. Treedoc does that job but with multiple formats
for both input and output, where the other tools only have one input format.

Pandoc already can convert between every notable markup format. So Treedoc does
the job of the tree converting

those tools but using pandoc's capabilities. Yeah that's a
little redundant, but it'll first implement the formats that are not
supported by those other tools.
  
